{
  "organization" : "scala",
  "repository" : "pickling",
  "creationDate" : 1398797432000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1730787935758
    }
  },
  "githubInfo" : {
    "homepage" : "lampwww.epfl.ch/~hmiller/pickling",
    "description" : "Fast, customizable, boilerplate-free pickling support for Scala",
    "logo" : "https://avatars.githubusercontent.com/u/57059?v=4",
    "stars" : 831,
    "forks" : 79,
    "watchers" : 75,
    "issues" : 122,
    "creationDate" : 1370684227000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">scala/pickling</h1><a id=\"user-content-scalapickling\" class=\"anchor\" aria-label=\"Permalink: scala/pickling\" href=\"#scalapickling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><a href=\"https://travis-ci.org/scala/pickling/\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/a2ef78eea8c38f89cb339197256279c4ae337ea6e5913a616c626473bbc18a3d/68747470733a2f2f7472617669732d63692e6f72672f7363616c612f7069636b6c696e672e7376673f6272616e63683d302e31302e78\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/scala/pickling.svg?branch=0.10.x\" style=\"max-width: 100%;\"></a>\n<a href=\"http://waffle.io/scala/pickling\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/b0b826ca241aebf2eed08e0d31055e4a0820f170ec53ae3a26301790caa9bb15/68747470733a2f2f62616467652e776166666c652e696f2f7363616c612f7069636b6c696e672e706e673f6c6162656c3d7265616479267469746c653d5265616479\" alt=\"Stories in Ready\" data-canonical-src=\"https://badge.waffle.io/scala/pickling.png?label=ready&amp;title=Ready\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/scala/pickling?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/ef3705254e766b5edea93f49291c6d9239f29b942cfdb84f3296d0e37898b067/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/scala/pickling\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><strong>Scala Pickling</strong> is an automatic serialization framework made for Scala. It's fast, boilerplate-free, and allows users to easily swap in/out different serialization formats (such as binary, or JSON), or even to provide their own custom serialization format.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Defaults mode</h3><a id=\"user-content-defaults-mode\" class=\"anchor\" aria-label=\"Permalink: Defaults mode\" href=\"#defaults-mode\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"scala&gt; import scala.pickling.Defaults._, scala.pickling.json._\nscala&gt; case class Person(name: String, age: Int)\n\nscala&gt; val pkl = Person(&quot;foo&quot;, 20).pickle\npkl: pickling.json.pickleFormat.PickleType =\nJSONPickle({\n  &quot;$type&quot;: &quot;Person&quot;,\n  &quot;name&quot;: &quot;foo&quot;,\n  &quot;age&quot;: 20\n})\n\nscala&gt; val person = pkl.unpickle[Person]\nperson: Person = Person(foo,20)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">Defaults</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">json</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">pkl</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">20</span>).pickle\npkl<span class=\"pl-k\">:</span> pickling.json.pickleFormat.<span class=\"pl-en\">PickleType</span> <span class=\"pl-k\">=</span>\n<span class=\"pl-en\">JSONPickle</span>({\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>$type<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Person<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">20</span>\n})\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">person</span> <span class=\"pl-k\">=</span> pkl.unpickle[<span class=\"pl-en\">Person</span>]\nperson<span class=\"pl-k\">:</span> <span class=\"pl-en\">Person</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(foo,<span class=\"pl-c1\">20</span>)</pre></div>\n<p dir=\"auto\">For more, flip through, or watch the <a href=\"http://www.parleys.com/play/51c3799fe4b0d38b54f4625a/chapter0/about\" rel=\"nofollow\">ScalaDays 2013 presentation!</a>\n<br> For deeper technical details, we've also written an OOPSLA 2013 paper on scala/pickling, <a href=\"http://infoscience.epfl.ch/record/187787/files/oopsla-pickling_1.pdf\" rel=\"nofollow\">Instant Pickles: Generating Object-Oriented Pickler Combinators for Fast and Extensible Serialization</a>.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Get Scala Pickling</h2><a id=\"user-content-get-scala-pickling\" class=\"anchor\" aria-label=\"Permalink: Get Scala Pickling\" href=\"#get-scala-pickling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Scala Pickling is available on Sonatype for Scala 2.10 and Scala 2.11!\nYou can use Scala Pickling in your sbt project by simply adding the following dependency to your build file:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.scala-lang.modules&quot; %% &quot;scala-pickling&quot; % &quot;0.10.1&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.scala-lang.modules<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scala-pickling<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.10.1<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Please, don't use the version <code>0.11.0-M1</code> since it's not production ready and it's still under ongoing development.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">What makes it different?</h2><a id=\"user-content-what-makes-it-different\" class=\"anchor\" aria-label=\"Permalink: What makes it different?\" href=\"#what-makes-it-different\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Scala Pickling...</p>\n<ul dir=\"auto\">\n<li>can be <strong>Language-Neutral</strong> if you want it to be. Changing the format of your serialized data is as easy as importing the correct implicit pickle format into scope. Out of the box, we currently support a fast Scala binary format, as well as JSON. Support is currently planned for other formats. Or, you can even roll your own custom pickle format!</li>\n<li>is <strong>Automatic</strong>. That is, without any boilerplate at all, one can instruct the framework to figure out how to serialize an arbitrary class instance. No need to register classes, no need to implement any methods.</li>\n<li><strong>Allows For Unanticipated Evolution</strong>. That means that you don’t have to extend some marker trait in order to serialize a given Scala class. Just import the scala.pickling package and call pickle on the instance that you would like to serialize.</li>\n<li>gives you more <strong>Typesafety</strong>. No more errors from serialization/deserialization propagating to arbitrary points in your program. Unlike Java Serialization, errors either manifest themselves as compile-time errors, or runtime errors only at the point of unpickling.</li>\n<li>has <strong>Robust Support For Object-Orientation</strong>. While Scala Pickling is based on the elegant notion of pickler combinators from functional programming, it goes on to extend the traditional form of pickler combinators to be able to handle open class hierarchies. That means that if you pickle an instance of a subclass, and then try to unpickle as a superclass, you will still get back an instance of the original subclass.</li>\n<li><strong>Happens At Compile-Time</strong>. That means that it’s super-performant because serialization-related code is typically generated at compile-time and inlined where it is needed in your code. Scala Pickling is essentially fully-static, reflection is only used as a fallback when static (compile-time) generation fails.</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Optimizing performance</h2><a id=\"user-content-optimizing-performance\" class=\"anchor\" aria-label=\"Permalink: Optimizing performance\" href=\"#optimizing-performance\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Pickling enables optimizing performance through configuration, in case the pickled objects are known to be simpler than in the general case.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Disabling cyclic object graphs</h3><a id=\"user-content-disabling-cyclic-object-graphs\" class=\"anchor\" aria-label=\"Permalink: Disabling cyclic object graphs\" href=\"#disabling-cyclic-object-graphs\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">By default, Pickling can serialize cyclic object graphs (for example, for serializing doubly-linked lists). However, this requires bookkeeping at run time. If pickled objects are known to be <em>not cyclic</em> (for example, simple lists or trees), then this additional bookkeeping can be disabled using the following import:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import scala.pickling.shareNothing._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">shareNothing</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">If objects are pickled in a tight loop, this import can lead to a significant performance improvement.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Static serialization without reflection</h3><a id=\"user-content-static-serialization-without-reflection\" class=\"anchor\" aria-label=\"Permalink: Static serialization without reflection\" href=\"#static-serialization-without-reflection\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">To pickle objects of types like <code>Any</code> Pickling uses run-time reflection, since not enough information is available at compile time. However, Pickling supports a static-only mode that ensures <em>no run-time reflection</em> is used. In this mode, pickling objects that would otherwise require run-time reflection causes compile-time errors.</p>\n<p dir=\"auto\">The following import enables static-only serialization:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import scala.pickling.static._  // Avoid run-time reflection\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">static</span>.<span class=\"pl-en\">_</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Avoid run-time reflection</span></pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">A la carte import</h2><a id=\"user-content-a-la-carte-import\" class=\"anchor\" aria-label=\"Permalink: A la carte import\" href=\"#a-la-carte-import\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">If you want, Pickling lets you import specific parts (functions, ops, picklers, and format) so you can customize each part.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import scala.pickling._         // This imports names only\nimport scala.pickling.json._    // Imports PickleFormat\nimport scala.pickling.static._  // Avoid runtime pickler\n\n// Import pickle ops\nimport scala.pickling.Defaults.{ pickleOps, unpickleOps } \n// Alternatively import pickle function\n// import scala.pickling.functions._\n\n// Import picklers for specific types\nimport scala.pickling.Defaults.{ stringPickler, intPickler, refPicklerUnpickler, nullPickler }\n\ncase class Pumpkin(kind: String)\n// Manually generate a pickler using macro\nimplicit val pumpkinPickler = Pickler.generate[Pumpkin]\nimplicit val pumpkinUnpickler = Unpickler.generate[Pumpkin]\n\nval pckl = Pumpkin(&quot;Kabocha&quot;).pickle\nval pump = pckl.unpickle[Pumpkin]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">_</span>         <span class=\"pl-c\"><span class=\"pl-c\">//</span> This imports names only</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">json</span>.<span class=\"pl-en\">_</span>    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Imports PickleFormat</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">static</span>.<span class=\"pl-en\">_</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Avoid runtime pickler</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Import pickle ops</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">Defaults</span>.{ <span class=\"pl-en\">pickleOps</span>, <span class=\"pl-en\">unpickleOps</span> } \n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Alternatively import pickle function</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import scala.pickling.functions._</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Import picklers for specific types</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">Defaults</span>.{ <span class=\"pl-en\">stringPickler</span>, <span class=\"pl-en\">intPickler</span>, <span class=\"pl-en\">refPicklerUnpickler</span>, <span class=\"pl-en\">nullPickler</span> }\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Pumpkin</span>(<span class=\"pl-v\">kind</span>: <span class=\"pl-en\">String</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Manually generate a pickler using macro</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">pumpkinPickler</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Pickler</span>.generate[<span class=\"pl-en\">Pumpkin</span>]\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">pumpkinUnpickler</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Unpickler</span>.generate[<span class=\"pl-en\">Pumpkin</span>]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-v\">pckl</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Pumpkin</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Kabocha<span class=\"pl-pds\">\"</span></span>).pickle\n<span class=\"pl-k\">val</span> <span class=\"pl-v\">pump</span> <span class=\"pl-k\">=</span> pckl.unpickle[<span class=\"pl-en\">Pumpkin</span>]</pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">DIY protocol stack</h2><a id=\"user-content-diy-protocol-stack\" class=\"anchor\" aria-label=\"Permalink: DIY protocol stack\" href=\"#diy-protocol-stack\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">There are also traits available for picklers to mix and match your own convenience object to import from.\nIf you're a library author, you can provide the convenience object as your protocol stack that some or all of the pickling parts:</p>\n<ul dir=\"auto\">\n<li>ops</li>\n<li>functions</li>\n<li>picklers</li>\n<li>format</li>\n</ul>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"scala&gt; case class Apple(kind: String)\ndefined class Apple\n\nscala&gt; val appleProtocol = {\n     |              import scala.pickling._\n     |              new pickler.PrimitivePicklers with pickler.RefPicklers\n     |                  with json.JsonFormats {\n     |                // Manually generate pickler for Apple\n     |                implicit val applePickler = PicklerUnpickler.generate[Apple]\n     |                // Don't fall back to runtime picklers\n     |                implicit val so = static.StaticOnly\n     |                // Provide custom functions\n     |                def toJsonString[A: Pickler](a: A): String =\n     |                  functions.pickle(a).value\n     |                def fromJsonString[A: Unpickler](s: String): A =\n     |                  functions.unpickle[A](json.JSONPickle(s))\n     |              }\n     |            }\nappleProtocol: scala.pickling.pickler.PrimitivePicklers with scala.pickling.pickler.RefPicklers with scala.pickling.json.JsonFormats{implicit val applePickler: scala.pickling.Pickler[Apple] with scala.pickling.Unpickler[Apple] with scala.pickling.Generated; implicit val so: scala.pickling.static.StaticOnly.type; def toJsonString[A](a: A)(implicit evidence$1: scala.pickling.Pickler[A]): String; def fromJsonString[A](s: String)(implicit evidence$2: scala.pickling.Unpickler[A]): A} = $anon$1@2b033c35\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Apple</span>(<span class=\"pl-v\">kind</span>: <span class=\"pl-en\">String</span>)\ndefined <span class=\"pl-k\">class</span> <span class=\"pl-en\">Apple</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">appleProtocol</span> <span class=\"pl-k\">=</span> {\n     <span class=\"pl-k\">|</span>              <span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">pickling</span>.<span class=\"pl-en\">_</span>\n     <span class=\"pl-k\">|</span>              <span class=\"pl-k\">new</span> pickler.<span class=\"pl-en\">PrimitivePicklers</span> <span class=\"pl-k\">with</span> pickler.<span class=\"pl-en\">RefPicklers</span>\n     <span class=\"pl-k\">|</span>                  <span class=\"pl-k\">with</span> json.<span class=\"pl-en\">JsonFormats</span> {\n     <span class=\"pl-k\">|</span>                <span class=\"pl-c\"><span class=\"pl-c\">//</span> Manually generate pickler for Apple</span>\n     <span class=\"pl-k\">|</span>                <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">applePickler</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PicklerUnpickler</span>.generate[<span class=\"pl-en\">Apple</span>]\n     <span class=\"pl-k\">|</span>                <span class=\"pl-c\"><span class=\"pl-c\">//</span> Don't fall back to runtime picklers</span>\n     <span class=\"pl-k\">|</span>                <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">so</span> <span class=\"pl-k\">=</span> static.<span class=\"pl-en\">StaticOnly</span>\n     <span class=\"pl-k\">|</span>                <span class=\"pl-c\"><span class=\"pl-c\">//</span> Provide custom functions</span>\n     <span class=\"pl-k\">|</span>                <span class=\"pl-k\">def</span> <span class=\"pl-en\">toJsonString</span>[<span class=\"pl-en\">A</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Pickler</span>](<span class=\"pl-v\">a</span>: <span class=\"pl-en\">A</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span>\n     <span class=\"pl-k\">|</span>                  functions.pickle(a).value\n     <span class=\"pl-k\">|</span>                <span class=\"pl-k\">def</span> <span class=\"pl-en\">fromJsonString</span>[<span class=\"pl-en\">A</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Unpickler</span>](<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span> <span class=\"pl-k\">=</span>\n     <span class=\"pl-k\">|</span>                  functions.unpickle[<span class=\"pl-en\">A</span>](json.<span class=\"pl-en\">JSONPickle</span>(s))\n     <span class=\"pl-k\">|</span>              }\n     <span class=\"pl-k\">|</span>            }\nappleProtocol<span class=\"pl-k\">:</span> scala.pickling.pickler.<span class=\"pl-en\">PrimitivePicklers</span> <span class=\"pl-k\">with</span> scala.pickling.pickler.<span class=\"pl-en\">RefPicklers</span> <span class=\"pl-k\">with</span> scala.pickling.json.<span class=\"pl-en\">JsonFormats</span>{<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">applePickler</span><span class=\"pl-k\">:</span> scala.pickling.<span class=\"pl-en\">Pickler</span>[<span class=\"pl-en\">Apple</span>] <span class=\"pl-k\">with</span> scala.pickling.<span class=\"pl-en\">Unpickler</span>[<span class=\"pl-en\">Apple</span>] <span class=\"pl-k\">with</span> scala.pickling.<span class=\"pl-en\">Generated</span>; <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">so</span><span class=\"pl-k\">:</span> scala.pickling.static.<span class=\"pl-en\">StaticOnly</span>.<span class=\"pl-k\">type</span>; <span class=\"pl-k\">def</span> <span class=\"pl-en\">toJsonString</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">a</span>: <span class=\"pl-en\">A</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">evidence$1</span>: scala.pickling.<span class=\"pl-en\">Pickler</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span>; <span class=\"pl-k\">def</span> <span class=\"pl-en\">fromJsonString</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">evidence$2</span>: scala.pickling.<span class=\"pl-en\">Unpickler</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>} <span class=\"pl-k\">=</span> $anon$<span class=\"pl-c1\">1</span><span class=\"pl-k\">@</span>2b033c35</pre></div>\n<p dir=\"auto\">Now your library user can import <code>appleProtocol</code> as follows:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import appleProtocol._\nimport appleProtocol._\n\nscala&gt;  toJsonString(Apple(&quot;honeycrisp&quot;))\nres0: String =\n{\n  &quot;$type&quot;: &quot;Apple&quot;,\n  &quot;kind&quot;: &quot;honeycrisp&quot;\n}\n\nscala&gt; fromJsonString(res0)\nres1: Apple = Apple(honeycrisp)\"><pre class=\"notranslate\"><code>scala&gt; import appleProtocol._\nimport appleProtocol._\n\nscala&gt;  toJsonString(Apple(\"honeycrisp\"))\nres0: String =\n{\n  \"$type\": \"Apple\",\n  \"kind\": \"honeycrisp\"\n}\n\nscala&gt; fromJsonString(res0)\nres1: Apple = Apple(honeycrisp)\n</code></pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Other ways of getting Pickling</h2><a id=\"user-content-other-ways-of-getting-pickling\" class=\"anchor\" aria-label=\"Permalink: Other ways of getting Pickling\" href=\"#other-ways-of-getting-pickling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">If you would like to run the latest development version of scala/pickling (0.10.2-SNAPSHOT), you also need to add the Sonatype \"snapshots\" repository resolver to your build file:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.scala-lang.modules&quot; %% &quot;scala-pickling&quot; % &quot;0.10.2-SNAPSHOT&quot;\n\nresolvers += Resolver.sonatypeRepo(&quot;snapshots&quot;)\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.scala-lang.modules<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scala-pickling<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.10.2-SNAPSHOT<span class=\"pl-pds\">\"</span></span>\n\nresolvers <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Resolver</span>.sonatypeRepo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>snapshots<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">For a more illustrative example, see a <a href=\"https://github.com/xeno-by/sbt-example-pickling\">sample sbt project which uses Scala Pickling</a>.</p>\n<p dir=\"auto\">Or you can just directly download the 0.10.1 jar (<a href=\"https://oss.sonatype.org/service/local/artifact/maven/redirect?r=releases&amp;g=org.scala-lang.modules&amp;a=scala-pickling_2.10&amp;v=0.10.1&amp;e=jar\" rel=\"nofollow\">Scala 2.10</a>, <a href=\"https://oss.sonatype.org/service/local/artifact/maven/redirect?r=releases&amp;g=org.scala-lang.modules&amp;a=scala-pickling_2.11&amp;v=0.10.1&amp;e=jar\" rel=\"nofollow\">Scala 2.11</a>).</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "heathermiller",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/687163?v=4",
        "url" : "https://github.com/heathermiller",
        "contributions" : 301
      },
      {
        "login" : "phaller",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/289943?v=4",
        "url" : "https://github.com/phaller",
        "contributions" : 214
      },
      {
        "login" : "xeno-by",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/609152?v=4",
        "url" : "https://github.com/xeno-by",
        "contributions" : 200
      },
      {
        "login" : "jsuereth",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/29006?v=4",
        "url" : "https://github.com/jsuereth",
        "contributions" : 125
      },
      {
        "login" : "eed3si9n",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/184683?v=4",
        "url" : "https://github.com/eed3si9n",
        "contributions" : 55
      },
      {
        "login" : "jvican",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2462974?v=4",
        "url" : "https://github.com/jvican",
        "contributions" : 43
      },
      {
        "login" : "havocp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/218689?v=4",
        "url" : "https://github.com/havocp",
        "contributions" : 27
      },
      {
        "login" : "dzufferey",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5338386?v=4",
        "url" : "https://github.com/dzufferey",
        "contributions" : 12
      },
      {
        "login" : "theBlackDragon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4152701?v=4",
        "url" : "https://github.com/theBlackDragon",
        "contributions" : 5
      },
      {
        "login" : "emchristiansen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/225668?v=4",
        "url" : "https://github.com/emchristiansen",
        "contributions" : 2
      },
      {
        "login" : "zaneli",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/379820?v=4",
        "url" : "https://github.com/zaneli",
        "contributions" : 2
      },
      {
        "login" : "jcracknell",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1903829?v=4",
        "url" : "https://github.com/jcracknell",
        "contributions" : 1
      },
      {
        "login" : "guersam",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/969120?v=4",
        "url" : "https://github.com/guersam",
        "contributions" : 1
      },
      {
        "login" : "Ahnfelt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/78472?v=4",
        "url" : "https://github.com/Ahnfelt",
        "contributions" : 1
      },
      {
        "login" : "LBliss",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1135273?v=4",
        "url" : "https://github.com/LBliss",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://github.com/gitter-badger",
        "contributions" : 1
      }
    ],
    "commits" : 991,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "openIssues" : [
      {
        "number" : 455,
        "title" : "Pickling fails with a weird issue",
        "url" : "https://github.com/scala/pickling/issues/455"
      },
      {
        "number" : 454,
        "title" : "val from trait not pickled",
        "url" : "https://github.com/scala/pickling/issues/454"
      },
      {
        "number" : 453,
        "title" : "Incorrect handling of Option[xxx] if None",
        "url" : "https://github.com/scala/pickling/issues/453"
      },
      {
        "number" : 452,
        "title" : "Is this project abandoned?",
        "url" : "https://github.com/scala/pickling/issues/452"
      },
      {
        "number" : 450,
        "title" : "Unpickle without specifying type",
        "url" : "https://github.com/scala/pickling/issues/450"
      },
      {
        "number" : 448,
        "title" : "Deserialization in incorrect type",
        "url" : "https://github.com/scala/pickling/issues/448"
      },
      {
        "number" : 446,
        "title" : "Some macro in PicklerUnpickler is not serializable",
        "url" : "https://github.com/scala/pickling/issues/446"
      },
      {
        "number" : 445,
        "title" : "java.lang.VerifyError: Bad type on operand stack while encapsulating Pickler",
        "url" : "https://github.com/scala/pickling/issues/445"
      },
      {
        "number" : 442,
        "title" : "Error when saving a Map of Int and a Composite",
        "url" : "https://github.com/scala/pickling/issues/442"
      },
      {
        "number" : 441,
        "title" : "Compile time serialisation failing for nested case classes with Scala 2.10.6",
        "url" : "https://github.com/scala/pickling/issues/441"
      },
      {
        "number" : 440,
        "title" : "Pickling 0.10.2-SNAPSHOT for Scala 2.10",
        "url" : "https://github.com/scala/pickling/issues/440"
      },
      {
        "number" : 439,
        "title" : "Can't unpickle ValueSet",
        "url" : "https://github.com/scala/pickling/issues/439"
      },
      {
        "number" : 437,
        "title" : "Remove patmat warnings",
        "url" : "https://github.com/scala/pickling/issues/437"
      },
      {
        "number" : 436,
        "title" : "Variadic arguments for case class",
        "url" : "https://github.com/scala/pickling/issues/436"
      },
      {
        "number" : 426,
        "title" : "Refined types should be supported",
        "url" : "https://github.com/scala/pickling/issues/426"
      },
      {
        "number" : 423,
        "title" : "StaticOnly should be enabled by default",
        "url" : "https://github.com/scala/pickling/issues/423"
      },
      {
        "number" : 422,
        "title" : "Improve performance of implicit search",
        "url" : "https://github.com/scala/pickling/issues/422"
      },
      {
        "number" : 421,
        "title" : "Remove GRL locks around FastTypeTag generation",
        "url" : "https://github.com/scala/pickling/issues/421"
      },
      {
        "number" : 420,
        "title" : "Scalajs support in 0.11.x",
        "url" : "https://github.com/scala/pickling/issues/420"
      },
      {
        "number" : 418,
        "title" : "StaticOnly should be used to choose the runtime strategy",
        "url" : "https://github.com/scala/pickling/issues/418"
      },
      {
        "number" : 417,
        "title" : "FastTypeTag doesn't work for types with type parameters",
        "url" : "https://github.com/scala/pickling/issues/417"
      },
      {
        "number" : 414,
        "title" : "Generate and register picklers/unpicklers together when using reflection",
        "url" : "https://github.com/scala/pickling/issues/414"
      },
      {
        "number" : 399,
        "title" : "Scala pickling fails to generate picklers/unpickers for case classes that receive implicit parameters",
        "url" : "https://github.com/scala/pickling/issues/399"
      },
      {
        "number" : 398,
        "title" : "Runtime generation does not take into account static picklers/unpicklers",
        "url" : "https://github.com/scala/pickling/issues/398"
      },
      {
        "number" : 397,
        "title" : "Warning when asking for implicit picklers/unpicklers",
        "url" : "https://github.com/scala/pickling/issues/397"
      },
      {
        "number" : 395,
        "title" : "Flaw in algorithm?",
        "url" : "https://github.com/scala/pickling/issues/395"
      },
      {
        "number" : 391,
        "title" : "No support for value classes (?)",
        "url" : "https://github.com/scala/pickling/issues/391"
      },
      {
        "number" : 389,
        "title" : "`Pickling` fails to generate automatically picklers/unpicklers [SOLVED]",
        "url" : "https://github.com/scala/pickling/issues/389"
      },
      {
        "number" : 388,
        "title" : "Push 2.12 version to Maven/Sonatype repo",
        "url" : "https://github.com/scala/pickling/issues/388"
      },
      {
        "number" : 387,
        "title" : "Example fails to run",
        "url" : "https://github.com/scala/pickling/issues/387"
      },
      {
        "number" : 386,
        "title" : "Enumeration Pickling Failure When Pickling As Superclass Even With Custom Pickler",
        "url" : "https://github.com/scala/pickling/issues/386"
      },
      {
        "number" : 384,
        "title" : "Serialize and deserialize complex Objects is giving a java.lang.NegativeArraySizeException",
        "url" : "https://github.com/scala/pickling/issues/384"
      },
      {
        "number" : 383,
        "title" : "The library can support python pickle format ?",
        "url" : "https://github.com/scala/pickling/issues/383"
      },
      {
        "number" : 382,
        "title" : "Custom Serializers",
        "url" : "https://github.com/scala/pickling/issues/382"
      },
      {
        "number" : 381,
        "title" : "Pickler generation fails for object",
        "url" : "https://github.com/scala/pickling/issues/381"
      },
      {
        "number" : 380,
        "title" : "Pickle crashes trying to unpickle scala.Enumeration",
        "url" : "https://github.com/scala/pickling/issues/380"
      },
      {
        "number" : 379,
        "title" : "Serialize and deserialize Map containing BigInt and BigDecimal does not work",
        "url" : "https://github.com/scala/pickling/issues/379"
      },
      {
        "number" : 378,
        "title" : "How to cope with changes to object definition between pickle and unpickle",
        "url" : "https://github.com/scala/pickling/issues/378"
      },
      {
        "number" : 377,
        "title" : "error: cannot find class or module with type name 'scala.collection.immutable.ListMap.Node'",
        "url" : "https://github.com/scala/pickling/issues/377"
      },
      {
        "number" : 376,
        "title" : "Compilation error when using shareNothing import and binary output streams",
        "url" : "https://github.com/scala/pickling/issues/376"
      },
      {
        "number" : 372,
        "title" : "GC overhead limit exceeded while generating a pickler for an AST",
        "url" : "https://github.com/scala/pickling/issues/372"
      },
      {
        "number" : 370,
        "title" : "Compiler slain by -Ywarn-unused-import",
        "url" : "https://github.com/scala/pickling/issues/370"
      },
      {
        "number" : 369,
        "title" : "exception during macro expansion: value Predef is not a package",
        "url" : "https://github.com/scala/pickling/issues/369"
      },
      {
        "number" : 366,
        "title" : "Unpickle case object to AnyRef does not work as expected",
        "url" : "https://github.com/scala/pickling/issues/366"
      },
      {
        "number" : 364,
        "title" : "List of nobs",
        "url" : "https://github.com/scala/pickling/issues/364"
      },
      {
        "number" : 360,
        "title" : "Unable to pickle List[T], e.g. List[String] when running `staticOnly`",
        "url" : "https://github.com/scala/pickling/issues/360"
      },
      {
        "number" : 356,
        "title" : "Pickling Hashmap to json results in blank output",
        "url" : "https://github.com/scala/pickling/issues/356"
      },
      {
        "number" : 355,
        "title" : "Cannot generate pickler inside expression passed to macro",
        "url" : "https://github.com/scala/pickling/issues/355"
      },
      {
        "number" : 354,
        "title" : "Scala.js Status",
        "url" : "https://github.com/scala/pickling/issues/354"
      },
      {
        "number" : 351,
        "title" : "Unpickle serialized value from some previous process",
        "url" : "https://github.com/scala/pickling/issues/351"
      },
      {
        "number" : 349,
        "title" : "Cannot generate picklers for nested objects",
        "url" : "https://github.com/scala/pickling/issues/349"
      },
      {
        "number" : 347,
        "title" : "Unpickle java.lang.Class fails with IllegalAccessException",
        "url" : "https://github.com/scala/pickling/issues/347"
      },
      {
        "number" : 345,
        "title" : "java.nio.ByteBuffer pickle/unpickle question",
        "url" : "https://github.com/scala/pickling/issues/345"
      },
      {
        "number" : 344,
        "title" : "Check if a FastTypeTag is a collection",
        "url" : "https://github.com/scala/pickling/issues/344"
      },
      {
        "number" : 343,
        "title" : "scalajs support",
        "url" : "https://github.com/scala/pickling/issues/343"
      },
      {
        "number" : 342,
        "title" : "Compiling picklers for simple data structures takes forever",
        "url" : "https://github.com/scala/pickling/issues/342"
      },
      {
        "number" : 341,
        "title" : "scalameta pickling",
        "url" : "https://github.com/scala/pickling/issues/341"
      },
      {
        "number" : 336,
        "title" : "Java UUID cast as a Scala Any does not pickle correctly",
        "url" : "https://github.com/scala/pickling/issues/336"
      },
      {
        "number" : 332,
        "title" : "First unpickle is very slow",
        "url" : "https://github.com/scala/pickling/issues/332"
      },
      {
        "number" : 331,
        "title" : "a var in macro",
        "url" : "https://github.com/scala/pickling/issues/331"
      },
      {
        "number" : 330,
        "title" : "Issue with Play's classloader",
        "url" : "https://github.com/scala/pickling/issues/330"
      },
      {
        "number" : 325,
        "title" : "pickling code crashes jdk 1.8.0_45 on my mac osx",
        "url" : "https://github.com/scala/pickling/issues/325"
      },
      {
        "number" : 323,
        "title" : "Pickling in parallel is slow",
        "url" : "https://github.com/scala/pickling/issues/323"
      },
      {
        "number" : 320,
        "title" : "Setting up for Eclipse/Scala IDE development",
        "url" : "https://github.com/scala/pickling/issues/320"
      },
      {
        "number" : 317,
        "title" : "diverging implicit expansion error",
        "url" : "https://github.com/scala/pickling/issues/317"
      },
      {
        "number" : 311,
        "title" : "Check validity of hints",
        "url" : "https://github.com/scala/pickling/issues/311"
      },
      {
        "number" : 309,
        "title" : "TextFileOutput improvements",
        "url" : "https://github.com/scala/pickling/issues/309"
      },
      {
        "number" : 307,
        "title" : "Generate better error messages for Unpickler.generate[GenericType]",
        "url" : "https://github.com/scala/pickling/issues/307"
      },
      {
        "number" : 306,
        "title" : "Pickling an empty list does not produce an empty JSON array",
        "url" : "https://github.com/scala/pickling/issues/306"
      },
      {
        "number" : 305,
        "title" : "Pickling a complex type as String",
        "url" : "https://github.com/scala/pickling/issues/305"
      },
      {
        "number" : 303,
        "title" : "BinaryPickle - unpickling something that contains empty Maps fails",
        "url" : "https://github.com/scala/pickling/issues/303"
      },
      {
        "number" : 301,
        "title" : "Default `Pickler[java.io.File]` is broken",
        "url" : "https://github.com/scala/pickling/issues/301"
      },
      {
        "number" : 300,
        "title" : "Compiler error when trying to unpickle `akka.actor.Address`",
        "url" : "https://github.com/scala/pickling/issues/300"
      },
      {
        "number" : 299,
        "title" : "Deprecation warning",
        "url" : "https://github.com/scala/pickling/issues/299"
      },
      {
        "number" : 297,
        "title" : "OSGi support",
        "url" : "https://github.com/scala/pickling/issues/297"
      },
      {
        "number" : 296,
        "title" : "A path forward for pickling Java objects",
        "url" : "https://github.com/scala/pickling/issues/296"
      },
      {
        "number" : 274,
        "title" : "Shorter error messages",
        "url" : "https://github.com/scala/pickling/issues/274"
      },
      {
        "number" : 272,
        "title" : "Swap mirror usage to a loaner pattern for more fine-grained locking",
        "url" : "https://github.com/scala/pickling/issues/272"
      },
      {
        "number" : 264,
        "title" : "Cannot pickle scalameta Sources",
        "url" : "https://github.com/scala/pickling/issues/264"
      },
      {
        "number" : 263,
        "title" : "pickling a java.lang.Byte doesn't contain value (unpickles to zero)",
        "url" : "https://github.com/scala/pickling/issues/263"
      },
      {
        "number" : 256,
        "title" : "v 0.9.1 unpickle[Any] works for array but not for list",
        "url" : "https://github.com/scala/pickling/issues/256"
      },
      {
        "number" : 246,
        "title" : "Static-only switch should reject generic types",
        "url" : "https://github.com/scala/pickling/issues/246"
      },
      {
        "number" : 212,
        "title" : "Better error message when implicit PickleFormat is missing",
        "url" : "https://github.com/scala/pickling/issues/212"
      },
      {
        "number" : 210,
        "title" : "Excessive tpe entries on json array elements",
        "url" : "https://github.com/scala/pickling/issues/210"
      },
      {
        "number" : 207,
        "title" : "Compiler Warning with Value Classes",
        "url" : "https://github.com/scala/pickling/issues/207"
      },
      {
        "number" : 205,
        "title" : "Sealed trait with only final subclasses should not generate catch-all clause in dispatch",
        "url" : "https://github.com/scala/pickling/issues/205"
      },
      {
        "number" : 202,
        "title" : "Doesn't work when there's a package named \"scala\".",
        "url" : "https://github.com/scala/pickling/issues/202"
      },
      {
        "number" : 180,
        "title" : "Constant val is omitted from pickle causing NPE on unpickle",
        "url" : "https://github.com/scala/pickling/issues/180"
      },
      {
        "number" : 171,
        "title" : "Pickling for nested structures (graphs)",
        "url" : "https://github.com/scala/pickling/issues/171"
      },
      {
        "number" : 164,
        "title" : "scala.ScalaReflectionException: type T is not a class",
        "url" : "https://github.com/scala/pickling/issues/164"
      },
      {
        "number" : 146,
        "title" : "Problem with custom-made pickler and binary format for class that contains map",
        "url" : "https://github.com/scala/pickling/issues/146"
      },
      {
        "number" : 144,
        "title" : "not understanding pickleto and pickleinto ",
        "url" : "https://github.com/scala/pickling/issues/144"
      },
      {
        "number" : 143,
        "title" : "Does not compile with -Yrangepos option",
        "url" : "https://github.com/scala/pickling/issues/143"
      },
      {
        "number" : 139,
        "title" : "Combination of separate compilation, generated case class picklers, and custom pickler leads to empty serialization",
        "url" : "https://github.com/scala/pickling/issues/139"
      },
      {
        "number" : 136,
        "title" : "Error pickling classes defined in Java (List and mutable.HashMap)",
        "url" : "https://github.com/scala/pickling/issues/136"
      },
      {
        "number" : 130,
        "title" : "Issue pickling class in binary jar ",
        "url" : "https://github.com/scala/pickling/issues/130"
      },
      {
        "number" : 121,
        "title" : "Examples are confusing",
        "url" : "https://github.com/scala/pickling/issues/121"
      },
      {
        "number" : 116,
        "title" : "First call to pickkle fails to expand full name of object being serialized",
        "url" : "https://github.com/scala/pickling/issues/116"
      },
      {
        "number" : 115,
        "title" : "Pickling `List[Product with Serializable with MyTrait]`",
        "url" : "https://github.com/scala/pickling/issues/115"
      },
      {
        "number" : 106,
        "title" : "Unpickling a class with mutable Map doesn't work",
        "url" : "https://github.com/scala/pickling/issues/106"
      },
      {
        "number" : 98,
        "title" : "Please write documentation!",
        "url" : "https://github.com/scala/pickling/issues/98"
      },
      {
        "number" : 97,
        "title" : "Pickling an abstract type",
        "url" : "https://github.com/scala/pickling/issues/97"
      },
      {
        "number" : 96,
        "title" : "Demo case fails when unpicking with Any",
        "url" : "https://github.com/scala/pickling/issues/96"
      },
      {
        "number" : 93,
        "title" : "Diagnostic output when runtime pickler generation is necessary",
        "url" : "https://github.com/scala/pickling/issues/93"
      },
      {
        "number" : 81,
        "title" : "Support for OpenJDK 6",
        "url" : "https://github.com/scala/pickling/issues/81"
      },
      {
        "number" : 63,
        "title" : "Running into problems when pickling Map and HashMap",
        "url" : "https://github.com/scala/pickling/issues/63"
      },
      {
        "number" : 61,
        "title" : "Design of PickleFormat trait",
        "url" : "https://github.com/scala/pickling/issues/61"
      },
      {
        "number" : 59,
        "title" : "Please explain how to deal with PicklerUnpicklerNotFound",
        "url" : "https://github.com/scala/pickling/issues/59"
      },
      {
        "number" : 40,
        "title" : "Pickling - possible race condition?",
        "url" : "https://github.com/scala/pickling/issues/40"
      },
      {
        "number" : 39,
        "title" : "Schema evolution handling",
        "url" : "https://github.com/scala/pickling/issues/39"
      },
      {
        "number" : 34,
        "title" : "Use under_scores instead of CamelCase",
        "url" : "https://github.com/scala/pickling/issues/34"
      },
      {
        "number" : 27,
        "title" : "Case class with List/Array/Seq does not unpickle to its parrent type",
        "url" : "https://github.com/scala/pickling/issues/27"
      },
      {
        "number" : 17,
        "title" : "Pickle a class where on field is enum",
        "url" : "https://github.com/scala/pickling/issues/17"
      },
      {
        "number" : 10,
        "title" : "IOException on compilation (filename too long).",
        "url" : "https://github.com/scala/pickling/issues/10"
      },
      {
        "number" : 8,
        "title" : "Akka Support",
        "url" : "https://github.com/scala/pickling/issues/8"
      }
    ],
    "scalaPercentage" : 99,
    "license" : "BSD-3-Clause",
    "commitActivity" : [
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : "scala-pickling",
    "customScalaDoc" : "",
    "documentationLinks" : [
    ],
    "contributorsWanted" : true,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "serialization",
    "chatroom" : null
  }
}