{
  "organization" : "sksamuel",
  "repository" : "avro4s",
  "creationDate" : 1444042777375,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644296510518
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Avro schema generation and serialization / deserialization for Scala",
    "logo" : "https://avatars.githubusercontent.com/u/743706?v=4",
    "stars" : 634,
    "forks" : 201,
    "watchers" : 21,
    "issues" : 12,
    "creationDate" : 1442415022000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"\" class=\"anchor\" aria-hidden=\"true\" href=\"#\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"logo.png\"><img src=\"logo.png\" alt=\"logo.png\" style=\"max-width: 100%;\"></a></h1>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sksamuel/avro4s/workflows/master/badge.svg\"><img src=\"https://github.com/sksamuel/avro4s/workflows/master/badge.svg\" alt=\"build\" style=\"max-width: 100%;\"></a>\n<a href=\"http://search.maven.org/#search%7Cga%7C1%7Cavro4s-core_2.12\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/3f25296f9751d327514a4c22df8d04d37c3fbfd25d68c67d1b240dd489cd1cbb/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e736b73616d75656c2e6176726f34732f6176726f34732d636f72655f322e31322e7376673f6c6162656c3d6c617465737425323072656c65617365253230666f72253230322e3132\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.sksamuel.avro4s/avro4s-core_2.12.svg?label=latest%20release%20for%202.12\" style=\"max-width: 100%;\"></a>\n<a href=\"http://search.maven.org/#search%7Cga%7C1%7Cavro4s-core_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/a5f45661a570046d5ad7498887ae13323cb765fa23429c8bfe656f22ed80181c/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e736b73616d75656c2e6176726f34732f6176726f34732d636f72655f322e31332e7376673f6c6162656c3d6c617465737425323072656c65617365253230666f72253230322e3133\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.sksamuel.avro4s/avro4s-core_2.13.svg?label=latest%20release%20for%202.13\" style=\"max-width: 100%;\"></a>\n<a href=\"http://search.maven.org/#search%7Cga%7C1%7Cavro4s-core_3\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/6bf78603e8a3ef82bfca2357032517cd55108359fc8759b149755e222885e295/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e736b73616d75656c2e6176726f34732f6176726f34732d636f72655f332e7376673f6c6162656c3d6c617465737425323072656c65617365253230666f72253230332e30\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.sksamuel.avro4s/avro4s-core_3.svg?label=latest%20release%20for%203.0\" style=\"max-width: 100%;\"></a>\n<a href=\"https://oss.sonatype.org/content/repositories/snapshots/com/sksamuel/avro4s/\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/d12c50fbe3d6aec939da901252d2b07523361c09b8f3ee0f0efb8ee33dab9e80/68747470733a2f2f696d672e736869656c64732e696f2f6e657875732f732f68747470732f6f73732e736f6e61747970652e6f72672f636f6d2e736b73616d75656c2e6176726f34732f6176726f34732d636f72655f332e7376673f6c6162656c3d6c6174657374253230736e617073686f74267374796c653d706c6173746963\" data-canonical-src=\"https://img.shields.io/nexus/s/https/oss.sonatype.org/com.sksamuel.avro4s/avro4s-core_3.svg?label=latest%20snapshot&amp;style=plastic\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Avro4s is a schema/class generation and serializing/deserializing library for <a href=\"http://avro.apache.org/\" rel=\"nofollow\">Avro</a> written in Scala. The objective is to allow seamless use with Scala without the need to write boilerplate conversions yourself, and without the runtime overhead of reflection. Hence, this is a macro based library and generates code for use with Avro at <em>compile time</em>.</p>\n<p dir=\"auto\">The features of the library are:</p>\n<ul dir=\"auto\">\n<li>Schema generation from classes at compile time</li>\n<li>Boilerplate free serialization of Scala types into Avro types</li>\n<li>Boilerplate free deserialization of Avro types to Scala types</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-versioning\" class=\"anchor\" aria-hidden=\"true\" href=\"#versioning\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Versioning</h2>\n<p dir=\"auto\">The <code>master</code> branch contains version 5.0.x and is currently in development. This version is designed for Scala 3. New\nfeature requests are welcome. This version may have minor breaking changes compared to previous major release in order to support the new features of Scala 3.</p>\n<p dir=\"auto\">The previous major version is 4.0.x located at branch <code>release/4.0.x</code> and is released for Scala 2.12 and Scala 2.13.\nThis version is in support mode only. Bug reports are welcome and bug fixes will be released. No new features will be\nadded.</p>\n<p dir=\"auto\">Please raise PRs using branch names <code>scala2/*</code> and <code>scala3/*</code> depending on which version of Scala your work is\ntargeting.</p>\n<h2 dir=\"auto\"><a id=\"user-content-schemas\" class=\"anchor\" aria-hidden=\"true\" href=\"#schemas\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Schemas</h2>\n<p dir=\"auto\">Unlike Json, Avro is a schema based format. You'll find yourself wanting to generate schemas frequently, and writing\nthese by hand or through the Java based <code>SchemaBuilder</code> classes can be tedious for complex domain models. Avro4s allows\nus to generate schemas directly from case classes at compile time via macros. This gives you both the convenience of\ngenerated code, without the annoyance of having to run a code generation step, as well as avoiding the peformance\npenalty of runtime reflection based code.</p>\n<p dir=\"auto\">Let's define some classes.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Ingredient(name: String, sugar: Double, fat: Double)\ncase class Pizza(name: String, ingredients: Seq[Ingredient], vegetarian: Boolean, vegan: Boolean, calories: Int)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Ingredient</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">sugar</span>: <span class=\"pl-en\">Double</span>, <span class=\"pl-v\">fat</span>: <span class=\"pl-en\">Double</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Pizza</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">ingredients</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">Ingredient</span>], <span class=\"pl-v\">vegetarian</span>: <span class=\"pl-en\">Boolean</span>, <span class=\"pl-v\">vegan</span>: <span class=\"pl-en\">Boolean</span>, <span class=\"pl-v\">calories</span>: <span class=\"pl-en\">Int</span>)</pre></div>\n<p dir=\"auto\">To generate an Avro Schema, we need to use the <code>AvroSchema</code> object passing in the target type as a type parameter.\nThis will return an <code>org.apache.avro.Schema</code> instance.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.sksamuel\nval schema = AvroSchema[Pizza]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Pizza</span>]</pre></div>\n<p dir=\"auto\">Where the generated schema is as follows:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n   &quot;type&quot;:&quot;record&quot;,\n   &quot;name&quot;:&quot;Pizza&quot;,\n   &quot;namespace&quot;:&quot;com.sksamuel&quot;,\n   &quot;fields&quot;:[\n      {\n         &quot;name&quot;:&quot;name&quot;,\n         &quot;type&quot;:&quot;string&quot;\n      },\n      {\n         &quot;name&quot;:&quot;ingredients&quot;,\n         &quot;type&quot;:{\n            &quot;type&quot;:&quot;array&quot;,\n            &quot;items&quot;:{\n               &quot;type&quot;:&quot;record&quot;,\n               &quot;name&quot;:&quot;Ingredient&quot;,\n               &quot;fields&quot;:[\n                  {\n                     &quot;name&quot;:&quot;name&quot;,\n                     &quot;type&quot;:&quot;string&quot;\n                  },\n                  {\n                     &quot;name&quot;:&quot;sugar&quot;,\n                     &quot;type&quot;:&quot;double&quot;\n                  },\n                  {\n                     &quot;name&quot;:&quot;fat&quot;,\n                     &quot;type&quot;:&quot;double&quot;\n                  }\n               ]\n            }\n         }\n      },\n      {\n         &quot;name&quot;:&quot;vegetarian&quot;,\n         &quot;type&quot;:&quot;boolean&quot;\n      },\n      {\n         &quot;name&quot;:&quot;vegan&quot;,\n         &quot;type&quot;:&quot;boolean&quot;\n      },\n      {\n         &quot;name&quot;:&quot;calories&quot;,\n         &quot;type&quot;:&quot;int&quot;\n      }\n   ]\n}\"><pre>{\n   <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n   <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Pizza<span class=\"pl-pds\">\"</span></span>,\n   <span class=\"pl-ent\">\"namespace\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n   <span class=\"pl-ent\">\"fields\"</span>:[\n      {\n         <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>,\n         <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n      },\n      {\n         <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ingredients<span class=\"pl-pds\">\"</span></span>,\n         <span class=\"pl-ent\">\"type\"</span>:{\n            <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>array<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-ent\">\"items\"</span>:{\n               <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n               <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Ingredient<span class=\"pl-pds\">\"</span></span>,\n               <span class=\"pl-ent\">\"fields\"</span>:[\n                  {\n                     <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>,\n                     <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n                  },\n                  {\n                     <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sugar<span class=\"pl-pds\">\"</span></span>,\n                     <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>double<span class=\"pl-pds\">\"</span></span>\n                  },\n                  {\n                     <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fat<span class=\"pl-pds\">\"</span></span>,\n                     <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>double<span class=\"pl-pds\">\"</span></span>\n                  }\n               ]\n            }\n         }\n      },\n      {\n         <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vegetarian<span class=\"pl-pds\">\"</span></span>,\n         <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>boolean<span class=\"pl-pds\">\"</span></span>\n      },\n      {\n         <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vegan<span class=\"pl-pds\">\"</span></span>,\n         <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>boolean<span class=\"pl-pds\">\"</span></span>\n      },\n      {\n         <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>calories<span class=\"pl-pds\">\"</span></span>,\n         <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>\n      }\n   ]\n}</pre></div>\n<p dir=\"auto\">You can see that the schema generator handles nested case classes, sequences, primitives, etc. For a full list of supported object types, see the table later.</p>\n<h3 dir=\"auto\"><a id=\"user-content-overriding-class-name-and-namespace\" class=\"anchor\" aria-hidden=\"true\" href=\"#overriding-class-name-and-namespace\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overriding class name and namespace</h3>\n<p dir=\"auto\">Avro schemas for complex types (RECORDS) contain a name and a namespace. By default, these are the name of the class\nand the enclosing package name, but it is possible to customize these using the annotations <code>AvroName</code> and <code>AvroNamespace</code>.</p>\n<p dir=\"auto\">For example, the following class:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\ncase class Foo(a: String)\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">String</span>)</pre></div>\n<p dir=\"auto\">Would normally have a schema like this:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;:&quot;record&quot;,\n  &quot;name&quot;:&quot;Foo&quot;,\n  &quot;namespace&quot;:&quot;com.sksamuel&quot;,\n  &quot;fields&quot;:[\n    {\n      &quot;name&quot;:&quot;a&quot;,\n      &quot;type&quot;:&quot;string&quot;\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>:[\n    {\n      <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">However we can override the name and/or the namespace like this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\n\n@AvroName(&quot;Wibble&quot;)\n@AvroNamespace(&quot;com.other&quot;)\ncase class Foo(a: String)\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Wibble<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroNamespace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.other<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">String</span>)</pre></div>\n<p dir=\"auto\">And then the generated schema looks like this:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;:&quot;record&quot;,\n  &quot;name&quot;:&quot;Wibble&quot;,\n  &quot;namespace&quot;:&quot;com.other&quot;,\n  &quot;fields&quot;:[\n    {\n      &quot;name&quot;:&quot;a&quot;,\n      &quot;type&quot;:&quot;string&quot;\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Wibble<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.other<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>:[\n    {\n      <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">Note: It is possible, but not necessary, to use both AvroName and AvroNamespace. You can just use either of them if you wish.</p>\n<h3 dir=\"auto\"><a id=\"user-content-overriding-a-field-name\" class=\"anchor\" aria-hidden=\"true\" href=\"#overriding-a-field-name\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overriding a field name</h3>\n<p dir=\"auto\">The <code>AvroName</code> annotation can also be used to override field names. This is useful when the record instances you are generating or reading need to have field names different from the scala case classes. For example if you are reading data generated by another system, or another language.</p>\n<p dir=\"auto\">Given the following class.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\ncase class Foo(a: String, @AvroName(&quot;z&quot;) b : String)\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>z<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-v\">b</span> : <span class=\"pl-en\">String</span>)</pre></div>\n<p dir=\"auto\">Then the generated schema would look like this:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;:&quot;record&quot;,\n  &quot;name&quot;:&quot;Foo&quot;,\n  &quot;namespace&quot;:&quot;com.sksamuel&quot;,\n  &quot;fields&quot;:[\n    {\n      &quot;name&quot;:&quot;a&quot;,\n      &quot;type&quot;:&quot;string&quot;\n    },\n    {\n      &quot;name&quot;:&quot;z&quot;,\n      &quot;type&quot;:&quot;string&quot;\n    }    \n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>:[\n    {\n      <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>z<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }    \n  ]\n}</pre></div>\n<p dir=\"auto\">Notice that the second field is <code>z</code> and not <code>b</code>.</p>\n<p dir=\"auto\">Note: @AvroName does not add an alternative name for the field, but an override. If you wish to have alternatives then you want to use @AvroAlias.</p>\n<h3 dir=\"auto\"><a id=\"user-content-adding-properties-and-docs-to-a-schema\" class=\"anchor\" aria-hidden=\"true\" href=\"#adding-properties-and-docs-to-a-schema\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Adding properties and docs to a Schema</h3>\n<p dir=\"auto\">Avro allows a doc field, and arbitrary key/values to be added to generated schemas. Avro4s supports this through the use of <code>AvroDoc</code> and <code>AvroProp</code> annotations.</p>\n<p dir=\"auto\">These properties works on either complex or simple types - in other words, on both fields and classes. For example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\n@AvroDoc(&quot;hello, is it me you're looking for?&quot;)\ncase class Foo(@AvroDoc(&quot;I am a string&quot;) str: String, @AvroDoc(&quot;I am a long&quot;) long: Long, int: Int)\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroDoc</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello, is it me you're looking for?<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroDoc</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am a string<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-v\">str</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroDoc</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am a long<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-v\">long</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">int</span>: <span class=\"pl-en\">Int</span>)</pre></div>\n<p dir=\"auto\">Would result in the following schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{  \n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Foo&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;doc&quot;:&quot;hello, is it me you're looking for?&quot;,\n  &quot;fields&quot;: [  \n    {  \n      &quot;name&quot;: &quot;str&quot;,\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;doc&quot; : &quot;I am a string&quot;\n    },\n    {  \n      &quot;name&quot;: &quot;long&quot;,\n      &quot;type&quot;: &quot;long&quot;,\n      &quot;doc&quot; : &quot;I am a long&quot;\n    },\n    {  \n      &quot;name&quot;: &quot;int&quot;,\n      &quot;type&quot;: &quot;int&quot;\n    }\n  ]\n}\"><pre>{  \n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"doc\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello, is it me you're looking for?<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [  \n    {  \n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>str<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"doc\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am a string<span class=\"pl-pds\">\"</span></span>\n    },\n    {  \n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>long<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>long<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"doc\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am a long<span class=\"pl-pds\">\"</span></span>\n    },\n    {  \n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">An example of properties:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\n@AvroProp(&quot;jack&quot;, &quot;bruce&quot;)\ncase class Annotated(@AvroProp(&quot;richard&quot;, &quot;ashcroft&quot;) str: String, @AvroProp(&quot;kate&quot;, &quot;bush&quot;) long: Long, int: Int)\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroProp</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jack<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bruce<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Annotated</span>(<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroProp</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>richard<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ashcroft<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-v\">str</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroProp</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kate<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bush<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-v\">long</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">int</span>: <span class=\"pl-en\">Int</span>)</pre></div>\n<p dir=\"auto\">Would generate this schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Annotated&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;str&quot;,\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;richard&quot;: &quot;ashcroft&quot;\n    },\n    {\n      &quot;name&quot;: &quot;long&quot;,\n      &quot;type&quot;: &quot;long&quot;,\n      &quot;kate&quot;: &quot;bush&quot;\n    },\n    {\n      &quot;name&quot;: &quot;int&quot;,\n      &quot;type&quot;: &quot;int&quot;\n    }\n  ],\n  &quot;jack&quot;: &quot;bruce&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Annotated<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>str<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"richard\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ashcroft<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>long<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>long<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"kate\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bush<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>\n    }\n  ],\n  <span class=\"pl-ent\">\"jack\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bruce<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-overriding-a-schema\" class=\"anchor\" aria-hidden=\"true\" href=\"#overriding-a-schema\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overriding a Schema</h3>\n<p dir=\"auto\">Behind the scenes, <code>AvroSchema</code> uses an implicit <code>SchemaFor</code>. This is the core typeclass which generates an Avro schema for a given Java or Scala type. There are <code>SchemaFor</code> instances for all the common JDK and SDK types, as well as macros that generate instances for case classes.</p>\n<p dir=\"auto\">In order to override how a schema is generated for a particular type you need to bring into scope an implicit <code>SchemaFor</code> for the type you want to override. As an example, lets say you wanted all integers to be encoded as <code>Schema.Type.STRING</code> rather than the standard <code>Schema.Type.INT</code>.</p>\n<p dir=\"auto\">To do this, we just introduce a new instance of <code>SchemaFor</code> and put it in scope when we generate the schema.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val intOverride = SchemaFor[Int](SchemaBuilder.builder.stringType)\n\ncase class Foo(a: Int)\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">intOverride</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Int</span>](<span class=\"pl-en\">SchemaBuilder</span>.builder.stringType)\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<p dir=\"auto\">Note: If you create an override like this, be aware that schemas in Avro are mutable, so don't share the values that the typeclasses return.</p>\n<h3 dir=\"auto\"><a id=\"user-content-transient-fields\" class=\"anchor\" aria-hidden=\"true\" href=\"#transient-fields\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Transient Fields</h3>\n<p dir=\"auto\">Avro4s does not support the @transient anotation to mark a field as ignored, but instead supports its own @AvroTransient annotation to do the same job. Any field marked with this will be excluded from the generated schema.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\ncase class Foo(a: String, @AvroTransient b: String)\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroTransient</span> <span class=\"pl-v\">b</span>: <span class=\"pl-en\">String</span>)</pre></div>\n<p dir=\"auto\">Would result in the following schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{  \n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Foo&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;fields&quot;: [  \n    {  \n      &quot;name&quot;: &quot;a&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    }\n  ]\n}\"><pre>{  \n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [  \n    {  \n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-field-mapping\" class=\"anchor\" aria-hidden=\"true\" href=\"#field-mapping\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Field Mapping</h3>\n<p dir=\"auto\">If you are dealing with Avro data generated in other languages then it's quite likely the field names will reflect the style of that language. For example, Java may prefer <code>camelCaseFieldNames</code> but other languages may use <code>snake_case_field_names</code> or <code>PascalStyleFieldNames</code>. By default the name of the field in the case class is what will be used, and you've seen earlier that you can override a specific field with @AvroName, but doing this for every single field would be insane.</p>\n<p dir=\"auto\">So, avro4s provides a <code>FieldMapper</code> for this. You simply bring into scope an instance of <code>FieldMapper</code> that will convert the scala field names into a target type field names.</p>\n<p dir=\"auto\">For example, lets take a scala case and generate a schema using snake case.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\ncase class Foo(userName: String, emailAddress: String)\nimplicit val snake: FieldMapper = SnakeCase\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">userName</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">emailAddress</span>: <span class=\"pl-en\">String</span>)\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">snake</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">FieldMapper</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SnakeCase</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<p dir=\"auto\">Would generate the following schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Foo&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;user_name&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    },\n    {\n      &quot;name&quot;: &quot;email_address&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user_name<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>email_address<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">You can also define your own field mapper:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\ncase class Foo(userName: String, emailAddress: String)\nimplicit val short: FieldMapper = {\n  case &quot;userName&quot;     =&gt; &quot;user&quot;\n  case &quot;emailAddress&quot; =&gt; &quot;email&quot;\n}\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">userName</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">emailAddress</span>: <span class=\"pl-en\">String</span>)\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">short</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">FieldMapper</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>userName<span class=\"pl-pds\">\"</span></span>     <span class=\"pl-k\">=&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>emailAddress<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>email<span class=\"pl-pds\">\"</span></span>\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<p dir=\"auto\">Would generate the following schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Foo&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;user&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    },\n    {\n      &quot;name&quot;: &quot;email&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>email<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-field-defaults\" class=\"anchor\" aria-hidden=\"true\" href=\"#field-defaults\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Field Defaults</h3>\n<p dir=\"auto\">Avro4s will take into account default values on fields. For example, the following class <code>case class Wibble(s: String = \"foo\")</code> would be serialized as:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Wibble&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel.avro4s.schema&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;s&quot;,\n      &quot;type&quot;: &quot;string&quot;,\n      &quot;default&quot; : &quot;foo&quot;\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Wibble<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel.avro4s.schema<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>s<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"default\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">However if you wish the scala default to be ignored, then you can annotate the field with @AvroNoDefault. So this class <code>case class Wibble(@AvroNoDefault s: String = \"foo\")</code> would be serialized as:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Wibble&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel.avro4s.schema&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;s&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Wibble<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel.avro4s.schema<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>s<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>string<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-enums-and-enum-defaults\" class=\"anchor\" aria-hidden=\"true\" href=\"#enums-and-enum-defaults\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Enums and Enum Defaults</h3>\n<h4 dir=\"auto\"><a id=\"user-content-avro-enums-from-scala-enums-java-enums-and-sealed-traits\" class=\"anchor\" aria-hidden=\"true\" href=\"#avro-enums-from-scala-enums-java-enums-and-sealed-traits\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>AVRO Enums from Scala Enums, Java Enums, and Sealed Traits</h4>\n<p dir=\"auto\">Avro4s maps scala enums, java enums, and scala sealed traits to the AVRO <code>enum</code> type.\nFor example, the following scala enum:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object Colours extends Enumeration {\n  val Red, Amber, Green = Value\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Colours</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enumeration</span> {\n  <span class=\"pl-k\">val</span> Red, <span class=\"pl-en\">Amber</span>, <span class=\"pl-en\">Green</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n}</pre></div>\n<p dir=\"auto\">when referenced in a case class:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Car(colour: Colours.Value)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Car</span>(<span class=\"pl-v\">colour</span>: <span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Value</span>)</pre></div>\n<p dir=\"auto\">results in the following AVRO schema (e.g. using <code>val schema = AvroSchema[Car]</code>):</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;Car&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;colour&quot;,\n    &quot;type&quot; : {\n      &quot;type&quot; : &quot;enum&quot;,\n      &quot;name&quot; : &quot;Colours&quot;,\n      &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ]\n    }\n  } ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Car<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\" </span>: [ {\n    <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colour<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"type\" </span>: {\n      <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>]\n    }\n  } ]\n}</pre></div>\n<p dir=\"auto\">Avro4s will also convert a Java enum such as:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public enum Wine {\n    Malbec, Shiraz, CabSav, Merlot\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-en\">Wine</span> {\n    <span class=\"pl-smi\">Malbec</span>, <span class=\"pl-smi\">Shiraz</span>, <span class=\"pl-smi\">CabSav</span>, <span class=\"pl-smi\">Merlot</span>\n}</pre></div>\n<p dir=\"auto\">into an AVRO <code>enum</code> type:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;enum&quot;,\n  &quot;name&quot;: &quot;Wine&quot;,\n  &quot;symbols&quot;: [ &quot;Malbec&quot;, &quot;Shiraz&quot;, &quot;CabSav&quot;, &quot;Merlot&quot; ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Wine<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\"</span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Malbec<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Shiraz<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CabSav<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Merlot<span class=\"pl-pds\">\"</span> </span>]\n}</pre></div>\n<p dir=\"auto\">And likewise, avro4s will convert a sealed trait such as:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait Animal\n@AvroSortPriority(0) case object Cat extends Animal\n@AvroSortPriority(-1) case object Dog extends Animal\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Animal</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroSortPriority</span>(<span class=\"pl-c1\">0</span>) <span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Cat</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroSortPriority</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Dog</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span></pre></div>\n<p dir=\"auto\">into the following AVRO <code>enum</code> schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;enum&quot;,\n  &quot;name&quot; : &quot;Animal&quot;,\n  &quot;symbols&quot; : [ &quot;Cat&quot;, &quot;Dog&quot; ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Animal<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cat<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dog<span class=\"pl-pds\">\"</span> </span>]\n}</pre></div>\n<p dir=\"auto\">With <code>@AvroSortPriority</code> attribute, elements are sorted in descending order, by the priority specified\n(the element with the highest priority will be put as first).</p>\n<p dir=\"auto\">According to Avro specification, when an element is not found the first compatible element defined in the union is used.\nFor this reason order of the elements should not be changed when compatibility is important.\nAdd new elements at the end.</p>\n<p dir=\"auto\">An alternative solution is to use the <code>@AvroUnionPosition</code> attribute passing a number that will be sorted ascending,\nfrom lower to upper:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  sealed trait Fruit\n  @AvroUnionPosition(0)\n  case object Unknown extends Fruit\n  @AvroUnionPosition(1)\n  case class Orange(size: Int) extends Fruit\n  @AvroUnionPosition(2)\n  case class Mango(size: Int) extends Fruit\"><pre>  <span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Fruit</span>\n  <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroUnionPosition</span>(<span class=\"pl-c1\">0</span>)\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Unknown</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Fruit</span>\n  <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroUnionPosition</span>(<span class=\"pl-c1\">1</span>)\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Orange</span>(<span class=\"pl-v\">size</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Fruit</span>\n  <span class=\"pl-k\">@</span><span class=\"pl-en\">AvroUnionPosition</span>(<span class=\"pl-c1\">2</span>)\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Mango</span>(<span class=\"pl-v\">size</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Fruit</span></pre></div>\n<p dir=\"auto\">This will generate the following AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[\n    {\n        &quot;type&quot; : &quot;record&quot;,\n        &quot;name&quot; : &quot;Unknown&quot;,\n        &quot;fields&quot; : [ ]\n    },\n    {\n        &quot;type&quot; : &quot;record&quot;,\n        &quot;name&quot; : &quot;Orange&quot;,\n        &quot;fields&quot; : [ {\n            &quot;name&quot; : &quot;size&quot;,\n            &quot;type&quot; : &quot;int&quot;\n        } ]\n    },\n    {\n        &quot;type&quot; : &quot;record&quot;,\n        &quot;name&quot; : &quot;Mango&quot;,\n        &quot;fields&quot; : [ {\n            &quot;name&quot; : &quot;size&quot;,\n            &quot;type&quot; : &quot;int&quot;\n        } ]\n    }\n]\"><pre>[\n    {\n        <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unknown<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"fields\" </span>: [ ]\n    },\n    {\n        <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Orange<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"fields\" </span>: [ {\n            <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>\n        } ]\n    },\n    {\n        <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mango<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"fields\" </span>: [ {\n            <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int<span class=\"pl-pds\">\"</span></span>\n        } ]\n    }\n]</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-field-defaults-vs-enum-defaults\" class=\"anchor\" aria-hidden=\"true\" href=\"#field-defaults-vs-enum-defaults\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Field Defaults vs. Enum Defaults</h4>\n<p dir=\"auto\">As with any AVRO field, you can specify an enum field's default value as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Car(colour: Colours.Value = Colours.Red)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Car</span>(<span class=\"pl-v\">colour</span>: <span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Value</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Red</span>)</pre></div>\n<p dir=\"auto\">resulting in the following AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;Car&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;colour&quot;,\n    &quot;type&quot; : {\n      &quot;type&quot; : &quot;enum&quot;,\n      &quot;name&quot; : &quot;Colours&quot;,\n      &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ]\n    },\n    &quot;default&quot;: &quot;Red&quot;\n  } ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Car<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\" </span>: [ {\n    <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colour<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"type\" </span>: {\n      <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>]\n    },\n    <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>\n  } ]\n}</pre></div>\n<p dir=\"auto\">One benefit of providing a field default is that the writer can later remove the field without\nbreaking existing readers. In the <code>Car</code> example, if the writer doesn't provide a value for the\n<code>colour</code> field, the reader will default the <code>colour</code> to <code>Red</code>.</p>\n<p dir=\"auto\">But what if the writer would like to extend the <code>Colour</code> enumeration to include the colour <code>Orange</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object Colours extends Enumeration {\n  val Red, Amber, Green, Orange = Value\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Colours</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enumeration</span> {\n  <span class=\"pl-k\">val</span> Red, <span class=\"pl-en\">Amber</span>, <span class=\"pl-en\">Green</span>, <span class=\"pl-en\">Orange</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n}</pre></div>\n<p dir=\"auto\">resulting in the following AVRO schema?</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;Car&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;colour&quot;,\n    &quot;type&quot; : {\n      &quot;type&quot; : &quot;enum&quot;,\n      &quot;name&quot; : &quot;Colours&quot;,\n      &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot;, &quot;Orange&quot; ]\n    },\n    &quot;default&quot;: &quot;Red&quot;\n  } ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Car<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\" </span>: [ {\n    <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colour<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"type\" </span>: {\n      <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Orange<span class=\"pl-pds\">\"</span> </span>]\n    },\n    <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>\n  } ]\n}</pre></div>\n<p dir=\"auto\">If a writer creates an <code>Orange</code> <code>Car</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Car(colours = Colours.Orange)\"><pre><span class=\"pl-en\">Car</span>(colours <span class=\"pl-k\">=</span> <span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Orange</span>)</pre></div>\n<p dir=\"auto\">readers using the older schema (the one without the new <code>Orange</code> value), will fail with a backwards compatibility error.\nI.e. readers using the previous version of the <code>Car</code> schema don't know the colour <code>Orange</code>, and therefore\ncan't read the new <code>Car</code> record.</p>\n<p dir=\"auto\">To enable writers to extend enums in a backwards-compatible way, AVRO allows you to specify a default enum value\nas part of the enum type's definition:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;enum&quot;,\n  &quot;name&quot; : &quot;Colours&quot;,\n  &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ],\n  &quot;default&quot;: &quot;Amber&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>],\n  <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">Note that an enum's default isn't the same as an enum field's default as showed below,\nwhere the enum default is <code>Amber</code> and the field's default is <code>Red</code>:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;Car&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;colour&quot;,\n    &quot;type&quot; : {\n      &quot;type&quot; : &quot;enum&quot;,\n      &quot;name&quot; : &quot;Colours&quot;,\n      &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ],\n      &quot;default&quot;: &quot;Amber&quot;\n    },\n    &quot;default&quot;: &quot;Red&quot;\n  } ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Car<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\" </span>: [ {\n    <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colour<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"type\" </span>: {\n      <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>],\n      <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>\n    },\n    <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>\n  } ]\n}</pre></div>\n<p dir=\"auto\">Note that the field's default and the enum's default need not be the same value.</p>\n<p dir=\"auto\">The field's default answers the question:</p>\n<ul dir=\"auto\">\n<li>What value should the reader use if the writer didn't specify the field's value?</li>\n</ul>\n<p dir=\"auto\">In the schema example above, the answer is <code>Red</code>.</p>\n<p dir=\"auto\">The enum's default value answers the question:</p>\n<ul dir=\"auto\">\n<li>What value should the reader use if the writer specifies an enum value that the reader doesn't recognize?</li>\n</ul>\n<p dir=\"auto\">In the example above, the answer is <code>Amber</code>.</p>\n<p dir=\"auto\">In summary, as long as a writer specified a the default enum value in previous versions of an enum's schema, the writer can add\nnew enum values without breaking older readers. For example, we can add\nthe colour <code>Orange</code> to the <code>Colour</code> enum's list of symbol/values without breaking older readers:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;record&quot;,\n  &quot;name&quot; : &quot;Car&quot;,\n  &quot;fields&quot; : [ {\n    &quot;name&quot; : &quot;colour&quot;,\n    &quot;type&quot; : {\n      &quot;type&quot; : &quot;enum&quot;,\n      &quot;name&quot; : &quot;Colours&quot;,\n      &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot;, &quot;Orange&quot; ],\n      &quot;default&quot;: &quot;Amber&quot;\n    },\n    &quot;default&quot;: &quot;Red&quot;\n  } ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Car<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\" </span>: [ {\n    <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colour<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"type\" </span>: {\n      <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Orange<span class=\"pl-pds\">\"</span> </span>],\n      <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>\n    },\n    <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>\n  } ]\n}</pre></div>\n<p dir=\"auto\">Specifically, given <code>Amber</code> as the enum's default, an older AVRO reader that receives an <code>Orange</code> <code>Car</code> will\ndefault the <code>Car</code>'s <code>colour</code> to <code>Amber</code>, the enum's default.</p>\n<p dir=\"auto\">The following sections describe how to define enum defaults through avro4s for scala enums, java enums,\nand sealed traits.</p>\n<h4 dir=\"auto\"><a id=\"user-content-defining-enum-defaults-for-scala-enums\" class=\"anchor\" aria-hidden=\"true\" href=\"#defining-enum-defaults-for-scala-enums\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Defining Enum Defaults for Scala Enums</h4>\n<p dir=\"auto\">For scala enums such as:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object Colours extends Enumeration {\n   val Red, Amber, Green = Value\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Colours</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enumeration</span> {\n   <span class=\"pl-k\">val</span> Red, <span class=\"pl-en\">Amber</span>, <span class=\"pl-en\">Green</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n}</pre></div>\n<p dir=\"auto\">avro4s gives you two options:</p>\n<ol dir=\"auto\">\n<li>You can define an implicit <code>SchemaFor</code> using the <code>ScalaEnumSchemaFor[E].apply(default: E)</code> method\nwhere the method's <code>default</code> argument is one of the enum's values or ...</li>\n<li>You can use the <code>@AvroEnumDefault</code> annotation to declare the default enum value.</li>\n</ol>\n<p dir=\"auto\">For example, to create an implicit <code>SchemaFor</code> for an scala enum with a default enum value,\nuse the <code>ScalaEnumSchemaFor[E].apply(default: E)</code> method as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val schemaForColours: SchemaFor[Colours.Value] = ScalaEnumSchemaFor[Colours.Value](default = Colours.Amber)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaForColours</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Value</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">ScalaEnumSchemaFor</span>[<span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Value</span>](default <span class=\"pl-k\">=</span> <span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Amber</span>)</pre></div>\n<p dir=\"auto\">resulting in the following AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;enum&quot;,\n  &quot;name&quot; : &quot;Colours&quot;,\n  &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ],\n  &quot;default&quot;: &quot;Amber&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>],\n  <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">Or, to declare the default enum value, you can use the <code>@AvroEnumDefault</code> annotation as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@AvroEnumDefault(Colours.Amber)\nobject Colours extends Enumeration {\n   val Red, Amber, Green = Value\n}\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">AvroEnumDefault</span>(<span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Amber</span>)\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Colours</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enumeration</span> {\n   <span class=\"pl-k\">val</span> Red, <span class=\"pl-en\">Amber</span>, <span class=\"pl-en\">Green</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n}</pre></div>\n<p dir=\"auto\">resulting in the same AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;enum&quot;,\n  &quot;name&quot; : &quot;Colours&quot;,\n  &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ],\n  &quot;default&quot;: &quot;Amber&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Colours<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>],\n  <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">You can also use the following avro4s annotations to change a scala enum's name, namespace, and to add additional properties:</p>\n<ul dir=\"auto\">\n<li><code>@AvroName</code></li>\n<li><code>@AvroNamespace</code></li>\n<li><code>@AvroProp</code></li>\n</ul>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@AvroName(&quot;MyColours&quot;)\n@AvroNamespace(&quot;my.namespace&quot;)\n@AvroEnumDefault(Colours.Green)\n@AvroProp(&quot;hello&quot;, &quot;world&quot;)\nobject Colours extends Enumeration {\n  val Red, Amber, Green = Value\n}\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">AvroName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MyColours<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroNamespace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my.namespace<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroEnumDefault</span>(<span class=\"pl-en\">Colours</span>.<span class=\"pl-en\">Green</span>)\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroProp</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>world<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Colours</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enumeration</span> {\n  <span class=\"pl-k\">val</span> Red, <span class=\"pl-en\">Amber</span>, <span class=\"pl-en\">Green</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n}</pre></div>\n<p dir=\"auto\">resulting in the following AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;enum&quot;,\n  &quot;name&quot; : &quot;MyColours&quot;,\n  &quot;namespace&quot; : &quot;my.namespace&quot;,\n  &quot;symbols&quot; : [ &quot;Red&quot;, &quot;Amber&quot;, &quot;Green&quot; ],\n  &quot;default&quot;: &quot;Amber&quot;,\n  &quot;hello&quot; : &quot;world&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MyColours<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my.namespace<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Red<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Green<span class=\"pl-pds\">\"</span> </span>],\n  <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Amber<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"hello\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>world<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">Note that if you're using an enum from, for example, a 3rd party library and without access to the source code, you may\nnot be able to use the <code>@AvroEnumDefault</code> annotation, in which case you'll need to use the\n<code>ScalaEnumSchemaFor[E].apply(default: E)</code> method instead.</p>\n<h4 dir=\"auto\"><a id=\"user-content-defining-enum-defaults-for-java-enums\" class=\"anchor\" aria-hidden=\"true\" href=\"#defining-enum-defaults-for-java-enums\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Defining Enum Defaults for Java Enums</h4>\n<p dir=\"auto\">For java enums such as:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public enum Wine {\n  Malbec, \n  Shiraz, \n  CabSav, \n  Merlot\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-en\">Wine</span> {\n  <span class=\"pl-smi\">Malbec</span>, \n  <span class=\"pl-smi\">Shiraz</span>, \n  <span class=\"pl-smi\">CabSav</span>, \n  <span class=\"pl-smi\">Merlot</span>\n}</pre></div>\n<p dir=\"auto\">avro4s gives you two options to define an enum's default value:</p>\n<ol dir=\"auto\">\n<li>You can define an implicit <code>SchemaFor</code> using the <code>JavaEnumSchemaFor[E].apply(default: E)</code> method\nwhere the method's <code>default</code> argument is one of the enum's values or ...</li>\n<li>You can use the <code>@AvroJavaEnumDefault</code> annotation to declare the default enum value.</li>\n</ol>\n<p dir=\"auto\">For example, to create an implicit <code>SchemaFor</code> for an enum with a default enum value,\nuse the <code>JavaEnumSchemaFor[E].apply(default: E)</code> method as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val schemaForWine: SchemaFor[Wine] = JavaEnumSchemaFor[Wine](default = Wine.Merlot)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaForWine</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Wine</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">JavaEnumSchemaFor</span>[<span class=\"pl-en\">Wine</span>](default <span class=\"pl-k\">=</span> <span class=\"pl-en\">Wine</span>.<span class=\"pl-en\">Merlot</span>)</pre></div>\n<p dir=\"auto\">Or, to declare the default enum value, use the <code>@AvroJavaEnumDefault</code> annotation as follows:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public enum Wine {\n  Malbec, \n  Shiraz, \n  @AvroJavaEnumDefault CabSav,\n  Merlot\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-en\">Wine</span> {\n  <span class=\"pl-smi\">Malbec</span>, \n  <span class=\"pl-smi\">Shiraz</span>, \n  <span class=\"pl-k\">@AvroJavaEnumDefault</span> <span class=\"pl-smi\">CabSav</span>,\n  <span class=\"pl-smi\">Merlot</span>\n}</pre></div>\n<p dir=\"auto\">Avro4s also supports the following java annotations for java enums:</p>\n<ul dir=\"auto\">\n<li><code>@AvroJavaName</code></li>\n<li><code>@AvroJavaNamespace</code></li>\n<li><code>@AvroJavaProp</code></li>\n</ul>\n<p dir=\"auto\">Putting it all together, you can define a java enum with using avro4s's annotations as follows:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@AvroJavaName(&quot;MyWine&quot;)\n@AvroJavaNamespace(&quot;my.namespace&quot;)\n@AvroJavaProp(key = &quot;hello&quot;, value = &quot;world&quot;)\npublic enum Wine {\n  Malbec, \n  Shiraz, \n  @AvroJavaEnumDefault CabSav,\n  Merlot\n}\"><pre><span class=\"pl-k\">@AvroJavaName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MyWine<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">@AvroJavaNamespace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my.namespace<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">@AvroJavaProp</span>(<span class=\"pl-c1\">key</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>world<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-en\">Wine</span> {\n  <span class=\"pl-smi\">Malbec</span>, \n  <span class=\"pl-smi\">Shiraz</span>, \n  <span class=\"pl-k\">@AvroJavaEnumDefault</span> <span class=\"pl-smi\">CabSav</span>,\n  <span class=\"pl-smi\">Merlot</span>\n}</pre></div>\n<p dir=\"auto\">resulting in the following AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;enum&quot;,\n  &quot;name&quot;: &quot;MyWine&quot;,\n  &quot;namespace&quot;: &quot;my.namespace&quot;,\n  &quot;symbols&quot;: [\n    &quot;Malbec&quot;,\n    &quot;Shiraz&quot;,\n    &quot;CabSav&quot;,\n    &quot;Merlot&quot;\n  ],\n  &quot;default&quot;: &quot;CabSav&quot;,\n  &quot;hello&quot;: &quot;world&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MyWine<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my.namespace<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\"</span>: [\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Malbec<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Shiraz<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CabSav<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Merlot<span class=\"pl-pds\">\"</span></span>\n  ],\n  <span class=\"pl-ent\">\"default\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CabSav<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"hello\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>world<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-defining-enum-defaults-for-sealed-traits\" class=\"anchor\" aria-hidden=\"true\" href=\"#defining-enum-defaults-for-sealed-traits\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Defining Enum Defaults for Sealed Traits</h4>\n<p dir=\"auto\">For sealed traits, you can define the trait's default enum using the <code>@AvroEnumDefault</code> annotation as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@AvroEnumDefault(Dog)\nsealed trait Animal\n@AvroSortPriority(0) case object Cat extends Animal\n@AvroSortPriority(-1) case object Dog extends Animal\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">AvroEnumDefault</span>(<span class=\"pl-en\">Dog</span>)\n<span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Animal</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroSortPriority</span>(<span class=\"pl-c1\">0</span>) <span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Cat</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroSortPriority</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Dog</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span></pre></div>\n<p dir=\"auto\">resulting in the following AVRO schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot; : &quot;enum&quot;,\n  &quot;name&quot; : &quot;Animal&quot;,\n  &quot;symbols&quot; : [ &quot;Cat&quot;, &quot;Dog&quot; ],\n  &quot;default&quot; : &quot;Dog&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enum<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Animal<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"symbols\" </span>: [ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Cat<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dog<span class=\"pl-pds\">\"</span> </span>],\n  <span class=\"pl-ent\">\"default\" </span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dog<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-avro-fixed\" class=\"anchor\" aria-hidden=\"true\" href=\"#avro-fixed\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Avro Fixed</h3>\n<p dir=\"auto\">Avro supports the idea of fixed length byte arrays. To use these we can either override the schema generated for a type to return <code>Schema.Type.Fixed</code>. This will work for types like String or UUID. You can also annotate a field with @AvroFixed(size).\nFor example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\ncase class Foo(@AvroFixed(7) mystring: String)\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroFixed</span>(<span class=\"pl-c1\">7</span>) <span class=\"pl-v\">mystring</span>: <span class=\"pl-en\">String</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<p dir=\"auto\">Will generate the following schema:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Foo&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;mystring&quot;,\n      &quot;type&quot;: {\n        &quot;type&quot;: &quot;fixed&quot;,\n        &quot;name&quot;: &quot;mystring&quot;,\n        &quot;size&quot;: 7\n      }\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mystring<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: {\n        <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fixed<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mystring<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"size\"</span>: <span class=\"pl-c1\">7</span>\n      }\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">If you have a value type that you always want to be represented as fixed, then rather than annotate every single location it is used, you can annotate the value type itself.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\n\n@AvroFixed(4)\ncase class FixedA(bytes: Array[Byte]) extends AnyVal\n\ncase class Foo(a: FixedA)\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroFixed</span>(<span class=\"pl-c1\">4</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FixedA</span>(<span class=\"pl-v\">bytes</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">Byte</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyVal</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">FixedA</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<p dir=\"auto\">And this would generate:</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;record&quot;,\n  &quot;name&quot;: &quot;Foo&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;name&quot;: &quot;a&quot;,\n      &quot;type&quot;: {\n        &quot;type&quot;: &quot;fixed&quot;,\n        &quot;name&quot;: &quot;FixedA&quot;,\n        &quot;size&quot;: 4\n      }\n    }\n  ]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>: [\n    {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"type\"</span>: {\n        <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fixed<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FixedA<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"size\"</span>: <span class=\"pl-c1\">4</span>\n      }\n    }\n  ]\n}</pre></div>\n<p dir=\"auto\">Finally, these annotated value types can be used as top level schemas too:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.sksamuel\n\n@AvroFixed(6)\ncase class FixedA(bytes: Array[Byte]) extends AnyVal\nval schema = AvroSchema[FixedA]\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>\n\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroFixed</span>(<span class=\"pl-c1\">6</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FixedA</span>(<span class=\"pl-v\">bytes</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">Byte</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyVal</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">FixedA</span>]</pre></div>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;: &quot;fixed&quot;,\n  &quot;name&quot;: &quot;FixedA&quot;,\n  &quot;namespace&quot;: &quot;com.sksamuel&quot;,\n  &quot;size&quot;: 6\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fixed<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FixedA<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.sksamuel<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"size\"</span>: <span class=\"pl-c1\">6</span>\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-controlling-order-of-types-in-generated-union-schemas\" class=\"anchor\" aria-hidden=\"true\" href=\"#controlling-order-of-types-in-generated-union-schemas\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Controlling order of types in generated union schemas</h3>\n<p dir=\"auto\">The order of types in a union is significant in Avro, e.g the schemas <code>type: [\"int\", \"float\"]</code> and <code>type: [\"float\", \"int\"]</code> are different. This can cause problems when generating schemas for sealed trait hierarchies. Ideally we would generate schemas using the source code declaration order of the types. So for example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait Animal\ncase class Dog(howFriendly: Float) extends Animal\ncase class Fish(remembersYou: Boolean) extends Animal\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Animal</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Dog</span>(<span class=\"pl-v\">howFriendly</span>: <span class=\"pl-en\">Float</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Fish</span>(<span class=\"pl-v\">remembersYou</span>: <span class=\"pl-en\">Boolean</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span></pre></div>\n<p dir=\"auto\">Should generate a schema where the order of types in the unions is <code>Dog, Fish</code>. Unfortunately, the <code>SchemaFor</code> macro can sometimes lose track of what the declaration order is - especially with larger hierarchies. In any situation where this is happening you can use the <code>@AvroSortPriority</code> annotation to explicitly control what order the types appear in. <code>@AvroSortPriority</code> takes a single float argument, which is the priority this field should be treated with, higher priority means closer to the beginning of the union. For example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait Animal\n@AvroSortPriority(1)\ncase class Dog(howFriendly: Float) extends Animal\n@AvroSortPriority(2)\ncase class Fish(remembersYou: Boolean) extends Animal\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Animal</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroSortPriority</span>(<span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Dog</span>(<span class=\"pl-v\">howFriendly</span>: <span class=\"pl-en\">Float</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span>\n<span class=\"pl-k\">@</span><span class=\"pl-en\">AvroSortPriority</span>(<span class=\"pl-c1\">2</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Fish</span>(<span class=\"pl-v\">remembersYou</span>: <span class=\"pl-en\">Boolean</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span></pre></div>\n<p dir=\"auto\">Would output the types in the union as <code>Fish,Dog</code>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-recursive-schemas\" class=\"anchor\" aria-hidden=\"true\" href=\"#recursive-schemas\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Recursive Schemas</h3>\n<p dir=\"auto\">Avro4s supports recursive schemas. Customizing them requires some thought, so if you can stick with the out-of-the-box\nprovided schemas and customization via annotations.</p>\n<h3 dir=\"auto\"><a id=\"user-content-customizing-recursive-schemas\" class=\"anchor\" aria-hidden=\"true\" href=\"#customizing-recursive-schemas\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Customizing Recursive Schemas</h3>\n<p dir=\"auto\">The simplest way to customize schemas for recursive types is to provide custom <code>SchemaFor</code> instances for all types that\nform the recursion. Given for example the following recursive <code>Tree</code> type,</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait Tree[+T]\ncase class Branch[+T](left: Tree[T], right: Tree[T]) extends Tree[T]\ncase class Leaf[+T](value: T) extends Tree[T]\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Tree</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">T</span>]\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Branch</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">T</span>](<span class=\"pl-v\">left</span>: <span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">T</span>], <span class=\"pl-v\">right</span>: <span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">T</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Tree</span>[<span class=\"pl-en\">T</span>]\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Leaf</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">T</span>](<span class=\"pl-v\">value</span>: <span class=\"pl-en\">T</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Tree</span>[<span class=\"pl-en\">T</span>]</pre></div>\n<p dir=\"auto\">it is easy to customize recursive schemas by providing a <code>SchemaFor</code> for both <code>Tree</code> and <code>Branch</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.collection.JavaConverters._\n\nval leafSchema = AvroSchema[Leaf[Int]]\nval branchSchema = Schema.createRecord(&quot;CustomBranch&quot;, &quot;custom schema&quot;, &quot;custom&quot;, false)\nval treeSchema = Schema.createUnion(leafSchema, branchSchema)\nbranchSchema.setFields(Seq(new Schema.Field(&quot;left&quot;, treeSchema), new Schema.Field(&quot;right&quot;, treeSchema)).asJava)\n\nval treeSchemaFor: SchemaFor[Tree[Int]] = SchemaFor(treeSchema)\nval branchSchemaFor: SchemaFor[Branch[Int]] = SchemaFor(branchSchema)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">collection</span>.<span class=\"pl-en\">JavaConverters</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">leafSchema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Leaf</span>[<span class=\"pl-en\">Int</span>]]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">branchSchema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Schema</span>.createRecord(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CustomBranch<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>custom schema<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>custom<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">false</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">treeSchema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Schema</span>.createUnion(leafSchema, branchSchema)\nbranchSchema.setFields(<span class=\"pl-en\">Seq</span>(<span class=\"pl-k\">new</span> <span class=\"pl-en\">Schema</span>.<span class=\"pl-en\">Field</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>left<span class=\"pl-pds\">\"</span></span>, treeSchema), <span class=\"pl-k\">new</span> <span class=\"pl-en\">Schema</span>.<span class=\"pl-en\">Field</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>right<span class=\"pl-pds\">\"</span></span>, treeSchema)).asJava)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">treeSchemaFor</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>(treeSchema)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">branchSchemaFor</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>(branchSchema)</pre></div>\n<p dir=\"auto\">If you want to customize the schema for one type that is part of a type recursion (e.g., <code>Branch[Int]</code>) while using\ngenerated schemas, this can be done as follows (sticking with the above example):</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 1. Use implicit def here so that this SchemaFor gets summoned for Branch[Int] in steps 6. and 10. below\n// 2. Implement a ResolvableSchemaFor instead of SchemaFor directly so that SchemaFor creation can be deferred\nimplicit def branchSchemaFor: SchemaFor[Branch[Int]] = new ResolvableSchemaFor[Branch[Int]] {\n  def schemaFor(env: DefinitionEnvironment[SchemaFor], update: SchemaUpdate): SchemaFor[Branch[Int]] =\n    // 3. first, check whether SchemaFor[Branch[Int]] is already defined and return that if it is \n    env.get[Branch[Int]].getOrElse {\n      // 4. otherwise, create an incomplete SchemaFor (it initially lacks fields)\n      val record: SchemaFor[Branch[Int]] = SchemaFor(Schema.createRecord(&quot;CustomBranch&quot;, &quot;custom schema&quot;, &quot;custom&quot;, false))\n      // 5. extend the definition environment with the created SchemaFor[Branch[Int]]\n      val nextEnv = env.updated(record)\n      // 6. summon a schema for Tree[Int] (using the Branch[Int] from step 1. through implicits)\n      // 7. resolve the schema to get a finalized schema for Tree[Int]\n      val treeSchema = SchemaFor[Tree[Int]].resolveSchemaFor(nextEnv, NoUpdate).schema\n      // 8. close the reference cycle between Branch[Int] and Tree[Int]\n      val fields = Seq(new Schema.Field(&quot;left&quot;, treeSchema), new Schema.Field(&quot;right&quot;, treeSchema))\n      record.schema.setFields(fields.asJava)\n      // 9. return the final SchemaFor[Branch[Int]]\n      record\n    }\n}\n\n// 10. summon Schema for tree and kick off encoder resolution.\nval treeSchema = AvroSchema[Tree[Int]]\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 1. Use implicit def here so that this SchemaFor gets summoned for Branch[Int] in steps 6. and 10. below</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 2. Implement a ResolvableSchemaFor instead of SchemaFor directly so that SchemaFor creation can be deferred</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">branchSchemaFor</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">ResolvableSchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">schemaFor</span>(<span class=\"pl-v\">env</span>: <span class=\"pl-en\">DefinitionEnvironment</span>[<span class=\"pl-en\">SchemaFor</span>], <span class=\"pl-v\">update</span>: <span class=\"pl-en\">SchemaUpdate</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 3. first, check whether SchemaFor[Branch[Int]] is already defined and return that if it is </span>\n    env.get[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]].getOrElse {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 4. otherwise, create an incomplete SchemaFor (it initially lacks fields)</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">record</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>(<span class=\"pl-en\">Schema</span>.createRecord(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CustomBranch<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>custom schema<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>custom<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">false</span>))\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 5. extend the definition environment with the created SchemaFor[Branch[Int]]</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">nextEnv</span> <span class=\"pl-k\">=</span> env.updated(record)\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 6. summon a schema for Tree[Int] (using the Branch[Int] from step 1. through implicits)</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 7. resolve the schema to get a finalized schema for Tree[Int]</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">treeSchema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">Int</span>]].resolveSchemaFor(nextEnv, <span class=\"pl-en\">NoUpdate</span>).schema\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 8. close the reference cycle between Branch[Int] and Tree[Int]</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fields</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(<span class=\"pl-k\">new</span> <span class=\"pl-en\">Schema</span>.<span class=\"pl-en\">Field</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>left<span class=\"pl-pds\">\"</span></span>, treeSchema), <span class=\"pl-k\">new</span> <span class=\"pl-en\">Schema</span>.<span class=\"pl-en\">Field</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>right<span class=\"pl-pds\">\"</span></span>, treeSchema))\n      record.schema.setFields(fields.asJava)\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 9. return the final SchemaFor[Branch[Int]]</span>\n      record\n    }\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 10. summon Schema for tree and kick off encoder resolution.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">treeSchema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">Int</span>]]</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-input--output\" class=\"anchor\" aria-hidden=\"true\" href=\"#input--output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Input / Output</h2>\n<h3 dir=\"auto\"><a id=\"user-content-serializing\" class=\"anchor\" aria-hidden=\"true\" href=\"#serializing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Serializing</h3>\n<p dir=\"auto\">Avro4s allows us to easily serialize case classes using an instance of <code>AvroOutputStream</code> which we write to, and close, just like you would any regular output stream.\nAn <code>AvroOutputStream</code> can be created from a <code>File</code>, <code>Path</code>, or by wrapping another <code>OutputStream</code>.\nWhen we create one, we specify the type of objects that we will be serializing and provide a writer schema.\nFor example, to serialize instances of our Pizza class:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.io.File\nimport com.sksamuel.avro4s.AvroOutputStream\n\nval pepperoni = Pizza(&quot;pepperoni&quot;, Seq(Ingredient(&quot;pepperoni&quot;, 12, 4.4), Ingredient(&quot;onions&quot;, 1, 0.4)), false, false, 598)\nval hawaiian = Pizza(&quot;hawaiian&quot;, Seq(Ingredient(&quot;ham&quot;, 1.5, 5.6), Ingredient(&quot;pineapple&quot;, 5.2, 0.2)), false, false, 391)\n\nval schema = AvroSchema[Pizza]\n\nval os = AvroOutputStream.data[Pizza].to(new File(&quot;pizzas.avro&quot;)).build()\nos.write(Seq(pepperoni, hawaiian))\nos.flush()\nos.close()\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">io</span>.<span class=\"pl-en\">File</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>.<span class=\"pl-en\">avro4s</span>.<span class=\"pl-en\">AvroOutputStream</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">pepperoni</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Pizza</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pepperoni<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">Seq</span>(<span class=\"pl-en\">Ingredient</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pepperoni<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">4.4</span>), <span class=\"pl-en\">Ingredient</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>onions<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0.4</span>)), <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">598</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">hawaiian</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Pizza</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hawaiian<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">Seq</span>(<span class=\"pl-en\">Ingredient</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ham<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1.5</span>, <span class=\"pl-c1\">5.6</span>), <span class=\"pl-en\">Ingredient</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pineapple<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">5.2</span>, <span class=\"pl-c1\">0.2</span>)), <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">391</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Pizza</span>]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">os</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroOutputStream</span>.data[<span class=\"pl-en\">Pizza</span>].to(<span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pizzas.avro<span class=\"pl-pds\">\"</span></span>)).build()\nos.write(<span class=\"pl-en\">Seq</span>(pepperoni, hawaiian))\nos.flush()\nos.close()</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-deserializing\" class=\"anchor\" aria-hidden=\"true\" href=\"#deserializing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Deserializing</h3>\n<p dir=\"auto\">We can easily deserialize a file back into case classes.\nGiven the <code>pizzas.avro</code> file we generated in the previous section on serialization, we will read this back in using the <code>AvroInputStream</code> class.\nWe first create an instance of the input stream specifying the types we will read back, the source file, and then build it using a reader schema.</p>\n<p dir=\"auto\">Once the input stream is created, we can invoke <code>iterator</code> which will return a lazy iterator that reads on demand the data in the file.</p>\n<p dir=\"auto\">In this example, we'll load all data at once from the iterator via <code>toSet</code>.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.sksamuel.avro4s.AvroInputStream\n\nval schema = AvroSchema[Pizza]\n\nval is = AvroInputStream.data[Pizza].from(new File(&quot;pizzas.avro&quot;)).build(schema)\nval pizzas = is.iterator.toSet\nis.close()\n\nprintln(pizzas.mkString(&quot;\\n&quot;))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>.<span class=\"pl-en\">avro4s</span>.<span class=\"pl-en\">AvroInputStream</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Pizza</span>]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">is</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroInputStream</span>.data[<span class=\"pl-en\">Pizza</span>].from(<span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pizzas.avro<span class=\"pl-pds\">\"</span></span>)).build(schema)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">pizzas</span> <span class=\"pl-k\">=</span> is.iterator.toSet\nis.close()\n\nprintln(pizzas.mkString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>))</pre></div>\n<p dir=\"auto\">Will print out:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Pizza(pepperoni,List(Ingredient(pepperoni,12.2,4.4), Ingredient(onions,1.2,0.4)),false,false,500)\nPizza(hawaiian,List(Ingredient(ham,1.5,5.6), Ingredient(pineapple,5.2,0.2)),false,false,500)\"><pre><span class=\"pl-en\">Pizza</span>(pepperoni,<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Ingredient</span>(pepperoni,<span class=\"pl-c1\">12.2</span>,<span class=\"pl-c1\">4.4</span>), <span class=\"pl-en\">Ingredient</span>(onions,<span class=\"pl-c1\">1.2</span>,<span class=\"pl-c1\">0.4</span>)),<span class=\"pl-c1\">false</span>,<span class=\"pl-c1\">false</span>,<span class=\"pl-c1\">500</span>)\n<span class=\"pl-en\">Pizza</span>(hawaiian,<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Ingredient</span>(ham,<span class=\"pl-c1\">1.5</span>,<span class=\"pl-c1\">5.6</span>), <span class=\"pl-en\">Ingredient</span>(pineapple,<span class=\"pl-c1\">5.2</span>,<span class=\"pl-c1\">0.2</span>)),<span class=\"pl-c1\">false</span>,<span class=\"pl-c1\">false</span>,<span class=\"pl-c1\">500</span>)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-binary-and-json-formats\" class=\"anchor\" aria-hidden=\"true\" href=\"#binary-and-json-formats\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Binary and JSON Formats</h3>\n<p dir=\"auto\">You can serialize as <a href=\"https://avro.apache.org/docs/1.8.2/spec.html#binary_encoding\" rel=\"nofollow\">binary</a> or <a href=\"https://avro.apache.org/docs/1.8.2/spec.html#json_encoding\" rel=\"nofollow\">json</a>\nby specifying the format when creating the input or output stream. In the earlier example we use <code>data</code> which is considered the \"default\" for Avro.</p>\n<p dir=\"auto\">To use json or binary, you can do the following:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"AvroOutputStream.binary.to(...).build(...)\nAvroOutputStream.json.to(...).build(...)\n\nAvroInputStream.binary.from(...).build(...)\nAvroInputStream.json.from(...).build(...)\"><pre><span class=\"pl-en\">AvroOutputStream</span>.binary.to(...).build(...)\n<span class=\"pl-en\">AvroOutputStream</span>.json.to(...).build(...)\n\n<span class=\"pl-en\">AvroInputStream</span>.binary.from(...).build(...)\n<span class=\"pl-en\">AvroInputStream</span>.json.from(...).build(...)</pre></div>\n<p dir=\"auto\">Note: Binary serialization does not include the schema in the output.</p>\n<h2 dir=\"auto\"><a id=\"user-content-avro-records\" class=\"anchor\" aria-hidden=\"true\" href=\"#avro-records\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Avro Records</h2>\n<p dir=\"auto\">In Avro there are two container interfaces designed for complex types - <code>GenericRecord</code>, which is the most commonly used, along with the lesser used <code>SpecificRecord</code>.\nThese record types are used with a schema of type <code>Schema.Type.RECORD</code>.</p>\n<p dir=\"auto\">To interface with the Avro Java API or with third party frameworks like Kafka it is sometimes desirable to convert between your case classes and these records,\nrather than using the input/output streams that avro4s provides.</p>\n<p dir=\"auto\">To perform conversions, use the <code>RecordFormat</code> typeclass which converts to/from case classes and Avro records.</p>\n<p dir=\"auto\">Note: In Avro, <code>GenericRecord</code> and <code>SpecificRecord</code> don't have a common <em>Record</em> interface (just a <code>Container</code> interface which simply provides for a schema without any methods for accessing values), so\navro4s has defined a <code>Record</code> trait, which is the union of the <code>GenericRecord</code> and <code>SpecificRecord</code> interfaces. This allows avro4s to generate records which implement both interfaces at the same time.</p>\n<p dir=\"auto\">To convert from a class into a record:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Composer(name: String, birthplace: String, compositions: Seq[String])\nval ennio = Composer(&quot;ennio morricone&quot;, &quot;rome&quot;, Seq(&quot;legend of 1900&quot;, &quot;ecstasy of gold&quot;))\nval format = RecordFormat[Composer]\n// record is a type that implements both GenericRecord and Specific Record\nval record = format.to(ennio)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Composer</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">birthplace</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">compositions</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">String</span>])\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">ennio</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Composer</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ennio morricone<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rome<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">Seq</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>legend of 1900<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ecstasy of gold<span class=\"pl-pds\">\"</span></span>))\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">format</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">RecordFormat</span>[<span class=\"pl-en\">Composer</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> record is a type that implements both GenericRecord and Specific Record</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">record</span> <span class=\"pl-k\">=</span> format.to(ennio)</pre></div>\n<p dir=\"auto\">And to go from a record back into a type:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// given some record from earlier\nval record = ...\nval format = RecordFormat[Composer]\nval ennio = format.from(record)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> given some record from earlier</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">record</span> <span class=\"pl-k\">=</span> ...\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">format</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">RecordFormat</span>[<span class=\"pl-en\">Composer</span>]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">ennio</span> <span class=\"pl-k\">=</span> format.from(record)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-usage-as-a-kafka-serde\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage-as-a-kafka-serde\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage as a Kafka Serde</h2>\n<p dir=\"auto\">The <a href=\"avro4s-kafka/src/main/scala/com/sksamuel/avro4s/kafka/GenericSerde.scala\">com.sksamuel.avro4s.kafka.GenericSerde</a> class can be used as a Kafka Serdes to serialize/deserialize case classes into Avro records with Avro4s.\nNote that this class is not integrated with the schema registry.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n  import java.util.Properties\n  import org.apache.kafka.clients.CommonClientConfigs\n  import org.apache.kafka.clients.producer.ProducerConfig\n  import com.sksamuel.avro4s.BinaryFormat\n\n  case class TheKafkaKey(id: String)\n  case class TheKafkaValue(name: String, location: String)\n\n  val producerProps = new Properties();\n  producerProps.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, &quot;...&quot;)\n  producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, new GenericSerde[TheKafkaKey](BinaryFormat))\n  producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, new GenericSerde[TheKafkaValue](BinaryFormat))\n  new ProducerConfig(producerProps)\"><pre>  <span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">util</span>.<span class=\"pl-en\">Properties</span>\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">apache</span>.<span class=\"pl-en\">kafka</span>.<span class=\"pl-en\">clients</span>.<span class=\"pl-en\">CommonClientConfigs</span>\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">apache</span>.<span class=\"pl-en\">kafka</span>.<span class=\"pl-en\">clients</span>.<span class=\"pl-en\">producer</span>.<span class=\"pl-en\">ProducerConfig</span>\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>.<span class=\"pl-en\">avro4s</span>.<span class=\"pl-en\">BinaryFormat</span>\n\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">TheKafkaKey</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">String</span>)\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">TheKafkaValue</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">location</span>: <span class=\"pl-en\">String</span>)\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">producerProps</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Properties</span>();\n  producerProps.put(<span class=\"pl-en\">CommonClientConfigs</span>.<span class=\"pl-en\">BOOTSTRAP_SERVERS_CONFIG</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>...<span class=\"pl-pds\">\"</span></span>)\n  producerProps.put(<span class=\"pl-en\">ProducerConfig</span>.<span class=\"pl-en\">KEY_SERIALIZER_CLASS_CONFIG</span>, <span class=\"pl-k\">new</span> <span class=\"pl-en\">GenericSerde</span>[<span class=\"pl-en\">TheKafkaKey</span>](<span class=\"pl-en\">BinaryFormat</span>))\n  producerProps.put(<span class=\"pl-en\">ProducerConfig</span>.<span class=\"pl-en\">VALUE_SERIALIZER_CLASS_CONFIG</span>, <span class=\"pl-k\">new</span> <span class=\"pl-en\">GenericSerde</span>[<span class=\"pl-en\">TheKafkaValue</span>](<span class=\"pl-en\">BinaryFormat</span>))\n  <span class=\"pl-k\">new</span> <span class=\"pl-en\">ProducerConfig</span>(producerProps)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-type-mappings\" class=\"anchor\" aria-hidden=\"true\" href=\"#type-mappings\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Type Mappings</h2>\n<p dir=\"auto\">Avro4s defines two typeclasses, <code>Encoder</code> and <code>Decoder</code> which do the work\nof mapping between scala values and Avro compatible values. Avro has no understanding of Scala types, or anything outside of it's built in set of supported types, so all values must be converted to something that is compatible with Avro. There are built in encoders and decoders for all the common JDK and Scala SDK types, including macro generated instances for case classes.</p>\n<p dir=\"auto\">For example a <code>java.sql.Timestamp</code> is usually encoded as a Long, and a <code>java.util.UUID</code> is encoded as a String.</p>\n<p dir=\"auto\">Decoders do the same work, but in reverse. They take an Avro value, such as null and return a scala value, such as <code>Option</code>.</p>\n<p dir=\"auto\">Some values can be mapped in multiple ways depending on how the schema was generated. For example a String, which is usually encoded as\n<code>org.apache.avro.util.Utf8</code> could also be encoded as an array of bytes if the generated schema for that field was <code>Schema.Type.BYTES</code>. Therefore some encoders will take into account the schema passed to them when choosing the avro compatible type. In the schemas section you saw how you could influence which schema is generated for types.</p>\n<h3 dir=\"auto\"><a id=\"user-content-built-in-type-mappings\" class=\"anchor\" aria-hidden=\"true\" href=\"#built-in-type-mappings\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Built in Type Mappings</h3>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.collection.{Array, List, Seq, Iterable, Set, Map, Option, Either}\nimport shapeless.{:+:, CNil}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">collection</span>.{<span class=\"pl-en\">Array</span>, <span class=\"pl-en\">List</span>, <span class=\"pl-en\">Seq</span>, <span class=\"pl-en\">Iterable</span>, <span class=\"pl-en\">Set</span>, <span class=\"pl-en\">Map</span>, <span class=\"pl-en\">Option</span>, <span class=\"pl-en\">Either</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">shapeless</span>.{<span class=\"pl-en\">:+:</span>, <span class=\"pl-en\">CNil</span>}</pre></div>\n<p dir=\"auto\">The following table shows how types used in your code will be mapped / encoded in the generated Avro schemas and files.\nIf a type can be mapped in multiple ways, it is listed more than once.</p>\n<table>\n<thead>\n<tr>\n<th>Scala Type</th>\n<th>Schema Type</th>\n<th>Logical Type</th>\n<th>Encoded Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>STRING</td>\n<td></td>\n<td>Utf8</td>\n</tr>\n<tr>\n<td>String</td>\n<td>FIXED</td>\n<td></td>\n<td>GenericFixed</td>\n</tr>\n<tr>\n<td>String</td>\n<td>BYTES</td>\n<td></td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>BOOLEAN</td>\n<td></td>\n<td>java.lang.Boolean</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>LONG</td>\n<td></td>\n<td>java.lang.Long</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>INT</td>\n<td></td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>INT</td>\n<td></td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>INT</td>\n<td></td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>DOUBLE</td>\n<td></td>\n<td>java.lang.Double</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>FLOAT</td>\n<td></td>\n<td>java.lang.Float</td>\n</tr>\n<tr>\n<td>UUID</td>\n<td>STRING</td>\n<td>UUID</td>\n<td>Utf8</td>\n</tr>\n<tr>\n<td>LocalDate</td>\n<td>INT</td>\n<td>Date</td>\n<td>java.lang.Int</td>\n</tr>\n<tr>\n<td>LocalTime</td>\n<td>INT</td>\n<td>time-millis</td>\n<td>java.lang.Int</td>\n</tr>\n<tr>\n<td>LocalDateTime</td>\n<td>LONG</td>\n<td>timestamp-nanos</td>\n<td>java.lang.Long</td>\n</tr>\n<tr>\n<td>java.sql.Date</td>\n<td>INT</td>\n<td>Date</td>\n<td>java.lang.Int</td>\n</tr>\n<tr>\n<td>Instant</td>\n<td>LONG</td>\n<td>Timestamp-Millis</td>\n<td>java.lang.Long</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>LONG</td>\n<td>Timestamp-Millis</td>\n<td>java.lang.Long</td>\n</tr>\n<tr>\n<td>BigDecimal</td>\n<td>BYTES</td>\n<td>Decimal&lt;8,2&gt;</td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>BigDecimal</td>\n<td>FIXED</td>\n<td>Decimal&lt;8,2&gt;</td>\n<td>GenericFixed</td>\n</tr>\n<tr>\n<td>BigDecimal</td>\n<td>STRING</td>\n<td>Decimal&lt;8,2&gt;</td>\n<td>String</td>\n</tr>\n<tr>\n<td>Option[T]</td>\n<td>UNION&lt;null,T&gt;</td>\n<td></td>\n<td>null, T</td>\n</tr>\n<tr>\n<td>Array[Byte]</td>\n<td>BYTES</td>\n<td></td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>Array[Byte]</td>\n<td>FIXED</td>\n<td></td>\n<td>GenericFixed</td>\n</tr>\n<tr>\n<td>ByteBuffer</td>\n<td>BYTES</td>\n<td></td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>Seq[Byte]</td>\n<td>BYTES</td>\n<td></td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>List[Byte]</td>\n<td>BYTES</td>\n<td></td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>Vector[Byte]</td>\n<td>BYTES</td>\n<td></td>\n<td>ByteBuffer</td>\n</tr>\n<tr>\n<td>Array[T]</td>\n<td>ARRAY</td>\n<td></td>\n<td>Array[T]</td>\n</tr>\n<tr>\n<td>Vector[T]</td>\n<td>ARRAY</td>\n<td></td>\n<td>Array[T]</td>\n</tr>\n<tr>\n<td>Seq[T]</td>\n<td>ARRAY</td>\n<td></td>\n<td>Array[T]</td>\n</tr>\n<tr>\n<td>List[T]</td>\n<td>ARRAY</td>\n<td></td>\n<td>Array[T]</td>\n</tr>\n<tr>\n<td>Set[T]</td>\n<td>ARRAY</td>\n<td></td>\n<td>Array[T]</td>\n</tr>\n<tr>\n<td>sealed trait of case classes</td>\n<td>UNION&lt;A,B,..&gt;</td>\n<td></td>\n<td>A, B, ...</td>\n</tr>\n<tr>\n<td>sealed trait of case objects</td>\n<td>ENUM&lt;A,B,..&gt;</td>\n<td></td>\n<td>GenericEnumSymbol</td>\n</tr>\n<tr>\n<td>Map[String, V]</td>\n<td>MAP</td>\n<td></td>\n<td>java.util.Map[String, V]</td>\n</tr>\n<tr>\n<td>Either[A,B]</td>\n<td>UNION&lt;A,B&gt;</td>\n<td></td>\n<td>A, B</td>\n</tr>\n<tr>\n<td>A :+: B :+: C :+: CNil</td>\n<td>UNION&lt;A,B,C&gt;</td>\n<td></td>\n<td>A, B, ...</td>\n</tr>\n<tr>\n<td>case class T</td>\n<td>RECORD</td>\n<td></td>\n<td>GenericRecord with SpecificRecord</td>\n</tr>\n<tr>\n<td>Scala enumeration</td>\n<td>ENUM</td>\n<td></td>\n<td>GenericEnumSymbol</td>\n</tr>\n<tr>\n<td>Java enumeration</td>\n<td>ENUM</td>\n<td></td>\n<td>GenericEnumSymbol</td>\n</tr>\n<tr>\n<td>Scala tuples</td>\n<td>RECORD</td>\n<td></td>\n<td>GenericRecord with SpecificRecord</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">To select the encoding in case multiple encoded types exist, create a new <code>Encoder</code> with a corresponding <code>SchemaFor</code>\ninstance to the via <code>withSchema</code>. For example, creating a string encoder that uses target type <code>BYTES</code> works like this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val stringSchemaFor = SchemaFor[String](Schema.create(Schema.Type.BYTES))\nval stringEncoder = Encoder[String].withSchema(stringSchemaFor)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">stringSchemaFor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">String</span>](<span class=\"pl-en\">Schema</span>.create(<span class=\"pl-en\">Schema</span>.<span class=\"pl-en\">Type</span>.<span class=\"pl-en\">BYTES</span>))\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">stringEncoder</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">String</span>].withSchema(stringSchemaFor)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-custom-type-mappings\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-type-mappings\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Custom Type Mappings</h3>\n<p dir=\"auto\">It is very easy to add custom type mappings. To do this, we bring into scope a custom implicit of <code>Encoder[T]</code> and/or <code>Decoder[T]</code>.</p>\n<p dir=\"auto\">For example, to create a custom type mapping for a type Foo which writes out the contents in upper case, but always reads\nthe contents in lower case, we can do the following:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Foo(a: String, b: String)\n\nimplicit object FooEncoder extends Encoder[Foo] {\n\n  override val schemaFor = SchemaFor[Foo]\n\n  override def encode(foo: Foo) = {\n    val record = new GenericData.Record(schema)\n    record.put(&quot;a&quot;, foo.a.toUpperCase)\n    record.put(&quot;b&quot;, foo.b.toUpperCase)\n    record\n  }\n}\n\nimplicit object FooDecoder extends Decoder[Foo] {\n\n  override val schemaFor = SchemaFor[Foo]\n\n  override def decode(value: Any) = {\n    val record = value.asInstanceOf[GenericRecord]\n    Foo(record.get(&quot;a&quot;).toString.toLowerCase, record.get(&quot;b&quot;).toString.toLowerCase)\n  }\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">b</span>: <span class=\"pl-en\">String</span>)\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">FooEncoder</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Encoder</span>[<span class=\"pl-en\">Foo</span>] {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaFor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Foo</span>]\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">encode</span>(<span class=\"pl-v\">foo</span>: <span class=\"pl-en\">Foo</span>) <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">record</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">GenericData</span>.<span class=\"pl-en\">Record</span>(schema)\n    record.put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>, foo.a.toUpperCase)\n    record.put(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>, foo.b.toUpperCase)\n    record\n  }\n}\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">FooDecoder</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Decoder</span>[<span class=\"pl-en\">Foo</span>] {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaFor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Foo</span>]\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">decode</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Any</span>) <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">record</span> <span class=\"pl-k\">=</span> value.<span class=\"pl-c1\">asInstanceOf</span>[<span class=\"pl-en\">GenericRecord</span>]\n    <span class=\"pl-en\">Foo</span>(record.get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>).toString.toLowerCase, record.get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>).toString.toLowerCase)\n  }\n}</pre></div>\n<p dir=\"auto\">Another example is changing the way we serialize <code>LocalDateTime</code> to store these dates as ISO strings. In this case, we are\nwriting out a String rather than the default Long so we must also change the schema type. Therefore, we must add an implicit <code>SchemaFor</code> as well as the encoders\nand decoders.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val LocalDateTimeSchemaFor = SchemaFor[LocalDateTime](Schema.create(Schema.Type.STRING))\n\nimplicit object DateTimeEncoder extends Encoder[LocalDateTime] {\n\n  override val schemaFor = LocalDateTimeSchemaFor\n\n  override def encode(value: LocalDateTime) = \n    ISODateTimeFormat.dateTime().print(value)\n}\n\nimplicit object DateTimeDecoder extends Decoder[LocalDateTime] {\n\n  override val schemaFor = LocalDateTimeSchemaFor\n\n  override def decode(value: Any) = \n    ISODateTimeFormat.dateTime().parseDateTime(value.toString)\n}\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">LocalDateTimeSchemaFor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">LocalDateTime</span>](<span class=\"pl-en\">Schema</span>.create(<span class=\"pl-en\">Schema</span>.<span class=\"pl-en\">Type</span>.<span class=\"pl-en\">STRING</span>))\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">DateTimeEncoder</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Encoder</span>[<span class=\"pl-en\">LocalDateTime</span>] {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaFor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">LocalDateTimeSchemaFor</span>\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">encode</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">LocalDateTime</span>) <span class=\"pl-k\">=</span> \n    <span class=\"pl-en\">ISODateTimeFormat</span>.dateTime().print(value)\n}\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">DateTimeDecoder</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Decoder</span>[<span class=\"pl-en\">LocalDateTime</span>] {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaFor</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">LocalDateTimeSchemaFor</span>\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">decode</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Any</span>) <span class=\"pl-k\">=</span> \n    <span class=\"pl-en\">ISODateTimeFormat</span>.dateTime().parseDateTime(value.toString)\n}</pre></div>\n<p dir=\"auto\">These typeclasses must be implicit and in scope when you use <code>AvroSchema</code> or <code>RecordFormat</code>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-coproducts\" class=\"anchor\" aria-hidden=\"true\" href=\"#coproducts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Coproducts</h3>\n<p dir=\"auto\">Avro supports generalised unions, eithers of more than two values.\nTo represent these in scala, we use <code>shapeless.:+:</code>, such that <code>A :+: B :+: C :+: CNil</code> represents cases where a type is <code>A</code> OR <code>B</code> OR <code>C</code>.\nSee shapeless' <a href=\"https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0#coproducts-and-discriminated-unions\">documentation on coproducts</a> for more on how to use coproducts.</p>\n<h3 dir=\"auto\"><a id=\"user-content-sealed-hierarchies\" class=\"anchor\" aria-hidden=\"true\" href=\"#sealed-hierarchies\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Sealed hierarchies</h3>\n<p dir=\"auto\">Scala sealed traits/classes are supported both when it comes to schema generation and conversions to/from <code>GenericRecord</code>.\nGenerally sealed hierarchies are encoded as unions - in the same way like Coproducts.\nUnder the hood, shapeless <code>Generic</code> is used to derive Coproduct representation for sealed hierarchy.</p>\n<p dir=\"auto\">When all descendants of sealed trait/class are singleton objects, optimized, enum-based encoding is used instead.</p>\n<h2 dir=\"auto\"><a id=\"user-content-decimal-scale-precision-and-rounding-mode\" class=\"anchor\" aria-hidden=\"true\" href=\"#decimal-scale-precision-and-rounding-mode\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Decimal scale, precision and rounding mode</h2>\n<p dir=\"auto\">In order to customize the scale and precision used by <code>BigDecimal</code> schema generators, bring an implicit <code>ScalePrecision</code> instance into scope.before using <code>AvroSchema</code>.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.sksamuel.avro4s.ScalePrecision\n\ncase class MyDecimal(d: BigDecimal)\n\nimplicit val sp = ScalePrecision(4, 20)\nval schema = AvroSchema[MyDecimal]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">sksamuel</span>.<span class=\"pl-en\">avro4s</span>.<span class=\"pl-en\">ScalePrecision</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyDecimal</span>(<span class=\"pl-v\">d</span>: <span class=\"pl-en\">BigDecimal</span>)\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sp</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ScalePrecision</span>(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">20</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">MyDecimal</span>]</pre></div>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;type&quot;:&quot;record&quot;,\n  &quot;name&quot;:&quot;MyDecimal&quot;,\n  &quot;namespace&quot;:&quot;com.foo&quot;,\n  &quot;fields&quot;:[{\n    &quot;name&quot;:&quot;d&quot;,\n    &quot;type&quot;:{\n      &quot;type&quot;:&quot;bytes&quot;,\n      &quot;logicalType&quot;:&quot;decimal&quot;,\n      &quot;scale&quot;:&quot;4&quot;,\n      &quot;precision&quot;:&quot;20&quot;\n    }\n  }]\n}\"><pre>{\n  <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MyDecimal<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"namespace\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.foo<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"fields\"</span>:[{\n    <span class=\"pl-ent\">\"name\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>d<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"type\"</span>:{\n      <span class=\"pl-ent\">\"type\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bytes<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"logicalType\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>decimal<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"scale\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"precision\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>20<span class=\"pl-pds\">\"</span></span>\n    }\n  }]\n}</pre></div>\n<p dir=\"auto\">When encoding values, it may be necessary to round values if they need to be converted to the scale used by the schema. By default this is <code>RoundingMode.UNNECESSARY</code> which will throw an exception if rounding is required.\nIn order to change this, add an implicit <code>RoundingMode</code> value before the <code>Encoder</code> is generated.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class MyDecimal(d: BigDecimal)\n\nimplicit val sp = ScalePrecision(4, 20)\nval schema = AvroSchema[MyDecimal]\n\nimplicit val roundingMode = RoundingMode.HALF_UP\nval encoder = Encoder[MyDecimal]\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyDecimal</span>(<span class=\"pl-v\">d</span>: <span class=\"pl-en\">BigDecimal</span>)\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sp</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ScalePrecision</span>(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">20</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">MyDecimal</span>]\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">roundingMode</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">RoundingMode</span>.<span class=\"pl-en\">HALF_UP</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">encoder</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">MyDecimal</span>]</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-type-parameters\" class=\"anchor\" aria-hidden=\"true\" href=\"#type-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Type Parameters</h2>\n<p dir=\"auto\">When serializing a class with one or more type parameters, the avro name used in a schema is the name of the raw type, plus the actual type parameters. In other words, it would be of the form <code>rawtype__typeparam1_typeparam2_..._typeparamN</code>. So for example, the schema for a type <code>Event[Foo]</code> would have the avro name <code>event__foo</code>.</p>\n<p dir=\"auto\">You can disable this by annotating the class with <code>@AvroErasedName</code> which uses the JVM erased name - in other words, it drops type parameter information. So the aforementioned <code>Event[Foo]</code> would be simply <code>event</code>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-selective-customisation\" class=\"anchor\" aria-hidden=\"true\" href=\"#selective-customisation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Selective Customisation</h2>\n<p dir=\"auto\">You can selectively customise the way Avro4s generates certain parts of your hierarchy, thanks to implicit precedence. Suppose you have the following classes:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Product(name: String, price: Price, litres: BigDecimal)\ncase class Price(currency: String, amount: BigDecimal)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Product</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">price</span>: <span class=\"pl-en\">Price</span>, <span class=\"pl-v\">litres</span>: <span class=\"pl-en\">BigDecimal</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Price</span>(<span class=\"pl-v\">currency</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">amount</span>: <span class=\"pl-en\">BigDecimal</span>)</pre></div>\n<p dir=\"auto\">And you want to selectively use different scale/precision for the <code>price</code> and <code>litres</code> quantities. You can do this by forcing the implicits in the corresponding companion objects.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object Price {\n  implicit val sp = ScalePrecision(10, 2)\n  implicit val schema = SchemaFor[Price]\n}\n\nobject Product {\n  implicit val sp = ScalePrecision(8, 4)\n  implicit val schema = SchemaFor[Product]\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Price</span> {\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sp</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ScalePrecision</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">2</span>)\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Price</span>]\n}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Product</span> {\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sp</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ScalePrecision</span>(<span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">4</span>)\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Product</span>]\n}</pre></div>\n<p dir=\"auto\">This will result in a schema where both <code>BigDecimal</code> quantities have their own separate scale and precision.</p>\n<h2 dir=\"auto\"><a id=\"user-content-cats-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#cats-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Cats Support</h2>\n<p dir=\"auto\">If you use cats in your domain objects, then Avro4s provides a cats module with schemas, encoders and decoders for some cats types.\nJust import <code>import com.sksamuel.avro4s.cats._</code> before calling into the macros.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Foo(list: NonEmptyList[String], vector: NonEmptyVector[Boolean])\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">list</span>: <span class=\"pl-en\">NonEmptyList</span>[<span class=\"pl-en\">String</span>], <span class=\"pl-v\">vector</span>: <span class=\"pl-en\">NonEmptyVector</span>[<span class=\"pl-en\">Boolean</span>])\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-refined-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#refined-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Refined Support</h2>\n<p dir=\"auto\">If you use <a href=\"https://github.com/fthomas/refined\">refined</a> in your domain objects, then Avro4s provides a refined module with schemas, encoders and decoders for refined types.\nJust import <code>import com.sksamuel.avro4s.refined._</code> before calling into the macros.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Foo(nonEmptyStr: String Refined NonEmpty)\nval schema = AvroSchema[Foo]\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">nonEmptyStr</span>: <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">NonEmpty</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">schema</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AvroSchema</span>[<span class=\"pl-en\">Foo</span>]</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-mapping-recursive-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapping-recursive-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mapping Recursive Types</h3>\n<p dir=\"auto\">Avro4s supports encoders and decoders for recursive types. Customizing them is possible, but involved. As with customizing\nSchemaFor instances for recursive types, the simplest way to customize encoders and decoders is to provide a custom\nencoder and decoder for all types that form the recursion.</p>\n<p dir=\"auto\">If that isn't possible, you can customize encoders / decoders for one single type and participate in creating a cyclic\ngraph of encoders / decoders. To give an example, consider the following recursive type for trees.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait Tree[+T]\ncase class Branch[+T](left: Tree[T], right: Tree[T]) extends Tree[T]\ncase class Leaf[+T](value: T) extends Tree[T]\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Tree</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">T</span>]\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Branch</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">T</span>](<span class=\"pl-v\">left</span>: <span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">T</span>], <span class=\"pl-v\">right</span>: <span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">T</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Tree</span>[<span class=\"pl-en\">T</span>]\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Leaf</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">T</span>](<span class=\"pl-v\">value</span>: <span class=\"pl-en\">T</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Tree</span>[<span class=\"pl-en\">T</span>]</pre></div>\n<p dir=\"auto\">For this, a custom <code>Branch[Int]</code> encoder can be defined as follows.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 1. use implicit def so that Encoder.apply[Tree[Int]] in step 7. and 10. below picks this resolvable encoder for branches.\n// 2. implement a ResolvableEncoder instead of Encoder directly so that encoder creation can be deferred\nimplicit def branchEncoder: Encoder[Branch[Int]] = new ResolvableEncoder[Branch[Int]] {\n\ndef encoder(env: DefinitionEnvironment[Encoder], update: SchemaUpdate): Encoder[Branch[Int]] =\n  // 3. lookup in the definition environment whether we already have created an encoder for branch.\n  env.get[Branch[Int]].getOrElse {\n\n    // 4. use var here to first create an acyclic graph and close it later.\n    var treeEncoder: Encoder[Tree[Int]] = null\n\n    // 5. create a partially initialized encoder for branches (it lacks a value for treeEncoder on creation).\n    val encoder = new Encoder[Branch[Int]] {\n      val schemaFor: SchemaFor[Branch[Int]] = SchemaFor[Branch[Int]]\n\n      def encode(value: Branch[Int]): AnyRef =\n        ImmutableRecord(schema, Seq(treeEncoder.encode(value.left), treeEncoder.encode(value.right)))\n    }\n\n    // 6. extend the definition environment with the newly created encoder so that subsequent lookups (step 3.) can return it\n    val nextEnv = env.updated(encoder)\n\n    // 7. resolve the tree encoder with the extended environment; the extended env will be passed back to the lookup\n    //    performed in step 3. above.\n    // 9. complete the initialization by closing the reference cycle: the branch encoder and tree encoder now \n    //    reference each other.\n    treeEncoder = Encoder.apply[Tree[Int]].resolveEncoder(nextEnv, NoUpdate)\n    encoder\n  }\n}\n\n// 10. summon encoder for tree and kick off encoder resolution.\nval toRecord = ToRecord[Tree[Int]]\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 1. use implicit def so that Encoder.apply[Tree[Int]] in step 7. and 10. below picks this resolvable encoder for branches.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 2. implement a ResolvableEncoder instead of Encoder directly so that encoder creation can be deferred</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">branchEncoder</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">ResolvableEncoder</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] {\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">encoder</span>(<span class=\"pl-v\">env</span>: <span class=\"pl-en\">DefinitionEnvironment</span>[<span class=\"pl-en\">Encoder</span>], <span class=\"pl-v\">update</span>: <span class=\"pl-en\">SchemaUpdate</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 3. lookup in the definition environment whether we already have created an encoder for branch.</span>\n  env.get[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]].getOrElse {\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 4. use var here to first create an acyclic graph and close it later.</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-smi\">treeEncoder</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 5. create a partially initialized encoder for branches (it lacks a value for treeEncoder on creation).</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">encoder</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] {\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">schemaFor</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">SchemaFor</span>[<span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>]]\n\n      <span class=\"pl-k\">def</span> <span class=\"pl-en\">encode</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Branch</span>[<span class=\"pl-en\">Int</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">AnyRef</span> <span class=\"pl-k\">=</span>\n        <span class=\"pl-en\">ImmutableRecord</span>(schema, <span class=\"pl-en\">Seq</span>(treeEncoder.encode(value.left), treeEncoder.encode(value.right)))\n    }\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 6. extend the definition environment with the newly created encoder so that subsequent lookups (step 3.) can return it</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">nextEnv</span> <span class=\"pl-k\">=</span> env.updated(encoder)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 7. resolve the tree encoder with the extended environment; the extended env will be passed back to the lookup</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>    performed in step 3. above.</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 9. complete the initialization by closing the reference cycle: the branch encoder and tree encoder now </span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>    reference each other.</span>\n    treeEncoder <span class=\"pl-k\">=</span> <span class=\"pl-en\">Encoder</span>.apply[<span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">Int</span>]].resolveEncoder(nextEnv, <span class=\"pl-en\">NoUpdate</span>)\n    encoder\n  }\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 10. summon encoder for tree and kick off encoder resolution.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">toRecord</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ToRecord</span>[<span class=\"pl-en\">Tree</span>[<span class=\"pl-en\">Int</span>]]</pre></div>\n<p dir=\"auto\">Why is this so complicated? Glad you asked! Turns out that caring for performance, providing customization via\nannotations, and using Magnolia for automatic typeclass derivation (which is great in itself) are three constraints\nthat aren't easy to combine. This design is the best we came up with; if you have a better design for this, please\ncontribute it!</p>\n<h2 dir=\"auto\"><a id=\"user-content-using-avro4s-in-your-project\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-avro4s-in-your-project\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using avro4s in your project</h2>\n<h4 dir=\"auto\"><a id=\"user-content-gradle\" class=\"anchor\" aria-hidden=\"true\" href=\"#gradle\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Gradle</h4>\n<p dir=\"auto\"><code>compile 'com.sksamuel.avro4s:avro4s-core_2.12:xxx'</code></p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SBT</h4>\n<p dir=\"auto\"><code>libraryDependencies += \"com.sksamuel.avro4s\" %% \"avro4s-core\" % \"xxx\"</code></p>\n<h4 dir=\"auto\"><a id=\"user-content-maven\" class=\"anchor\" aria-hidden=\"true\" href=\"#maven\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Maven</h4>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;dependency&gt;\n    &lt;groupId&gt;com.sksamuel.avro4s&lt;/groupId&gt;\n    &lt;artifactId&gt;avro4s-core_2.12&lt;/artifactId&gt;\n    &lt;version&gt;xxx&lt;/version&gt;\n&lt;/dependency&gt;\"><pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.sksamuel.avro4s&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;avro4s-core_2.12&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;xxx&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\">Check the latest released version on <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.sksamuel.avro4s%22\" rel=\"nofollow\">Maven Central</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-contributions\" class=\"anchor\" aria-hidden=\"true\" href=\"#contributions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contributions</h2>\n<p dir=\"auto\">Contributions to avro4s are always welcome. Good ways to contribute include:</p>\n<ul dir=\"auto\">\n<li>Raising bugs and feature requests</li>\n<li>Fixing bugs and enhancing the DSL</li>\n<li>Improving the performance of avro4s</li>\n<li>Adding to the documentation</li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "sksamuel",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/743706?v=4",
        "url" : "https://api.github.com/users/sksamuel",
        "contributions" : 1117
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 108
      },
      {
        "login" : "andreas-schroeder",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6724788?v=4",
        "url" : "https://api.github.com/users/andreas-schroeder",
        "contributions" : 29
      },
      {
        "login" : "alexjg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/224635?v=4",
        "url" : "https://api.github.com/users/alexjg",
        "contributions" : 23
      },
      {
        "login" : "SohumB",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/66472?v=4",
        "url" : "https://api.github.com/users/SohumB",
        "contributions" : 21
      },
      {
        "login" : "bobbyrauchenberg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5950396?v=4",
        "url" : "https://api.github.com/users/bobbyrauchenberg",
        "contributions" : 9
      },
      {
        "login" : "jeroentervoorde",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3625507?v=4",
        "url" : "https://api.github.com/users/jeroentervoorde",
        "contributions" : 6
      },
      {
        "login" : "whazenberg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3426800?v=4",
        "url" : "https://api.github.com/users/whazenberg",
        "contributions" : 5
      },
      {
        "login" : "tmnd1991",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7031242?v=4",
        "url" : "https://api.github.com/users/tmnd1991",
        "contributions" : 4
      },
      {
        "login" : "felixmulder",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1530049?v=4",
        "url" : "https://api.github.com/users/felixmulder",
        "contributions" : 4
      },
      {
        "login" : "francisdb",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161305?v=4",
        "url" : "https://api.github.com/users/francisdb",
        "contributions" : 4
      },
      {
        "login" : "olib963",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/32272028?v=4",
        "url" : "https://api.github.com/users/olib963",
        "contributions" : 4
      },
      {
        "login" : "peterneyens",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6407606?v=4",
        "url" : "https://api.github.com/users/peterneyens",
        "contributions" : 4
      },
      {
        "login" : "newta",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/880343?v=4",
        "url" : "https://api.github.com/users/newta",
        "contributions" : 4
      },
      {
        "login" : "lacarvalho91",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6567012?v=4",
        "url" : "https://api.github.com/users/lacarvalho91",
        "contributions" : 4
      },
      {
        "login" : "adrian-salajan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1502731?v=4",
        "url" : "https://api.github.com/users/adrian-salajan",
        "contributions" : 3
      },
      {
        "login" : "jtvoorde",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2729154?v=4",
        "url" : "https://api.github.com/users/jtvoorde",
        "contributions" : 3
      },
      {
        "login" : "sirocchj",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/601807?v=4",
        "url" : "https://api.github.com/users/sirocchj",
        "contributions" : 3
      },
      {
        "login" : "l-cdc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5247296?v=4",
        "url" : "https://api.github.com/users/l-cdc",
        "contributions" : 3
      },
      {
        "login" : "krzemin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2477704?v=4",
        "url" : "https://api.github.com/users/krzemin",
        "contributions" : 3
      },
      {
        "login" : "rbnks",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/877649?v=4",
        "url" : "https://api.github.com/users/rbnks",
        "contributions" : 3
      },
      {
        "login" : "Zhen-hao",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10957195?v=4",
        "url" : "https://api.github.com/users/Zhen-hao",
        "contributions" : 3
      },
      {
        "login" : "WesselVS",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5698918?v=4",
        "url" : "https://api.github.com/users/WesselVS",
        "contributions" : 3
      },
      {
        "login" : "Antwnis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3376244?v=4",
        "url" : "https://api.github.com/users/Antwnis",
        "contributions" : 2
      },
      {
        "login" : "blbradley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1435085?v=4",
        "url" : "https://api.github.com/users/blbradley",
        "contributions" : 2
      },
      {
        "login" : "cb372",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/106760?v=4",
        "url" : "https://api.github.com/users/cb372",
        "contributions" : 2
      },
      {
        "login" : "davideicardi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/852570?v=4",
        "url" : "https://api.github.com/users/davideicardi",
        "contributions" : 2
      },
      {
        "login" : "garyfrost",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3737106?v=4",
        "url" : "https://api.github.com/users/garyfrost",
        "contributions" : 2
      },
      {
        "login" : "ilya-epifanov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/92526?v=4",
        "url" : "https://api.github.com/users/ilya-epifanov",
        "contributions" : 2
      },
      {
        "login" : "JesusMtnez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8639179?v=4",
        "url" : "https://api.github.com/users/JesusMtnez",
        "contributions" : 2
      },
      {
        "login" : "joan38",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1200478?v=4",
        "url" : "https://api.github.com/users/joan38",
        "contributions" : 2
      },
      {
        "login" : "kraigmckernan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22225188?v=4",
        "url" : "https://api.github.com/users/kraigmckernan",
        "contributions" : 2
      },
      {
        "login" : "2chilled",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1238350?v=4",
        "url" : "https://api.github.com/users/2chilled",
        "contributions" : 2
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://api.github.com/users/SethTisue",
        "contributions" : 2
      },
      {
        "login" : "dylanwilder",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6611285?v=4",
        "url" : "https://api.github.com/users/dylanwilder",
        "contributions" : 2
      },
      {
        "login" : "piotr-kalanski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/20873358?v=4",
        "url" : "https://api.github.com/users/piotr-kalanski",
        "contributions" : 2
      },
      {
        "login" : "mberndt123",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11650737?v=4",
        "url" : "https://api.github.com/users/mberndt123",
        "contributions" : 2
      },
      {
        "login" : "r-glyde",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/41615291?v=4",
        "url" : "https://api.github.com/users/r-glyde",
        "contributions" : 2
      },
      {
        "login" : "romanskie",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5699795?v=4",
        "url" : "https://api.github.com/users/romanskie",
        "contributions" : 2
      },
      {
        "login" : "stheppi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2507367?v=4",
        "url" : "https://api.github.com/users/stheppi",
        "contributions" : 2
      },
      {
        "login" : "zeal18",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/432165?v=4",
        "url" : "https://api.github.com/users/zeal18",
        "contributions" : 1
      },
      {
        "login" : "alexlomov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1959073?v=4",
        "url" : "https://api.github.com/users/alexlomov",
        "contributions" : 1
      },
      {
        "login" : "vilinski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/259479?v=4",
        "url" : "https://api.github.com/users/vilinski",
        "contributions" : 1
      },
      {
        "login" : "ChengGit",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7797945?v=4",
        "url" : "https://api.github.com/users/ChengGit",
        "contributions" : 1
      },
      {
        "login" : "danielskyfiitesting",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10367481?v=4",
        "url" : "https://api.github.com/users/danielskyfiitesting",
        "contributions" : 1
      },
      {
        "login" : "larochef",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1265730?v=4",
        "url" : "https://api.github.com/users/larochef",
        "contributions" : 1
      },
      {
        "login" : "ivan-klass",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2673108?v=4",
        "url" : "https://api.github.com/users/ivan-klass",
        "contributions" : 1
      },
      {
        "login" : "ikryvorotenko",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4487441?v=4",
        "url" : "https://api.github.com/users/ikryvorotenko",
        "contributions" : 1
      },
      {
        "login" : "zkay",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5808881?v=4",
        "url" : "https://api.github.com/users/zkay",
        "contributions" : 1
      },
      {
        "login" : "leosilvadev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5465808?v=4",
        "url" : "https://api.github.com/users/leosilvadev",
        "contributions" : 1
      },
      {
        "login" : "markschaake",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/181607?v=4",
        "url" : "https://api.github.com/users/markschaake",
        "contributions" : 1
      },
      {
        "login" : "nightscape",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/35170?v=4",
        "url" : "https://api.github.com/users/nightscape",
        "contributions" : 1
      },
      {
        "login" : "MateuszKubuszok",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1900121?v=4",
        "url" : "https://api.github.com/users/MateuszKubuszok",
        "contributions" : 1
      },
      {
        "login" : "mgenereu",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/21925?v=4",
        "url" : "https://api.github.com/users/mgenereu",
        "contributions" : 1
      },
      {
        "login" : "nadavwr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/52190?v=4",
        "url" : "https://api.github.com/users/nadavwr",
        "contributions" : 1
      },
      {
        "login" : "nryanov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19765449?v=4",
        "url" : "https://api.github.com/users/nryanov",
        "contributions" : 1
      },
      {
        "login" : "odubynskiy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/52788609?v=4",
        "url" : "https://api.github.com/users/odubynskiy",
        "contributions" : 1
      },
      {
        "login" : "oleastre",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/838332?v=4",
        "url" : "https://api.github.com/users/oleastre",
        "contributions" : 1
      },
      {
        "login" : "philip-ovo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/38861147?v=4",
        "url" : "https://api.github.com/users/philip-ovo",
        "contributions" : 1
      },
      {
        "login" : "ryanb93",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/554543?v=4",
        "url" : "https://api.github.com/users/ryanb93",
        "contributions" : 1
      },
      {
        "login" : "ryanworsley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19852717?v=4",
        "url" : "https://api.github.com/users/ryanworsley",
        "contributions" : 1
      },
      {
        "login" : "sebastian-ziegler",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5669212?v=4",
        "url" : "https://api.github.com/users/sebastian-ziegler",
        "contributions" : 1
      },
      {
        "login" : "simonsouter",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6554849?v=4",
        "url" : "https://api.github.com/users/simonsouter",
        "contributions" : 1
      },
      {
        "login" : "savulchik",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/187893?v=4",
        "url" : "https://api.github.com/users/savulchik",
        "contributions" : 1
      },
      {
        "login" : "p4085f9",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/59866257?v=4",
        "url" : "https://api.github.com/users/p4085f9",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://api.github.com/users/gitter-badger",
        "contributions" : 1
      },
      {
        "login" : "yatsvic",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/48240234?v=4",
        "url" : "https://api.github.com/users/yatsvic",
        "contributions" : 1
      },
      {
        "login" : "wzorgdrager",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2283622?v=4",
        "url" : "https://api.github.com/users/wzorgdrager",
        "contributions" : 1
      },
      {
        "login" : "YuvalItzchakov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3448320?v=4",
        "url" : "https://api.github.com/users/YuvalItzchakov",
        "contributions" : 1
      },
      {
        "login" : "antonyshchenko",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/443906?v=4",
        "url" : "https://api.github.com/users/antonyshchenko",
        "contributions" : 1
      },
      {
        "login" : "lvitaly",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/792792?v=4",
        "url" : "https://api.github.com/users/lvitaly",
        "contributions" : 1
      },
      {
        "login" : "pwliwanow",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7759586?v=4",
        "url" : "https://api.github.com/users/pwliwanow",
        "contributions" : 1
      },
      {
        "login" : "pjan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/98241?v=4",
        "url" : "https://api.github.com/users/pjan",
        "contributions" : 1
      },
      {
        "login" : "qbahers",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2604968?v=4",
        "url" : "https://api.github.com/users/qbahers",
        "contributions" : 1
      },
      {
        "login" : "zzeekk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13715754?v=4",
        "url" : "https://api.github.com/users/zzeekk",
        "contributions" : 1
      }
    ],
    "commits" : 1439,
    "topics" : [
      "scala-macros",
      "schema-generation",
      "coproduct",
      "serialization",
      "avro",
      "avro-schema",
      "scala"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : "https://gitter.im/sksamuel/avro4s",
    "openIssues" : [
      {
        "number" : 698,
        "title" : "Avro4s version 5.0.0.M1 cannot reduce summon from with pattern",
        "url" : "https://github.com/sksamuel/avro4s/issues/698"
      },
      {
        "number" : 696,
        "title" : "@AvroTransient breaks deserialization",
        "url" : "https://github.com/sksamuel/avro4s/issues/696"
      },
      {
        "number" : 689,
        "title" : "UnresolvedUnionException: Not in union error ",
        "url" : "https://github.com/sksamuel/avro4s/issues/689"
      },
      {
        "number" : 688,
        "title" : "Dependency small security issue",
        "url" : "https://github.com/sksamuel/avro4s/issues/688"
      },
      {
        "number" : 686,
        "title" : "Scale and precision of Decimal fields are not taken from original schema",
        "url" : "https://github.com/sksamuel/avro4s/issues/686"
      },
      {
        "number" : 657,
        "title" : "Remove auto-derivation enabled by default",
        "url" : "https://github.com/sksamuel/avro4s/issues/657"
      },
      {
        "number" : 654,
        "title" : "Unable to decode BigDecimal via ByteBuffer",
        "url" : "https://github.com/sksamuel/avro4s/issues/654"
      },
      {
        "number" : 634,
        "title" : "Schema generation: How to make all complex types (records) as top level types?",
        "url" : "https://github.com/sksamuel/avro4s/issues/634"
      },
      {
        "number" : 621,
        "title" : "Spark 3.x compatibility",
        "url" : "https://github.com/sksamuel/avro4s/issues/621"
      },
      {
        "number" : 607,
        "title" : "Annotation to drive references to records",
        "url" : "https://github.com/sksamuel/avro4s/issues/607"
      },
      {
        "number" : 528,
        "title" : "Ability to specify defaults by an annotation",
        "url" : "https://github.com/sksamuel/avro4s/issues/528"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "serialization",
    "beginnerIssuesLabel" : null
  }
}