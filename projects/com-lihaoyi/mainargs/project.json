{
  "organization" : "com-lihaoyi",
  "repository" : "mainargs",
  "creationDate" : 1606021617000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1723555004600
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "A small, convenient, dependency-free library for command-line argument parsing in Scala",
    "logo" : "https://avatars.githubusercontent.com/u/79346799?v=4",
    "stars" : 179,
    "forks" : 20,
    "watchers" : 7,
    "issues" : 20,
    "creationDate" : 1605344448000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"readme.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">mainargs 0.7.1</h1><a id=\"user-content-mainargs-071\" class=\"anchor\" aria-label=\"Permalink: mainargs 0.7.1\" href=\"#mainargs-071\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">MainArgs is a small, dependency-free library for command line argument parsing\nin Scala.</p>\n<p dir=\"auto\">MainArgs is used for command-line parsing of the\n<a href=\"http://ammonite.io/\" rel=\"nofollow\">Ammonite Scala REPL</a> and for user-defined <code>@main</code> methods\nin its scripts, as well as for command-line parsing for the\n<a href=\"https://github.com/lihaoyi/mill\">Mill Build Tool</a> and for user-defined\n<code>T.command</code>s.</p>\n<ul dir=\"auto\">\n<li><a href=\"#mainargs\">mainargs</a></li>\n<li><a href=\"#usage\">Usage</a>\n<ul dir=\"auto\">\n<li><a href=\"#parsing-main-method-parameters\">Parsing Main Method Parameters</a>\n<ul dir=\"auto\">\n<li><a href=\"#runorexit\">runOrExit</a></li>\n<li><a href=\"#runorthrow\">runOrThrow</a></li>\n<li><a href=\"#runeither\">runEither</a></li>\n<li><a href=\"#runraw\">runRaw</a></li>\n</ul>\n</li>\n<li><a href=\"#multiple-main-methods\">Multiple Main Methods</a></li>\n<li><a href=\"#parsing-case-class-parameters\">Parsing Case Class Parameters</a></li>\n<li><a href=\"#re-using-argument-sets\">Re-using Argument Sets</a></li>\n<li><a href=\"#option-or-sequence-parameters\">Option or Sequence parameters</a></li>\n<li><a href=\"#short-arguments\">Short Arguments</a></li>\n<li><a href=\"#annotations\">Annotations</a>\n<ul dir=\"auto\">\n<li><a href=\"#main\">@main</a></li>\n<li><a href=\"#arg\">@arg</a></li>\n</ul>\n</li>\n<li><a href=\"#customization\">Customization</a></li>\n<li><a href=\"#custom-argument-parsers\">Custom Argument Parsers</a></li>\n<li><a href=\"#handlings-leftover-arguments\">Handlings Leftover Arguments</a>\n<ul dir=\"auto\">\n<li><a href=\"#varargs-parameters\">Varargs Parameters</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#prior-art\">Prior Art</a>\n<ul dir=\"auto\">\n<li><a href=\"#ammonite--mill\">Ammonite &amp; Mill</a></li>\n<li><a href=\"#case-app\">Case App</a></li>\n<li><a href=\"#scopt\">Scopt</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\">Changelog</a></li>\n<li><a href=\"https://javadoc.io/doc/com.lihaoyi/mainargs_2.13/latest/mainargs/index.html\" rel=\"nofollow\">Scaladoc</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">Usage</h1><a id=\"user-content-usage\" class=\"anchor\" aria-label=\"Permalink: Usage\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"ivy&quot;com.lihaoyi::mainargs:0.7.1&quot;\"><pre><span class=\"pl-k\">ivy</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">com.lihaoyi::mainargs:0.7.1</span><span class=\"pl-s\">\"</span></pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Parsing Main Method Parameters</h2><a id=\"user-content-parsing-main-method-parameters\" class=\"anchor\" aria-label=\"Permalink: Parsing Main Method Parameters\" href=\"#parsing-main-method-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">You can parse command line arguments and use them to call a main method via\n<code>ParserForMethods(...)</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testhello\nimport mainargs.{main, arg, ParserForMethods, Flag}\n\nobject Main{\n  @main\n  def run(@arg(short = 'f', doc = &quot;String to print repeatedly&quot;)\n          foo: String,\n          @arg(doc = &quot;How many times to print string&quot;)\n          myNum: Int = 2,\n          @arg(doc = &quot;Example flag, can be passed without any value to become true&quot;)\n          bool: Flag) = {\n    println(foo * myNum + &quot; &quot; + bool.value)\n  }\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testhello</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>, <span class=\"pl-en\">Flag</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-k\">@</span>arg(short <span class=\"pl-k\">=</span> <span class=\"pl-s\">'f'</span>, doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>String to print repeatedly<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n          <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>How many times to print string<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n          <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example flag, can be passed without any value to become true<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">bool</span>: <span class=\"pl-en\">Flag</span>) <span class=\"pl-k\">=</span> {\n    println(foo <span class=\"pl-k\">*</span> myNum <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> bool.value)\n  }\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.hello -f hello # short name\nhellohello false\n\n$ ./mill example.hello --foo hello # long name\nhellohello false\n\n$ ./mill example.hello --foo=hello # gflags-style\nhellohello false\n\n$ ./mill example.hello --foo &quot;&quot; # set to empty value\n false\n\n$ ./mill example.hello --foo= # gflags-style empty value\n false\n\n$ ./mill example.hello -f x --my-num 3 # camelCase automatically converted to kebab-case\nxxx false\n\n$ ./mill example.hello -f hello --my-num 3 --bool # flags\nhellohellohello true\n\n$ ./mill example.hello --wrong-flag\nMissing argument: --foo &lt;str&gt;\nUnknown argument: &quot;--wrong-flag&quot;\nExpected Signature: run\n  -f --foo &lt;str&gt;  String to print repeatedly\n  --my-num &lt;int&gt;  How many times to print string\n  --bool          Example flag\"><pre>$ ./mill example.hello -f hello <span class=\"pl-c\"><span class=\"pl-c\">#</span> short name</span>\nhellohello <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello --foo hello <span class=\"pl-c\"><span class=\"pl-c\">#</span> long name</span>\nhellohello <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello --foo=hello <span class=\"pl-c\"><span class=\"pl-c\">#</span> gflags-style</span>\nhellohello <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello --foo <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> set to empty value</span>\n <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello --foo= <span class=\"pl-c\"><span class=\"pl-c\">#</span> gflags-style empty value</span>\n <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello -f x --my-num 3 <span class=\"pl-c\"><span class=\"pl-c\">#</span> camelCase automatically converted to kebab-case</span>\nxxx <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello -f hello --my-num 3 --bool <span class=\"pl-c\"><span class=\"pl-c\">#</span> flags</span>\nhellohellohello <span class=\"pl-c1\">true</span>\n\n$ ./mill example.hello --wrong-flag\nMissing argument: --foo <span class=\"pl-k\">&lt;</span>str<span class=\"pl-k\">&gt;</span>\nUnknown argument: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>--wrong-flag<span class=\"pl-pds\">\"</span></span>\nExpected Signature: run\n  -f --foo <span class=\"pl-k\">&lt;</span>str<span class=\"pl-k\">&gt;</span>  String to print repeatedly\n  --my-num <span class=\"pl-k\">&lt;</span>int<span class=\"pl-k\">&gt;</span>  How many <span class=\"pl-c1\">times</span> to print string\n  --bool          Example flag</pre></div>\n<p dir=\"auto\">Setting default values for the method arguments makes them optional, with the\ndefault value being used if an explicit value was not passed in from the\ncommand-line arguments list.</p>\n<p dir=\"auto\">After calling <code>ParserForMethods(...)</code> on the <code>object</code> containing your <code>@main</code>\nmethods, you can call the following methods to perform the argument parsing and\ndispatch:</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">runOrExit</h3><a id=\"user-content-runorexit\" class=\"anchor\" aria-label=\"Permalink: runOrExit\" href=\"#runorexit\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Runs the given main method if argument parsing succeeds, otherwise prints out\nthe help text to standard error and calls <code>System.exit(1)</code> to exit the proess</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">runOrThrow</h3><a id=\"user-content-runorthrow\" class=\"anchor\" aria-label=\"Permalink: runOrThrow\" href=\"#runorthrow\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Runs the given main method if argument parsing succeeds, otherwise throws an\nexception with the help text</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">runEither</h3><a id=\"user-content-runeither\" class=\"anchor\" aria-label=\"Permalink: runEither\" href=\"#runeither\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Runs the given main method if argument parsing succeeds, returning <code>Right(v: Any)</code> containing the return value of the main method if it succeeds, or <code>Left(s: String)</code> containing the error message if it fails.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">runRaw</h3><a id=\"user-content-runraw\" class=\"anchor\" aria-label=\"Permalink: runRaw\" href=\"#runraw\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Runs the given main method if argument parsing succeeds, returning\n<code>mainargs.Result.Success(v: Any)</code> containing the return value of the main method\nif it succeeds, or <code>mainargs.Result.Error</code> if it fails. This gives you the\ngreatest flexibility to handle the error cases with custom logic, e.g. if you do\nnot like the default CLI error reporting and would like to write your own.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Multiple Main Methods</h2><a id=\"user-content-multiple-main-methods\" class=\"anchor\" aria-label=\"Permalink: Multiple Main Methods\" href=\"#multiple-main-methods\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Programs with multiple entrypoints are supported by annotating multiple <code>def</code>s\nwith <code>@main</code>. Each entrypoint can have their own set of arguments:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testhello2\nimport mainargs.{main, arg, ParserForMethods, Flag}\n\nobject Main{\n  @main\n  def foo(@arg(short = 'f', doc = &quot;String to print repeatedly&quot;)\n          foo: String,\n          @arg(doc = &quot;How many times to print string&quot;)\n          myNum: Int = 2,\n          @arg(doc = &quot;Example flag&quot;)\n          bool: Flag) = {\n    println(foo * myNum + &quot; &quot; + bool.value)\n  }\n  @main\n  def bar(i: Int,\n          @arg(doc = &quot;Pass in a custom `s` to override it&quot;)\n          s: String  = &quot;lols&quot;) = {\n    println(s * i)\n  }\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testhello2</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>, <span class=\"pl-en\">Flag</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-k\">@</span>arg(short <span class=\"pl-k\">=</span> <span class=\"pl-s\">'f'</span>, doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>String to print repeatedly<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n          <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>How many times to print string<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n          <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example flag<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">bool</span>: <span class=\"pl-en\">Flag</span>) <span class=\"pl-k\">=</span> {\n    println(foo <span class=\"pl-k\">*</span> myNum <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> bool.value)\n  }\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Int</span>,\n          <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Pass in a custom `s` to override it<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>  <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lols<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">=</span> {\n    println(s <span class=\"pl-k\">*</span> i)\n  }\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.hello2\nNeed to specify a sub command: foo, bar\n\n$ ./mill example.hello2 foo -f hello\nhellohello false\n\n$ ./mill example.hello2 bar -i 10\nlolslolslolslolslolslolslolslolslolslols\"><pre>$ ./mill example.hello2\nNeed to specify a sub command: foo, bar\n\n$ ./mill example.hello2 foo -f hello\nhellohello <span class=\"pl-c1\">false</span>\n\n$ ./mill example.hello2 bar -i 10\nlolslolslolslolslolslolslolslolslolslols</pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Parsing Case Class Parameters</h2><a id=\"user-content-parsing-case-class-parameters\" class=\"anchor\" aria-label=\"Permalink: Parsing Case Class Parameters\" href=\"#parsing-case-class-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">If you want to construct a configuration object instead of directly calling a\nmethod, you can do so via <code>ParserForClass[T]</code> and `constructOrExit:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testclass\nimport mainargs.{main, arg, ParserForClass, Flag}\n\nobject Main{\n  @main\n  case class Config(@arg(short = 'f', doc = &quot;String to print repeatedly&quot;)\n                    foo: String,\n                    @arg(doc = &quot;How many times to print string&quot;)\n                    myNum: Int = 2,\n                    @arg(doc = &quot;Example flag&quot;)\n                    bool: Flag)\n  def main(args: Array[String]): Unit = {\n    val config = ParserForClass[Config].constructOrExit(args)\n    println(config)\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testclass</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForClass</span>, <span class=\"pl-en\">Flag</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Config</span>(<span class=\"pl-k\">@</span>arg(short <span class=\"pl-k\">=</span> <span class=\"pl-s\">'f'</span>, doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>String to print repeatedly<span class=\"pl-pds\">\"</span></span>)\n                    <span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n                    <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>How many times to print string<span class=\"pl-pds\">\"</span></span>)\n                    <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n                    <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example flag<span class=\"pl-pds\">\"</span></span>)\n                    <span class=\"pl-v\">bool</span>: <span class=\"pl-en\">Flag</span>)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-v\">config</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForClass</span>[<span class=\"pl-en\">Config</span>].constructOrExit(args)\n    println(config)\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.caseclass --foo &quot;hello&quot;\nConfig(hello,2,Flag(false))\n\n$ ./mill example.caseclass\nMissing argument: --foo &lt;str&gt;\nExpected Signature: apply\n  -f --foo &lt;str&gt;  String to print repeatedly\n  --my-num &lt;int&gt;  How many times to print string\n  --bool          Example flag\"><pre>$ ./mill example.caseclass --foo <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>\nConfig(hello,2,Flag(false))\n\n$ ./mill example.caseclass\nMissing argument: --foo <span class=\"pl-k\">&lt;</span>str<span class=\"pl-k\">&gt;</span>\nExpected Signature: apply\n  -f --foo <span class=\"pl-k\">&lt;</span>str<span class=\"pl-k\">&gt;</span>  String to print repeatedly\n  --my-num <span class=\"pl-k\">&lt;</span>int<span class=\"pl-k\">&gt;</span>  How many <span class=\"pl-c1\">times</span> to print string\n  --bool          Example flag</pre></div>\n<p dir=\"auto\"><code>ParserForClass[T]</code> also provides corresponding <code>constructOrThrow</code>,\n<code>constructEither</code>, or <code>constructRaw</code> methods for you to handle the error cases\nin whichever style you prefer.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Re-using Argument Sets</h2><a id=\"user-content-re-using-argument-sets\" class=\"anchor\" aria-label=\"Permalink: Re-using Argument Sets\" href=\"#re-using-argument-sets\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">You can share arguments between different <code>@main</code> methods by defining them in a\n<code>@main case class</code> configuration object with an implicit <code>ParserForClass[T]</code>\ndefined:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testclassarg\nimport mainargs.{main, arg, ParserForMethods, ParserForClass, Flag}\n\nobject Main{\n  @main\n  case class Config(@arg(short = 'f', doc = &quot;String to print repeatedly&quot;)\n                    foo: String,\n                    @arg(doc = &quot;How many times to print string&quot;)\n                    myNum: Int = 2,\n                    @arg(doc = &quot;Example flag&quot;)\n                    bool: Flag)\n  implicit def configParser = ParserForClass[Config]\n\n  @main\n  def bar(config: Config,\n          @arg(name = &quot;extra-message&quot;)\n          extraMessage: String) = {\n    println(config.foo * config.myNum + &quot; &quot; + config.bool.value + &quot; &quot; + extraMessage)\n  }\n  @main\n  def qux(config: Config,\n          n: Int) = {\n    println((config.foo * config.myNum + &quot; &quot; + config.bool.value + &quot;\\n&quot;) * n)\n  }\n\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testclassarg</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>, <span class=\"pl-en\">ParserForClass</span>, <span class=\"pl-en\">Flag</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Config</span>(<span class=\"pl-k\">@</span>arg(short <span class=\"pl-k\">=</span> <span class=\"pl-s\">'f'</span>, doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>String to print repeatedly<span class=\"pl-pds\">\"</span></span>)\n                    <span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n                    <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>How many times to print string<span class=\"pl-pds\">\"</span></span>)\n                    <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n                    <span class=\"pl-k\">@</span>arg(doc <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example flag<span class=\"pl-pds\">\"</span></span>)\n                    <span class=\"pl-v\">bool</span>: <span class=\"pl-en\">Flag</span>)\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">configParser</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForClass</span>[<span class=\"pl-en\">Config</span>]\n\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-v\">config</span>: <span class=\"pl-en\">Config</span>,\n          <span class=\"pl-k\">@</span>arg(name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extra-message<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-v\">extraMessage</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> {\n    println(config.foo <span class=\"pl-k\">*</span> config.myNum <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> config.bool.value <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> extraMessage)\n  }\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">qux</span>(<span class=\"pl-v\">config</span>: <span class=\"pl-en\">Config</span>,\n          <span class=\"pl-v\">n</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=</span> {\n    println((config.foo <span class=\"pl-k\">*</span> config.myNum <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> config.bool.value <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">*</span> n)\n  }\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\n$ ./mill example.classarg bar --foo cow --extra-message &quot;hello world&quot;\ncowcow false hello world\n\n$ ./mill example.classarg qux --foo cow --n 5\ncowcow false\ncowcow false\ncowcow false\ncowcow false\ncowcow false\"><pre>$ ./mill example.classarg bar --foo cow --extra-message <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello world<span class=\"pl-pds\">\"</span></span>\ncowcow <span class=\"pl-c1\">false</span> hello world\n\n$ ./mill example.classarg qux --foo cow --n 5\ncowcow <span class=\"pl-c1\">false</span>\ncowcow <span class=\"pl-c1\">false</span>\ncowcow <span class=\"pl-c1\">false</span>\ncowcow <span class=\"pl-c1\">false</span>\ncowcow <span class=\"pl-c1\">false</span></pre></div>\n<p dir=\"auto\">This allows you to re-use common command-line parsing configuration without\nneeding to duplicate it in every <code>@main</code> method in which it is needed. A <code>@main def</code> can make use of multiple <code>@main case class</code>es, and <code>@main case class</code>es can\nbe nested arbitrarily deeply.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Option or Sequence parameters</h2><a id=\"user-content-option-or-sequence-parameters\" class=\"anchor\" aria-label=\"Permalink: Option or Sequence parameters\" href=\"#option-or-sequence-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>@main</code> method parameters can be <code>Option[T]</code> or <code>Seq[T]</code> types, representing\noptional parameters without defaults or repeatable parameters</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testoptseq\nimport mainargs.{main, arg, ParserForMethods}\n\nobject Main{\n  @main\n  def runOpt(opt: Option[Int]) = println(opt)\n\n  @main\n  def runSeq(seq: Seq[Int]) = println(seq)\n\n  @main\n  def runVec(seq: Vector[Int]) = println(seq)\n\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testoptseq</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">runOpt</span>(<span class=\"pl-v\">opt</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span> println(opt)\n\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">runSeq</span>(<span class=\"pl-v\">seq</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span> println(seq)\n\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">runVec</span>(<span class=\"pl-v\">seq</span>: <span class=\"pl-en\">Vector</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span> println(seq)\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.optseq runOpt\nNone\n\n$ ./mill example.optseq runOpt --opt 123\nSome(123)\n\n$ ./mill example.optseq runSeq --seq 123 --seq 456 --seq 789\nList(123, 456, 789)\"><pre>$ ./mill example.optseq runOpt\nNone\n\n$ ./mill example.optseq runOpt --opt 123\nSome(123)\n\n$ ./mill example.optseq runSeq --seq 123 --seq 456 --seq 789\nList(123, 456, 789)</pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Short Arguments</h2><a id=\"user-content-short-arguments\" class=\"anchor\" aria-label=\"Permalink: Short Arguments\" href=\"#short-arguments\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>@main</code> method arguments that have single-character names are automatically converted\nto short arguments, invoked with a single <code>-</code> instead of double <code>--</code>. The short version\nof an argument can also be given explicitly via the <code>@arg(short = '...')</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"object Base {\n  @main\n  def bools(a: Flag, b: Boolean = false) = println(Seq(a.value, b, c.value))\n  \n  @main\n  def strs(a: Flag, b: String) = println(Seq(a.value, b))\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Base</span> {\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">bools</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">Flag</span>, <span class=\"pl-v\">b</span>: <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>) <span class=\"pl-k\">=</span> println(<span class=\"pl-en\">Seq</span>(a.value, b, c.value))\n  \n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">strs</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">Flag</span>, <span class=\"pl-v\">b</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> println(<span class=\"pl-en\">Seq</span>(a.value, b))\n}</pre></div>\n<p dir=\"auto\">These can be invoked as normal, for <code>Flag</code>s like <code>-a</code> or normal arguments that take\na value like <code>-b</code> below:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short bools -a\nSeq(true, false)\n\n$ ./mill example.short bools -b true\nSeq(false, true)\"><pre>$ ./mill example.short bools -a\nSeq(true, false)\n\n$ ./mill example.short bools -b <span class=\"pl-c1\">true</span>\nSeq(false, true)</pre></div>\n<p dir=\"auto\">Multiple short arguments can be combined into one <code>-ab</code> call:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short bools -ab true\nSeq(true, true)\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short bools <span class=\"pl-k\">-</span>ab <span class=\"pl-c1\">true</span>\n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, <span class=\"pl-c1\">true</span>)</pre></div>\n<p dir=\"auto\">Short arguments can be combined with their value:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short bools -btrue\nSeq(false, true)\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short bools <span class=\"pl-k\">-</span>btrue\n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">true</span>)</pre></div>\n<p dir=\"auto\">And you can combine both multiple short arguments as well as the resulting value:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short bools -abtrue\nSeq(true, true)\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short bools <span class=\"pl-k\">-</span>abtrue\n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, <span class=\"pl-c1\">true</span>)</pre></div>\n<p dir=\"auto\">Note that when multiple short arguments are combined, whether via <code>-ab true</code> or via <code>-abtrue</code>,\nonly the last short argument (in this case <code>b</code>) can take a value.</p>\n<p dir=\"auto\">If an <code>=</code> is present in the short argument group after the first character, the short\nargument group is treated as a key-value pair with the remaining characters after the <code>=</code>\npassed as the value to the first short argument:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short strs -b=value \nSeq(false, value)\n\n$ ./mill example.short strs -a -b=value \nSeq(true, value)\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short strs <span class=\"pl-k\">-</span>b<span class=\"pl-k\">=</span>value \n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">false</span>, value)\n\n$ .<span class=\"pl-k\">/</span>mill example.short strs <span class=\"pl-k\">-</span>a <span class=\"pl-k\">-</span>b<span class=\"pl-k\">=</span>value \n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, value)</pre></div>\n<p dir=\"auto\">You can use <code>-b=</code> as a shorthand to set the value of <code>b</code> to an empty string:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short strs -a -b= \nSeq(true, )\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short strs <span class=\"pl-k\">-</span>a <span class=\"pl-k\">-</span>b<span class=\"pl-k\">=</span> \n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, )</pre></div>\n<p dir=\"auto\">If an <code>=</code> is present in the short argument group after subsequent character, all characters\nexcept the first are passed to the first short argument. This can be useful for concisely\npassing key-value pairs to a short argument:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short strs -a -bkey=value \nSeq(true, key=value)\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short strs <span class=\"pl-k\">-</span>a <span class=\"pl-k\">-</span>bkey<span class=\"pl-k\">=</span>value \n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, key<span class=\"pl-k\">=</span>value)</pre></div>\n<p dir=\"auto\">These can also be combined into a single token, with the first non-<code>Flag</code> short argument in the\ntoken consuming the subsequent characters as a string (unless the subsequent characters start with\nan <code>=</code>, which is skipped):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.short strs -ab=value\nSeq(true, value)\n\n$ ./mill example.short strs -abkey=value \nSeq(true, key=value)\"><pre>$ .<span class=\"pl-k\">/</span>mill example.short strs <span class=\"pl-k\">-</span>ab<span class=\"pl-k\">=</span>value\n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, value)\n\n$ .<span class=\"pl-k\">/</span>mill example.short strs <span class=\"pl-k\">-</span>abkey<span class=\"pl-k\">=</span>value \n<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">true</span>, key<span class=\"pl-k\">=</span>value)</pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Annotations</h2><a id=\"user-content-annotations\" class=\"anchor\" aria-label=\"Permalink: Annotations\" href=\"#annotations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">The library's annotations and methods support the following parameters to\ncustomize your usage:</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">@main</h3><a id=\"user-content-main\" class=\"anchor\" aria-label=\"Permalink: @main\" href=\"#main\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code>name: String</code>: lets you specify the top-level name of <code>@main</code> method you are\ndefining. If multiple <code>@main</code> methods are provided, this name controls the\nsub-command name in the CLI. If an explicit <code>name</code> not passed, both the\n(typically) <code>camelCase</code> name of the Scala <code>def</code> as well as its <code>kebab-case</code>\nequivalents will be accepted</p>\n</li>\n<li>\n<p dir=\"auto\"><code>doc: String</code>: a documentation string used to provide additional information\nabout the command. Normally printed below the command name in the help message</p>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">@arg</h3><a id=\"user-content-arg\" class=\"anchor\" aria-label=\"Permalink: @arg\" href=\"#arg\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code>name: String</code>: lets you specify the long name of a CLI parameter, e.g.\n<code>--foo</code>. If an explicit <code>name</code> not passed, both the (typically) <code>camelCase</code>\nname of the Scala method parameter as well as its <code>kebab-case</code>\nequivalents will be accepted</p>\n</li>\n<li>\n<p dir=\"auto\"><code>short: Char</code>: lets you specify the short name of a CLI parameter, e.g. <code>-f</code>.\nIf not given, the argument can only be provided via its long name</p>\n</li>\n<li>\n<p dir=\"auto\"><code>doc: String</code>: a documentation string used to provide additional information\nabout the command</p>\n</li>\n<li>\n<p dir=\"auto\"><code>hidden: Boolean</code>: if <code>true</code> this arg will not be included in the rendered help text.</p>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Customization</h2><a id=\"user-content-customization\" class=\"anchor\" aria-label=\"Permalink: Customization\" href=\"#customization\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Apart from taking the name of the main <code>object</code> or config <code>case class</code>,\n<code>ParserForMethods</code> and <code>ParserForClass</code> both have methods that support a number\nof useful configuration values:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code>allowPositional: Boolean</code>: allows you to pass CLI arguments \"positionally\"\nwithout the <code>--name</code> of the parameter being provided, e.g. <code>./mill example.hello -f hello --my-num 3 --bool</code> could be called via <code>./mill example.hello hello 3 --bool</code>. Defaults to <code>false</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>allowRepeats: Boolean</code>: allows you to pass in a flag multiple times, and\nusing the last provided value rather than raising an error. Defaults to\n<code>false</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>totalWidth: Int</code>: how wide to re-format the <code>doc</code> strings to when printing\nthe help text. Defaults to <code>100</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>printHelpOnExit: Boolean</code>: whether or not to print the full help text when\nargument parsing fails. This can be convenient, but potentially very verbose\nif the list of arguments is long. Defaults to <code>true</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>docsOnNewLine: Boolean</code>: whether to print argument doc-strings on a new line\nbelow the name of the argument; this may make things easier to read, but at a\ncost of taking up much more vertical space. Defaults to <code>false</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>autoprintHelpAndExit: Option[(Int, PrintStream)]</code>: whether to detect <code>--help</code>\nbeing passed in automatically, and if so where to print the help message and\nwhat exit code to exit the process with. Defaults t, <code>Some((0, System.out))</code>,\nbut can be disabled by passing in <code>None</code> if you want to handle help text\nmanually (e.g. by calling <code>.helpText</code> on the parser object)</p>\n</li>\n<li>\n<p dir=\"auto\"><code>customName</code>/<code>customNames</code> and <code>customDoc</code>/<code>customDocs</code>: allows you to\noverride the main method names and documentation strings at runtime. This\nallows you to work around limitations in the use of the <code>@main(name = \"...\", doc = \"...\")</code> annotation that only allows simple static strings.</p>\n</li>\n<li>\n<p dir=\"auto\"><code>sorted: Boolean</code>: whether to sort the arguments alphabetically in the help text. Defaults to <code>true</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>nameMapper: String =&gt; Option[String]</code>: how Scala <code>camelCase</code> names are mapping\nto CLI command and flag names. Defaults to translation to <code>kebab-case</code>, but\nyou can pass in <code>mainargs.Util.snakeCaseNameMapper</code> for <code>snake_case</code> CLI names\nor <code>mainargs.Util.nullNameMapper</code> to disable mapping.</p>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Custom Argument Parsers</h2><a id=\"user-content-custom-argument-parsers\" class=\"anchor\" aria-label=\"Permalink: Custom Argument Parsers\" href=\"#custom-argument-parsers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">If you want to parse arguments into types that are not provided by the library,\nyou can do so by defining an implicit <code>TokensReader[T]</code> for that type:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testcustom\nimport mainargs.{main, arg, ParserForMethods, TokensReader}\n\nobject Main{\n  implicit object PathRead extends TokensReader.Simple[os.Path]{\n    def shortName = &quot;path&quot;\n    def read(strs: Seq[String]) = Right(os.Path(strs.head, os.pwd))\n  }\n\n  @main\n  def run(from: os.Path, to: os.Path) = {\n    println(&quot;from: &quot; + from)\n    println(&quot;to:   &quot; + to)\n  }\n\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testcustom</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>, <span class=\"pl-en\">TokensReader</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">PathRead</span> <span class=\"pl-k\">extends</span> <span class=\"pl-en\">TokensReader</span>.<span class=\"pl-en\">Simple</span>[os.<span class=\"pl-en\">Path</span>]{\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">shortName</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">read</span>(<span class=\"pl-v\">strs</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">String</span>]) <span class=\"pl-k\">=</span> <span class=\"pl-en\">Right</span>(os.<span class=\"pl-en\">Path</span>(strs.head, os.pwd))\n  }\n\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-v\">from</span>: os.<span class=\"pl-en\">Path</span>, <span class=\"pl-v\">to</span>: os.<span class=\"pl-en\">Path</span>) <span class=\"pl-k\">=</span> {\n    println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>from: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> from)\n    println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>to:   <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> to)\n  }\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.custom --from mainargs --to out\nfrom: /Users/lihaoyi/Github/mainargs/mainargs\nto:   /Users/lihaoyi/Github/mainargs/out\"><pre>$ ./mill example.custom --from mainargs --to out\nfrom: /Users/lihaoyi/Github/mainargs/mainargs\nto:   /Users/lihaoyi/Github/mainargs/out</pre></div>\n<p dir=\"auto\">In this example, we define an implicit <code>PathRead</code> to teach MainArgs how to parse\n<code>os.Path</code>s from the <a href=\"https://github.com/lihaoyi/os-lib\">OS-Lib</a> library.</p>\n<p dir=\"auto\">Note that <code>read</code> takes all tokens that were passed to a particular parameter.\nNormally this is a <code>Seq</code> of length <code>1</code>, but if <code>allowEmpty</code> is <code>true</code> it could\nbe an empty <code>Seq</code>, and if <code>alwaysRepeatable</code> is <code>true</code> then it could be\narbitrarily long.</p>\n<p dir=\"auto\">You can see the Scaladoc for <code>TokenReaders.Simple</code> for other things you can override:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://javadoc.io/doc/com.lihaoyi/mainargs_2.13/latest/mainargs/TokensReader$$Simple.html\" rel=\"nofollow\">mainargs.TokenReaders.Simple</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Handlings Leftover Arguments</h2><a id=\"user-content-handlings-leftover-arguments\" class=\"anchor\" aria-label=\"Permalink: Handlings Leftover Arguments\" href=\"#handlings-leftover-arguments\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">You can use the special <code>Leftover[T]</code> type to store any tokens that are\nnot consumed by other parsers:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testvararg\nimport mainargs.{main, arg, ParserForMethods, Leftover}\n\nobject Main{\n  @main\n  def run(foo: String,\n          myNum: Int = 2,\n          rest: Leftover[String]) = {\n    println(foo * myNum + &quot; &quot; + rest.value)\n  }\n\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testvararg</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>, <span class=\"pl-en\">Leftover</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n          <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n          <span class=\"pl-v\">rest</span>: <span class=\"pl-en\">Leftover</span>[<span class=\"pl-en\">String</span>]) <span class=\"pl-k\">=</span> {\n    println(foo <span class=\"pl-k\">*</span> myNum <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> rest.value)\n  }\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.vararg --foo bar i am cow\nbarbar List(i, am, cow)\"><pre>$ ./mill example.vararg --foo bar i am cow\nbarbar List(i, am, cow)</pre></div>\n<p dir=\"auto\">This also works with <code>ParserForClass</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testvararg2\nimport mainargs.{main, arg, ParserForClass, Leftover}\n\nobject Main{\n  @main\n  case class Config(foo: String,\n                    myNum: Int = 2,\n                    rest: Leftover[String])\n\n  def main(args: Array[String]): Unit = {\n    val config = ParserForClass[Config].constructOrExit(args)\n    println(config)\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testvararg2</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForClass</span>, <span class=\"pl-en\">Leftover</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Config</span>(<span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n                    <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n                    <span class=\"pl-v\">rest</span>: <span class=\"pl-en\">Leftover</span>[<span class=\"pl-en\">String</span>])\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-v\">config</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForClass</span>[<span class=\"pl-en\">Config</span>].constructOrExit(args)\n    println(config)\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./mill example.vararg2 --foo bar i am cow\nConfig(bar,2,Leftover(List(i, am, cow)))\"><pre>$ ./mill example.vararg2 --foo bar i am cow\nConfig(bar,2,Leftover(List(i, am, cow)))</pre></div>\n<p dir=\"auto\">You can also pass in a different type to <code>Leftover</code>, e.g. <code>Leftover[Int]</code> or\n<code>Leftover[Boolean]</code>, if you want to specify that leftover tokens all parse to a\nparticular type. Any tokens that do not conform to that type will result in an\nargument parsing error.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Varargs Parameters</h3><a id=\"user-content-varargs-parameters\" class=\"anchor\" aria-label=\"Permalink: Varargs Parameters\" href=\"#varargs-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">You can also use <code>*</code> \"varargs\" to define a parameter that takes in the remainder\nof the tokens passed to the CLI:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package testvararg\nimport mainargs.{main, arg, ParserForMethods, Leftover}\n\nobject Main{\n  @main\n  def run(foo: String,\n          myNum: Int,\n          rest: String*) = {\n    println(foo * myNum + &quot; &quot; + rest.value)\n  }\n\n  def main(args: Array[String]): Unit = ParserForMethods(this).runOrExit(args)\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">testvararg</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">mainargs</span>.{<span class=\"pl-en\">main</span>, <span class=\"pl-en\">arg</span>, <span class=\"pl-en\">ParserForMethods</span>, <span class=\"pl-en\">Leftover</span>}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span>{\n  <span class=\"pl-k\">@</span>main\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>,\n          <span class=\"pl-v\">myNum</span>: <span class=\"pl-en\">Int</span>,\n          <span class=\"pl-v\">rest</span>: <span class=\"pl-en\">String</span><span class=\"pl-k\">*</span>) <span class=\"pl-k\">=</span> {\n    println(foo <span class=\"pl-k\">*</span> myNum <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> rest.value)\n  }\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ParserForMethods</span>(<span class=\"pl-c1\">this</span>).runOrExit(args)\n}</pre></div>\n<p dir=\"auto\">Note that this has a limitation that you cannot then assign default values to\nthe other parameters of the function, and hence using <code>Leftover[T]</code> is\npreferable for those cases.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">Prior Art</h1><a id=\"user-content-prior-art\" class=\"anchor\" aria-label=\"Permalink: Prior Art\" href=\"#prior-art\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Ammonite &amp; Mill</h2><a id=\"user-content-ammonite--mill\" class=\"anchor\" aria-label=\"Permalink: Ammonite &amp; Mill\" href=\"#ammonite--mill\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">MainArgs grew out of the user-defined <code>@main</code> method feature supported by\nAmmonite Scala Scripts:</p>\n<ul dir=\"auto\">\n<li><a href=\"http://ammonite.io/#ScriptArguments\" rel=\"nofollow\">http://ammonite.io/#ScriptArguments</a></li>\n</ul>\n<p dir=\"auto\">This implementation was largely copy-pasted into the Mill build tool, to use for\nits user-defined <code>T.command</code>s. A parallel implementation was used to parse\ncommand-line parameters for Ammonite and Mill themselves.</p>\n<p dir=\"auto\">Now all four implementations have been unified in the MainArgs library, which\nboth Ammonite and Mill rely heavily upon. MainArgs also provides some additional\nfeatures, such as making it easy to define short versions of flags like <code>-c</code> via\nthe <code>short = '...'</code> parameter, or re-naming the command line flags via <code>name = \"...\"</code>.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Case App</h2><a id=\"user-content-case-app\" class=\"anchor\" aria-label=\"Permalink: Case App\" href=\"#case-app\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">MainArgs' support for parsing Scala <code>case class</code>es was inspired by Alex\nArchambault's <code>case-app</code> library:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/alexarchambault/case-app\">https://github.com/alexarchambault/case-app</a></li>\n</ul>\n<p dir=\"auto\">MainArgs has the following differentiators over <code>case-app</code>:</p>\n<ul dir=\"auto\">\n<li>Support for directly dispatching to <code>@main</code> method(s), rather than only\nparsing into <code>case class</code>es</li>\n<li>A dependency-free implementation, without pulling in the heavyweight Shapeless\nlibrary.</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Scopt</h2><a id=\"user-content-scopt\" class=\"anchor\" aria-label=\"Permalink: Scopt\" href=\"#scopt\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">MainArgs takes a lot of inspiration from the old Scala Scopt library:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/scopt/scopt\">https://github.com/scopt/scopt</a></li>\n</ul>\n<p dir=\"auto\">Unlike Scopt, MainArgs lets you call <code>@main</code> methods or instantiate <code>case class</code>es directly, without needing to separately define a <code>case class</code> and\nparser. This makes it usable with much less boilerplate than Scopt: a single\nmethod annotated with <code>@main</code> is all you need to turn your program into a\ncommand-line friendly tool.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">Changelog</h1><a id=\"user-content-changelog\" class=\"anchor\" aria-label=\"Permalink: Changelog\" href=\"#changelog\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.7.1</h2><a id=\"user-content-071\" class=\"anchor\" aria-label=\"Permalink: 0.7.1\" href=\"#071\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Fix detection of <code>@main</code> methods inherited from <code>trait</code>s in Scala 3.x <a href=\"https://github.com/com-lihaoyi/mainargs/pull/142\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/142/hovercard\">#142</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.7.0</h2><a id=\"user-content-070\" class=\"anchor\" aria-label=\"Permalink: 0.7.0\" href=\"#070\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Support for Scala-Native 0.5.0</li>\n<li>Minimum version of Scala 3.x raised to 3.3.1</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.6.3</h2><a id=\"user-content-063\" class=\"anchor\" aria-label=\"Permalink: 0.6.3\" href=\"#063\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Fix usage of <code>ParserForClass</code> for <code>case class</code>es with more than 22 parameters in Scala 2.x</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.6.2</h2><a id=\"user-content-062\" class=\"anchor\" aria-label=\"Permalink: 0.6.2\" href=\"#062\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Make combine short args that fail to parse go through normal leftover-token code paths\n<a href=\"https://github.com/com-lihaoyi/mainargs/pull/112\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/112/hovercard\">#112</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.6.1</h2><a id=\"user-content-061\" class=\"anchor\" aria-label=\"Permalink: 0.6.1\" href=\"#061\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Fix stackoverflow from incorrect binary compatibility shim\n<a href=\"https://github.com/com-lihaoyi/mainargs/pull/107\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/107/hovercard\">#107</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.6.0</h2><a id=\"user-content-060\" class=\"anchor\" aria-label=\"Permalink: 0.6.0\" href=\"#060\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Automatically map <code>camelCase</code> Scala method and argument names to <code>kebab-case</code>\nCLI commands and flag names, with configurability by passing in custom\n<code>nameMappers</code> <a href=\"https://github.com/com-lihaoyi/mainargs/pull/101\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/101/hovercard\">#101</a></p>\n</li>\n<li>\n<p dir=\"auto\">Allow short arguments and their values to be combined into a single token\n<a href=\"https://github.com/com-lihaoyi/mainargs/pull/102\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/102/hovercard\">#102</a></p>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.5.4</h2><a id=\"user-content-054\" class=\"anchor\" aria-label=\"Permalink: 0.5.4\" href=\"#054\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Remove unnecessary PPrint dependency</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.5.3</h2><a id=\"user-content-053\" class=\"anchor\" aria-label=\"Permalink: 0.5.3\" href=\"#053\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Support GFlags-style <code>--foo=bar</code> syntax <a href=\"https://github.com/com-lihaoyi/mainargs/pull/98\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/98/hovercard\">#98</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.5.1</h2><a id=\"user-content-051\" class=\"anchor\" aria-label=\"Permalink: 0.5.1\" href=\"#051\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Fix handling of case class main method parameter default parameters and\nannotations in Scala 3 <a href=\"https://github.com/com-lihaoyi/mainargs/pull/88\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/88/hovercard\">#88</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.5.0</h2><a id=\"user-content-050\" class=\"anchor\" aria-label=\"Permalink: 0.5.0\" href=\"#050\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Remove hard-code support for mainargs.Leftover/Flag/Subparser to support\nalternate implementations <a href=\"https://github.com/com-lihaoyi/mainargs/pull/62\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/62/hovercard\">#62</a>.\nNote that this is a binary-incompatible change, and any custom\n<code>mainargs.TokenReader</code>s you may implement will need to be updated to implement\nthe <code>mainargs.TokenReader.Simple</code> trait</p>\n</li>\n<li>\n<p dir=\"auto\">Fix argument parsing of flags in the presence of <code>allowPositional=true</code>\n<a href=\"https://github.com/com-lihaoyi/mainargs/pull/66\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/66/hovercard\">#66</a></p>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.4.0</h2><a id=\"user-content-040\" class=\"anchor\" aria-label=\"Permalink: 0.4.0\" href=\"#040\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Support sorting to args in help text and sort by default</li>\n<li>Various dependency updates</li>\n<li>This release is binary compatible with mainargs 0.3.0</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.3.0</h2><a id=\"user-content-030\" class=\"anchor\" aria-label=\"Permalink: 0.3.0\" href=\"#030\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Update all dependencies to latest</li>\n<li>Support for Scala Native on Scala 3</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.2.5</h2><a id=\"user-content-025\" class=\"anchor\" aria-label=\"Permalink: 0.2.5\" href=\"#025\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Backport of <em>Fix usage of <code>ParserForClass</code> for <code>case class</code>es with more than\n22 parameters with some default values in Scala 2.x (#123)</em> on top of 0.2.3</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.2.3</h2><a id=\"user-content-023\" class=\"anchor\" aria-label=\"Permalink: 0.2.3\" href=\"#023\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Support Scala 3 <a href=\"https://github.com/com-lihaoyi/mainargs/pull/18\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/18/hovercard\">#18</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.2.2</h2><a id=\"user-content-022\" class=\"anchor\" aria-label=\"Permalink: 0.2.2\" href=\"#022\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Fix hygiene of macros <a href=\"https://github.com/com-lihaoyi/mainargs/pull/12\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/12/hovercard\">#12</a></li>\n<li>Allow special characters in method names and argument names <a href=\"https://github.com/com-lihaoyi/mainargs/pull/13\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/com-lihaoyi/mainargs/pull/13/hovercard\">#13</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.2.1</h2><a id=\"user-content-021\" class=\"anchor\" aria-label=\"Permalink: 0.2.1\" href=\"#021\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Scala-Native 0.4.0 support</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.1.7</h2><a id=\"user-content-017\" class=\"anchor\" aria-label=\"Permalink: 0.1.7\" href=\"#017\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Add support for <code>positional=true</code> flag in <code>mainargs.arg</code>, to specify a\nspecific argument can only be passed positionally regardless of whether\n<code>allowPositional</code> is enabled for the entire parser</p>\n</li>\n<li>\n<p dir=\"auto\">Allow <code>-</code> and <code>--</code> to be passed as argument values without being treated as\nflags</p>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">0.1.4</h2><a id=\"user-content-014\" class=\"anchor\" aria-label=\"Permalink: 0.1.4\" href=\"#014\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>First release</li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "lihaoyi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/934140?v=4",
        "url" : "https://github.com/lihaoyi",
        "contributions" : 114
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 44
      },
      {
        "login" : "lefou",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1321393?v=4",
        "url" : "https://github.com/lefou",
        "contributions" : 13
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://github.com/lolgab",
        "contributions" : 5
      },
      {
        "login" : "ckipp01",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13974112?v=4",
        "url" : "https://github.com/ckipp01",
        "contributions" : 4
      },
      {
        "login" : "dependabot[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/29110?v=4",
        "url" : "https://github.com/apps/dependabot",
        "contributions" : 2
      },
      {
        "login" : "arainko",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/46346508?v=4",
        "url" : "https://github.com/arainko",
        "contributions" : 1
      },
      {
        "login" : "lihaoyi-databricks",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/32282535?v=4",
        "url" : "https://github.com/lihaoyi-databricks",
        "contributions" : 1
      },
      {
        "login" : "nightscape",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/35170?v=4",
        "url" : "https://github.com/nightscape",
        "contributions" : 1
      },
      {
        "login" : "mpollmeier",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/506752?v=4",
        "url" : "https://github.com/mpollmeier",
        "contributions" : 1
      },
      {
        "login" : "thiloplanz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/150349?v=4",
        "url" : "https://github.com/thiloplanz",
        "contributions" : 1
      }
    ],
    "commits" : 187,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "openIssues" : [
      {
        "number" : 146,
        "title" : "Flags optional arguments",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/146"
      },
      {
        "number" : 145,
        "title" : "Putting @main in a mixin",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/145"
      },
      {
        "number" : 143,
        "title" : "`@main` annotation is required when on Scala 3, and not on Scala 2",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/143"
      },
      {
        "number" : 140,
        "title" : "allow mainargs to work with scala-cli without the --objectWrapper flag",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/140"
      },
      {
        "number" : 121,
        "title" : "hidden main",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/121"
      },
      {
        "number" : 104,
        "title" : "Allow `nameMapper` to disable default name",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/104"
      },
      {
        "number" : 57,
        "title" : "Support for nested subcommands",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/57"
      },
      {
        "number" : 21,
        "title" : "Add new documentation annotation for program level help text",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/21"
      },
      {
        "number" : 14,
        "title" : "Allow runtime values for argument and main annotations",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/14"
      },
      {
        "number" : 9,
        "title" : "Support a list of default values ?",
        "url" : "https://github.com/com-lihaoyi/mainargs/issues/9"
      }
    ],
    "scalaPercentage" : 98,
    "license" : null,
    "commitActivity" : [
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : null,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "command-line-parsing",
    "chatroom" : null
  }
}