{
  "organization" : "com-lihaoyi",
  "repository" : "sourcecode",
  "creationDate" : 1535056512338,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1643185246398
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Scala library providing \"source\" metadata to your program, similar to Python's __name__, C++'s __LINE__ or Ruby's __FILE__. ",
    "logo" : "https://avatars.githubusercontent.com/u/79346799?v=4",
    "stars" : 468,
    "forks" : 64,
    "watchers" : 17,
    "issues" : 25,
    "creationDate" : 1453809040000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-sourcecode---\" class=\"anchor\" aria-hidden=\"true\" href=\"#sourcecode---\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SourceCode <a href=\"https://travis-ci.org/lihaoyi/sourcecode\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/756c0e1652dd0e98dfe5bfb8c22428b2cad69e150f7c39f410bb6191769160f3/68747470733a2f2f7472617669732d63692e6f72672f6c6968616f79692f736f75726365636f64652e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/lihaoyi/sourcecode.svg?branch=master\" style=\"max-width: 100%;\"></a> <a href=\"https://gitter.im/lihaoyi/sourcecode?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/lihaoyi/Ammonite\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a> <a href=\"https://maven-badges.herokuapp.com/maven-central/com.lihaoyi/sourcecode_2.11\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1e8dcfc2db28f7835d981a2b0e264d2e0c2767fc94943dff75ff429457e294f3/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e6c6968616f79692f736f75726365636f64655f322e31312e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.lihaoyi/sourcecode_2.11.svg\" style=\"max-width: 100%;\"></a></h1>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;com.lihaoyi&quot; %% &quot;sourcecode&quot; % &quot;0.2.7&quot; // Scala-JVM\n&quot;com.lihaoyi&quot; %%% &quot;sourcecode&quot; % &quot;0.2.7&quot; // Scala.js / Scala Native\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.lihaoyi<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.2.7<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Scala-JVM</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.lihaoyi<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.2.7<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Scala.js / Scala Native</span></pre></div>\n<p dir=\"auto\"><code>sourcecode</code> is a small Scala library that provides common \"source code\"\ncontext to your program at runtime, similar to Python's <code>__name__</code>, C++'s\n<code>__LINE__</code> or Ruby's <code>__FILE__</code>. For example, you can ask for the file-name\nand line number of the current file, either through the <code>()</code> syntax or via an\nimplicit:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val file = sourcecode.File()\nassert(file.endsWith(&quot;/sourcecode/shared/src/test/scala/sourcecode/Tests.scala&quot;))\n\nval line = implicitly[sourcecode.Line]\nassert(line == 16)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">file</span> <span class=\"pl-k\">=</span> sourcecode.<span class=\"pl-en\">File</span>()\nassert(file.endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/sourcecode/shared/src/test/scala/sourcecode/Tests.scala<span class=\"pl-pds\">\"</span></span>))\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">line</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Line</span>]\nassert(line <span class=\"pl-k\">==</span> <span class=\"pl-c1\">16</span>)</pre></div>\n<p dir=\"auto\">This might not be something you want to use for \"business logic\", but is very\nhelpful for things like <a href=\"#debug-prints\">debugging</a>, <a href=\"#logging\">logging</a> or\nproviding automatic diagnostics for <a href=\"#embedding-domain-specific-languages\">DSLs</a>.\nThis information is also available via an <code>implicit</code>, letting you write functions\nthat automatically pull it in.</p>\n<p dir=\"auto\">Using SourceCode on code dealing with lots of anonymous functions or anonymous\nclasses can easily turn what you see in your debug printouts from this:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"docs/Before.png\"><img src=\"docs/Before.png\" alt=\"Before\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">To this:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"docs/After.png\"><img src=\"docs/After.png\" alt=\"After\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">By capturing source information you can use to give your objects and function\nmeaningful names that tell you where they were defined, automatically without\nneeding you to manually assign a string-ID to every anonymous function or\nanonymous class you define all over your code bas.</p>\n<p dir=\"auto\">If you like using Sourcecode, you might also enjoy this book by the author which\nteaches you Scala in a similarly simple and straightforward way:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://www.handsonscala.com/\" rel=\"nofollow\">Hands-on Scala Programming</a> <a href=\"https://www.handsonscala.com/\" rel=\"nofollow\">https://www.handsonscala.com/</a></li>\n</ul>\n<h1 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of Contents</h1>\n<ul dir=\"auto\">\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#examples\">Examples</a></li>\n<li><a href=\"#use-cases\">Use Cases</a>\n<ul dir=\"auto\">\n<li><a href=\"#logging\">Logging</a></li>\n<li><a href=\"#enums\">Enums</a></li>\n<li><a href=\"#debug-prints\">Debug Prints</a></li>\n<li><a href=\"#embedding-domain-specific-languages\">Embedding Domain-Specific Languages</a></li>\n</ul>\n</li>\n<li><a href=\"#version-history\">Version History</a></li>\n</ul>\n<h1 dir=\"auto\"><a id=\"user-content-overview\" class=\"anchor\" aria-hidden=\"true\" href=\"#overview\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overview</h1>\n<p dir=\"auto\">The kinds of compilation-time data that <code>sourcecode</code> provides are:</p>\n<ul dir=\"auto\">\n<li><code>sourcecode.File</code>: full path of the current file where the call occurs</li>\n<li><code>sourcecode.FileName</code>: name of the current file where the call occurs; less\nverbose than <code>sourcecode.File</code> but often enough for debugging purposes</li>\n<li><code>sourcecode.Line</code>: current line number</li>\n<li><code>sourcecode.Name</code>: the name of the nearest enclosing definition: <code>val</code>,\n<code>class</code>, whatever.</li>\n<li><code>sourcecode.FullName</code>: the name of the nearest enclosing definition: <code>val</code>,\n<code>class</code>, whatever, prefixed by the names of all enclosing <code>class</code>s, <code>trait</code>s,\n<code>object</code>s or <code>package</code>s. Note that this does <em>not</em> include other enclosing\n<code>def</code>s, <code>val</code>s, <code>var</code>s or <code>lazy val</code>s`</li>\n<li><code>sourcecode.Enclosing</code>: the name of the nearest enclosing definition: <code>val</code>,\n<code>class</code>, whatever, prefixed by the names of all enclosing <code>class</code>s, <code>trait</code>s,\n<code>object</code>s or <code>package</code>s, <code>def</code>s, <code>val</code>s, <code>var</code>s or <code>lazy val</code>s`</li>\n<li><code>sourcecode.Text[T]</code>: when you want to take a value of type <code>T</code>, but also\nwant to get the \"source text\" of that particular value. Note that if\nyou have multiple statements in a <code>{}</code> block, <code>sourcecode.Text</code> will only\ncapture the source code for the last expression that gets returned. This\nimplicit is slightly experimental; be sure to report any bugs you find!</li>\n<li><code>sourcecode.Args</code>: the arguments that where provided to the nearest enclosing\nmethod</li>\n<li><code>sourcecode.Name.Machine</code>, <code>sourcecode.FullName.Machine</code> and\n<code>sourcecode.Enclosing.Machine</code> which are similar to <code>sourcecode.Name</code>,\n<code>sourcecode.FullName</code> and <code>sourcecode.Enclosing</code> except they do not filter\nout synthetic method names; e.g. if you want to see the <code>&lt;init&gt;</code> names or\n<code>&lt;local foo&gt;</code> names as part of the path, use these instead.</li>\n</ul>\n<p dir=\"auto\">All these are available both via <code>()</code> and as implicits, e.g. <code>sourcecode.File</code>\ncan be summoned via <code>sourcecode.File()</code> or <code>implicitly[sourcecode.File].value</code>.\nThis also means you can define functions that pull in this information\nautomatically:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def foo(arg: String)(implicit file: sourcecode.File) = {\n  ... do something with arg ...\n  ... do something with file.value ...\n}\n\nfoo(&quot;hello&quot;) // the implicit sourcecode.File is filled in automatically\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-v\">arg</span>: <span class=\"pl-en\">String</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">file</span>: sourcecode.<span class=\"pl-en\">File</span>) <span class=\"pl-k\">=</span> {\n  ... <span class=\"pl-k\">do</span> something <span class=\"pl-k\">with</span> arg ...\n  ... <span class=\"pl-k\">do</span> something <span class=\"pl-k\">with</span> file.value ...\n}\n\nfoo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> the implicit sourcecode.File is filled in automatically</span></pre></div>\n<p dir=\"auto\"><code>sourcecode</code> does not rely on runtime reflection or stack inspection, and\nis done at compile-time using macros. This means that it is both orders of\nmagnitude faster than e.g. getting file-name and line-numbers using stack\ninspection, and also works on Scala.js where reflection and stack inspection\ncan't be used.</p>\n<h1 dir=\"auto\"><a id=\"user-content-examples\" class=\"anchor\" aria-hidden=\"true\" href=\"#examples\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Examples</h1>\n<p dir=\"auto\">Here are a few examples of <code>sourcecode</code>'s core functions being used in a\nvariety of contexts. Hopefully they will give you an idea of how the various\nimplicits behave:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package sourcecode\n\nobject Implicits {\n  def implicitRun() = {\n    val name = implicitly[sourcecode.Name]\n    assert(name.value == &quot;name&quot;)\n\n    val fullName = implicitly[sourcecode.FullName]\n    assert(fullName.value == &quot;sourcecode.Implicits.fullName&quot;)\n\n    val enclosing = implicitly[sourcecode.Enclosing]\n    assert(enclosing.value == &quot;sourcecode.Implicits.implicitRun enclosing&quot;)\n\n    val pkg = implicitly[sourcecode.Pkg]\n    assert(pkg.value == &quot;sourcecode&quot;)\n\n    val file = implicitly[sourcecode.File]\n    assert(file.value.endsWith(&quot;/sourcecode/Implicits.scala&quot;))\n\n    val fileName = implicitly[sourcecode.FileName]\n    assert(fileName.value == &quot;Implicits.scala&quot;)\n\n    val line = implicitly[sourcecode.Line]\n    assert(line.value == 23)\n\n    lazy val myLazy = {\n      trait Bar{\n        val name = implicitly[sourcecode.Name]\n        assert(name.value == &quot;name&quot;)\n\n        val fullName = implicitly[sourcecode.FullName]\n        assert(fullName.value == &quot;sourcecode.Implicits.Bar.fullName&quot;)\n\n        val file = implicitly[sourcecode.File]\n        assert(file.value.endsWith(&quot;/sourcecode/Implicits.scala&quot;))\n\n        val fileName = implicitly[sourcecode.FileName]\n        assert(fileName.value == &quot;Implicits.scala&quot;)\n\n        val line = implicitly[sourcecode.Line]\n        assert(line.value == 40)\n\n        val enclosing = implicitly[sourcecode.Enclosing]\n        assert(\n          (enclosing.value == &quot;sourcecode.Implicits.implicitRun myLazy$lzy Bar#enclosing&quot;) ||\n          (enclosing.value == &quot;sourcecode.Implicits.implicitRun myLazy Bar#enclosing&quot;) // encoding changed in Scala 2.12\n        )\n      }\n      val b = new Bar{}\n    }\n    myLazy\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">sourcecode</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Implicits</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">implicitRun</span>() <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">name</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Name</span>]\n    assert(name.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fullName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FullName</span>]\n    assert(fullName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.fullName<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">enclosing</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Enclosing</span>]\n    assert(enclosing.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.implicitRun enclosing<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">pkg</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Pkg</span>]\n    assert(pkg.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">file</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">File</span>]\n    assert(file.value.endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/sourcecode/Implicits.scala<span class=\"pl-pds\">\"</span></span>))\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fileName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FileName</span>]\n    assert(fileName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Implicits.scala<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">line</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Line</span>]\n    assert(line.value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">23</span>)\n\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">myLazy</span> <span class=\"pl-k\">=</span> {\n      <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Bar</span>{\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">name</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Name</span>]\n        assert(name.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fullName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FullName</span>]\n        assert(fullName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.Bar.fullName<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">file</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">File</span>]\n        assert(file.value.endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/sourcecode/Implicits.scala<span class=\"pl-pds\">\"</span></span>))\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fileName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FileName</span>]\n        assert(fileName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Implicits.scala<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">line</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Line</span>]\n        assert(line.value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">40</span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">enclosing</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Enclosing</span>]\n        assert(\n          (enclosing.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.implicitRun myLazy$lzy Bar#enclosing<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">||</span>\n          (enclosing.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.implicitRun myLazy Bar#enclosing<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> encoding changed in Scala 2.12</span>\n        )\n      }\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Bar</span>{}\n    }\n    myLazy\n  }\n}</pre></div>\n<p dir=\"auto\">Note that in \"normal\" usage you would not directly call <code>implicitly</code> to summon\nup <code>sourcecode</code> values; rather, you would add implicit parameters of these\ntypes to your functions. That would make these values automatically available\nto your functions without needing to manually keep passing them in. Apart from\nsummoning them via implicits, you can also use the <code>apply</code> method on each type\nto pull them in using the <code>()</code> syntax:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package sourcecode\n\nobject Implicits {\n  def implicitRun() = {\n    val name = implicitly[sourcecode.Name]\n    assert(name.value == &quot;name&quot;)\n\n    val fullName = implicitly[sourcecode.FullName]\n    assert(fullName.value == &quot;sourcecode.Implicits.fullName&quot;)\n\n    val enclosing = implicitly[sourcecode.Enclosing]\n    assert(enclosing.value == &quot;sourcecode.Implicits.implicitRun enclosing&quot;)\n\n    val pkg = implicitly[sourcecode.Pkg]\n    assert(pkg.value == &quot;sourcecode&quot;)\n\n    val file = implicitly[sourcecode.File]\n    assert(file.value.endsWith(&quot;/sourcecode/Implicits.scala&quot;))\n\n    val fileName = implicitly[sourcecode.FileName]\n    assert(fileName.value == &quot;Implicits.scala&quot;)\n\n    val line = implicitly[sourcecode.Line]\n    assert(line.value == 23)\n\n    lazy val myLazy = {\n      trait Bar{\n        val name = implicitly[sourcecode.Name]\n        assert(name.value == &quot;name&quot;)\n\n        val fullName = implicitly[sourcecode.FullName]\n        assert(fullName.value == &quot;sourcecode.Implicits.Bar.fullName&quot;)\n\n        val file = implicitly[sourcecode.File]\n        assert(file.value.endsWith(&quot;/sourcecode/Implicits.scala&quot;))\n\n        val fileName = implicitly[sourcecode.FileName]\n        assert(fileName.value == &quot;Implicits.scala&quot;)\n\n        val line = implicitly[sourcecode.Line]\n        assert(line.value == 40)\n\n        val enclosing = implicitly[sourcecode.Enclosing]\n        assert(\n          (enclosing.value == &quot;sourcecode.Implicits.implicitRun myLazy$lzy Bar#enclosing&quot;) ||\n          (enclosing.value == &quot;sourcecode.Implicits.implicitRun myLazy Bar#enclosing&quot;) // encoding changed in Scala 2.12\n        )\n      }\n      val b = new Bar{}\n    }\n    myLazy\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">sourcecode</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Implicits</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">implicitRun</span>() <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">name</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Name</span>]\n    assert(name.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fullName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FullName</span>]\n    assert(fullName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.fullName<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">enclosing</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Enclosing</span>]\n    assert(enclosing.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.implicitRun enclosing<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">pkg</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Pkg</span>]\n    assert(pkg.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">file</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">File</span>]\n    assert(file.value.endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/sourcecode/Implicits.scala<span class=\"pl-pds\">\"</span></span>))\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fileName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FileName</span>]\n    assert(fileName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Implicits.scala<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">line</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Line</span>]\n    assert(line.value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">23</span>)\n\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">myLazy</span> <span class=\"pl-k\">=</span> {\n      <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Bar</span>{\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">name</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Name</span>]\n        assert(name.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fullName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FullName</span>]\n        assert(fullName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.Bar.fullName<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">file</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">File</span>]\n        assert(file.value.endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/sourcecode/Implicits.scala<span class=\"pl-pds\">\"</span></span>))\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fileName</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">FileName</span>]\n        assert(fileName.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Implicits.scala<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">line</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Line</span>]\n        assert(line.value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">40</span>)\n\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">enclosing</span> <span class=\"pl-k\">=</span> implicitly[sourcecode.<span class=\"pl-en\">Enclosing</span>]\n        assert(\n          (enclosing.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.implicitRun myLazy$lzy Bar#enclosing<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">||</span>\n          (enclosing.value <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Implicits.implicitRun myLazy Bar#enclosing<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> encoding changed in Scala 2.12</span>\n        )\n      }\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Bar</span>{}\n    }\n    myLazy\n  }\n}</pre></div>\n<p dir=\"auto\">By default, the various implicits all ignore any synthetic <code>&lt;init&gt;</code>,\n<code>&lt;local Foo&gt;</code> or <code>$anonfun</code> methods that might be present:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package sourcecode\n\nobject NoSynthetic {\n  def run() = {\n    class EnumValue(implicit name: sourcecode.Name){\n      override def toString = name.value\n    }\n    object Foo extends EnumValue\n\n    assert(Foo.toString == &quot;Foo&quot;)\n\n    object Bar{\n      assert(sourcecode.Name() == &quot;Bar&quot;)\n      assert(sourcecode.FullName() == &quot;sourcecode.NoSynthetic.Bar&quot;)\n      assert(sourcecode.Enclosing() == &quot;sourcecode.NoSynthetic.run Bar&quot;)\n    }\n    Bar\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">sourcecode</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">NoSynthetic</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>() <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">EnumValue</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>){\n      <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toString</span> <span class=\"pl-k\">=</span> name.value\n    }\n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">Foo</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">EnumValue</span>\n\n    assert(<span class=\"pl-en\">Foo</span>.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">Bar</span>{\n      assert(sourcecode.<span class=\"pl-en\">Name</span>() <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bar<span class=\"pl-pds\">\"</span></span>)\n      assert(sourcecode.<span class=\"pl-en\">FullName</span>() <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.NoSynthetic.Bar<span class=\"pl-pds\">\"</span></span>)\n      assert(sourcecode.<span class=\"pl-en\">Enclosing</span>() <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.NoSynthetic.run Bar<span class=\"pl-pds\">\"</span></span>)\n    }\n    <span class=\"pl-en\">Bar</span>\n  }\n}</pre></div>\n<p dir=\"auto\">If you want these synthetic methods to be shown, use the <code>.Machine</code> versions\nof each of these instead:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package sourcecode\n\nobject Synthetic {\n  def run() = {\n    class EnumValue(implicit name: sourcecode.Name.Machine){\n      override def toString = name.value\n    }\n    object Foo extends EnumValue\n\n    assert(Foo.toString == &quot;&lt;init&gt;&quot;)\n\n    object Bar{\n      assert(sourcecode.Name.Machine() == &quot;&lt;local Bar&gt;&quot;, sourcecode.Name())\n      assert(sourcecode.FullName.Machine() == &quot;sourcecode.Synthetic.Bar.&lt;local Bar&gt;&quot;)\n      assert(sourcecode.Enclosing.Machine() == &quot;sourcecode.Synthetic.run Bar.&lt;local Bar&gt;&quot;)\n    }\n    Bar\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">sourcecode</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Synthetic</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>() <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">EnumValue</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>.<span class=\"pl-en\">Machine</span>){\n      <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toString</span> <span class=\"pl-k\">=</span> name.value\n    }\n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">Foo</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">EnumValue</span>\n\n    assert(<span class=\"pl-en\">Foo</span>.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;init&gt;<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">Bar</span>{\n      assert(sourcecode.<span class=\"pl-en\">Name</span>.<span class=\"pl-en\">Machine</span>() <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;local Bar&gt;<span class=\"pl-pds\">\"</span></span>, sourcecode.<span class=\"pl-en\">Name</span>())\n      assert(sourcecode.<span class=\"pl-en\">FullName</span>.<span class=\"pl-en\">Machine</span>() <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Synthetic.Bar.&lt;local Bar&gt;<span class=\"pl-pds\">\"</span></span>)\n      assert(sourcecode.<span class=\"pl-en\">Enclosing</span>.<span class=\"pl-en\">Machine</span>() <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.Synthetic.run Bar.&lt;local Bar&gt;<span class=\"pl-pds\">\"</span></span>)\n    }\n    <span class=\"pl-en\">Bar</span>\n  }\n}</pre></div>\n<p dir=\"auto\">Hopefully this has given you a reasonable feel for <em>what</em>* sourcecode does. You\nmay still be wondering <em>why</em> we would want any of this: what could we possibly\nuse these things for? Why would we want to write code that depends on our\npackage paths or variable names? The section below will provide use cases that\nyou will hopefully be able to relate to.</p>\n<h1 dir=\"auto\"><a id=\"user-content-use-cases\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-cases\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Use Cases</h1>\n<p dir=\"auto\">At first it might seem strange to make use of these source-level details in\nyour program: shouldn't a program's meaning not change under re-formatting and\nre-factoring?</p>\n<p dir=\"auto\">It turns out that there are a number of entirely valid use cases for this sort\nof information that is both extremely handy, and also would not be surprising\nat all to a developer using your API. Here are a few example use cases:</p>\n<h2 dir=\"auto\"><a id=\"user-content-logging\" class=\"anchor\" aria-hidden=\"true\" href=\"#logging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Logging</h2>\n<p dir=\"auto\">You can use <code>sourcecode.File</code> and <code>sourcecode.Line</code> to define <code>log</code> functions\nthat automatically capture their line number and file-name</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def log(foo: String)(implicit line: sourcecode.Line, file: sourcecode.File) = {\n  println(s&quot;${file.value}:${line.value} $foo&quot;)\n}\n\nlog(&quot;Foooooo&quot;) // sourcecode/shared/src/test/scala/sourcecode/Tests.scala:86 Fooooo\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">log</span>(<span class=\"pl-v\">foo</span>: <span class=\"pl-en\">String</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">line</span>: sourcecode.<span class=\"pl-en\">Line</span>, <span class=\"pl-v\">file</span>: sourcecode.<span class=\"pl-en\">File</span>) <span class=\"pl-k\">=</span> {\n  println(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span>${file.value}<span class=\"pl-s\">:</span>${line.value}<span class=\"pl-s\"> </span>$foo<span class=\"pl-s\">\"</span>)\n}\n\nlog(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foooooo<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> sourcecode/shared/src/test/scala/sourcecode/Tests.scala:86 Fooooo</span></pre></div>\n<p dir=\"auto\">This can be handy for letting you see where the log lines are coming from,\nwithout tediously tagging every log statement with a unique prefix.\nFurthermore, this happens at compile time, and is thus orders of magnitude\nfaster than getting this information by generating stack traces, and works\non Scala.js where stack-inspection does not. Lastly, if you want additional\ninformation such as method names, class names, or packages to be provided to\nyour logging function, you can easily do so by asking for the <code>sourcecode.Name</code>\nor <code>sourcecode.FullName</code> or <code>sourcecode.Pkg</code> implicits.</p>\n<h2 dir=\"auto\"><a id=\"user-content-enums\" class=\"anchor\" aria-hidden=\"true\" href=\"#enums\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Enums</h2>\n<p dir=\"auto\">You can use <code>sourcecode.Name</code> to define an enumeration-value factory function\nthat automatically assigns names to the enum values based on the name of the\n<code>val</code> that it is assigned to</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package sourcecode\n\nobject EnumExample {\n  def run() = {\n    case class EnumValue(name: String){\n      override def toString = name\n    }\n    class Enum{\n      def value(implicit name: sourcecode.Name) = EnumValue(name.value)\n    }\n    object MyEnum extends Enum{\n      val firstItem = value\n      val secondItem = value\n    }\n    assert(MyEnum.firstItem.toString == &quot;firstItem&quot;)\n    assert(MyEnum.secondItem.toString == &quot;secondItem&quot;)\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">sourcecode</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">EnumExample</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>() <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">EnumValue</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>){\n      <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toString</span> <span class=\"pl-k\">=</span> name\n    }\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">Enum</span>{\n      <span class=\"pl-k\">def</span> <span class=\"pl-en\">value</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>) <span class=\"pl-k\">=</span> <span class=\"pl-en\">EnumValue</span>(name.value)\n    }\n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">MyEnum</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enum</span>{\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">firstItem</span> <span class=\"pl-k\">=</span> value\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">secondItem</span> <span class=\"pl-k\">=</span> value\n    }\n    assert(<span class=\"pl-en\">MyEnum</span>.firstItem.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>firstItem<span class=\"pl-pds\">\"</span></span>)\n    assert(<span class=\"pl-en\">MyEnum</span>.secondItem.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>secondItem<span class=\"pl-pds\">\"</span></span>)\n  }\n}</pre></div>\n<p dir=\"auto\">This is very handy, and this functionality is used in a number of libraries\nsuch as <a href=\"http://lihaoyi.github.io/fastparse/\" rel=\"nofollow\">FastParse</a> and\n<a href=\"http://lihaoyi.github.io/scalatags/#CSSStylesheets\" rel=\"nofollow\">Scalatags</a> to provide\na boilerplate-free experience while still providing good debuggability\nand convenience.</p>\n<p dir=\"auto\">Sometimes you want to make sure that different enum values in differently\nnamed enums (or even an enum of the same name in a different package!) are\ngiven unique names. In that case, you can use <code>sourcecode.FullName</code> or\n<code>sourcecode.Enclosing</code> to capture the full path e.g.\n<code>\"com.mypkg.MyEnum.firstItem\"</code> and <code>\"com.mypkg.MyEnum.secondItem\"</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package sourcecode\n\nobject EnumFull {\n  def run() = {\n    case class EnumValue(name: String){\n      override def toString = name\n    }\n    class Enum{\n      def value(implicit name: sourcecode.FullName) = EnumValue(name.value)\n    }\n    object MyEnum extends Enum{\n      val firstItem = value\n      val secondItem = value\n    }\n    assert(MyEnum.firstItem.toString == &quot;sourcecode.EnumFull.MyEnum.firstItem&quot;)\n    assert(MyEnum.secondItem.toString == &quot;sourcecode.EnumFull.MyEnum.secondItem&quot;)\n  }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">sourcecode</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">EnumFull</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>() <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">EnumValue</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>){\n      <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toString</span> <span class=\"pl-k\">=</span> name\n    }\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">Enum</span>{\n      <span class=\"pl-k\">def</span> <span class=\"pl-en\">value</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">FullName</span>) <span class=\"pl-k\">=</span> <span class=\"pl-en\">EnumValue</span>(name.value)\n    }\n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">MyEnum</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enum</span>{\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">firstItem</span> <span class=\"pl-k\">=</span> value\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">secondItem</span> <span class=\"pl-k\">=</span> value\n    }\n    assert(<span class=\"pl-en\">MyEnum</span>.firstItem.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.EnumFull.MyEnum.firstItem<span class=\"pl-pds\">\"</span></span>)\n    assert(<span class=\"pl-en\">MyEnum</span>.secondItem.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourcecode.EnumFull.MyEnum.secondItem<span class=\"pl-pds\">\"</span></span>)\n  }\n}</pre></div>\n<p dir=\"auto\">You can also use <code>sourcecode.Name</code> in an constructor, in which case it'll be\npicked up during inheritance:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class EnumValue(implicit name: sourcecode.Name){\n  override def toString = name.value\n}\nobject Foo extends EnumValue\nprintln(Foo.toString)\nassert(Foo.toString == &quot;Foo&quot;)\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">EnumValue</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>){\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toString</span> <span class=\"pl-k\">=</span> name.value\n}\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Foo</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">EnumValue</span>\nprintln(<span class=\"pl-en\">Foo</span>.toString)\nassert(<span class=\"pl-en\">Foo</span>.toString <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Foo<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-debug-prints\" class=\"anchor\" aria-hidden=\"true\" href=\"#debug-prints\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Debug Prints</h2>\n<p dir=\"auto\">How many times have you written tedious code like</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object Bar{\n  def foo(arg: String) = {\n    println(&quot;Bar.foo: &quot; + arg)\n  }\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Bar</span>{\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-v\">arg</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> {\n    println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bar.foo: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> arg)\n  }\n}</pre></div>\n<p dir=\"auto\">Where you have to prefix every print statement with the name of the enclosing\nclasses, objects or functions to make sure you can find your print output\n2-3 minutes later? With <code>source.Enclosing</code>, you can get this for free:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def debug[V](value: sourcecode.Text[V])(implicit enclosing: sourcecode.Enclosing) = {\n  println(enclosing.value + &quot; [&quot; + value.source + &quot;]: &quot; + value.value)\n}\n\nclass Foo(arg: Int){\n  debug(arg) // sourcecode.DebugRun.main Foo [arg]: 123\n  def bar(param: String) = {\n    debug(arg -&gt; param)\n  }\n}\nnew Foo(123).bar(&quot;lol&quot;)  // sourcecode.DebugRun.main Foo#bar [arg -&gt; param]: (123,lol)\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">debug</span>[<span class=\"pl-en\">V</span>](<span class=\"pl-v\">value</span>: sourcecode.<span class=\"pl-en\">Text</span>[<span class=\"pl-en\">V</span>])(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">enclosing</span>: sourcecode.<span class=\"pl-en\">Enclosing</span>) <span class=\"pl-k\">=</span> {\n  println(enclosing.value <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> [<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> value.source <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>]: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> value.value)\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">arg</span>: <span class=\"pl-en\">Int</span>){\n  debug(arg) <span class=\"pl-c\"><span class=\"pl-c\">//</span> sourcecode.DebugRun.main Foo [arg]: 123</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-v\">param</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> {\n    debug(arg <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> param)\n  }\n}\n<span class=\"pl-k\">new</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">123</span>).bar(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lol<span class=\"pl-pds\">\"</span></span>)  <span class=\"pl-c\"><span class=\"pl-c\">//</span> sourcecode.DebugRun.main Foo#bar [arg -&gt; param]: (123,lol)</span></pre></div>\n<p dir=\"auto\">You can easily vary the amount of verbosity, e.g. by swapping the\n<code>sourcecode.Enclosing</code> for a <code>sourcecode.Name</code> if you think it's too verbose:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def debug[V](value: sourcecode.Text[V])(implicit name: sourcecode.Name) = {\n  println(name.value + &quot; [&quot; + value.source + &quot;]: &quot; + value.value)\n}\n\nclass Foo(arg: Int){\n  debug(arg) // Foo [arg]: 123\n  def bar(param: String) = {\n    debug(param -&gt; arg)\n  }\n}\nnew Foo(123).bar(&quot;lol&quot;)  // bar [param]: lol\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">debug</span>[<span class=\"pl-en\">V</span>](<span class=\"pl-v\">value</span>: sourcecode.<span class=\"pl-en\">Text</span>[<span class=\"pl-en\">V</span>])(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>) <span class=\"pl-k\">=</span> {\n  println(name.value <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> [<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> value.source <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>]: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> value.value)\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">arg</span>: <span class=\"pl-en\">Int</span>){\n  debug(arg) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Foo [arg]: 123</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-v\">param</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> {\n    debug(param <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> arg)\n  }\n}\n<span class=\"pl-k\">new</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">123</span>).bar(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lol<span class=\"pl-pds\">\"</span></span>)  <span class=\"pl-c\"><span class=\"pl-c\">//</span> bar [param]: lol</span></pre></div>\n<p dir=\"auto\">Or leaving it out entirely:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def debug[V](value: sourcecode.Text[V]) = {\n  println(&quot;[&quot; + value.source + &quot;]: &quot; + value.value)\n}\n\nclass Foo(arg: Int){\n  debug(arg) // [arg]: 123\n  def bar(param: String) = {\n    debug(param -&gt; arg)\n  }\n}\nnew Foo(123).bar(&quot;lol&quot;)  // [param]: lol\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">debug</span>[<span class=\"pl-en\">V</span>](<span class=\"pl-v\">value</span>: sourcecode.<span class=\"pl-en\">Text</span>[<span class=\"pl-en\">V</span>]) <span class=\"pl-k\">=</span> {\n  println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> value.source <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>]: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> value.value)\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">arg</span>: <span class=\"pl-en\">Int</span>){\n  debug(arg) <span class=\"pl-c\"><span class=\"pl-c\">//</span> [arg]: 123</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-v\">param</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> {\n    debug(param <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> arg)\n  }\n}\n<span class=\"pl-k\">new</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">123</span>).bar(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lol<span class=\"pl-pds\">\"</span></span>)  <span class=\"pl-c\"><span class=\"pl-c\">//</span> [param]: lol</span></pre></div>\n<p dir=\"auto\">Thus you can easily configure how much information your <code>debug</code> helper method\nneeds, at its definition, without having to hunt all over your codebase for the\nvarious <code>debug</code> call-sites you left lying around and manually tweaking the\nverbosity of each one. Furthermore, if you want additional information like\n<code>sourcecode.Line</code> or <code>sourcecode.File</code>, that's all just one implicit away.</p>\n<p dir=\"auto\">The <a href=\"https://github.com/com-lihaoyi/PPrint\">PPrint</a>\nlibrary provides a <code>pprint.log</code> method that does exactly this: prints out the\nvalue provided (in this case pretty-printing it with colors and nice formatting\n&amp; indentation) together with the enclosing context and line number, so you\ncan easily distinguish your individual prints later:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; class Foo{\n     |   def bar(grid: Seq[Seq[Int]]) = {\n     |     // automatically capture and print out source context\n     |     pprint.log(grid, tag=&quot;grid&quot;)\n     |   }\n     | }\ndefined class Foo\n\nscala&gt; new Foo().bar(Seq(0 until 10, 10 until 20, 20 until 30))\npkg.Foo#bar &quot;grid&quot;:12\nList(\n  Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n  Range(10, 11, 12, 13, 14, 15, 16, 17, 18, 19),\n  Range(20, 21, 22, 23, 24, 25, 26, 27, 28, 29)\n)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>{\n     <span class=\"pl-k\">|</span>   <span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-v\">grid</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">Int</span>]]) <span class=\"pl-k\">=</span> {\n     <span class=\"pl-k\">|</span>     <span class=\"pl-c\"><span class=\"pl-c\">//</span> automatically capture and print out source context</span>\n     <span class=\"pl-k\">|</span>     pprint.log(grid, tag<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>grid<span class=\"pl-pds\">\"</span></span>)\n     <span class=\"pl-k\">|</span>   }\n     <span class=\"pl-k\">|</span> }\ndefined <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Foo</span>().bar(<span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">0</span> until <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span> until <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">20</span> until <span class=\"pl-c1\">30</span>))\npkg.<span class=\"pl-en\">Foo</span>#bar <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>grid<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">12</span>\n<span class=\"pl-en\">List</span>(\n  <span class=\"pl-en\">Range</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">9</span>),\n  <span class=\"pl-en\">Range</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">11</span>, <span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">13</span>, <span class=\"pl-c1\">14</span>, <span class=\"pl-c1\">15</span>, <span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">17</span>, <span class=\"pl-c1\">18</span>, <span class=\"pl-c1\">19</span>),\n  <span class=\"pl-en\">Range</span>(<span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">21</span>, <span class=\"pl-c1\">22</span>, <span class=\"pl-c1\">23</span>, <span class=\"pl-c1\">24</span>, <span class=\"pl-c1\">25</span>, <span class=\"pl-c1\">26</span>, <span class=\"pl-c1\">27</span>, <span class=\"pl-c1\">28</span>, <span class=\"pl-c1\">29</span>)\n)</pre></div>\n<p dir=\"auto\"><code>pprint.log</code> is itself defined as</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def log[T: PPrint](value: T, tag: String = &quot;&quot;)\n                  (implicit cfg: Config = Config.Colors.PPrintConfig,\n                   path: sourcecode.Enclosing,\n                   line: sourcecode.Line) = ...\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">log</span>[<span class=\"pl-en\">T</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">PPrint</span>](<span class=\"pl-v\">value</span>: <span class=\"pl-en\">T</span>, <span class=\"pl-v\">tag</span>: <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n                  (<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">cfg</span>: <span class=\"pl-en\">Config</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.<span class=\"pl-en\">Colors</span>.<span class=\"pl-en\">PPrintConfig</span>,\n                   <span class=\"pl-v\">path</span>: sourcecode.<span class=\"pl-en\">Enclosing</span>,\n                   <span class=\"pl-v\">line</span>: sourcecode.<span class=\"pl-en\">Line</span>) <span class=\"pl-k\">=</span> ...</pre></div>\n<p dir=\"auto\">Using <code>sourcecode.Enclosing</code> and <code>sourcecode.Line</code> to provide the context to\nbe printed. You can, or course, define your own <code>log</code> method in the same way,\ncustomizing it to print or not-print exactly what you want to see via the\nimplicits that <code>sourcecode</code> provides!</p>\n<p dir=\"auto\"><code>sourcecode.Args</code> can be used to access all parameters that where provided\nto a method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def debug(implicit name: sourcecode.Name, args: sourcecode.Args): Unit = {\n  println(name.value + args.value.map(_.map(a =&gt; a.source + &quot;=&quot; + a.value).mkString(&quot;(&quot;, &quot;, &quot;, &quot;)&quot;)).mkString(&quot;&quot;))\n}\n\ndef foo(bar: String, baz: Int)(p: Boolean): Unit = {\n  debug\n}\n\nfoo(&quot;baz&quot;, 42)(true) // foo(bar=baz, baz=42)(p=true)\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">debug</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>, <span class=\"pl-v\">args</span>: sourcecode.<span class=\"pl-en\">Args</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n  println(name.value <span class=\"pl-k\">+</span> args.value.map(_.map(a <span class=\"pl-k\">=&gt;</span> a.source <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> a.value).mkString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, <span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)<span class=\"pl-pds\">\"</span></span>)).mkString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>))\n}\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-v\">bar</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">baz</span>: <span class=\"pl-en\">Int</span>)(<span class=\"pl-v\">p</span>: <span class=\"pl-en\">Boolean</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n  debug\n}\n\nfoo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">42</span>)(<span class=\"pl-c1\">true</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> foo(bar=baz, baz=42)(p=true)</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-embedding-domain-specific-languages\" class=\"anchor\" aria-hidden=\"true\" href=\"#embedding-domain-specific-languages\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Embedding Domain-Specific Languages</h2>\n<p dir=\"auto\">The Scala programming is a popular choice to embed domain-specific languages:\nthat means that you start with some external language, e.g. this\n<a href=\"http://www.slideshare.net/gerferra/an-embedded-dsl-to-manipulate-mathprog-mixed-integer-programming-models-within-scala\" rel=\"nofollow\">MathProg</a> example</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"param m;\nparam n;\nparam l;\n\nset I := 1 .. m;\nset J := 1 .. n;\nset K := 1 .. l;\n\nparam c{J};\nparam d{K};\nparam a{I, J};\n\nvar x{J} integer, &gt;= 0;\nvar y{K} &gt;= 0;\"><pre>param m;\nparam n;\nparam l;\n\nset <span class=\"pl-en\">I</span> <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> .. m;\nset <span class=\"pl-en\">J</span> <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> .. n;\nset <span class=\"pl-en\">K</span> <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> .. l;\n\nparam c{<span class=\"pl-en\">J</span>};\nparam d{<span class=\"pl-en\">K</span>};\nparam a{<span class=\"pl-en\">I</span>, <span class=\"pl-en\">J</span>};\n\n<span class=\"pl-k\">var</span> <span class=\"pl-smi\">x</span>{<span class=\"pl-en\">J</span>} integer, <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">var</span> <span class=\"pl-smi\">y</span>{<span class=\"pl-en\">K</span>} <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>;</pre></div>\n<p dir=\"auto\">The linked slides has more detail about what exactly this language does (it\ndescribes mathematical optimization problems). For a variety of reasons, you\nmay prefer to write this as part of a Scala program instead: for example you\nmay want Scala's IDE support, or its ability to define functions that help\nreduce boilerplate, or maybe you like the way the compiler provides type errors\nwhen you do the wrong thing.</p>\n<p dir=\"auto\">A first attempt at converting this to Scala may look like this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val m = param(&quot;m&quot;)\nval n = param(&quot;n&quot;)\nval l = param(&quot;l&quot;)\n\nval I = set(&quot;I&quot;) := 1 to m\nval J = set(&quot;J&quot;) := 1 to m\nval K = set(&quot;K&quot;) := 1 to m\n\nval c = param(&quot;c&quot;, J)\nval d = param(&quot;d&quot;, K)\nval a = param(&quot;a&quot;, I, J)\n\nval x = xvar(&quot;x&quot;, J).integer &gt;= 0\nval y = xvar(&quot;y&quot;, K) &gt;= 0\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">m</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>m<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">n</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>n<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">l</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>l<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">I</span> <span class=\"pl-k\">=</span> set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> to m\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">J</span> <span class=\"pl-k\">=</span> set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>J<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> to m\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">K</span> <span class=\"pl-k\">=</span> set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>K<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> to m\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">c</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">J</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">d</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>d<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">K</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">I</span>, <span class=\"pl-en\">J</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> xvar(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">J</span>).integer <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">y</span> <span class=\"pl-k\">=</span> xvar(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">K</span>) <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span></pre></div>\n<p dir=\"auto\">There's a bunch of duplication around the names of the <code>val</code>s: each <code>val</code>\nhas its name repeated in a string that gets passed to the expression on the\nright. This is for the program to use the name of the <code>val</code> later: for example\nwhen printing error messages, or the results of the computation, you want to\nsee which <code>val</code>s are involved! Thus you end up duplicating the names over and\nover and over.</p>\n<p dir=\"auto\">With sourcecode, you can easily define <code>param</code> <code>set</code> and <code>xvar</code> as taking\nimplicit <code>sourcecode.Name</code>s, thus eliminating all the boilerplate involved in\nduplicating names:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val m = param\nval n = param\nval l = param\n\nval I = set := 1 to m\nval J = set := 1 to m\nval K = set := 1 to m\n\nval c = param(J)\nval d = param(K)\nval a = param(I, J)\n\nval x = xvar(J).integer &gt;= 0\nval y = xvar(K) &gt;= 0\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">m</span> <span class=\"pl-k\">=</span> param\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">n</span> <span class=\"pl-k\">=</span> param\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">l</span> <span class=\"pl-k\">=</span> param\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">I</span> <span class=\"pl-k\">=</span> set <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> to m\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">J</span> <span class=\"pl-k\">=</span> set <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> to m\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">K</span> <span class=\"pl-k\">=</span> set <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> to m\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">c</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-en\">J</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">d</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-en\">K</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> param(<span class=\"pl-en\">I</span>, <span class=\"pl-en\">J</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> xvar(<span class=\"pl-en\">J</span>).integer <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">y</span> <span class=\"pl-k\">=</span> xvar(<span class=\"pl-en\">K</span>) <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span></pre></div>\n<p dir=\"auto\">The popular <a href=\"http://www.lihaoyi.com/fastparse/\" rel=\"nofollow\">FastParse</a> parser-combinator\nlibrary uses sourcecode for exactly this use case</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import fastparse.all._\nval A = P( &quot;aa&quot; )\nval B = P( &quot;bb&quot; )\nval C = P( (A | B).rep(1) )\n\nC.parse(&quot;aabb&quot;) // Success((), 4)\nC.parse(&quot;X&quot;) // Failure((A | B):1:1 ...&quot;X&quot;)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">fastparse</span>.<span class=\"pl-en\">all</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">A</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>aa<span class=\"pl-pds\">\"</span></span> )\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">B</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>( <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bb<span class=\"pl-pds\">\"</span></span> )\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">C</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>( (<span class=\"pl-en\">A</span> <span class=\"pl-k\">|</span> <span class=\"pl-en\">B</span>).rep(<span class=\"pl-c1\">1</span>) )\n\n<span class=\"pl-en\">C</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>aabb<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Success((), 4)</span>\n<span class=\"pl-en\">C</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Failure((A | B):1:1 ...\"X\")</span></pre></div>\n<p dir=\"auto\">As you can see, the names of the rules <code>A</code> and <code>B</code> are embedded in the error\nmessages for parse failures. This makes debugging parsers far easier, while\nsaving you the effort of duplicating the name of the parser in possibly\nhundreds of rules in a large parser. In this case, it is the <code>P(...)</code> function\nwhich takes an implicit <code>sourcecode.Name</code> that does this work:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def P[T](p: =&gt; Parser[T])(implicit name: sourcecode.Name): Parser[T] =\n    parsers.Combinators.Rule(name.value, () =&gt; p)\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">P</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-v\">p</span>: <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">T</span>])(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">name</span>: sourcecode.<span class=\"pl-en\">Name</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">T</span>] <span class=\"pl-k\">=</span>\n    parsers.<span class=\"pl-en\">Combinators</span>.<span class=\"pl-en\">Rule</span>(name.value, () <span class=\"pl-k\">=&gt;</span> p)</pre></div>\n<p dir=\"auto\">And forwards the name on to the actual <code>Rule</code> object, which can make use of it\nin its <code>.toString</code> method.</p>\n<h1 dir=\"auto\"><a id=\"user-content-version-history\" class=\"anchor\" aria-hidden=\"true\" href=\"#version-history\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Version History</h1>\n<h2 dir=\"auto\"><a id=\"user-content-027\" class=\"anchor\" aria-hidden=\"true\" href=\"#027\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.2.7</h2>\n<ul dir=\"auto\">\n<li>Support Scala 3.0.0</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-026\" class=\"anchor\" aria-hidden=\"true\" href=\"#026\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.2.6</h2>\n<ul dir=\"auto\">\n<li>Support Scala 3.0.0-RC3</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-025\" class=\"anchor\" aria-hidden=\"true\" href=\"#025\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.2.5</h2>\n<ul dir=\"auto\">\n<li>Support Scala 3.0.0-RC2</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-022\" class=\"anchor\" aria-hidden=\"true\" href=\"#022\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.2.2</h2>\n<ul dir=\"auto\">\n<li>Support for Scala-Native 0.4.0</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-019\" class=\"anchor\" aria-hidden=\"true\" href=\"#019\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.9</h2>\n<ul dir=\"auto\">\n<li><code>$anonfun</code> segments are now ignored by <code>sourcecode.Enclosing</code></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-018\" class=\"anchor\" aria-hidden=\"true\" href=\"#018\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.8</h2>\n<ul dir=\"auto\">\n<li>Add <code>sourceco.FileName</code> implicit</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-017\" class=\"anchor\" aria-hidden=\"true\" href=\"#017\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.7</h2>\n<ul dir=\"auto\">\n<li>Support for Scala 2.13.0 final</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-015\" class=\"anchor\" aria-hidden=\"true\" href=\"#015\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.5</h2>\n<ul dir=\"auto\">\n<li>Upgrade Scala, ScalaJS, Scala Native versions (<a href=\"https://github.com/lihaoyi/sourcecode/commit/a21c11a2d92351013161cb9a889754bcf7095f86\">a21c11a</a>)</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-014\" class=\"anchor\" aria-hidden=\"true\" href=\"#014\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.4</h2>\n<ul dir=\"auto\">\n<li>Add Scala Native support <a href=\"https://github.com/lihaoyi/sourcecode/pull/34\">#34</a></li>\n<li>Add 2.13.0-M1 support, <a href=\"https://github.com/lihaoyi/sourcecode/pull/30\">#30</a></li>\n<li>Add OSGi header to jar manifests, <a href=\"https://github.com/lihaoyi/sourcecode/pull/32\">#32</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-013\" class=\"anchor\" aria-hidden=\"true\" href=\"#013\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.3</h2>\n<ul dir=\"auto\">\n<li>Add scala 2.12.x support, thanks to\n<a href=\"https://github.com/larsrh\">Lars Hupel</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-012\" class=\"anchor\" aria-hidden=\"true\" href=\"#012\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.2</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Add <code>sourcecode.Args</code> implicit, which can be used to capture debugging information\nabout the nearest enclosing function call for logging/debugging, thanks to\n<a href=\"https://github.com/benhag\">Benjamin Hagemeister</a></p>\n</li>\n<li>\n<p dir=\"auto\">Attempted fix for <a href=\"https://github.com/lihaoyi/sourcecode/issues/17\">#17</a> and\n<a href=\"https://github.com/lihaoyi/sourcecode/issues/13\">#13</a>, thanks to\n<a href=\"https://github.com/metasim\">Simeon H.K. Fitch</a></p>\n</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-011\" class=\"anchor\" aria-hidden=\"true\" href=\"#011\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.1</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Ignore <code>&lt;local foo&gt;</code> and <code>&lt;init&gt;</code> symbols when determining <code>sourcecode.Name</code>,\n<code>sourcecode.FullName</code> or <code>sourcecode.Enclosing</code>. If you want these, use the\n<code>sourcecode.Name.Machine</code>/<code>sourcecode.FullName.Machine</code>/<code>sourcecode.Enclosing.Machine</code>\nimplicits instead.</p>\n</li>\n<li>\n<p dir=\"auto\">Add <code>sourcecode.Text</code> implicit to capture source code of an expression</p>\n</li>\n<li>\n<p dir=\"auto\">Add implicit conversions to <code>sourcecode.*</code>, so you can pass in a <code>String</code>\nto manually satisfy and implicit wanting a <code>sourcecode.Name</code> or\n<code>sourcecode.FullName</code> or <code>sourcecode.File</code>, an <code>Int</code> to satisfy an implicit\nasking for <code>sourcecode.Line</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code>sourcecode.Enclosing</code> has been simplified to take a single <code>String</code> rather\nthan the previous <code>Vector[Chunk]</code>.</p>\n</li>\n<li>\n<p dir=\"auto\">Added the <code>sourcecode.Pkg</code> implicit, which provides the current\nenclosing package without any of the <code>class</code>s/<code>object</code>s/<code>def</code>s/etc.. Can be\nsubtracted from <code>sourcecode.Enclosing</code> if you <em>only</em> want the\n<code>class</code>s/<code>object</code>s/<code>def</code>s/etc.</p>\n</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-010\" class=\"anchor\" aria-hidden=\"true\" href=\"#010\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>0.1.0</h2>\n<ul dir=\"auto\">\n<li>First release</li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "anatoliykmetyuk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2614813?v=4",
        "url" : "https://api.github.com/users/anatoliykmetyuk",
        "contributions" : 48
      },
      {
        "login" : "lihaoyi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/934140?v=4",
        "url" : "https://api.github.com/users/lihaoyi",
        "contributions" : 25
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://api.github.com/users/lolgab",
        "contributions" : 21
      },
      {
        "login" : "nicolasstucki",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3648029?v=4",
        "url" : "https://api.github.com/users/nicolasstucki",
        "contributions" : 20
      },
      {
        "login" : "alexarchambault",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7063723?v=4",
        "url" : "https://api.github.com/users/alexarchambault",
        "contributions" : 17
      },
      {
        "login" : "olafurpg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1408093?v=4",
        "url" : "https://api.github.com/users/olafurpg",
        "contributions" : 15
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://api.github.com/users/larsrh",
        "contributions" : 3
      },
      {
        "login" : "odersky",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/795990?v=4",
        "url" : "https://api.github.com/users/odersky",
        "contributions" : 3
      },
      {
        "login" : "sjrd",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/535934?v=4",
        "url" : "https://api.github.com/users/sjrd",
        "contributions" : 3
      },
      {
        "login" : "japgolly",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/202935?v=4",
        "url" : "https://api.github.com/users/japgolly",
        "contributions" : 2
      },
      {
        "login" : "smarter",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/63430?v=4",
        "url" : "https://api.github.com/users/smarter",
        "contributions" : 2
      },
      {
        "login" : "tpolecat",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1200131?v=4",
        "url" : "https://api.github.com/users/tpolecat",
        "contributions" : 2
      },
      {
        "login" : "yilinwei",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8933128?v=4",
        "url" : "https://api.github.com/users/yilinwei",
        "contributions" : 2
      },
      {
        "login" : "liufengyun",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/754633?v=4",
        "url" : "https://api.github.com/users/liufengyun",
        "contributions" : 2
      },
      {
        "login" : "Doikor",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2254697?v=4",
        "url" : "https://api.github.com/users/Doikor",
        "contributions" : 1
      },
      {
        "login" : "AndyKirsch",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/21181512?v=4",
        "url" : "https://api.github.com/users/AndyKirsch",
        "contributions" : 1
      },
      {
        "login" : "densh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/320966?v=4",
        "url" : "https://api.github.com/users/densh",
        "contributions" : 1
      },
      {
        "login" : "florian-beetz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8899552?v=4",
        "url" : "https://api.github.com/users/florian-beetz",
        "contributions" : 1
      },
      {
        "login" : "MasseGuillaume",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/921490?v=4",
        "url" : "https://api.github.com/users/MasseGuillaume",
        "contributions" : 1
      },
      {
        "login" : "jodersky",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1007012?v=4",
        "url" : "https://api.github.com/users/jodersky",
        "contributions" : 1
      },
      {
        "login" : "steinybot",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4659562?v=4",
        "url" : "https://api.github.com/users/steinybot",
        "contributions" : 1
      },
      {
        "login" : "Jasper-M",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3708353?v=4",
        "url" : "https://api.github.com/users/Jasper-M",
        "contributions" : 1
      },
      {
        "login" : "robstoll",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5557885?v=4",
        "url" : "https://api.github.com/users/robstoll",
        "contributions" : 1
      },
      {
        "login" : "ryan-williams",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/465045?v=4",
        "url" : "https://api.github.com/users/ryan-williams",
        "contributions" : 1
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://api.github.com/users/SethTisue",
        "contributions" : 1
      },
      {
        "login" : "andreaTP",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5792097?v=4",
        "url" : "https://api.github.com/users/andreaTP",
        "contributions" : 1
      }
    ],
    "commits" : 177,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 118,
        "title" : "NullPointerException when source file does not exist (e.g. in mdoc)",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/118"
      },
      {
        "number" : 111,
        "title" : "Why doesn't `sourcecode.Args` capture argument values under Scala 3?",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/111"
      },
      {
        "number" : 108,
        "title" : "Capture named argument",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/108"
      },
      {
        "number" : 104,
        "title" : "What is the version scheme?",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/104"
      },
      {
        "number" : 102,
        "title" : "Add utility to get enclosing method name reliably",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/102"
      },
      {
        "number" : 93,
        "title" : "FileName incorrect on Windows",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/93"
      },
      {
        "number" : 86,
        "title" : "Cannot get lambda code passed to a function using sourcecode.Args ",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/86"
      },
      {
        "number" : 77,
        "title" : "pprint link in the documentation is broken",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/77"
      },
      {
        "number" : 72,
        "title" : "sourcecode.Text applied to infix operator works unintuitively.",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/72"
      },
      {
        "number" : 66,
        "title" : "sourcecode.Args throws exception",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/66"
      },
      {
        "number" : 59,
        "title" : "Scaladocs",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/59"
      },
      {
        "number" : 54,
        "title" : "macro to insert source code of the current column",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/54"
      },
      {
        "number" : 46,
        "title" : "Change return values to singleton strings",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/46"
      },
      {
        "number" : 38,
        "title" : "sourcecode.Args gets tripped up when used inside a method with a parametric type",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/38"
      },
      {
        "number" : 37,
        "title" : "FullName does not work in `for` loops",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/37"
      },
      {
        "number" : 31,
        "title" : "Compatibility with implicit resolution",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/31"
      },
      {
        "number" : 22,
        "title" : "sourcecode.Name is incorrect when used as an implicit constructor arg on an abstract class",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/22"
      },
      {
        "number" : 20,
        "title" : "Add `Contributions` section explaining how to write and execute tests",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/20"
      },
      {
        "number" : 9,
        "title" : "Some sort of sourcecode.Caller[T] implicit",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/9"
      },
      {
        "number" : 8,
        "title" : "sourcecode.Text and math",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/8"
      },
      {
        "number" : 7,
        "title" : "Leading parens trips up `sourcecode.Text`",
        "url" : "https://github.com/com-lihaoyi/sourcecode/issues/7"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "sourcecode",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "printing-and-debugging",
    "beginnerIssuesLabel" : null
  }
}