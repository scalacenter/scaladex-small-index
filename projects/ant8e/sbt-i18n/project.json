{
  "organization" : "ant8e",
  "repository" : "sbt-i18n",
  "creationDate" : 1529661282000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644301999793
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "An sbt plugin to transform your i18n bundles into Scala code",
    "logo" : "https://avatars.githubusercontent.com/u/229500?v=4",
    "stars" : 9,
    "forks" : 3,
    "watchers" : 3,
    "issues" : 8,
    "creationDate" : 1528896433000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-sbt-i18n\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-i18n\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt i18n</h1>\n<p dir=\"auto\"><a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/b1a04562a4ca1371ca41a9aad815602738ca4beac2e3f8c132c94dad40b5ae17/687474703a2f2f696d672e736869656c64732e696f2f3a6c6963656e73652d6170616368652d626c75652e737667\" alt=\"License\" data-canonical-src=\"http://img.shields.io/:license-apache-blue.svg\" style=\"max-width: 100%;\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ant8e/sbt-i18n/workflows/CI/badge.svg?branch=main\"><img src=\"https://github.com/ant8e/sbt-i18n/workflows/CI/badge.svg?branch=main\" alt=\"example branch parameter\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Sbt i18n is a very simple internationalization tools, that reads resources bundles files in properties files, json, or\n<a href=\"https://github.com/lightbend/config#using-hocon-the-json-superset\">HOCON</a> format and generate Scala code.</p>\n<p dir=\"auto\">A configuration file like this</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"en = {\n  key1 = a text\n  key2 =&quot;a parametrized text {0}&quot;\n  subsection {\n    key3 = some text\n  }\n}\n\"><pre lang=\"hocon\"><code>en = {\n  key1 = a text\n  key2 =\"a parametrized text {0}\"\n  subsection {\n    key3 = some text\n  }\n}\n\n</code></pre></div>\n<p dir=\"auto\">will generate the following Scala code</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object Bundle {\n\n  abstract class I18N {\n    def key1: String\n    def key2(x0: String): String\n    \n    abstract class Subsection {\n      def key4: String\n    }\n    \n    def subsection: Subsection\n  }\n\n  object en extends I18N {\n    val key1 = &quot;&quot;&quot;a text&quot;&quot;&quot;\n    def key2(x0: String): String = java.text.MessageFormat.format(&quot;&quot;&quot;a parametrized text {0}&quot;&quot;&quot;, x0)\n   \n    object subsection  extends Subsection {\n       val key4= &quot;&quot;&quot;2&quot;&quot;&quot;\n    }\n}\n}\n     \"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">Bundle</span> {\n\n  <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">I18N</span> {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">key1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">key2</span>(<span class=\"pl-v\">x0</span>: <span class=\"pl-en\">String</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span>\n    \n    <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Subsection</span> {\n      <span class=\"pl-k\">def</span> <span class=\"pl-en\">key4</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span>\n    }\n    \n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">subsection</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Subsection</span>\n  }\n\n  <span class=\"pl-k\">object</span> <span class=\"pl-en\">en</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">I18N</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">key1</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>a text<span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">key2</span>(<span class=\"pl-v\">x0</span>: <span class=\"pl-en\">String</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> java.text.<span class=\"pl-en\">MessageFormat</span>.format(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>a parametrized text {0}<span class=\"pl-pds\">\"\"\"</span></span>, x0)\n   \n    <span class=\"pl-k\">object</span> <span class=\"pl-en\">subsection</span>  <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Subsection</span> {\n       <span class=\"pl-k\">val</span> <span class=\"pl-smi\">key4</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>2<span class=\"pl-pds\">\"\"\"</span></span>\n    }\n}\n}\n     </pre></div>\n<p dir=\"auto\">The motivation here is to depart from the traditional way of doing \"stringly typed\" message fetching and to have a\nstronger coupling between the application code and the message translations. Having your build break when a\ntranslation is missing or on a faulty pattern is something you may want.</p>\n<h2 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h2>\n<p dir=\"auto\">This plugin requires sbt 1.0.0+.</p>\n<p dir=\"auto\">Add the following to <code>project/plugins.sbt:</code></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"addSbtPlugin(&quot;tech.ant8e&quot; % &quot;sbt-i18n&quot; % &quot;0.5&quot;)\"><pre><code>addSbtPlugin(\"tech.ant8e\" % \"sbt-i18n\" % \"0.5\")\n</code></pre></div>\n<p dir=\"auto\">Write a config file in <code>src/main/i18n/xxx.conf</code>.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"en = {\n  msg1 = a text\n  msg2 =&quot;a parametrized text {0}&quot;\n}\n\nfr = {\n  msg1 = un texte\n  msg2 =&quot;un texte paramétré {0}&quot;\n}\n\"><pre lang=\"hocon\"><code>en = {\n  msg1 = a text\n  msg2 =\"a parametrized text {0}\"\n}\n\nfr = {\n  msg1 = un texte\n  msg2 =\"un texte paramétré {0}\"\n}\n\n</code></pre></div>\n<p dir=\"auto\">And access your translations in your Scala code</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val msg1 = org.example.i18n.Bundle.en.msg1\nval msg2 = org.example.i18n.Bundle.en.msg2(&quot;hello&quot;)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">msg1</span> <span class=\"pl-k\">=</span> org.example.i18n.<span class=\"pl-en\">Bundle</span>.en.msg1\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">msg2</span> <span class=\"pl-k\">=</span> org.example.i18n.<span class=\"pl-en\">Bundle</span>.en.msg2(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">The scala Bundle will be generated by default in package <code>org.example.i18n</code> this can of course be configured:</p>\n<p dir=\"auto\">In oder to change the output package set <code>i18nBundlePackageName := \"org.myorganisation.i18n\"</code> in <code>build.sbt</code>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-input-files\" class=\"anchor\" aria-hidden=\"true\" href=\"#input-files\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Input files</h2>\n<p dir=\"auto\">the plugin will parse all files within <code>src/main/i18n</code> with the <a href=\"https://github.com/lightbend/config\">Typesafe config</a>\nlibrary and build one single config hierarchy that will be the source of the code generation. The top level keys are\nassumed to be language selectors.</p>\n<h3 dir=\"auto\"><a id=\"user-content-caveats\" class=\"anchor\" aria-hidden=\"true\" href=\"#caveats\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Caveats</h3>\n<p dir=\"auto\">The plugin will merge multiple files will no guarantee about order or conflict resolution. When two or more files defines\nthe exact same configuration path it is undefined who will \"win\".</p>\n<h2 dir=\"auto\"><a id=\"user-content-scala-code\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-code\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala Code</h2>\n<h3 dir=\"auto\"><a id=\"user-content-overview\" class=\"anchor\" aria-hidden=\"true\" href=\"#overview\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overview</h3>\n<p dir=\"auto\">The plugin will generate one scala object named <code>Bundle</code> in the specified package.</p>\n<p dir=\"auto\">This object contains one abstract class named <code>I18N</code> that defines the structure of each language.</p>\n<p dir=\"auto\">For each language (or top level key), an object, named like the key, implementing the <code>I18N</code> class is generated.</p>\n<p dir=\"auto\">Simple message will appear as <code>val</code> and parametrized messages as methods.</p>\n<h2 dir=\"auto\"><a id=\"user-content-parametrized-messages\" class=\"anchor\" aria-hidden=\"true\" href=\"#parametrized-messages\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Parametrized messages</h2>\n<p dir=\"auto\">A message that is a valid <em>java.text.MessageFormat</em> pattern will be generated as a method.\nSee <a href=\"https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html\" rel=\"nofollow\">MessageFormat</a>\ndocumentation for details about the supported patterns.</p>\n<p dir=\"auto\">During generation the plugin will infer the correct argument type from the pattern. <code>number</code> will have type <code>Double</code>\nby default and <code>Long</code> when the <code>integer</code> format style is selected. Date and time will have type <code>java.util.Date</code>. <code>choice</code>\nbeing a number format will lead to a <code>Double</code>.  By default (when no format is specified), the argument will be of type\n<code>String</code>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-missing-keys\" class=\"anchor\" aria-hidden=\"true\" href=\"#missing-keys\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Missing keys</h2>\n<p dir=\"auto\">The structure of a bundle is a merge of all the keys of all the languages. Should a key not be defined in a specific\nlanguage, it will be generated as <code>??? [key] ???</code>.</p>\n<p dir=\"auto\">In oder to break generation on missing key set <code>i18nBreakOnMissingKeys := true</code> in <code>build.sbt</code>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-contribution-policy\" class=\"anchor\" aria-hidden=\"true\" href=\"#contribution-policy\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contribution policy</h2>\n<p dir=\"auto\">Contributions via GitHub pull requests are gladly accepted from their original author. Along with any pull requests, please state that the contribution is your original work and that you license the work to the project under the project's open source license. Whether or not you state this explicitly, by submitting any copyrighted material via pull request, email, or other means you agree to license the material under the project's open source license and warrant that you have the legal authority to do so.</p>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\">This code is open source software licensed under the <a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">Apache 2.0 License</a>.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "ant8e",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/229500?v=4",
        "url" : "https://api.github.com/users/ant8e",
        "contributions" : 71
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 71
      },
      {
        "login" : "mergify[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/10562?v=4",
        "url" : "https://api.github.com/users/mergify%5Bbot%5D",
        "contributions" : 35
      }
    ],
    "commits" : 177,
    "topics" : [
      "i18n",
      "sbt-plugin"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 3,
        "title" : "Add compatibility with Java ResourceBundles",
        "url" : "https://github.com/ant8e/sbt-i18n/issues/3"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "internationalization",
    "beginnerIssuesLabel" : null
  }
}