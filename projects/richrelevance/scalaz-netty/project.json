{
  "organization" : "richrelevance",
  "repository" : "scalaz-netty",
  "creationDate" : 1423334827521,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644288886443
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : "A minimalist wrapper for Netty in terms of scalaz-stream",
    "logo" : "https://avatars.githubusercontent.com/u/4031922?v=4",
    "stars" : 69,
    "forks" : 13,
    "watchers" : 8,
    "issues" : 4,
    "creationDate" : 1423262709000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-scalaz-netty\" class=\"anchor\" aria-hidden=\"true\" href=\"#scalaz-netty\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>scalaz-netty</h1>\n<p dir=\"auto\"><a href=\"http://travis-ci.org/RichRelevance/scalaz-netty\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/ab4120b1d60e70cd7b160e99ae30274d671d2a23fa42313ff10b4e84857e957b/68747470733a2f2f7472617669732d63692e6f72672f5269636852656c6576616e63652f7363616c617a2d6e657474792e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/RichRelevance/scalaz-netty.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/RichRelevance/scalaz-netty\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/baa1f4f91f9204d81b192a00f4a5ff98751d866a09e3334ca9a567e262e1e2f3/68747470733a2f2f6261646765732e6769747465722e696d2f5269636852656c6576616e63652f7363616c617a2d6e657474792e737667\" alt=\"Gitter Chat\" data-canonical-src=\"https://badges.gitter.im/RichRelevance/scalaz-netty.svg\" style=\"max-width: 100%;\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-getting-started\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-started\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Getting Started</h2>\n<p dir=\"auto\">First, you'll need to add the RichRelevance Bintray resolver setting to your SBT file:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"resolvers += &quot;RichRelevance Bintray&quot; at &quot;http://dl.bintray.com/rr/releases&quot;\"><pre>resolvers <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RichRelevance Bintray<span class=\"pl-pds\">\"</span></span> at <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://dl.bintray.com/rr/releases<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">If you want to be able to use snapshot releases, replace <code>releases</code> with <code>snapshots</code>.  With the resolver configured, add the following dependency specification:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.scalaz.netty&quot; %% &quot;scalaz-netty&quot; % &quot;0.4.2&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.scalaz.netty<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scalaz-netty<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.4.2<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Builds are published for Scala 2.11.8, and for 2.12.x for versions at or above 0.4.2.  The latest stable release is <strong>0.4.2</strong>.</p>\n<p dir=\"auto\">Versions that end in 'a' in the 0.3.x series use scalaz 7.2.x, versions without use scalaz 7.1.x.</p>\n<p dir=\"auto\">The 0.3.2 versions contain one additional feature over the 0.3, <a href=\"https://github.com/RichRelevance/scalaz-netty/pull/28\">https://github.com/RichRelevance/scalaz-netty/pull/28</a>, which has only been tested on Linux and may not work elsewhere.</p>\n<p dir=\"auto\">The upstream dependencies for this project include the following:</p>\n<p dir=\"auto\">For version 0.4.1 and 0.4.2:</p>\n<ul dir=\"auto\">\n<li>scalaz 7.2.7</li>\n<li>scalaz-stream 0.8.6a</li>\n<li>scodec-bits 1.1.2</li>\n<li>netty 4.0.42.Final</li>\n</ul>\n<p dir=\"auto\">For version 0.4:</p>\n<ul dir=\"auto\">\n<li>scalaz 7.2.5</li>\n<li>scalaz-stream 0.8.4a</li>\n<li>scodec-bits 1.1.0</li>\n<li>netty 4.0.40.Final</li>\n</ul>\n<p dir=\"auto\">For version 0.3 and 0.3.2:</p>\n<ul dir=\"auto\">\n<li>scalaz 7.1.7</li>\n<li>scalaz-stream 0.8</li>\n<li>scodec-bits 1.0.12</li>\n<li>netty 4.0.36.Final</li>\n</ul>\n<p dir=\"auto\">And for version 0.3a and 0.3.2a:</p>\n<ul dir=\"auto\">\n<li>scalaz 7.2.2</li>\n<li>scalaz-stream 0.8a</li>\n<li>scodec-bits 1.0.12</li>\n<li>netty 4.0.36.Final</li>\n</ul>\n<p dir=\"auto\">Snapshot releases follow the version scheme <code>master-&lt;sha1&gt;</code>, where the \"<code>sha1</code>\" component is the Git commit that was snapshotted.  Not all commits will have corresponding snapshot releases.  You can browse the list of snapshot releases <a href=\"https://bintray.com/rr/snapshots/scalaz-netty/view\" rel=\"nofollow\">on bintray</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example</h2>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scalaz.netty._\nimport scalaz.stream._\nimport scalaz.concurrent._\nimport java.net.InetSocketAddress\nimport scodec.bits.ByteVector\n\n/*\n * A simple server which accepts a connection, echos the incoming\n * data back to the sender, waiting for the client to close the connection.\n */\n\ndef log(msg: String): Task[Unit] = Task.delay(println(s&quot;$msg&quot;))\n\nval address = new InetSocketAddress(&quot;localhost&quot;, 9090)\n\nval EchoServer = merge.mergeN(Netty server address map { incoming =&gt;\n  for {\n    exchange &lt;- incoming\n    _ &lt;- Process.eval(log(&quot;accepted connection&quot;))\n    _ &lt;- exchange.read to exchange.write\n  } yield ()\n})\n\n/*\n * A simple client which sends ByteVector(1, 2, 3) to the server,\n * prints its response and then shuts down.\n */\n\nval BasicClient = Netty connect address flatMap { exchange =&gt;\n  for {\n    _ &lt;- Process(ByteVector(1, 2, 3)) to exchange.write\n    data &lt;- exchange.read take 1\n    _ &lt;- Process.eval(log(s&quot;received data = $data&quot;))\n  } yield ()\n}\n\n// Usage:\n// scala&gt; EchoServer.run.runAsync(_ =&gt; ())  // press Enter when this completes to acquire new prompt\n// scala&gt; BasicClient.run.run\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scalaz</span>.<span class=\"pl-en\">netty</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scalaz</span>.<span class=\"pl-en\">stream</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scalaz</span>.<span class=\"pl-en\">concurrent</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">net</span>.<span class=\"pl-en\">InetSocketAddress</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scodec</span>.<span class=\"pl-en\">bits</span>.<span class=\"pl-en\">ByteVector</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\"> * A simple server which accepts a connection, echos the incoming</span>\n<span class=\"pl-c\"> * data back to the sender, waiting for the client to close the connection.</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">log</span>(<span class=\"pl-v\">msg</span>: <span class=\"pl-en\">String</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Task</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Task</span>.delay(println(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span>$msg<span class=\"pl-s\">\"</span>))\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">address</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">InetSocketAddress</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>localhost<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">9090</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">EchoServer</span> <span class=\"pl-k\">=</span> merge.mergeN(<span class=\"pl-en\">Netty</span> server address map { incoming <span class=\"pl-k\">=&gt;</span>\n  <span class=\"pl-k\">for</span> {\n    exchange <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> incoming\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Process</span>.eval(log(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>accepted connection<span class=\"pl-pds\">\"</span></span>))\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> exchange.read to exchange.write\n  } <span class=\"pl-k\">yield</span> ()\n})\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\"> * A simple client which sends ByteVector(1, 2, 3) to the server,</span>\n<span class=\"pl-c\"> * prints its response and then shuts down.</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">BasicClient</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Netty</span> connect address flatMap { exchange <span class=\"pl-k\">=&gt;</span>\n  <span class=\"pl-k\">for</span> {\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Process</span>(<span class=\"pl-en\">ByteVector</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>)) to exchange.write\n    data <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> exchange.read take <span class=\"pl-c1\">1</span>\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Process</span>.eval(log(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">received data = </span>$data<span class=\"pl-s\">\"</span>))\n  } <span class=\"pl-k\">yield</span> ()\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Usage:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> scala&gt; EchoServer.run.runAsync(_ =&gt; ())  // press Enter when this completes to acquire new prompt</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> scala&gt; BasicClient.run.run</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-future-work\" class=\"anchor\" aria-hidden=\"true\" href=\"#future-work\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Future Work</h2>\n<ul dir=\"auto\">\n<li>Byte buffers are copied upon receipt.  The only way to <em>safely</em> address this problem will be to integrate with Scodec and decode against the directly allocated byte buffers.  Not hard to do, really...</li>\n<li>Exceptions probably don't propagate properly under all circumstances.</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\">Licensed under the Apache License 2.0.  For more information, please see <code>LICENSE.txt</code>.  Opening a pull request signifies your consent to license your contributions under the Apache License 2.0.  Don't open a pull request if you don't know what this means.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "djspiewak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/752?v=4",
        "url" : "https://api.github.com/users/djspiewak",
        "contributions" : 51
      },
      {
        "login" : "alissapajer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1088100?v=4",
        "url" : "https://api.github.com/users/alissapajer",
        "contributions" : 21
      },
      {
        "login" : "scottcarey",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1198447?v=4",
        "url" : "https://api.github.com/users/scottcarey",
        "contributions" : 18
      },
      {
        "login" : "shengc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/940628?v=4",
        "url" : "https://api.github.com/users/shengc",
        "contributions" : 8
      },
      {
        "login" : "gabor-aranyossy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/29858875?v=4",
        "url" : "https://api.github.com/users/gabor-aranyossy",
        "contributions" : 4
      },
      {
        "login" : "espenhw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/53942?v=4",
        "url" : "https://api.github.com/users/espenhw",
        "contributions" : 2
      },
      {
        "login" : "julien-truffaut",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1859417?v=4",
        "url" : "https://api.github.com/users/julien-truffaut",
        "contributions" : 2
      },
      {
        "login" : "nikore",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/230493?v=4",
        "url" : "https://api.github.com/users/nikore",
        "contributions" : 2
      },
      {
        "login" : "kanterov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/467927?v=4",
        "url" : "https://api.github.com/users/kanterov",
        "contributions" : 1
      }
    ],
    "commits" : 109,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 26,
        "title" : "Check Channel writability before writing",
        "url" : "https://github.com/RichRelevance/scalaz-netty/issues/26"
      },
      {
        "number" : 25,
        "title" : "Figure out how to test data loss near exception",
        "url" : "https://github.com/RichRelevance/scalaz-netty/issues/25"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "network",
    "beginnerIssuesLabel" : null
  }
}