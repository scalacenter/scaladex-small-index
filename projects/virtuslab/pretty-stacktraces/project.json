{
  "organization" : "virtuslab",
  "repository" : "pretty-stacktraces",
  "creationDate" : 1634045219000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644292131485
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : null,
    "logo" : "https://avatars.githubusercontent.com/u/5324131?v=4",
    "stars" : 44,
    "forks" : 5,
    "watchers" : 11,
    "issues" : 4,
    "creationDate" : 1618562016000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-pretty-stacktraces\" class=\"anchor\" aria-hidden=\"true\" href=\"#pretty-stacktraces\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Pretty stacktraces</h1>\n<h3 dir=\"auto\"><a id=\"user-content-goal\" class=\"anchor\" aria-hidden=\"true\" href=\"#goal\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Goal</h3>\n<p dir=\"auto\">The intention of this tool is to provide simpler debugging for Scala novices. It prettifies standard bytecode stacktrace by removing garbage,\nresolving name mangling and applying colors for better UX.</p>\n<h3 dir=\"auto\"><a id=\"user-content-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example</h3>\n<p dir=\"auto\">Let's assume the following code:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"extension (n: Int)\n  def !(n2: Int): Int =\n    if math.random &lt; n/10.0 then throw RuntimeException(&quot;error&quot;)\n    n + n2\n\n@main def run() =\n  val x = (0 to 10).flatMap { \n    n =&gt; List(n).map { \n      n =&gt; (if n &gt; 5 then List(true) else List(false)).flatMap {\n        n =&gt; (if n then List(&quot;0&quot;) else List(&quot;5&quot;)).map { \n          n =&gt; n.toInt ! n.toInt ! n.toInt \n        }\n      }\n    } \n  }\"><pre><span class=\"pl-k\">extension</span> (<span class=\"pl-v\">n</span>: <span class=\"pl-en\">Int</span>)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">!</span>(<span class=\"pl-v\">n2</span>: <span class=\"pl-en\">Int</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span>\n    <span class=\"pl-k\">if</span> math.random <span class=\"pl-k\">&lt;</span> n<span class=\"pl-k\">/</span><span class=\"pl-c1\">10.0</span> <span class=\"pl-k\">then</span> <span class=\"pl-k\">throw</span> <span class=\"pl-en\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error<span class=\"pl-pds\">\"</span></span>)\n    n <span class=\"pl-k\">+</span> n2\n\n<span class=\"pl-k\">@</span>main <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>() <span class=\"pl-k\">=</span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">0</span> to <span class=\"pl-c1\">10</span>).flatMap { \n    n <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">List</span>(n).map { \n      n <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-k\">if</span> n <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">5</span> <span class=\"pl-k\">then</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">true</span>) <span class=\"pl-k\">else</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">false</span>)).flatMap {\n        n <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-k\">if</span> n <span class=\"pl-k\">then</span> <span class=\"pl-en\">List</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">else</span> <span class=\"pl-en\">List</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>5<span class=\"pl-pds\">\"</span></span>)).map { \n          n <span class=\"pl-k\">=&gt;</span> n.toInt <span class=\"pl-k\">!</span> n.toInt <span class=\"pl-k\">!</span> n.toInt \n        }\n      }\n    } \n  }</pre></div>\n<p dir=\"auto\">After executing it with <code>sbt run</code> we get following output:</p>\n<details>\n  <summary>Standard stacktrace</summary>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt:pretty-stacktraces&gt; run\n[info] compiling 1 Scala source to &lt;root&gt;/stacktraces/target/scala-3.0.0-RC2/classes ...\n[info] running org.virtuslab.stacktraces.run \n[error] (run-main-5) java.lang.RuntimeException: error\n[error] java.lang.RuntimeException: error\n[error]         at org.virtuslab.stacktraces.main$package$.$bang(main.scala:8)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$1$$anonfun$1$$anonfun$1$$anonfun$1(main.scala:17)\n[error]         at scala.collection.immutable.List.map(List.scala:246)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$2$$anonfun$2$$anonfun$2(main.scala:17)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$3$$anonfun$3$$anonfun$adapted$1(main.scala:18)\n[error]         at scala.collection.immutable.List.flatMap(List.scala:293)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$4$$anonfun$4(main.scala:18)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$5$$anonfun$adapted$1(main.scala:19)\n[error]         at scala.collection.immutable.List.map(List.scala:246)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$6(main.scala:19)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$adapted$1(main.scala:20)\n[error]         at scala.collection.StrictOptimizedIterableOps.flatMap(StrictOptimizedIterableOps.scala:117)\n[error]         at scala.collection.StrictOptimizedIterableOps.flatMap$(StrictOptimizedIterableOps.scala:104)\n[error]         at scala.collection.immutable.Range.flatMap(Range.scala:59)\n[error]         at org.virtuslab.stacktraces.main$package$.run(main.scala:20)\n[error]         at org.virtuslab.stacktraces.run.main(main.scala:11)\n[error]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[error]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n[error]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[error]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n[error] stack trace is suppressed; run last Compile / bgRun for the full output\n[error] Nonzero exit code: 1\n[error] (Compile / run) Nonzero exit code: 1\n[error] Total time: 1 s, completed 30 kwi 2021, 12:51:27\"><pre><code>sbt:pretty-stacktraces&gt; run\n[info] compiling 1 Scala source to &lt;root&gt;/stacktraces/target/scala-3.0.0-RC2/classes ...\n[info] running org.virtuslab.stacktraces.run \n[error] (run-main-5) java.lang.RuntimeException: error\n[error] java.lang.RuntimeException: error\n[error]         at org.virtuslab.stacktraces.main$package$.$bang(main.scala:8)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$1$$anonfun$1$$anonfun$1$$anonfun$1(main.scala:17)\n[error]         at scala.collection.immutable.List.map(List.scala:246)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$2$$anonfun$2$$anonfun$2(main.scala:17)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$3$$anonfun$3$$anonfun$adapted$1(main.scala:18)\n[error]         at scala.collection.immutable.List.flatMap(List.scala:293)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$4$$anonfun$4(main.scala:18)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$5$$anonfun$adapted$1(main.scala:19)\n[error]         at scala.collection.immutable.List.map(List.scala:246)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$6(main.scala:19)\n[error]         at org.virtuslab.stacktraces.main$package$.$anonfun$adapted$1(main.scala:20)\n[error]         at scala.collection.StrictOptimizedIterableOps.flatMap(StrictOptimizedIterableOps.scala:117)\n[error]         at scala.collection.StrictOptimizedIterableOps.flatMap$(StrictOptimizedIterableOps.scala:104)\n[error]         at scala.collection.immutable.Range.flatMap(Range.scala:59)\n[error]         at org.virtuslab.stacktraces.main$package$.run(main.scala:20)\n[error]         at org.virtuslab.stacktraces.run.main(main.scala:11)\n[error]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[error]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n[error]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[error]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n[error] stack trace is suppressed; run last Compile / bgRun for the full output\n[error] Nonzero exit code: 1\n[error] (Compile / run) Nonzero exit code: 1\n[error] Total time: 1 s, completed 30 kwi 2021, 12:51:27\n</code></pre></div>\n</details>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"old.png\"><img src=\"old.png\" alt=\"\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">As you can see the stacktrace has a lot of internal bytecode calls which does not resemble Scala code:</p>\n<ul dir=\"auto\">\n<li>name <code>!</code> is translated to <code>$bang</code></li>\n<li>lambdas has synthetic names like <code>$anonfun$1$$anonfun$1$$anonfun$1$$anonfun$1</code></li>\n<li>synthetic functions which don't have source code conterparts like <code>$anonfun$3$$anonfun$3$$anonfun$adapted$1</code></li>\n<li>another name mangling for <code>@inline def strictOptimizedFlatMap</code> in file <code>StrictOptimizedIterableOps.scala:117</code> renamed to <code>flatMap</code></li>\n</ul>\n<p dir=\"auto\">This is where stacktraces comes in. Let's try wrap our example inside this try catch:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  try\n    // code that throws an exception\n    ...\n  catch\n    case e: Exception =&gt;\n      val prettyStackTrace = stacktraces.convertToPrettyStackTrace(e)\n      PrettyExceptionPrinter.printStacktrace(prettyStackTrace)\"><pre>  <span class=\"pl-k\">try</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> code that throws an exception</span>\n    ...\n  <span class=\"pl-k\">catch</span>\n    <span class=\"pl-k\">case</span> <span class=\"pl-v\">e</span>: <span class=\"pl-en\">Exception</span> <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">prettyStackTrace</span> <span class=\"pl-k\">=</span> stacktraces.convertToPrettyStackTrace(e)\n      <span class=\"pl-en\">PrettyExceptionPrinter</span>.printStacktrace(prettyStackTrace)</pre></div>\n<p dir=\"auto\">After executing it with <code>sbt run</code> we get following output:</p>\n<details>\n  <summary>Prettified stacktrace</summary>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt:stacktraces&gt; run\n[info] compiling 1 Scala source to &lt;root&gt;/stacktraces/target/scala-3.0.0-RC2/classes ...\n[info] running org.virtuslab.stacktraces.run \nException in thread run-main-6: java.lang.RuntimeException: error\n  at extension method ! in src/main/scala/com/virtuslab/stacktraces/main.scala:8 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at lambda (String) =&gt; Int of some outer lambda in src/main/scala/com/virtuslab/stacktraces/main.scala:17 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method map in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/immutable/List.scala:246 inside stdlib-library.jar\n  at lambda (Boolean) =&gt; IterableOnce[Int] of some outer lambda in src/main/scala/com/virtuslab/stacktraces/main.scala:16 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method flatMap in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/immutable/List.scala:293 inside stdlib-library.jar\n  at lambda (Int) =&gt; List[Int] of some outer lambda in src/main/scala/com/virtuslab/stacktraces/main.scala:15 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method map in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/immutable/List.scala:246 inside stdlib-library.jar\n  at lambda (Int) =&gt; IterableOnce[List[Int]] of x in src/main/scala/com/virtuslab/stacktraces/main.scala:14 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method strictOptimizedFlatMap in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/StrictOptimizedIterableOps.scala:117 inside stdlib-library.jar\n  at method flatMap in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/StrictOptimizedIterableOps.scala:104 inside stdlib-library.jar\n  at method run in src/main/scala/com/virtuslab/stacktraces/main.scala:20 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method main in src/main/scala/com/virtuslab/stacktraces/main.scala:11 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method invoke0 in jdk.internal.reflect.NativeMethodAccessorImpl:(Native method) \n  at method invoke in jdk.internal.reflect.NativeMethodAccessorImpl:62 \n  at method invoke in jdk.internal.reflect.DelegatingMethodAccessorImpl:43 \n  at method invoke in java.lang.reflect.Method:566 \n  at method invokeMain in sbt.Run:133 \n  at method execute$1 in sbt.Run:82 \n  at method $anonfun$runWithLoader$5 in sbt.Run:110 \n  at method get in sbt.util.InterfaceUtil$$anon$1:17 \n  at method run in sbt.TrapExit$App:258 \n\n[success] Total time: 6 s, completed 30 kwi 2021, 12:55:0\"><pre><code>sbt:stacktraces&gt; run\n[info] compiling 1 Scala source to &lt;root&gt;/stacktraces/target/scala-3.0.0-RC2/classes ...\n[info] running org.virtuslab.stacktraces.run \nException in thread run-main-6: java.lang.RuntimeException: error\n  at extension method ! in src/main/scala/com/virtuslab/stacktraces/main.scala:8 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at lambda (String) =&gt; Int of some outer lambda in src/main/scala/com/virtuslab/stacktraces/main.scala:17 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method map in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/immutable/List.scala:246 inside stdlib-library.jar\n  at lambda (Boolean) =&gt; IterableOnce[Int] of some outer lambda in src/main/scala/com/virtuslab/stacktraces/main.scala:16 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method flatMap in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/immutable/List.scala:293 inside stdlib-library.jar\n  at lambda (Int) =&gt; List[Int] of some outer lambda in src/main/scala/com/virtuslab/stacktraces/main.scala:15 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method map in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/immutable/List.scala:246 inside stdlib-library.jar\n  at lambda (Int) =&gt; IterableOnce[List[Int]] of x in src/main/scala/com/virtuslab/stacktraces/main.scala:14 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method strictOptimizedFlatMap in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/StrictOptimizedIterableOps.scala:117 inside stdlib-library.jar\n  at method flatMap in out/bootstrap/stdlib-bootstrapped/scala-3.0.0-RC2/src_managed/main/scala-library-src/scala/collection/StrictOptimizedIterableOps.scala:104 inside stdlib-library.jar\n  at method run in src/main/scala/com/virtuslab/stacktraces/main.scala:20 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method main in src/main/scala/com/virtuslab/stacktraces/main.scala:11 inside stacktraces_3.0.0-RC2-0.1.0.jar\n  at method invoke0 in jdk.internal.reflect.NativeMethodAccessorImpl:(Native method) \n  at method invoke in jdk.internal.reflect.NativeMethodAccessorImpl:62 \n  at method invoke in jdk.internal.reflect.DelegatingMethodAccessorImpl:43 \n  at method invoke in java.lang.reflect.Method:566 \n  at method invokeMain in sbt.Run:133 \n  at method execute$1 in sbt.Run:82 \n  at method $anonfun$runWithLoader$5 in sbt.Run:110 \n  at method get in sbt.util.InterfaceUtil$$anon$1:17 \n  at method run in sbt.TrapExit$App:258 \n\n[success] Total time: 6 s, completed 30 kwi 2021, 12:55:0\n</code></pre></div>\n</details>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"new.png\"><img src=\"new.png\" alt=\"\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Advantages of that solution:</p>\n<ul dir=\"auto\">\n<li>unmangles names to the ones from the source code</li>\n<li>instead of providing umeaningful name like <code>$anonfun$1$$anonfun$1$$anonfun$1$$anonfun$1</code> tries provide some context information, e. g. type of that lambda</li>\n<li>tries to filter synthetic calls that are not crucial to follow the exection trace, e. g. <code>$anonfun$3$$anonfun$3$$anonfun$adapted$1</code></li>\n<li>add ANSI coloring to the output, so it is readable for the end-user</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-how-does-it-work\" class=\"anchor\" aria-hidden=\"true\" href=\"#how-does-it-work\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>How does it work?</h3>\n<p dir=\"auto\">This is example is just proof of concept, for now tool is working heuristically since a lot of semantic information is lost during compilation.\nThe idea is simple, since the stacktrace already has well definded file/line data for source code, we try to find the corresponding TASTY file,\nthen we traverse the file to find <code>DefDef</code> defined in that line.</p>\n<h3 dir=\"auto\"><a id=\"user-content-shortcomings-of-that-solution\" class=\"anchor\" aria-hidden=\"true\" href=\"#shortcomings-of-that-solution\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Shortcomings of that solution</h3>\n<p dir=\"auto\">The general problem is for nested functions with mangled names. Let's look at the below example, which can be found at <a href=\"./src/test/scala/com/virtuslab/stacktraces/BasicTest.scala\">test</a> directory.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private def executeTest(test: () =&gt; Unit) =\n    try\n      test()\n    catch\n      case e: Exception =&gt;\n        val prettyStackTrace = stacktraces.convertToPrettyStackTrace(e)\n        PrettyExceptionPrinter.printStacktrace(prettyStackTrace)\n\n  @Test \n  def nestedLambdas = executeTest { () =&gt;\n      val y = 1\n      val x = (0 to 10).flatMap { \n        n =&gt; List(n).map { \n          n =&gt; (if n &gt; 5 then List(true) else List(false)).flatMap {\n            n =&gt; (if n then List(&quot;0&quot;) else List(&quot;5&quot;)).map { \n              n =&gt; n.toInt ! n.toInt ! n.toInt \n            }\n          }\n        } \n      }\n      val z = 1\n    } \"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">executeTest</span>(<span class=\"pl-v\">test</span>: () <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Unit</span>) <span class=\"pl-k\">=</span>\n    <span class=\"pl-k\">try</span>\n      test()\n    <span class=\"pl-k\">catch</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-v\">e</span>: <span class=\"pl-en\">Exception</span> <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-k\">val</span> <span class=\"pl-smi\">prettyStackTrace</span> <span class=\"pl-k\">=</span> stacktraces.convertToPrettyStackTrace(e)\n        <span class=\"pl-en\">PrettyExceptionPrinter</span>.printStacktrace(prettyStackTrace)\n\n  <span class=\"pl-k\">@</span><span class=\"pl-en\">Test</span> \n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">nestedLambdas</span> <span class=\"pl-k\">=</span> executeTest { () <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">y</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">0</span> to <span class=\"pl-c1\">10</span>).flatMap { \n        n <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">List</span>(n).map { \n          n <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-k\">if</span> n <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">5</span> <span class=\"pl-k\">then</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">true</span>) <span class=\"pl-k\">else</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">false</span>)).flatMap {\n            n <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-k\">if</span> n <span class=\"pl-k\">then</span> <span class=\"pl-en\">List</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">else</span> <span class=\"pl-en\">List</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>5<span class=\"pl-pds\">\"</span></span>)).map { \n              n <span class=\"pl-k\">=&gt;</span> n.toInt <span class=\"pl-k\">!</span> n.toInt <span class=\"pl-k\">!</span> n.toInt \n            }\n          }\n        } \n      }\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">z</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\n    } </pre></div>\n<p dir=\"auto\">If we take a look at the prettified stacktrace, we get:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"problem.png\"><img src=\"problem.png\" alt=\"\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">the first lambda counting from the bottom of the stack trace is:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"at lambda (Int) =&gt; IterableOnce[List[Int]] of x in src/test/scala/com/virtuslab/stacktraces/BasicTest.scala:42\"><pre><code>at lambda (Int) =&gt; IterableOnce[List[Int]] of x in src/test/scala/com/virtuslab/stacktraces/BasicTest.scala:42\n</code></pre></div>\n<p dir=\"auto\">which should actually be</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"at lambda () =&gt; Unit of executeTest in src/test/scala/com/virtuslab/stacktraces/BasicTest.scala:37\"><pre><code>at lambda () =&gt; Unit of executeTest in src/test/scala/com/virtuslab/stacktraces/BasicTest.scala:37\n</code></pre></div>\n<p dir=\"auto\">The problem is, the original stack trace for that is:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"...\norg.virtuslab.stacktraces.BasicTest.$anonfun$6(BasicTest.scala:47)\norg.virtuslab.stacktraces.BasicTest.$anonfun$adapted$1(BasicTest.scala:48) // &lt;-- pointing at closing bracket of flatMap\nscala.collection.StrictOptimizedIterableOps.flatMap(StrictOptimizedIterableOps.scala:117)\nscala.collection.StrictOptimizedIterableOps.flatMap$(StrictOptimizedIterableOps.scala:104)\nscala.collection.immutable.Range.flatMap(Range.scala:59)\norg.virtuslab.stacktraces.BasicTest.nestedLambdas$$anonfun$1(BasicTest.scala:48) // &lt;-- also pointing at closing bracket of flatMap\norg.virtuslab.stacktraces.BasicTest.executeTest(BasicTest.scala:30)\norg.virtuslab.stacktraces.BasicTest.nestedLambdas(BasicTest.scala:50)\n...\"><pre><code>...\norg.virtuslab.stacktraces.BasicTest.$anonfun$6(BasicTest.scala:47)\norg.virtuslab.stacktraces.BasicTest.$anonfun$adapted$1(BasicTest.scala:48) // &lt;-- pointing at closing bracket of flatMap\nscala.collection.StrictOptimizedIterableOps.flatMap(StrictOptimizedIterableOps.scala:117)\nscala.collection.StrictOptimizedIterableOps.flatMap$(StrictOptimizedIterableOps.scala:104)\nscala.collection.immutable.Range.flatMap(Range.scala:59)\norg.virtuslab.stacktraces.BasicTest.nestedLambdas$$anonfun$1(BasicTest.scala:48) // &lt;-- also pointing at closing bracket of flatMap\norg.virtuslab.stacktraces.BasicTest.executeTest(BasicTest.scala:30)\norg.virtuslab.stacktraces.BasicTest.nestedLambdas(BasicTest.scala:50)\n...\n</code></pre></div>\n<p dir=\"auto\">We could try to use the name <code>nestedLambdas$$anonfun$1</code> for further disambiguation, but it's not general rule that lamba will have prefix of its wrapping function, eventually\nwe always can end up with some hard to disambiguate problem.</p>\n<h3 dir=\"auto\"><a id=\"user-content-further-development\" class=\"anchor\" aria-hidden=\"true\" href=\"#further-development\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Further development</h3>\n<p dir=\"auto\">We should consider generating some metadata for debugging purposes.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "BarkingBad",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/32793002?v=4",
        "url" : "https://api.github.com/users/BarkingBad",
        "contributions" : 39
      },
      {
        "login" : "romanowski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3967938?v=4",
        "url" : "https://api.github.com/users/romanowski",
        "contributions" : 9
      },
      {
        "login" : "alexarchambault",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7063723?v=4",
        "url" : "https://api.github.com/users/alexarchambault",
        "contributions" : 1
      }
    ],
    "commits" : 49,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 18,
        "title" : "StacktracesInspector.inspectStackTrace unconditionally prints error to stdout",
        "url" : "https://github.com/VirtusLab/pretty-stacktraces/issues/18"
      },
      {
        "number" : 14,
        "title" : "Cannot disambiguate frames for apply-invoked functions",
        "url" : "https://github.com/VirtusLab/pretty-stacktraces/issues/14"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "printing-and-debugging",
    "beginnerIssuesLabel" : null
  }
}