{
  "organization" : "travisbrown",
  "repository" : "dhallj",
  "creationDate" : 1607613338000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660781980127
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Dhall for Java",
    "logo" : "https://avatars.githubusercontent.com/u/316049?v=4",
    "stars" : 172,
    "forks" : 7,
    "watchers" : 6,
    "issues" : 38,
    "creationDate" : 1585314746000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-dhall-for-java\" class=\"anchor\" aria-hidden=\"true\" href=\"#dhall-for-java\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dhall for Java</h1>\n<p dir=\"auto\"><a href=\"https://github.com/travisbrown/dhallj/actions\"><img src=\"https://camo.githubusercontent.com/e472a591574fb21007d0d0713197fb947db4a36ccaf4754b15241390ac255c92/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f74726176697362726f776e2f6468616c6c6a2f436f6e74696e756f7573253230496e746567726174696f6e2e737667\" alt=\"Build status\" data-canonical-src=\"https://img.shields.io/github/workflow/status/travisbrown/dhallj/Continuous%20Integration.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/dhallj/\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/06c55569604c09f117e9c9795d1c21d1cc3aa2a4fadeb0e3a2bca46bcd494a67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769747465722d6a6f696e253230636861742d677265656e2e737667\" alt=\"Gitter\" data-canonical-src=\"https://img.shields.io/badge/gitter-join%20chat-green.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/org.dhallj/dhall-core\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/b6039aded6c87afab45961848146b30c58e5116d3bac48b400e26404c807fae4/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f6f72672e6468616c6c6a2f6468616c6c2d636f72652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/org.dhallj/dhall-core.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">This project is an implementation of the <a href=\"https://dhall-lang.org/\" rel=\"nofollow\">Dhall</a> configuration language for the Java\nVirtual Machine.</p>\n<p dir=\"auto\">Our goal for this project is to make it as easy as possible to integrate Dhall\ninto JVM build systems (see the <a href=\"https://github.com/dhall-lang/dhall-kubernetes\">dhall-kubernetes</a> demonstration\n<a href=\"#converting-to-other-formats\">below</a> for a concrete example of why you might want to do this).</p>\n<p dir=\"auto\">The core modules have no external dependencies, are Java 7-compatible, and are fairly minimal:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ du -h modules/core/target/dhall-core-0.10.0-M1.jar\n168K    modules/core/target/dhall-core-0.10.0-M1.jar\n\n$ du -h modules/parser/target/dhall-parser-0.10.0-M1.jar\n108K    modules/parser/target/dhall-parser-0.10.0-M1.jar\"><pre>$ du -h modules/core/target/dhall-core-0.10.0-M1.jar\n168K    modules/core/target/dhall-core-0.10.0-M1.jar\n\n$ du -h modules/parser/target/dhall-parser-0.10.0-M1.jar\n108K    modules/parser/target/dhall-parser-0.10.0-M1.jar</pre></div>\n<p dir=\"auto\">There are also several <a href=\"https://www.scala-lang.org\" rel=\"nofollow\">Scala</a> modules that are published for Scala 2.12,\n2.13, and 3.0. While most of the examples in this README are focused on Scala, you\nshouldn't need to know or care about Scala to use the core DhallJ modules.</p>\n<p dir=\"auto\">The initial development of this project was supported in part by <a href=\"https://permutive.com\" rel=\"nofollow\">Permutive</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of contents</h2>\n<ul dir=\"auto\">\n<li><a href=\"#status\">Status</a></li>\n<li><a href=\"#getting-started\">Getting started</a></li>\n<li><a href=\"#converting-to-other-formats\">Converting to other formats</a></li>\n<li><a href=\"#import-resolution\">Import resolution</a></li>\n<li><a href=\"#command-line-interface\">Command-line interface</a></li>\n<li><a href=\"#other-stuff\">Other stuff</a></li>\n<li><a href=\"#developing\">Developing</a></li>\n<li><a href=\"#community\">Community</a></li>\n<li><a href=\"#copyright-and-license\">Copyright and license</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-status\" class=\"anchor\" aria-hidden=\"true\" href=\"#status\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Status</h2>\n<p dir=\"auto\">The current release of this project supports <a href=\"https://github.com/dhall-lang/dhall-lang/pull/1194\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/dhall-lang/dhall-lang/pull/1194/hovercard\">Dhall 21.0.0</a>.\nWe're running the <a href=\"https://github.com/dhall-lang/dhall-lang/tree/master/tests\">Dhall acceptance test suites</a> for parsing, normalization,\n<a href=\"https://cbor.io/\" rel=\"nofollow\">CBOR</a> encoding and decoding, hashing, and type inference, and\ncurrently all tests are passing (with three exceptions; see the <a href=\"https://github.com/travisbrown/dhallj/releases/tag/v0.10.0-M1\">0.10.0-M1 release notes for details</a>).</p>\n<p dir=\"auto\">There are several known issues:</p>\n<ul dir=\"auto\">\n<li>The parser <a href=\"https://github.com/travisbrown/dhallj/issues/2\" data-hovercard-type=\"issue\" data-hovercard-url=\"/travisbrown/dhallj/issues/2/hovercard\">cannot parse deeply nested structures</a> (records, etc., although note that indefinitely long lists are fine).</li>\n<li>The type checker is <a href=\"https://github.com/travisbrown/dhallj/issues/3\" data-hovercard-type=\"issue\" data-hovercard-url=\"/travisbrown/dhallj/issues/3/hovercard\">also not stack-safe</a> (this should be fixed soon).</li>\n<li>Import resolution is not provided in the core modules, and is a work in progress.</li>\n</ul>\n<p dir=\"auto\">While we think the project is reasonably well-tested, it's very new, is sure to be full of bugs, and\nnothing about the API should be considered stable at the moment. Please use responsibly.</p>\n<h2 dir=\"auto\"><a id=\"user-content-getting-started\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-started\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Getting started</h2>\n<p dir=\"auto\">The easiest way to try things out is to add the Scala wrapper module to your build.\nIf you're using <a href=\"https://www.scala-sbt.org\" rel=\"nofollow\">sbt</a> that would look like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.dhallj&quot; %% &quot;dhall-scala&quot; % &quot;0.10.0-M1&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.dhallj<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dhall-scala<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.10.0-M1<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">This dependency includes two packages: <code>org.dhallj.syntax</code> and <code>org.dhallj.ast</code>.</p>\n<p dir=\"auto\">The <code>syntax</code> package provides some extension methods, including a <code>parseExpr</code>\nmethod for strings (note that this method returns an\n<code>Either[ParsingFailure, Expr]</code>, which we unwrap here with <code>Right</code>):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.syntax._\nimport org.dhallj.syntax._\n\nscala&gt; val Right(expr) = &quot;\\\\(n: Natural) -&gt; [n + 0, n + 1, 1 + 1]&quot;.parseExpr\nexpr: org.dhallj.core.Expr = λ(n : Natural) → [n + 0, n + 1, 1 + 1]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(expr) <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\\</span>(n: Natural) -&gt; [n + 0, n + 1, 1 + 1]<span class=\"pl-pds\">\"</span></span>.parseExpr\nexpr<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> λ(<span class=\"pl-v\">n</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> [n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>, n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>]</pre></div>\n<p dir=\"auto\">Now that we have a Dhall expression, we can type-check it:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val Right(exprType) = expr.typeCheck\nexprType: org.dhallj.core.Expr = ∀(n : Natural) → List Natural\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(exprType) <span class=\"pl-k\">=</span> expr.typeCheck\nexprType<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> ∀(<span class=\"pl-v\">n</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">List</span> <span class=\"pl-en\">Natural</span></pre></div>\n<p dir=\"auto\">We can \"reduce\" (or <em>β-normalize</em>) it:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val normalized = expr.normalize\nnormalized: org.dhallj.core.Expr = λ(n : Natural) → [n, n + 1, 2]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">normalized</span> <span class=\"pl-k\">=</span> expr.normalize\nnormalized<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> λ(<span class=\"pl-v\">n</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> [n, n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>]</pre></div>\n<p dir=\"auto\">We can also <em>α-normalize</em> it, which replaces all named variables with\nindexed underscores:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val alphaNormalized = normalized.alphaNormalize\nalphaNormalized: org.dhallj.core.Expr = λ(_ : Natural) → [_, _ + 1, 2]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">alphaNormalized</span> <span class=\"pl-k\">=</span> normalized.alphaNormalize\nalphaNormalized<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> λ(<span class=\"pl-v\">_</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> [_, _ <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>]</pre></div>\n<p dir=\"auto\">We can encode it as a CBOR byte array:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; alphaNormalized.getEncodedBytes\nres0: Array[Byte] = Array(-125, 1, 103, 78, 97, 116, 117, 114, 97, 108, -123, 4, -10, 0, -124, 3, 4, 0, -126, 15, 1, -126, 15, 2)\"><pre>scala<span class=\"pl-k\">&gt;</span> alphaNormalized.getEncodedBytes\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">Byte</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Array</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">125</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">103</span>, <span class=\"pl-c1\">78</span>, <span class=\"pl-c1\">97</span>, <span class=\"pl-c1\">116</span>, <span class=\"pl-c1\">117</span>, <span class=\"pl-c1\">114</span>, <span class=\"pl-c1\">97</span>, <span class=\"pl-c1\">108</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">123</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">124</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">126</span>, <span class=\"pl-c1\">15</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">126</span>, <span class=\"pl-c1\">15</span>, <span class=\"pl-c1\">2</span>)</pre></div>\n<p dir=\"auto\">And we can compute its semantic hash:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; alphaNormalized.hash\nres1: String = c57cdcdae92638503f954e63c0b3ae8de00a59bc5e05b4dd24e49f42aca90054\"><pre>scala<span class=\"pl-k\">&gt;</span> alphaNormalized.hash\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> c57cdcdae92638503f954e63c0b3ae8de00a59bc5e05b4dd24e49f42aca90054</pre></div>\n<p dir=\"auto\">If we have the official <code>dhall</code> CLI installed, we can confirm that this hash is\ncorrect:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ dhall hash &lt;&lt;&lt; '\\(n: Natural) -&gt; [n + 0, n + 1, 1 + 1]'\nsha256:c57cdcdae92638503f954e63c0b3ae8de00a59bc5e05b4dd24e49f42aca90054\"><pre>$ dhall <span class=\"pl-c1\">hash</span> <span class=\"pl-k\">&lt;&lt;&lt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>\\(n: Natural) -&gt; [n + 0, n + 1, 1 + 1]<span class=\"pl-pds\">'</span></span>\nsha256:c57cdcdae92638503f954e63c0b3ae8de00a59bc5e05b4dd24e49f42aca90054</pre></div>\n<p dir=\"auto\">We can also compare expressions:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val Right(other) = &quot;\\\\(n: Natural) -&gt; [n, n + 1, 3]&quot;.parseExpr\nother: org.dhallj.core.Expr = λ(n : Natural) → [n, n + 1, 3]\n\nscala&gt; normalized == other\nres2: Boolean = false\n\nscala&gt; val Some(diff) = normalized.diff(other)\ndiff: (Option[org.dhallj.core.Expr], Option[org.dhallj.core.Expr]) = (Some(2),Some(3))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(other) <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\\</span>(n: Natural) -&gt; [n, n + 1, 3]<span class=\"pl-pds\">\"</span></span>.parseExpr\nother<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> λ(<span class=\"pl-v\">n</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> [n, n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>]\n\nscala<span class=\"pl-k\">&gt;</span> normalized <span class=\"pl-k\">==</span> other\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Some</span>(diff) <span class=\"pl-k\">=</span> normalized.diff(other)\ndiff<span class=\"pl-k\">:</span> (<span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>], <span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>]) <span class=\"pl-k\">=</span> (<span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">2</span>),<span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">3</span>))</pre></div>\n<p dir=\"auto\">And apply them to other expressions:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val Right(arg) = &quot;10&quot;.parseExpr\narg: org.dhallj.core.Expr = 10\n\nscala&gt; expr(arg)\nres3: org.dhallj.core.Expr = (λ(n : Natural) → [n + 0, n + 1, 1 + 1]) 10\n\nscala&gt; expr(arg).normalize\nres4: org.dhallj.core.Expr = [10, 11, 2]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(arg) <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>10<span class=\"pl-pds\">\"</span></span>.parseExpr\narg<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\nscala<span class=\"pl-k\">&gt;</span> expr(arg)\nres3<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> (λ(<span class=\"pl-v\">n</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> [n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>, n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>]) <span class=\"pl-c1\">10</span>\n\nscala<span class=\"pl-k\">&gt;</span> expr(arg).normalize\nres4<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">11</span>, <span class=\"pl-c1\">2</span>]</pre></div>\n<p dir=\"auto\">We can also resolve expressions containing imports (although at the moment\ndhall-scala doesn't support remote imports or caching; please see the\n<a href=\"#import-resolution\">section on import resolution</a> below for details about\nhow to set up remote import resolution if you need it):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val Right(enumerate) =\n     |   &quot;./dhall-lang/Prelude/Natural/enumerate&quot;.parseExpr.flatMap(_.resolve)\nenumerate: org.dhallj.core.Expr = let enumerate : Natural → List Natural = ...\n\nscala&gt; enumerate(arg).normalize\nres5: org.dhallj.core.Expr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(enumerate) <span class=\"pl-k\">=</span>\n     <span class=\"pl-k\">|</span>   <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./dhall-lang/Prelude/Natural/enumerate<span class=\"pl-pds\">\"</span></span>.parseExpr.flatMap(_.resolve)\nenumerate<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> let <span class=\"pl-v\">enumerate</span> : <span class=\"pl-en\">Natural</span> <span class=\"pl-k\">→</span> <span class=\"pl-en\">List</span> <span class=\"pl-en\">Natural</span> <span class=\"pl-k\">=</span> ...\n\nscala<span class=\"pl-k\">&gt;</span> enumerate(arg).normalize\nres5<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">9</span>]</pre></div>\n<p dir=\"auto\">Note that we're working with values of type <code>Expr</code>, which comes from dhall-core,\nwhich is a Java module. The <code>Expr</code> class includes static methods for creating\n<code>Expr</code> values:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.core.Expr\nimport org.dhallj.core.Expr\n\nscala&gt; Expr.makeTextLiteral(&quot;foo&quot;)\nres6: org.dhallj.core.Expr = &quot;foo&quot;\n\nscala&gt; Expr.makeEmptyListLiteral(Expr.Constants.BOOL)\nres7: org.dhallj.core.Expr = [] : Bool\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Expr</span>.makeTextLiteral(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\nres6<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Expr</span>.makeEmptyListLiteral(<span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Constants</span>.<span class=\"pl-en\">BOOL</span>)\nres7<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [] <span class=\"pl-k\">:</span> <span class=\"pl-en\">Bool</span></pre></div>\n<p dir=\"auto\">If you're working from Scala, though, you're generally better off using the\nconstructors included in the <code>org.dhallj.ast</code> package, which provide more\ntype-safety:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; TextLiteral(&quot;foo&quot;)\nres8: org.dhallj.core.Expr = &quot;foo&quot;\n\nscala&gt; NonEmptyListLiteral(BoolLiteral(true), Vector())\nres9: org.dhallj.core.Expr = [True]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">TextLiteral</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\nres8<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">NonEmptyListLiteral</span>(<span class=\"pl-en\">BoolLiteral</span>(<span class=\"pl-c1\">true</span>), <span class=\"pl-en\">Vector</span>())\nres9<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [<span class=\"pl-en\">True</span>]</pre></div>\n<p dir=\"auto\">The <code>ast</code> package also includes extractors that let you pattern match on\n<code>Expr</code> values:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; expr match {\n     |   case Lambda(name, _, NonEmptyListLiteral(first +: _)) =&gt; (name, first)\n     | }\nres10: (String, org.dhallj.core.Expr) = (n,n + 0)\"><pre>scala<span class=\"pl-k\">&gt;</span> expr <span class=\"pl-k\">match</span> {\n     <span class=\"pl-k\">|</span>   <span class=\"pl-k\">case</span> <span class=\"pl-en\">Lambda</span>(name, _, <span class=\"pl-en\">NonEmptyListLiteral</span>(first <span class=\"pl-k\">+</span><span class=\"pl-k\">:</span> _)) <span class=\"pl-k\">=&gt;</span> (name, first)\n     <span class=\"pl-k\">|</span> }\nres10<span class=\"pl-k\">:</span> (<span class=\"pl-en\">String</span>, org.dhallj.core.<span class=\"pl-en\">Expr</span>) <span class=\"pl-k\">=</span> (n,n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>)</pre></div>\n<p dir=\"auto\">Note that we don't have exhaustivity checking for these extractors, although we\nmight be able to add that in an eventual Dotty version.</p>\n<p dir=\"auto\">In addition to dhall-scala, there's a (more experimental) dhall-scala-codec\nmodule, which supports encoding and decoding Scala types to and from Dhall expressions.\nIf you add it to your build, you can write the following:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.codec.syntax._\nimport org.dhallj.codec.syntax._\n\nscala&gt; List(List(1, 2), Nil, List(3, -4)).asExpr\nres0: org.dhallj.core.Expr = [[+1, +2], [] : List Integer, [+3, -4]]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">codec</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">codec</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>), <span class=\"pl-en\">Nil</span>, <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">4</span>)).asExpr\nres0<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [[<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>, <span class=\"pl-k\">+</span><span class=\"pl-c1\">2</span>], [] <span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span> <span class=\"pl-en\">Integer</span>, [<span class=\"pl-k\">+</span><span class=\"pl-c1\">3</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">4</span>]]</pre></div>\n<p dir=\"auto\">You can even decode Dhall functions into Scala functions (assuming you have the\nappropriate codecs for the input and output types):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val Right(f) = &quot;&quot;&quot;\n\n  let enumerate = ./dhall-lang/Prelude/Natural/enumerate\n\n  let map = ./dhall-lang/Prelude/List/map\n\n  in \\(n: Natural) -&gt;\n    map Natural Integer Natural/toInteger (enumerate n)\n\n&quot;&quot;&quot;.parseExpr.flatMap(_.resolve)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(f) <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  let enumerate = ./dhall-lang/Prelude/Natural/enumerate</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  let map = ./dhall-lang/Prelude/List/map</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  in \\(n: Natural) -&gt;</span>\n<span class=\"pl-s\">    map Natural Integer Natural/toInteger (enumerate n)</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>.parseExpr.flatMap(_.resolve)</pre></div>\n<p dir=\"auto\">And then:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val Right(scalaEnumerate) = f.as[BigInt =&gt; List[BigInt]]\nscalaEnumerate: BigInt =&gt; List[BigInt] = org.dhallj.codec.Decoder$$anon$11$$Lambda$15614/0000000050B06E20@94b036\n\nscala&gt; scalaEnumerate(BigInt(3))\nres1: List[BigInt] = List(0, 1, 2)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(scalaEnumerate) <span class=\"pl-k\">=</span> f.as[<span class=\"pl-en\">BigInt</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">BigInt</span>]]\nscalaEnumerate<span class=\"pl-k\">:</span> <span class=\"pl-en\">BigInt</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">BigInt</span>] <span class=\"pl-k\">=</span> org.dhallj.codec.<span class=\"pl-en\">Decoder</span>$$anon$<span class=\"pl-c1\">11</span>$$<span class=\"pl-en\">Lambda</span>$<span class=\"pl-c1\">15614</span><span class=\"pl-k\">/</span>0000000050B06E20<span class=\"pl-k\">@</span>94b036\n\nscala<span class=\"pl-k\">&gt;</span> scalaEnumerate(<span class=\"pl-en\">BigInt</span>(<span class=\"pl-c1\">3</span>))\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">BigInt</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>)</pre></div>\n<p dir=\"auto\">Eventually we'll probably support generic derivation for encoding Dhall\nexpressions to and from algebraic data types in Scala, but we haven't\nimplemented this yet.</p>\n<h2 dir=\"auto\"><a id=\"user-content-converting-to-other-formats\" class=\"anchor\" aria-hidden=\"true\" href=\"#converting-to-other-formats\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Converting to other formats</h2>\n<p dir=\"auto\">DhallJ currently includes several ways to export Dhall expressions to other formats. The core module\nincludes very basic support for printing Dhall expressions as JSON:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.core.converters.JsonConverter\nimport org.dhallj.core.converters.JsonConverter\n\nscala&gt; import org.dhallj.parser.DhallParser.parse\nimport org.dhallj.parser.DhallParser.parse\n\nscala&gt; val expr = parse(&quot;(λ(n: Natural) → [n, n + 1, n + 2]) 100&quot;)\nexpr: org.dhallj.core.Expr.Parsed = (λ(n : Natural) → [n, n + 1, n + 2]) 100\n\nscala&gt; JsonConverter.toCompactString(expr.normalize)\nres0: String = [100,101,102]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">converters</span>.<span class=\"pl-en\">JsonConverter</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">converters</span>.<span class=\"pl-en\">JsonConverter</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">parser</span>.<span class=\"pl-en\">DhallParser</span>.<span class=\"pl-en\">parse</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">parser</span>.<span class=\"pl-en\">DhallParser</span>.<span class=\"pl-en\">parse</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">expr</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(λ(n: Natural) → [n, n + 1, n + 2]) 100<span class=\"pl-pds\">\"</span></span>)\nexpr<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Parsed</span> <span class=\"pl-k\">=</span> (λ(<span class=\"pl-v\">n</span> : <span class=\"pl-en\">Natural</span>) <span class=\"pl-k\">→</span> [n, n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, n <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>]) <span class=\"pl-c1\">100</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">JsonConverter</span>.toCompactString(expr.normalize)\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">101</span>,<span class=\"pl-c1\">102</span>]</pre></div>\n<p dir=\"auto\">This conversion supports the same subset of Dhall expressions as <a href=\"https://docs.dhall-lang.org/tutorials/Getting-started_Generate-JSON-or-YAML.html\" rel=\"nofollow\"><code>dhall-to-json</code></a> (e.g.\nit can't produce JSON representation of functions, which means the normalization in the example\nabove is necessary—if we hadn't normalized the conversion would fail).</p>\n<p dir=\"auto\">There's also a module that provides integration with <a href=\"https://github.com/circe/circe\">Circe</a>, allowing you to convert Dhall\nexpressions directly to (and from) <code>io.circe.Json</code> values without intermediate serialization to\nstrings:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.circe.Converter\nimport org.dhallj.circe.Converter\n\nscala&gt; import io.circe.syntax._\nimport io.circe.syntax._\n\nscala&gt; Converter(expr.normalize)\nres0: Option[io.circe.Json] =\nSome([\n  100,\n  101,\n  102\n])\n\nscala&gt; Converter(List(true, false).asJson)\nres1: org.dhallj.core.Expr = [True, False]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">circe</span>.<span class=\"pl-en\">Converter</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">circe</span>.<span class=\"pl-en\">Converter</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">circe</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">circe</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Converter</span>(expr.normalize)\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[io.circe.<span class=\"pl-en\">Json</span>] <span class=\"pl-k\">=</span>\n<span class=\"pl-en\">Some</span>([\n  <span class=\"pl-c1\">100</span>,\n  <span class=\"pl-c1\">101</span>,\n  <span class=\"pl-c1\">102</span>\n])\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Converter</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">true</span>, <span class=\"pl-c1\">false</span>).asJson)\nres1<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [<span class=\"pl-en\">True</span>, <span class=\"pl-en\">False</span>]</pre></div>\n<p dir=\"auto\">Another module supports converting to any JSON representation for which you have a <a href=\"https://github.com/typelevel/jawn\">Jawn</a>\nfacade. For example, the following build configuration would allow you to export <a href=\"https://github.com/spray/spray-json\">spray-json</a>\nvalues:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.dhallj&quot;    %% &quot;dhall-jawn&quot; % &quot;0.4.0&quot;,\n  &quot;org.typelevel&quot; %% &quot;jawn-spray&quot; % &quot;1.0.0&quot;\n)\"><pre>libraryDependencies <span class=\"pl-k\">++</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.dhallj<span class=\"pl-pds\">\"</span></span>    <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dhall-jawn<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.4.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jawn-spray<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.0<span class=\"pl-pds\">\"</span></span>\n)</pre></div>\n<p dir=\"auto\">And then:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.jawn.JawnConverter\nimport org.dhallj.jawn.JawnConverter\n\nscala&gt; import org.typelevel.jawn.support.spray.Parser\nimport org.typelevel.jawn.support.spray.Parser\n\nscala&gt; val toSpray = new JawnConverter(Parser.facade)\ntoSpray: org.dhallj.jawn.JawnConverter[spray.json.JsValue] = org.dhallj.jawn.JawnConverter@be3ffe1d\n\nscala&gt; toSpray(expr.normalize)\nres0: Option[spray.json.JsValue] = Some([100,101,102])\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">JawnConverter</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">JawnConverter</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">support</span>.<span class=\"pl-en\">spray</span>.<span class=\"pl-en\">Parser</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">support</span>.<span class=\"pl-en\">spray</span>.<span class=\"pl-en\">Parser</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">toSpray</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">JawnConverter</span>(<span class=\"pl-en\">Parser</span>.facade)\ntoSpray<span class=\"pl-k\">:</span> org.dhallj.jawn.<span class=\"pl-en\">JawnConverter</span>[spray.json.<span class=\"pl-en\">JsValue</span>] <span class=\"pl-k\">=</span> org.dhallj.jawn.<span class=\"pl-en\">JawnConverter</span><span class=\"pl-k\">@</span>be3ffe1d\n\nscala<span class=\"pl-k\">&gt;</span> toSpray(expr.normalize)\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[spray.json.<span class=\"pl-en\">JsValue</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>([<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">101</span>,<span class=\"pl-c1\">102</span>])</pre></div>\n<p dir=\"auto\">Note that unlike the dhall-circe module, the integration provided by dhall-jawn is only one way\n(you can convert Dhall expressions to JSON values, but not the other way around).</p>\n<p dir=\"auto\">We also support YAML export via <a href=\"https://bitbucket.org/asomov/snakeyaml/\" rel=\"nofollow\">SnakeYAML</a> (which doesn't require a Scala dependency):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.parser.DhallParser.parse\nimport org.dhallj.parser.DhallParser.parse\n\nscala&gt; import org.dhallj.yaml.YamlConverter\nimport org.dhallj.yaml.YamlConverter\n\nscala&gt; val expr = parse(&quot;{foo = [1, 2, 3], bar = [4, 5]}&quot;)\nexpr: org.dhallj.core.Expr.Parsed = {foo = [1, 2, 3], bar = [4, 5]}\n\nscala&gt; println(YamlConverter.toYamlString(expr))\nfoo:\n- 1\n- 2\n- 3\nbar:\n- 4\n- 5\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">parser</span>.<span class=\"pl-en\">DhallParser</span>.<span class=\"pl-en\">parse</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">parser</span>.<span class=\"pl-en\">DhallParser</span>.<span class=\"pl-en\">parse</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">yaml</span>.<span class=\"pl-en\">YamlConverter</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">yaml</span>.<span class=\"pl-en\">YamlConverter</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">expr</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{foo = [1, 2, 3], bar = [4, 5]}<span class=\"pl-pds\">\"</span></span>)\nexpr<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Parsed</span> <span class=\"pl-k\">=</span> {foo <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], bar <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>]}\n\nscala<span class=\"pl-k\">&gt;</span> println(<span class=\"pl-en\">YamlConverter</span>.toYamlString(expr))\nfoo<span class=\"pl-k\">:</span>\n<span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>\n<span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span>\n<span class=\"pl-k\">-</span> <span class=\"pl-c1\">3</span>\nbar<span class=\"pl-k\">:</span>\n<span class=\"pl-k\">-</span> <span class=\"pl-c1\">4</span>\n<span class=\"pl-k\">-</span> <span class=\"pl-c1\">5</span></pre></div>\n<p dir=\"auto\">You can use the YAML exporter with <a href=\"https://github.com/dhall-lang/dhall-kubernetes\">dhall-kubernetes</a>, for example. Instead of\nmaintaining a lot of verbose and repetitive and error-prone YAML files, you can\nkeep your configuration in well-typed Dhall files (like\n<a href=\"https://github.com/dhall-lang/dhall-kubernetes/blob/506d633e382872346927b8cb9884d8b7382e6cab/1.17/examples/deploymentSimple.dhall\">this example</a>)\nand have your build system export them to YAML:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.dhallj.syntax._, org.dhallj.yaml.YamlConverter\n\nval kubernetesExamplePath = &quot;../dhall-kubernetes/1.17/examples/deploymentSimple.dhall&quot;\nval Right(kubernetesExample) = kubernetesExamplePath.parseExpr.flatMap(_.resolve)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">yaml</span>.<span class=\"pl-en\">YamlConverter</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">kubernetesExamplePath</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../dhall-kubernetes/1.17/examples/deploymentSimple.dhall<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">val</span> <span class=\"pl-en\">Right</span>(kubernetesExample) <span class=\"pl-k\">=</span> kubernetesExamplePath.parseExpr.flatMap(_.resolve)</pre></div>\n<p dir=\"auto\">And then:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; println(YamlConverter.toYamlString(kubernetesExample.normalize))\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      name: nginx\n  template:\n    metadata:\n      name: nginx\n    spec:\n      containers:\n      - image: nginx:1.15.3\n        name: nginx\n        ports:\n        - containerPort: 80\"><pre>scala<span class=\"pl-k\">&gt;</span> println(<span class=\"pl-en\">YamlConverter</span>.toYamlString(kubernetesExample.normalize))\napiVersion<span class=\"pl-k\">:</span> apps<span class=\"pl-k\">/</span>v1\nkind<span class=\"pl-k\">:</span> <span class=\"pl-en\">Deployment</span>\nmetadata<span class=\"pl-k\">:</span>\n  <span class=\"pl-v\">name</span>: nginx\nspec<span class=\"pl-k\">:</span>\n  <span class=\"pl-v\">replicas</span>: <span class=\"pl-c1\">2</span>\n  <span class=\"pl-v\">selector</span>:\n    <span class=\"pl-v\">matchLabels</span>:\n      <span class=\"pl-v\">name</span>: nginx\n  <span class=\"pl-v\">template</span>:\n    <span class=\"pl-v\">metadata</span>:\n      <span class=\"pl-v\">name</span>: nginx\n    <span class=\"pl-v\">spec</span>:\n      <span class=\"pl-v\">containers</span>:\n      <span class=\"pl-k\">-</span> <span class=\"pl-v\">image</span>: nginx<span class=\"pl-k\">:</span><span class=\"pl-c1\">1.15.3</span>\n        <span class=\"pl-v\">name</span>: nginx\n        <span class=\"pl-v\">ports</span>:\n        <span class=\"pl-k\">-</span> <span class=\"pl-v\">containerPort</span>: <span class=\"pl-c1\">80</span></pre></div>\n<p dir=\"auto\">It's not currently possible to convert to YAML without the SnakeYAML dependency, although we may support a simplified\nversion of this in the future (something similar to what we have for JSON in the core module).</p>\n<h2 dir=\"auto\"><a id=\"user-content-import-resolution\" class=\"anchor\" aria-hidden=\"true\" href=\"#import-resolution\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Import resolution</h2>\n<p dir=\"auto\">There are currently two modules that implement import resolution (to different degrees).</p>\n<h3 dir=\"auto\"><a id=\"user-content-dhall-imports\" class=\"anchor\" aria-hidden=\"true\" href=\"#dhall-imports\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>dhall-imports</h3>\n<p dir=\"auto\">The first is dhall-imports, which is a Scala library built on <a href=\"https://github.com/typelevel/cats-effect\">cats-effect</a> that uses <a href=\"https://http4s.org\" rel=\"nofollow\">http4s</a> for\nits HTTP client. This module is intended to be a complete implementation of the\n<a href=\"https://github.com/dhall-lang/dhall-lang/blob/master/standard/imports.md\">import resolution and caching specification</a>.</p>\n<p dir=\"auto\">It requires a bit of ceremony to set up:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.effect.{IO, Resource}\nimport org.dhallj.core.Expr\nimport org.dhallj.imports.syntax._\nimport org.dhallj.parser.DhallParser\nimport org.http4s.blaze.client.BlazeClientBuilder\nimport org.http4s.client.Client\nimport scala.concurrent.ExecutionContext\n\nval client: Resource[IO, Client[IO]] = BlazeClientBuilder[IO](ExecutionContext.global).resource\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.{<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">Resource</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">imports</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">parser</span>.<span class=\"pl-en\">DhallParser</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">http4s</span>.<span class=\"pl-en\">blaze</span>.<span class=\"pl-en\">client</span>.<span class=\"pl-en\">BlazeClientBuilder</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">http4s</span>.<span class=\"pl-en\">client</span>.<span class=\"pl-en\">Client</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">concurrent</span>.<span class=\"pl-en\">ExecutionContext</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">client</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Resource</span>[<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">Client</span>[<span class=\"pl-en\">IO</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">BlazeClientBuilder</span>[<span class=\"pl-en\">IO</span>](<span class=\"pl-en\">ExecutionContext</span>.global).resource</pre></div>\n<p dir=\"auto\">And then if we have some definitions like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val concatSepImport = DhallParser.parse(&quot;https://prelude.dhall-lang.org/Text/concatSep&quot;)\n\nval parts = DhallParser.parse(&quot;&quot;&quot;[&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]&quot;&quot;&quot;)\nval delimiter = Expr.makeTextLiteral(&quot;-&quot;)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">concatSepImport</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DhallParser</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://prelude.dhall-lang.org/Text/concatSep<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">parts</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DhallParser</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>[\"foo\", \"bar\", \"baz\"]<span class=\"pl-pds\">\"\"\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">delimiter</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Expr</span>.makeTextLiteral(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">We can use them with a function from the Dhall Prelude like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val resolved = client.use { implicit c =&gt;\n     |   concatSepImport.resolveImports[IO]\n     | }\nresolved: cats.effect.IO[org.dhallj.core.Expr] = IO(...)\n\nscala&gt; import cats.effect.unsafe.implicits.global\nimport cats.effect.unsafe.implicits.global\n\nscala&gt; val result = resolved.map { concatSep =&gt;\n     |   Expr.makeApplication(concatSep, Array(delimiter, parts)).normalize\n     | }\nresult: cats.effect.IO[org.dhallj.core.Expr] = IO(...)\n\nscala&gt; result.unsafeRunSync()\nres0: org.dhallj.core.Expr = &quot;foo-bar-baz&quot;\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">resolved</span> <span class=\"pl-k\">=</span> client.use { <span class=\"pl-k\">implicit</span> c <span class=\"pl-k\">=&gt;</span>\n     <span class=\"pl-k\">|</span>   concatSepImport.resolveImports[<span class=\"pl-en\">IO</span>]\n     <span class=\"pl-k\">|</span> }\nresolved<span class=\"pl-k\">:</span> cats.effect.<span class=\"pl-en\">IO</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">IO</span>(...)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.<span class=\"pl-en\">unsafe</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">global</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.<span class=\"pl-en\">unsafe</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">global</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">result</span> <span class=\"pl-k\">=</span> resolved.map { concatSep <span class=\"pl-k\">=&gt;</span>\n     <span class=\"pl-k\">|</span>   <span class=\"pl-en\">Expr</span>.makeApplication(concatSep, <span class=\"pl-en\">Array</span>(delimiter, parts)).normalize\n     <span class=\"pl-k\">|</span> }\nresult<span class=\"pl-k\">:</span> cats.effect.<span class=\"pl-en\">IO</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">IO</span>(...)\n\nscala<span class=\"pl-k\">&gt;</span> result.unsafeRunSync()\nres0<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo-bar-baz<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">(Note that we could use dhall-scala to avoid the use of <code>Array</code> above.)</p>\n<h4 dir=\"auto\"><a id=\"user-content-classpath-imports\" class=\"anchor\" aria-hidden=\"true\" href=\"#classpath-imports\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Classpath imports</h4>\n<p dir=\"auto\">We support an extension of the spec which allows you to also import expressions\nfrom the classpath using the syntax <code>let e = classpath:/absolute/path/to/file in e</code>.\nThe semantics are subject to change as we get more experience with it but\ncurrently it should generally have the same behaviour as an absolute\npath import of a local file (but files on the classpath can import each other\nusing relative paths). This includes it being protected by the referential\nsanity check so that remote imports cannot exfiltrate information\nfrom the classpath.</p>\n<p dir=\"auto\">Also note that classpath imports as location are currently not supported as the spec\nrequires that an import as Location must return an expression of type\n<code>&lt;Local Text | Remote Text | Environment Text | Missing&gt;</code>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-dhall-imports-mini\" class=\"anchor\" aria-hidden=\"true\" href=\"#dhall-imports-mini\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>dhall-imports-mini</h3>\n<p dir=\"auto\">The other implementation is dhall-imports-mini, which is a Java library that\ndepends only on the core and parser modules, but that doesn't support\nremote imports or caching.</p>\n<p dir=\"auto\">The previous example could be rewritten as follows using dhall-imports-mini\nand a local copy of the Prelude:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.dhallj.core.Expr\nimport org.dhallj.imports.mini.Resolver\nimport org.dhallj.parser.DhallParser\n\nval concatSep = Resolver.resolve(DhallParser.parse(&quot;./dhall-lang/Prelude/Text/concatSep&quot;), false)\n\nval parts = DhallParser.parse(&quot;&quot;&quot;[&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]&quot;&quot;&quot;)\nval delimiter = Expr.makeTextLiteral(&quot;-&quot;)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">imports</span>.<span class=\"pl-en\">mini</span>.<span class=\"pl-en\">Resolver</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">parser</span>.<span class=\"pl-en\">DhallParser</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">concatSep</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Resolver</span>.resolve(<span class=\"pl-en\">DhallParser</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./dhall-lang/Prelude/Text/concatSep<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-c1\">false</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">parts</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DhallParser</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>[\"foo\", \"bar\", \"baz\"]<span class=\"pl-pds\">\"\"\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">delimiter</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Expr</span>.makeTextLiteral(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">And then:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; Expr.makeApplication(concatSep, Array(delimiter, parts)).normalize\nres0: org.dhallj.core.Expr = &quot;foo-bar-baz&quot;\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Expr</span>.makeApplication(concatSep, <span class=\"pl-en\">Array</span>(delimiter, parts)).normalize\nres0<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo-bar-baz<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">It's likely that eventually we'll provide a complete pure-Java implementation of import resolution,\nbut this isn't currently a high priority for us.</p>\n<h2 dir=\"auto\"><a id=\"user-content-command-line-interface\" class=\"anchor\" aria-hidden=\"true\" href=\"#command-line-interface\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Command-line interface</h2>\n<p dir=\"auto\">We include a command-line interface that supports some common operations. It's currently similar to\nthe official <code>dhall</code> and <code>dhall-to-json</code> binaries, but with many fewer options.</p>\n<p dir=\"auto\">If <a href=\"https://www.graalvm.org/docs/reference-manual/native-image/\" rel=\"nofollow\">GraalVM Native Image</a> is available on your system, you can build the CLI as\na native binary (thanks to <a href=\"https://github.com/sbt/sbt-native-packager\">sbt-native-packager</a>).</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ sbt cli/graalvm-native-image:packageBin\n\n$ cd cli/target/graalvm-native-image/\n\n$ du -h dhall-cli\n8.2M    dhall-cli\n\n$ time ./dhall-cli hash --normalize --alpha &lt;&lt;&lt; &quot;λ(n: Natural) → [n, n + 1]&quot;\nsha256:a8d9326812aaabeed29412e7b780dc733b1e633c5556c9ea588e8212d9dc48f3\n\nreal    0m0.009s\nuser    0m0.000s\nsys     0m0.009s\n\n$ time ./dhall-cli type &lt;&lt;&lt; &quot;{foo = [1, 2, 3]}&quot;\n{foo : List Natural}\n\nreal    0m0.003s\nuser    0m0.000s\nsys     0m0.003s\n\n$ time ./dhall-cli json &lt;&lt;&lt; &quot;{foo = [1, 2, 3]}&quot;\n{&quot;foo&quot;:[1,2,3]}\n\nreal    0m0.005s\nuser    0m0.004s\nsys     0m0.001s\"><pre>$ sbt cli/graalvm-native-image:packageBin\n\n$ <span class=\"pl-c1\">cd</span> cli/target/graalvm-native-image/\n\n$ du -h dhall-cli\n8.2M    dhall-cli\n\n$ <span class=\"pl-k\">time</span> ./dhall-cli <span class=\"pl-c1\">hash</span> --normalize --alpha <span class=\"pl-k\">&lt;&lt;&lt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>λ(n: Natural) → [n, n + 1]<span class=\"pl-pds\">\"</span></span>\nsha256:a8d9326812aaabeed29412e7b780dc733b1e633c5556c9ea588e8212d9dc48f3\n\nreal    0m0.009s\nuser    0m0.000s\nsys     0m0.009s\n\n$ <span class=\"pl-k\">time</span> ./dhall-cli <span class=\"pl-c1\">type</span> <span class=\"pl-k\">&lt;&lt;&lt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{foo = [1, 2, 3]}<span class=\"pl-pds\">\"</span></span>\n{foo <span class=\"pl-c1\">:</span> List Natural}\n\nreal    0m0.003s\nuser    0m0.000s\nsys     0m0.003s\n\n$ <span class=\"pl-k\">time</span> ./dhall-cli json <span class=\"pl-k\">&lt;&lt;&lt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{foo = [1, 2, 3]}<span class=\"pl-pds\">\"</span></span>\n{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>:[1,2,3]}\n\nreal    0m0.005s\nuser    0m0.004s\nsys     0m0.001s</pre></div>\n<p dir=\"auto\">Even on the JVM it's close to usable, although you can definitely feel the slow startup:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ cd ..\n\n$ time java -jar ./cli-assembly-0.4.0-SNAPSHOT.jar hash --normalize --alpha &lt;&lt;&lt; &quot;λ(n: Natural) → [n, n + 1]&quot;\nsha256:a8d9326812aaabeed29412e7b780dc733b1e633c5556c9ea588e8212d9dc48f3\n\nreal    0m0.104s\nuser    0m0.106s\nsys     0m0.018s\"><pre>$ <span class=\"pl-c1\">cd</span> ..\n\n$ <span class=\"pl-k\">time</span> java -jar ./cli-assembly-0.4.0-SNAPSHOT.jar <span class=\"pl-c1\">hash</span> --normalize --alpha <span class=\"pl-k\">&lt;&lt;&lt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>λ(n: Natural) → [n, n + 1]<span class=\"pl-pds\">\"</span></span>\nsha256:a8d9326812aaabeed29412e7b780dc733b1e633c5556c9ea588e8212d9dc48f3\n\nreal    0m0.104s\nuser    0m0.106s\nsys     0m0.018s</pre></div>\n<p dir=\"auto\">There's probably not really any reason you'd want to use <code>dhall-cli</code> right now, but I think it's a\npretty neat demonstration of how Graal can make Java (or Scala) a viable language for building\nnative CLI applications.</p>\n<h2 dir=\"auto\"><a id=\"user-content-other-stuff\" class=\"anchor\" aria-hidden=\"true\" href=\"#other-stuff\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Other stuff</h2>\n<h3 dir=\"auto\"><a id=\"user-content-dhall-testing\" class=\"anchor\" aria-hidden=\"true\" href=\"#dhall-testing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>dhall-testing</h3>\n<p dir=\"auto\">The dhall-testing module provides support for property-based testing with <a href=\"https://www.scalacheck.org/\" rel=\"nofollow\">ScalaCheck</a>\nin the form of <code>Arbitrary</code> (and <code>Shrink</code>) instances:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.core.Expr\nimport org.dhallj.core.Expr\n\nscala&gt; import org.dhallj.testing.instances._\nimport org.dhallj.testing.instances._\n\nscala&gt; import org.scalacheck.Arbitrary\nimport org.scalacheck.Arbitrary\n\nscala&gt; Arbitrary.arbitrary[Expr].sample\nres0: Option[org.dhallj.core.Expr] = Some(Optional (Optional (List Double)))\n\nscala&gt; Arbitrary.arbitrary[Expr].sample\nres1: Option[org.dhallj.core.Expr] = Some(Optional (List &lt;neftfEahtuSq : Double | kg...\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">testing</span>.<span class=\"pl-en\">instances</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">testing</span>.<span class=\"pl-en\">instances</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">scalacheck</span>.<span class=\"pl-en\">Arbitrary</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">scalacheck</span>.<span class=\"pl-en\">Arbitrary</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Arbitrary</span>.arbitrary[<span class=\"pl-en\">Expr</span>].sample\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-en\">Optional</span> (<span class=\"pl-en\">Optional</span> (<span class=\"pl-en\">List</span> <span class=\"pl-en\">Double</span>)))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Arbitrary</span>.arbitrary[<span class=\"pl-en\">Expr</span>].sample\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-en\">Optional</span> (<span class=\"pl-en\">List</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-v\">neftfEahtuSq</span> : <span class=\"pl-en\">Double</span> <span class=\"pl-k\">|</span> kg...</pre></div>\n<p dir=\"auto\">It includes (fairly basic) support for producing both well-typed and probably-not-well-typed\nexpressions, and for generating arbitrary values of specified Dhall types:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.dhallj.testing.WellTypedExpr\nimport org.dhallj.testing.WellTypedExpr\n\nscala&gt; Arbitrary.arbitrary[WellTypedExpr].sample\nres2: Option[org.dhallj.testing.WellTypedExpr] = Some(WellTypedExpr(8436008296256993755))\n\nscala&gt; genForType(Expr.Constants.BOOL).flatMap(_.sample)\nres3: Option[org.dhallj.core.Expr] = Some(True)\n\nscala&gt; genForType(Expr.Constants.BOOL).flatMap(_.sample)\nres4: Option[org.dhallj.core.Expr] = Some(False)\n\nscala&gt; genForType(Expr.makeApplication(Expr.Constants.LIST, Expr.Constants.INTEGER)).flatMap(_.sample)\nres5: Option[org.dhallj.core.Expr] = Some([+1522471910085416508, -9223372036854775809, ...\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">testing</span>.<span class=\"pl-en\">WellTypedExpr</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">testing</span>.<span class=\"pl-en\">WellTypedExpr</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Arbitrary</span>.arbitrary[<span class=\"pl-en\">WellTypedExpr</span>].sample\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.dhallj.testing.<span class=\"pl-en\">WellTypedExpr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-en\">WellTypedExpr</span>(<span class=\"pl-c1\">8436008296256993755</span>))\n\nscala<span class=\"pl-k\">&gt;</span> genForType(<span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Constants</span>.<span class=\"pl-en\">BOOL</span>).flatMap(_.sample)\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-en\">True</span>)\n\nscala<span class=\"pl-k\">&gt;</span> genForType(<span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Constants</span>.<span class=\"pl-en\">BOOL</span>).flatMap(_.sample)\nres4<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-en\">False</span>)\n\nscala<span class=\"pl-k\">&gt;</span> genForType(<span class=\"pl-en\">Expr</span>.makeApplication(<span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Constants</span>.<span class=\"pl-en\">LIST</span>, <span class=\"pl-en\">Expr</span>.<span class=\"pl-en\">Constants</span>.<span class=\"pl-en\">INTEGER</span>)).flatMap(_.sample)\nres5<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.dhallj.core.<span class=\"pl-en\">Expr</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>([<span class=\"pl-k\">+</span><span class=\"pl-c1\">1522471910085416508</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">9223372036854775809</span>, ...</pre></div>\n<p dir=\"auto\">This module is currently fairly minimal, and is likely to change substantially in future releases.</p>\n<h3 dir=\"auto\"><a id=\"user-content-dhall-javagen-and-dhall-prelude\" class=\"anchor\" aria-hidden=\"true\" href=\"#dhall-javagen-and-dhall-prelude\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>dhall-javagen and dhall-prelude</h3>\n<p dir=\"auto\">The dhall-javagen module lets you take a DhallJ representation of a Dhall expression and use it to\ngenerate Java code that will build the DhallJ representation of that expression.</p>\n<p dir=\"auto\">This is mostly a toy, but it allows us for example to distribute a \"pre-compiled\" jar containing the\nDhall Prelude:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import java.math.BigInteger\nimport java.math.BigInteger\n\nscala&gt; import org.dhallj.core.Expr\nimport org.dhallj.core.Expr\n\nscala&gt; val ten = Expr.makeNaturalLiteral(new BigInteger(&quot;10&quot;))\nten: org.dhallj.core.Expr = 10\n\nscala&gt; val Prelude = org.dhallj.prelude.Prelude.instance\nPrelude: org.dhallj.core.Expr = ...\n\nscala&gt; val Natural = Expr.makeFieldAccess(Prelude, &quot;Natural&quot;)\nNatural: org.dhallj.core.Expr = ...\n\nscala&gt; val enumerate = Expr.makeFieldAccess(Natural, &quot;enumerate&quot;)\nenumerate: org.dhallj.core.Expr = ...\n\nscala&gt; Expr.makeApplication(enumerate, ten).normalize\nres0: org.dhallj.core.Expr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">math</span>.<span class=\"pl-en\">BigInteger</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">math</span>.<span class=\"pl-en\">BigInteger</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">dhallj</span>.<span class=\"pl-en\">core</span>.<span class=\"pl-en\">Expr</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ten</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Expr</span>.makeNaturalLiteral(<span class=\"pl-k\">new</span> <span class=\"pl-en\">BigInteger</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>10<span class=\"pl-pds\">\"</span></span>))\nten<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">Prelude</span> <span class=\"pl-k\">=</span> org.dhallj.prelude.<span class=\"pl-en\">Prelude</span>.instance\n<span class=\"pl-en\">Prelude</span><span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> ...\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">Natural</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Expr</span>.makeFieldAccess(<span class=\"pl-en\">Prelude</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Natural<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-en\">Natural</span><span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> ...\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">enumerate</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Expr</span>.makeFieldAccess(<span class=\"pl-en\">Natural</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>enumerate<span class=\"pl-pds\">\"</span></span>)\nenumerate<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> ...\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Expr</span>.makeApplication(enumerate, ten).normalize\nres0<span class=\"pl-k\">:</span> org.dhallj.core.<span class=\"pl-en\">Expr</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">9</span>]</pre></div>\n<p dir=\"auto\">Note that the resulting jar (which is available from Maven Central as dhall-prelude) is many times\nsmaller than either the Prelude source or the Prelude serialized as CBOR.</p>\n<h2 dir=\"auto\"><a id=\"user-content-developing\" class=\"anchor\" aria-hidden=\"true\" href=\"#developing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Developing</h2>\n<p dir=\"auto\">The project includes the currently-supported version of the Dhall language repository as a\nsubmodule, so if you want to run the acceptance test suites, you'll need to clone recursively:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"git clone --recurse-submodules git@github.com:travisbrown/dhallj.git\"><pre>git clone --recurse-submodules git@github.com:travisbrown/dhallj.git</pre></div>\n<p dir=\"auto\">Or if you're like me and always forget to do this, you can initialize the submodule after cloning:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"git submodule update --init\"><pre>git submodule update --init</pre></div>\n<p dir=\"auto\">This project is built with <a href=\"https://www.scala-sbt.org\" rel=\"nofollow\">sbt</a>, and you'll need to have sbt <a href=\"https://www.scala-sbt.org/1.x/docs/Setup.html\" rel=\"nofollow\">installed</a>\non your machine.</p>\n<p dir=\"auto\">We're using the <a href=\"https://javacc.github.io/javacc/\" rel=\"nofollow\">JavaCC</a> parser generator for the parsing module, and we have\n<a href=\"https://github.com/travisbrown/sbt-javacc\">our own sbt plugin</a> for integrating JavaCC into our build. This plugin is open source\nand published to Maven Central, so you don't need to do anything to get it, but you will need to run\nit manually the first time you build the project (or any time you update the JavaCC grammar):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt:root&gt; javacc\nJava Compiler Compiler Version 7.0.5 (Parser Generator)\nFile &quot;Provider.java&quot; does not exist.  Will create one.\nFile &quot;StringProvider.java&quot; does not exist.  Will create one.\nFile &quot;StreamProvider.java&quot; does not exist.  Will create one.\nFile &quot;TokenMgrException.java&quot; does not exist.  Will create one.\nFile &quot;ParseException.java&quot; does not exist.  Will create one.\nFile &quot;Token.java&quot; does not exist.  Will create one.\nFile &quot;SimpleCharStream.java&quot; does not exist.  Will create one.\nParser generated with 0 errors and 1 warnings.\n[success] Total time: 0 s, completed 12-Apr-2020 08:48:53\"><pre class=\"notranslate\"><code>sbt:root&gt; javacc\nJava Compiler Compiler Version 7.0.5 (Parser Generator)\nFile \"Provider.java\" does not exist.  Will create one.\nFile \"StringProvider.java\" does not exist.  Will create one.\nFile \"StreamProvider.java\" does not exist.  Will create one.\nFile \"TokenMgrException.java\" does not exist.  Will create one.\nFile \"ParseException.java\" does not exist.  Will create one.\nFile \"Token.java\" does not exist.  Will create one.\nFile \"SimpleCharStream.java\" does not exist.  Will create one.\nParser generated with 0 errors and 1 warnings.\n[success] Total time: 0 s, completed 12-Apr-2020 08:48:53\n</code></pre></div>\n<p dir=\"auto\">After this is done, you can run the tests:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt:root&gt; test\n...\n[info] Passed: Total 1319, Failed 0, Errors 0, Passed 1314, Skipped 5\n[success] Total time: 36 s, completed 12-Apr-2020 08:51:07\"><pre class=\"notranslate\"><code>sbt:root&gt; test\n...\n[info] Passed: Total 1319, Failed 0, Errors 0, Passed 1314, Skipped 5\n[success] Total time: 36 s, completed 12-Apr-2020 08:51:07\n</code></pre></div>\n<p dir=\"auto\">Note that a few tests require the <a href=\"https://github.com/dhall-lang/dhall-haskell\">dhall-haskell</a> <code>dhall</code> CLI. If you don't have it installed on\nyour machine, these tests will be skipped.</p>\n<p dir=\"auto\">There are also a few additional slow tests that must be run manually:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt:root&gt; slow:test\n...\n[info] Passed: Total 4, Failed 0, Errors 0, Passed 4\n[success] Total time: 79 s (01:19), completed 12-Apr-2020 08:52:41\"><pre class=\"notranslate\"><code>sbt:root&gt; slow:test\n...\n[info] Passed: Total 4, Failed 0, Errors 0, Passed 4\n[success] Total time: 79 s (01:19), completed 12-Apr-2020 08:52:41\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-community\" class=\"anchor\" aria-hidden=\"true\" href=\"#community\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Community</h2>\n<p dir=\"auto\">This project supports the <a href=\"https://www.scala-lang.org/conduct/\" rel=\"nofollow\">Scala code of conduct</a> and wants all of its channels\n(Gitter, GitHub, etc.) to be inclusive environments.</p>\n<h2 dir=\"auto\"><a id=\"user-content-copyright-and-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#copyright-and-license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Copyright and license</h2>\n<p dir=\"auto\">All code in this repository is available under the <a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">3-Clause BSD License</a>.</p>\n<p dir=\"auto\">Copyright <a href=\"https://twitter.com/travisbrown\" rel=\"nofollow\">Travis Brown</a> and <a href=\"https://github.com/TimWSpence\">Tim Spence</a>, 2020.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "travisbrown",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/316049?v=4",
        "url" : "https://github.com/travisbrown",
        "contributions" : 484
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 113
      },
      {
        "login" : "TimWSpence",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3360080?v=4",
        "url" : "https://github.com/TimWSpence",
        "contributions" : 92
      },
      {
        "login" : "amesgen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15369874?v=4",
        "url" : "https://github.com/amesgen",
        "contributions" : 2
      },
      {
        "login" : "note",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/345056?v=4",
        "url" : "https://github.com/note",
        "contributions" : 1
      }
    ],
    "commits" : 692,
    "topics" : [
      "yaml",
      "json",
      "java",
      "dhall",
      "scala"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 299,
        "title" : "Fix with precedence",
        "url" : "https://github.com/travisbrown/dhallj/issues/299"
      },
      {
        "number" : 298,
        "title" : "Fix DontCacheIfHash test",
        "url" : "https://github.com/travisbrown/dhallj/issues/298"
      },
      {
        "number" : 186,
        "title" : "Are there any Java examples for reading dhall files?",
        "url" : "https://github.com/travisbrown/dhallj/issues/186"
      },
      {
        "number" : 168,
        "title" : "Leverage Truffle?",
        "url" : "https://github.com/travisbrown/dhallj/issues/168"
      },
      {
        "number" : 124,
        "title" : "Investigate whether Paths.get is safe across platforms",
        "url" : "https://github.com/travisbrown/dhallj/issues/124"
      },
      {
        "number" : 60,
        "title" : "Import resolution against consul/etcd",
        "url" : "https://github.com/travisbrown/dhallj/issues/60"
      },
      {
        "number" : 44,
        "title" : "Document identifier index limit",
        "url" : "https://github.com/travisbrown/dhallj/issues/44"
      },
      {
        "number" : 16,
        "title" : "Publish API docs",
        "url" : "https://github.com/travisbrown/dhallj/issues/16"
      },
      {
        "number" : 12,
        "title" : "Investigate type-checking performance",
        "url" : "https://github.com/travisbrown/dhallj/issues/12"
      },
      {
        "number" : 11,
        "title" : "Clean up escaping",
        "url" : "https://github.com/travisbrown/dhallj/issues/11"
      },
      {
        "number" : 3,
        "title" : "Type checker is not stack-safe for (extremely) deep records",
        "url" : "https://github.com/travisbrown/dhallj/issues/3"
      },
      {
        "number" : 2,
        "title" : "Parser is not stack-safe for deep records",
        "url" : "https://github.com/travisbrown/dhallj/issues/2"
      }
    ],
    "scalaPercentage" : 23,
    "license" : "BSD-3-Clause",
    "commitActivity" : [
      {
        "total" : 2,
        "week" : 1629590400000,
        "days" : [
          0,
          0,
          0,
          1,
          1,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1630195200000,
        "days" : [
          0,
          2,
          1,
          2,
          1,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1630800000000,
        "days" : [
          0,
          0,
          0,
          0,
          2,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1632009600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          3,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632614400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1633219200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 5,
        "week" : 1633824000000,
        "days" : [
          4,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1634428800000,
        "days" : [
          0,
          0,
          0,
          0,
          3,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635033600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635638400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636243200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636848000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1637452800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638662400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639872000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1640476800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641081600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641686400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642291200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642896000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1643500800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644105600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645315200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645920000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1646524800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647734400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648339200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648944000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1649548800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650758400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651363200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654387200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654992000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1655596800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656201600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656806400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1657411200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658016000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658620800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659225600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659830400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1660435200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "configuration-and-environment",
    "beginnerIssuesLabel" : null
  }
}