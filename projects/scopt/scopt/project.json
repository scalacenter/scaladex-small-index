{
  "organization" : "scopt",
  "repository" : "scopt",
  "creationDate" : 1611136856000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644296136843
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "command line options parsing for Scala",
    "logo" : "https://avatars.githubusercontent.com/u/1529190?v=4",
    "stars" : 1337,
    "forks" : 163,
    "watchers" : 38,
    "issues" : 59,
    "creationDate" : 1332098837000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-scopt\" class=\"anchor\" aria-hidden=\"true\" href=\"#scopt\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>scopt</h1>\n<p dir=\"auto\"><a href=\"https://maven-badges.herokuapp.com/maven-central/com.github.scopt/scopt_2.11\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/f050e692032ddd97d00ab8eb8790b950922e3955a62e37701e3832074297802c/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e6769746875622e73636f70742f73636f70745f322e31312e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.github.scopt/scopt_2.11.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://javadoc.io/doc/com.github.scopt/scopt_2.12\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/db609a63ba1d399fae163d9498fbfb2783bacfa31a8ef3167d5cd532d44d193b/68747470733a2f2f6a617661646f632e696f2f62616467652f636f6d2e6769746875622e73636f70742f73636f70745f322e31322e737667\" alt=\"Javadocs\" data-canonical-src=\"https://javadoc.io/badge/com.github.scopt/scopt_2.12.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://travis-ci.org/scopt/scopt\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/b0eb71d6e6cf81d82c3956cbb6ad12d5f380f11076899edf86ed60f1e387acbb/68747470733a2f2f7472617669732d63692e6f72672f73636f70742f73636f70742e7376673f6272616e63683d73636f707433\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/scopt/scopt.svg?branch=scopt3\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">scopt is a little command line options parsing library.</p>\n<h2 dir=\"auto\"><a id=\"user-content-sonatype\" class=\"anchor\" aria-hidden=\"true\" href=\"#sonatype\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Sonatype</h2>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.github.scopt&quot; %% &quot;scopt&quot; % &quot;X.Y.Z&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.github.scopt<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X.Y.Z<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">See the Maven Central badge above.</p>\n<table>\n<thead>\n<tr>\n<th>Scala Version</th>\n<th align=\"center\">JVM</th>\n<th align=\"center\">JS (1.x)</th>\n<th align=\"center\">JS (0.6.x)</th>\n<th align=\"center\">Native (0.4.x)</th>\n<th align=\"center\">Native (0.3.x)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.0.0-M2</td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">n/a</td>\n</tr>\n<tr>\n<td>3.0.0-M1</td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">n/a</td>\n</tr>\n<tr>\n<td>2.13.x</td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">n/a</td>\n</tr>\n<tr>\n<td>2.12.x</td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\">n/a</td>\n<td align=\"center\">n/a</td>\n</tr>\n<tr>\n<td>2.11.x</td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n<td align=\"center\"><g-emoji class=\"g-emoji\" alias=\"white_check_mark\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2705.png\">✅</g-emoji></td>\n</tr>\n</tbody>\n</table>\n<h2 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h2>\n<p dir=\"auto\">scopt 4.x provides two styles of constructing a command line option parser: functional DSL and object-oriented DSL.\nEither case, first you need a case class that represents the configuration:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.io.File\ncase class Config(\n    foo: Int = -1,\n    out: File = new File(&quot;.&quot;),\n    xyz: Boolean = false,\n    libName: String = &quot;&quot;,\n    maxCount: Int = -1,\n    verbose: Boolean = false,\n    debug: Boolean = false,\n    mode: String = &quot;&quot;,\n    files: Seq[File] = Seq(),\n    keepalive: Boolean = false,\n    jars: Seq[File] = Seq(),\n    kwargs: Map[String, String] = Map())\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">io</span>.<span class=\"pl-en\">File</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Config</span>(\n    <span class=\"pl-v\">foo</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">out</span>: <span class=\"pl-en\">File</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.<span class=\"pl-pds\">\"</span></span>),\n    <span class=\"pl-v\">xyz</span>: <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>,\n    <span class=\"pl-v\">libName</span>: <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">maxCount</span>: <span class=\"pl-en\">Int</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">verbose</span>: <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>,\n    <span class=\"pl-v\">debug</span>: <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>,\n    <span class=\"pl-v\">mode</span>: <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">files</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">File</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(),\n    <span class=\"pl-v\">keepalive</span>: <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>,\n    <span class=\"pl-v\">jars</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">File</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(),\n    <span class=\"pl-v\">kwargs</span>: <span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Map</span>())</pre></div>\n<p dir=\"auto\">During the parsing process, a config object is passed around as an argument into <code>action</code> callbacks.</p>\n<h3 dir=\"auto\"><a id=\"user-content-functional-dsl\" class=\"anchor\" aria-hidden=\"true\" href=\"#functional-dsl\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Functional DSL</h3>\n<p dir=\"auto\">Here's how you create a <code>scopt.OParser[Config]</code>.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scopt.OParser\nval builder = OParser.builder[Config]\nval parser1 = {\n  import builder._\n  OParser.sequence(\n    programName(&quot;scopt&quot;),\n    head(&quot;scopt&quot;, &quot;4.x&quot;),\n    // option -f, --foo\n    opt[Int]('f', &quot;foo&quot;)\n      .action((x, c) =&gt; c.copy(foo = x))\n      .text(&quot;foo is an integer property&quot;),\n    // more options here...\n  )\n}\n\n// OParser.parse returns Option[Config]\nOParser.parse(parser1, args, Config()) match {\n  case Some(config) =&gt;\n    // do something\n  case _ =&gt;\n    // arguments are bad, error message will have been displayed\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scopt</span>.<span class=\"pl-en\">OParser</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">builder</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">OParser</span>.builder[<span class=\"pl-en\">Config</span>]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">parser1</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">builder</span>.<span class=\"pl-en\">_</span>\n  <span class=\"pl-en\">OParser</span>.sequence(\n    programName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>),\n    head(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4.x<span class=\"pl-pds\">\"</span></span>),\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> option -f, --foo</span>\n    opt[<span class=\"pl-en\">Int</span>](<span class=\"pl-s\">'f'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\n      .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(foo <span class=\"pl-k\">=</span> x))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo is an integer property<span class=\"pl-pds\">\"</span></span>),\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> more options here...</span>\n  )\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> OParser.parse returns Option[Config]</span>\n<span class=\"pl-en\">OParser</span>.parse(parser1, args, <span class=\"pl-en\">Config</span>()) <span class=\"pl-k\">match</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">Some</span>(config) <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> do something</span>\n  <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> arguments are bad, error message will have been displayed</span>\n}</pre></div>\n<p dir=\"auto\">See <a href=\"https://scopt.github.io/scopt/4.0.0/api/scopt/OParserBuilder.html\" rel=\"nofollow\">Scaladoc API</a> and the rest of this page for the details on various builder methods.</p>\n<h4 dir=\"auto\"><a id=\"user-content-abstracting-over-effects\" class=\"anchor\" aria-hidden=\"true\" href=\"#abstracting-over-effects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Abstracting over effects</h4>\n<p dir=\"auto\">By default, scopt emits output when needed to stderr and stdout.  This is expected behavior when using scopt to process arguments for your stand-alone application.  However, if your application requires parsing arguments while not producing output directly, you may wish to intercept the side effects.\nUse <code>OParser.runParser(...)</code> to do so:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// OParser.runParser returns (Option[Config], List[OEffect])\nOParser.runParser(parser1, args, Config()) match {\n  case (result, effects) =&gt;\n    OParser.runEffects(effects, new DefaultOEffectSetup {\n      // override def displayToOut(msg: String): Unit = Console.out.println(msg)\n      // override def displayToErr(msg: String): Unit = Console.err.println(msg)\n      // override def reportError(msg: String): Unit = displayToErr(&quot;Error: &quot; + msg)\n      // override def reportWarning(msg: String): Unit = displayToErr(&quot;Warning: &quot; + msg)\n      \n      // ignore terminate\n      override def terminate(exitState: Either[String, Unit]): Unit = ()\n    })\n\n    result match {\n      Some(config) =&gt;\n        // do something\n      case _ =&gt;\n        // arguments are bad, error message will have been displayed\n    }\n}\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> OParser.runParser returns (Option[Config], List[OEffect])</span>\n<span class=\"pl-en\">OParser</span>.runParser(parser1, args, <span class=\"pl-en\">Config</span>()) <span class=\"pl-k\">match</span> {\n  <span class=\"pl-k\">case</span> (result, effects) <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-en\">OParser</span>.runEffects(effects, <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultOEffectSetup</span> {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> override def displayToOut(msg: String): Unit = Console.out.println(msg)</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> override def displayToErr(msg: String): Unit = Console.err.println(msg)</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> override def reportError(msg: String): Unit = displayToErr(\"Error: \" + msg)</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> override def reportWarning(msg: String): Unit = displayToErr(\"Warning: \" + msg)</span>\n      \n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> ignore terminate</span>\n      <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">terminate</span>(<span class=\"pl-v\">exitState</span>: <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Unit</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> ()\n    })\n\n    result <span class=\"pl-k\">match</span> {\n      <span class=\"pl-en\">Some</span>(config) <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> do something</span>\n      <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> arguments are bad, error message will have been displayed</span>\n    }\n}</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-full-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#full-example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Full example</h4>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scopt.OParser\nval builder = OParser.builder[Config]\nval parser1 = {\n  import builder._\n  OParser.sequence(\n    programName(&quot;scopt&quot;),\n    head(&quot;scopt&quot;, &quot;4.x&quot;),\n    opt[Int]('f', &quot;foo&quot;)\n      .action((x, c) =&gt; c.copy(foo = x))\n      .text(&quot;foo is an integer property&quot;),\n    opt[File]('o', &quot;out&quot;)\n      .required()\n      .valueName(&quot;&lt;file&gt;&quot;)\n      .action((x, c) =&gt; c.copy(out = x))\n      .text(&quot;out is a required file property&quot;),\n    opt[(String, Int)](&quot;max&quot;)\n      .action({ case ((k, v), c) =&gt; c.copy(libName = k, maxCount = v) })\n      .validate(x =&gt;\n        if (x._2 &gt; 0) success\n        else failure(&quot;Value &lt;max&gt; must be &gt;0&quot;))\n      .keyValueName(&quot;&lt;libname&gt;&quot;, &quot;&lt;max&gt;&quot;)\n      .text(&quot;maximum count for &lt;libname&gt;&quot;),\n    opt[Seq[File]]('j', &quot;jars&quot;)\n      .valueName(&quot;&lt;jar1&gt;,&lt;jar2&gt;...&quot;)\n      .action((x, c) =&gt; c.copy(jars = x))\n      .text(&quot;jars to include&quot;),\n    opt[Map[String, String]](&quot;kwargs&quot;)\n      .valueName(&quot;k1=v1,k2=v2...&quot;)\n      .action((x, c) =&gt; c.copy(kwargs = x))\n      .text(&quot;other arguments&quot;),\n    opt[Unit](&quot;verbose&quot;)\n      .action((_, c) =&gt; c.copy(verbose = true))\n      .text(&quot;verbose is a flag&quot;),\n    opt[Unit](&quot;debug&quot;)\n      .hidden()\n      .action((_, c) =&gt; c.copy(debug = true))\n      .text(&quot;this option is hidden in the usage text&quot;),\n    help(&quot;help&quot;).text(&quot;prints this usage text&quot;),\n    arg[File](&quot;&lt;file&gt;...&quot;)\n      .unbounded()\n      .optional()\n      .action((x, c) =&gt; c.copy(files = c.files :+ x))\n      .text(&quot;optional unbounded args&quot;),\n    note(&quot;some notes.&quot; + sys.props(&quot;line.separator&quot;)),\n    cmd(&quot;update&quot;)\n      .action((_, c) =&gt; c.copy(mode = &quot;update&quot;))\n      .text(&quot;update is a command.&quot;)\n      .children(\n        opt[Unit](&quot;not-keepalive&quot;)\n          .abbr(&quot;nk&quot;)\n          .action((_, c) =&gt; c.copy(keepalive = false))\n          .text(&quot;disable keepalive&quot;),\n        opt[Boolean](&quot;xyz&quot;)\n          .action((x, c) =&gt; c.copy(xyz = x))\n          .text(&quot;xyz is a boolean property&quot;),\n        opt[Unit](&quot;debug-update&quot;)\n          .hidden()\n          .action((_, c) =&gt; c.copy(debug = true))\n          .text(&quot;this option is hidden in the usage text&quot;),\n        checkConfig(\n          c =&gt;\n            if (c.keepalive &amp;&amp; c.xyz) failure(&quot;xyz cannot keep alive&quot;)\n            else success)\n      )\n  )\n}\n\n// OParser.parse returns Option[Config]\nOParser.parse(parser1, args, Config()) match {\n  case Some(config) =&gt;\n    // do something\n  case _ =&gt;\n    // arguments are bad, error message will have been displayed\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scopt</span>.<span class=\"pl-en\">OParser</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">builder</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">OParser</span>.builder[<span class=\"pl-en\">Config</span>]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">parser1</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">builder</span>.<span class=\"pl-en\">_</span>\n  <span class=\"pl-en\">OParser</span>.sequence(\n    programName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>),\n    head(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4.x<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">Int</span>](<span class=\"pl-s\">'f'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\n      .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(foo <span class=\"pl-k\">=</span> x))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo is an integer property<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">File</span>](<span class=\"pl-s\">'o'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out<span class=\"pl-pds\">\"</span></span>)\n      .required()\n      .valueName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;<span class=\"pl-pds\">\"</span></span>)\n      .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(out <span class=\"pl-k\">=</span> x))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out is a required file property<span class=\"pl-pds\">\"</span></span>),\n    opt[(<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Int</span>)](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>max<span class=\"pl-pds\">\"</span></span>)\n      .action({ <span class=\"pl-k\">case</span> ((k, v), c) <span class=\"pl-k\">=&gt;</span> c.copy(libName <span class=\"pl-k\">=</span> k, maxCount <span class=\"pl-k\">=</span> v) })\n      .validate(x <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-k\">if</span> (x._2 <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) success\n        <span class=\"pl-k\">else</span> failure(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Value &lt;max&gt; must be &gt;0<span class=\"pl-pds\">\"</span></span>))\n      .keyValueName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;libname&gt;<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;max&gt;<span class=\"pl-pds\">\"</span></span>)\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>maximum count for &lt;libname&gt;<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">File</span>]](<span class=\"pl-s\">'j'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jars<span class=\"pl-pds\">\"</span></span>)\n      .valueName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;jar1&gt;,&lt;jar2&gt;...<span class=\"pl-pds\">\"</span></span>)\n      .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(jars <span class=\"pl-k\">=</span> x))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jars to include<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">String</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kwargs<span class=\"pl-pds\">\"</span></span>)\n      .valueName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>k1=v1,k2=v2...<span class=\"pl-pds\">\"</span></span>)\n      .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(kwargs <span class=\"pl-k\">=</span> x))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>other arguments<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>verbose<span class=\"pl-pds\">\"</span></span>)\n      .action((_, c) <span class=\"pl-k\">=&gt;</span> c.copy(verbose <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>verbose is a flag<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>debug<span class=\"pl-pds\">\"</span></span>)\n      .hidden()\n      .action((_, c) <span class=\"pl-k\">=&gt;</span> c.copy(debug <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>this option is hidden in the usage text<span class=\"pl-pds\">\"</span></span>),\n    help(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>help<span class=\"pl-pds\">\"</span></span>).text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>prints this usage text<span class=\"pl-pds\">\"</span></span>),\n    arg[<span class=\"pl-en\">File</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;...<span class=\"pl-pds\">\"</span></span>)\n      .unbounded()\n      .optional()\n      .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(files <span class=\"pl-k\">=</span> c.files <span class=\"pl-k\">:</span><span class=\"pl-k\">+</span> x))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>optional unbounded args<span class=\"pl-pds\">\"</span></span>),\n    note(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some notes.<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> sys.props(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>line.separator<span class=\"pl-pds\">\"</span></span>)),\n    cmd(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update<span class=\"pl-pds\">\"</span></span>)\n      .action((_, c) <span class=\"pl-k\">=&gt;</span> c.copy(mode <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update<span class=\"pl-pds\">\"</span></span>))\n      .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update is a command.<span class=\"pl-pds\">\"</span></span>)\n      .children(\n        opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>not-keepalive<span class=\"pl-pds\">\"</span></span>)\n          .abbr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nk<span class=\"pl-pds\">\"</span></span>)\n          .action((_, c) <span class=\"pl-k\">=&gt;</span> c.copy(keepalive <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>))\n          .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>disable keepalive<span class=\"pl-pds\">\"</span></span>),\n        opt[<span class=\"pl-en\">Boolean</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz<span class=\"pl-pds\">\"</span></span>)\n          .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(xyz <span class=\"pl-k\">=</span> x))\n          .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz is a boolean property<span class=\"pl-pds\">\"</span></span>),\n        opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>debug-update<span class=\"pl-pds\">\"</span></span>)\n          .hidden()\n          .action((_, c) <span class=\"pl-k\">=&gt;</span> c.copy(debug <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>))\n          .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>this option is hidden in the usage text<span class=\"pl-pds\">\"</span></span>),\n        checkConfig(\n          c <span class=\"pl-k\">=&gt;</span>\n            <span class=\"pl-k\">if</span> (c.keepalive <span class=\"pl-k\">&amp;&amp;</span> c.xyz) failure(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz cannot keep alive<span class=\"pl-pds\">\"</span></span>)\n            <span class=\"pl-k\">else</span> success)\n      )\n  )\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> OParser.parse returns Option[Config]</span>\n<span class=\"pl-en\">OParser</span>.parse(parser1, args, <span class=\"pl-en\">Config</span>()) <span class=\"pl-k\">match</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">Some</span>(config) <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> do something</span>\n  <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> arguments are bad, error message will have been displayed</span>\n}</pre></div>\n<p dir=\"auto\">The above generates the following usage text:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scopt 4.x\nUsage: scopt [update] [options] [&lt;file&gt;...]\n\n  -f, --foo &lt;value&gt;        foo is an integer property\n  -o, --out &lt;file&gt;         out is a required file property\n  --max:&lt;libname&gt;=&lt;max&gt;    maximum count for &lt;libname&gt;\n  -j, --jars &lt;jar1&gt;,&lt;jar2&gt;...\n                           jars to include\n  --kwargs k1=v1,k2=v2...  other arguments\n  --verbose                verbose is a flag\n  --help                   prints this usage text\n  &lt;file&gt;...                optional unbounded args\nsome notes.\n\nCommand: update [options]\nupdate is a command.\n  -nk, --not-keepalive     disable keepalive\n  --xyz &lt;value&gt;            xyz is a boolean property\"><pre><code>scopt 4.x\nUsage: scopt [update] [options] [&lt;file&gt;...]\n\n  -f, --foo &lt;value&gt;        foo is an integer property\n  -o, --out &lt;file&gt;         out is a required file property\n  --max:&lt;libname&gt;=&lt;max&gt;    maximum count for &lt;libname&gt;\n  -j, --jars &lt;jar1&gt;,&lt;jar2&gt;...\n                           jars to include\n  --kwargs k1=v1,k2=v2...  other arguments\n  --verbose                verbose is a flag\n  --help                   prints this usage text\n  &lt;file&gt;...                optional unbounded args\nsome notes.\n\nCommand: update [options]\nupdate is a command.\n  -nk, --not-keepalive     disable keepalive\n  --xyz &lt;value&gt;            xyz is a boolean property\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-options\" class=\"anchor\" aria-hidden=\"true\" href=\"#options\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Options</h4>\n<p dir=\"auto\">Command line options are defined using <code>opt[A]('f', \"foo\")</code> or <code>opt[A](\"foo\")</code> where <code>A</code> is any type that is an instance of <code>Read</code> typeclass.</p>\n<ul dir=\"auto\">\n<li><code>Unit</code> works as a plain flag <code>--foo</code> or <code>-f</code></li>\n<li><code>Int</code>, <code>Long</code>, <code>Double</code>, <code>String</code>, <code>BigInt</code>, <code>BigDecimal</code>, <code>java.io.File</code>, <code>java.nio.file.Path</code>, <code>java.net.URI</code>, and <code>java.net.InetAddress</code> accept a value like <code>--foo 80</code> or <code>--foo:80</code></li>\n<li><code>Boolean</code> accepts a value like <code>--foo true</code> or <code>--foo:1</code></li>\n<li><code>java.util.Calendar</code> accepts a value like <code>--foo 2000-12-01</code></li>\n<li><code>scala.concurrent.duration.Duration</code> accepts a value like <code>--foo 30s</code></li>\n<li>A pair of types like <code>(String, Int)</code> accept a key-value like <code>--foo:k=1</code> or <code>-f k=1</code></li>\n<li>A <code>Seq[File]</code> accepts a string containing comma-separated values such as <code>--jars foo.jar,bar.jar</code></li>\n<li>A <code>Map[String, String]</code> accepts a string containing comma-separated pairs like <code>--kwargs key1=val1,key2=val2</code></li>\n</ul>\n<p dir=\"auto\">This could be extended by defining <code>Read</code> instances in the scope. For example,</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object WeekDays extends Enumeration {\n  type WeekDays = Value\n  val Mon, Tue, Wed, Thur, Fri, Sat, Sun = Value\n}\nimplicit val weekDaysRead: scopt.Read[WeekDays.Value] =\n  scopt.Read.reads(WeekDays withName _)\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">WeekDays</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Enumeration</span> {\n  <span class=\"pl-k\">type</span> <span class=\"pl-en\">WeekDays</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n  <span class=\"pl-k\">val</span> Mon, <span class=\"pl-en\">Tue</span>, <span class=\"pl-en\">Wed</span>, <span class=\"pl-en\">Thur</span>, <span class=\"pl-en\">Fri</span>, <span class=\"pl-en\">Sat</span>, <span class=\"pl-en\">Sun</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Value</span>\n}\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">weekDaysRead</span><span class=\"pl-k\">:</span> scopt.<span class=\"pl-en\">Read</span>[<span class=\"pl-en\">WeekDays</span>.<span class=\"pl-en\">Value</span>] <span class=\"pl-k\">=</span>\n  scopt.<span class=\"pl-en\">Read</span>.reads(<span class=\"pl-en\">WeekDays</span> withName _)</pre></div>\n<p dir=\"auto\">By default these options are optional.</p>\n<h4 dir=\"auto\"><a id=\"user-content-short-options\" class=\"anchor\" aria-hidden=\"true\" href=\"#short-options\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Short options</h4>\n<p dir=\"auto\">For plain flags (<code>opt[Unit]</code>) short options can be grouped as <code>-fb</code> to mean <code>--foo --bar</code>.</p>\n<p dir=\"auto\"><code>opt</code> accepts only a single character, but using <code>abbr(\"ab\")</code> a string can be used too:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"opt[Unit](&quot;no-keepalive&quot;).abbr(&quot;nk&quot;).action( (x, c) =&gt; c.copy(keepalive = false) )\"><pre>opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>no-keepalive<span class=\"pl-pds\">\"</span></span>).abbr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nk<span class=\"pl-pds\">\"</span></span>).action( (x, c) <span class=\"pl-k\">=&gt;</span> c.copy(keepalive <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>) )</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-help-version-and-notes\" class=\"anchor\" aria-hidden=\"true\" href=\"#help-version-and-notes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Help, Version, and Notes</h4>\n<p dir=\"auto\">There are special options with predefined action called <code>help(\"help\")</code> and <code>version(\"version\")</code>, which prints usage text and header text respectively. When <code>help(\"help\")</code> is defined, parser will print out short error message when it fails instead of printing the entire usage text.</p>\n<p dir=\"auto\"><code>note(\"...\")</code> is used add given string to the usage text.</p>\n<h4 dir=\"auto\"><a id=\"user-content-arguments\" class=\"anchor\" aria-hidden=\"true\" href=\"#arguments\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Arguments</h4>\n<p dir=\"auto\">Command line arguments are defined using <code>arg[A](\"&lt;file&gt;\")</code>. It works similar to options, but instead it accepts values without <code>--</code> or <code>-</code>. By default, arguments accept a single value and are required.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"arg[String](&quot;&lt;file&gt;...&quot;)\"><pre>arg[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;...<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-occurrence\" class=\"anchor\" aria-hidden=\"true\" href=\"#occurrence\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Occurrence</h4>\n<p dir=\"auto\">Each opt/arg carries occurrence information <code>minOccurs</code> and <code>maxOccurs</code>.\n<code>minOccurs</code> specify at least how many times an opt/arg must appear, and\n<code>maxOccurs</code> specify at most how many times an opt/arg may appear.</p>\n<p dir=\"auto\">Occurrence can be set using the methods on the opt/arg:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"opt[String]('o', &quot;out&quot;).required()\nopt[String]('o', &quot;out&quot;).required().withFallback(() =&gt; &quot;default value&quot;)\nopt[String]('o', &quot;out&quot;).minOccurs(1) // same as above\narg[String](&quot;&lt;mode&gt;&quot;).optional()\narg[String](&quot;&lt;mode&gt;&quot;).minOccurs(0) // same as above\narg[String](&quot;&lt;file&gt;...&quot;).optional().unbounded()\narg[String](&quot;&lt;file&gt;...&quot;).minOccurs(0).maxOccurs(1024) // same as above\"><pre>opt[<span class=\"pl-en\">String</span>](<span class=\"pl-s\">'o'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out<span class=\"pl-pds\">\"</span></span>).required()\nopt[<span class=\"pl-en\">String</span>](<span class=\"pl-s\">'o'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out<span class=\"pl-pds\">\"</span></span>).required().withFallback(() <span class=\"pl-k\">=&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>default value<span class=\"pl-pds\">\"</span></span>)\nopt[<span class=\"pl-en\">String</span>](<span class=\"pl-s\">'o'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out<span class=\"pl-pds\">\"</span></span>).minOccurs(<span class=\"pl-c1\">1</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> same as above</span>\narg[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;mode&gt;<span class=\"pl-pds\">\"</span></span>).optional()\narg[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;mode&gt;<span class=\"pl-pds\">\"</span></span>).minOccurs(<span class=\"pl-c1\">0</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> same as above</span>\narg[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;...<span class=\"pl-pds\">\"</span></span>).optional().unbounded()\narg[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;...<span class=\"pl-pds\">\"</span></span>).minOccurs(<span class=\"pl-c1\">0</span>).maxOccurs(<span class=\"pl-c1\">1024</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> same as above</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-visibility\" class=\"anchor\" aria-hidden=\"true\" href=\"#visibility\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Visibility</h4>\n<p dir=\"auto\">Each opt/arg can be hidden from the usage text using <code>hidden()</code> method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"opt[Unit](&quot;debug&quot;)\n  .hidden()\n  .action( (_, c) =&gt; c.copy(debug = true) )\n  .text(&quot;this option is hidden in the usage text&quot;)\"><pre>opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>debug<span class=\"pl-pds\">\"</span></span>)\n  .hidden()\n  .action( (_, c) <span class=\"pl-k\">=&gt;</span> c.copy(debug <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>) )\n  .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>this option is hidden in the usage text<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-validation\" class=\"anchor\" aria-hidden=\"true\" href=\"#validation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Validation</h4>\n<p dir=\"auto\">Each opt/arg can carry multiple validation functions.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"opt[Int]('f', &quot;foo&quot;)\n  .action( (x, c) =&gt; c.copy(intValue = x) )\n  .validate( x =&gt;\n    if (x &gt; 0) success\n    else failure(&quot;Option --foo must be &gt;0&quot;) )\n  .validate( x =&gt; failure(&quot;Just because&quot;) )\"><pre>opt[<span class=\"pl-en\">Int</span>](<span class=\"pl-s\">'f'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\n  .action( (x, c) <span class=\"pl-k\">=&gt;</span> c.copy(intValue <span class=\"pl-k\">=</span> x) )\n  .validate( x <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-k\">if</span> (x <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) success\n    <span class=\"pl-k\">else</span> failure(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Option --foo must be &gt;0<span class=\"pl-pds\">\"</span></span>) )\n  .validate( x <span class=\"pl-k\">=&gt;</span> failure(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Just because<span class=\"pl-pds\">\"</span></span>) )</pre></div>\n<p dir=\"auto\">The first function validates if the values are positive, and\nthe second function always fails.</p>\n<h4 dir=\"auto\"><a id=\"user-content-check-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#check-configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Check configuration</h4>\n<p dir=\"auto\">Consistency among the option values can be checked using <code>checkConfig</code>.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"checkConfig( c =&gt;\n  if (c.keepalive &amp;&amp; c.xyz) failure(&quot;xyz cannot keep alive&quot;)\n  else success )\"><pre>checkConfig( c <span class=\"pl-k\">=&gt;</span>\n  <span class=\"pl-k\">if</span> (c.keepalive <span class=\"pl-k\">&amp;&amp;</span> c.xyz) failure(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz cannot keep alive<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-k\">else</span> success )</pre></div>\n<p dir=\"auto\">These are called at the end of parsing.</p>\n<h4 dir=\"auto\"><a id=\"user-content-commands\" class=\"anchor\" aria-hidden=\"true\" href=\"#commands\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Commands</h4>\n<p dir=\"auto\">Commands may be defined using <code>cmd(\"update\")</code>. Commands could be used to express <code>git branch</code> kind of argument, whose name means something. Using <code>children</code> method, a command may define child opts/args that get inserted in the presence of the command. To distinguish commands from arguments, they must appear in the first position within the level. It is generally recommended to avoid mixing args both in parent level and commands to avoid confusion.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"cmd(&quot;update&quot;)\n  .action( (_, c) =&gt; c.copy(mode = &quot;update&quot;) )\n  .text(&quot;update is a command.&quot;)\n  .children(\n    opt[Unit](&quot;not-keepalive&quot;).abbr(&quot;nk&quot;).action( (_, c) =&gt;\n      c.copy(keepalive = false) ).text(&quot;disable keepalive&quot;),\n    opt[Boolean](&quot;xyz&quot;).action( (x, c) =&gt;\n      c.copy(xyz = x) ).text(&quot;xyz is a boolean property&quot;),\n    checkConfig( c =&gt;\n      if (c.keepalive &amp;&amp; c.xyz) failure(&quot;xyz cannot keep alive&quot;)\n      else success )\n  )\"><pre>cmd(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update<span class=\"pl-pds\">\"</span></span>)\n  .action( (_, c) <span class=\"pl-k\">=&gt;</span> c.copy(mode <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update<span class=\"pl-pds\">\"</span></span>) )\n  .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update is a command.<span class=\"pl-pds\">\"</span></span>)\n  .children(\n    opt[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>not-keepalive<span class=\"pl-pds\">\"</span></span>).abbr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nk<span class=\"pl-pds\">\"</span></span>).action( (_, c) <span class=\"pl-k\">=&gt;</span>\n      c.copy(keepalive <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>) ).text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>disable keepalive<span class=\"pl-pds\">\"</span></span>),\n    opt[<span class=\"pl-en\">Boolean</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz<span class=\"pl-pds\">\"</span></span>).action( (x, c) <span class=\"pl-k\">=&gt;</span>\n      c.copy(xyz <span class=\"pl-k\">=</span> x) ).text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz is a boolean property<span class=\"pl-pds\">\"</span></span>),\n    checkConfig( c <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-k\">if</span> (c.keepalive <span class=\"pl-k\">&amp;&amp;</span> c.xyz) failure(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xyz cannot keep alive<span class=\"pl-pds\">\"</span></span>)\n      <span class=\"pl-k\">else</span> success )\n  )</pre></div>\n<p dir=\"auto\">In the above, <code>update test.txt</code> would trigger the update command, but <code>test.txt update</code> won't.</p>\n<p dir=\"auto\">Commands could be nested into another command as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"cmd(&quot;backend&quot;)\n  .text(&quot;commands to manipulate backends:\\n&quot;)\n  .action( (x, c) =&gt; c.copy(flag = true) )\n  .children(\n    cmd(&quot;update&quot;).children(\n      arg[String](&quot;&lt;a&gt;&quot;).action( (x, c) =&gt; c.copy(a = x) )\n    )\n  )\"><pre>cmd(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>backend<span class=\"pl-pds\">\"</span></span>)\n  .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>commands to manipulate backends:<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>)\n  .action( (x, c) <span class=\"pl-k\">=&gt;</span> c.copy(flag <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>) )\n  .children(\n    cmd(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>update<span class=\"pl-pds\">\"</span></span>).children(\n      arg[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;a&gt;<span class=\"pl-pds\">\"</span></span>).action( (x, c) <span class=\"pl-k\">=&gt;</span> c.copy(a <span class=\"pl-k\">=</span> x) )\n    )\n  )</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-object-oriented-dsl-immutable-parsing\" class=\"anchor\" aria-hidden=\"true\" href=\"#object-oriented-dsl-immutable-parsing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Object-oriented DSL, immutable parsing</h3>\n<p dir=\"auto\">Here's the object-oriented DSL that's mostly source-compatible with scopt 3.x.</p>\n<p dir=\"auto\">Create a parser by extending <code>scopt.OptionParser[Config]</code>. See <a href=\"https://scopt.github.io/scopt/4.0.0/api/scopt/OParserBuilder.html\" rel=\"nofollow\">Scaladoc API</a> for the details on various builder methods.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val parser = new scopt.OptionParser[Config](&quot;scopt&quot;) {\n  head(&quot;scopt&quot;, &quot;4.x&quot;)\n\n  opt[Int]('f', &quot;foo&quot;)\n    .action((x, c) =&gt; c.copy(foo = x))\n    .text(&quot;foo is an integer property&quot;)\n\n  opt[File]('o', &quot;out&quot;)\n    .required()\n    .valueName(&quot;&lt;file&gt;&quot;)\n    .action((x, c) =&gt; c.copy(out = x))\n    .text(&quot;out is a required file property&quot;)\n}\n\n// parser.parse returns Option[C]\nparser.parse(args, Config()) match {\n  case Some(config) =&gt;\n    // do stuff\n\n  case None =&gt;\n    // arguments are bad, error message will have been displayed\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">parser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> scopt.<span class=\"pl-en\">OptionParser</span>[<span class=\"pl-en\">Config</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>) {\n  head(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4.x<span class=\"pl-pds\">\"</span></span>)\n\n  opt[<span class=\"pl-en\">Int</span>](<span class=\"pl-s\">'f'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\n    .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(foo <span class=\"pl-k\">=</span> x))\n    .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo is an integer property<span class=\"pl-pds\">\"</span></span>)\n\n  opt[<span class=\"pl-en\">File</span>](<span class=\"pl-s\">'o'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out<span class=\"pl-pds\">\"</span></span>)\n    .required()\n    .valueName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;<span class=\"pl-pds\">\"</span></span>)\n    .action((x, c) <span class=\"pl-k\">=&gt;</span> c.copy(out <span class=\"pl-k\">=</span> x))\n    .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out is a required file property<span class=\"pl-pds\">\"</span></span>)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> parser.parse returns Option[C]</span>\nparser.parse(args, <span class=\"pl-en\">Config</span>()) <span class=\"pl-k\">match</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">Some</span>(config) <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> do stuff</span>\n\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">None</span> <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> arguments are bad, error message will have been displayed</span>\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-object-oriented-dsl-mutable-parsing\" class=\"anchor\" aria-hidden=\"true\" href=\"#object-oriented-dsl-mutable-parsing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Object-oriented DSL, mutable parsing</h3>\n<p dir=\"auto\">Create a <code>scopt.OptionParser[Unit]</code> and customize it with the options you need, passing in functions to process each option or argument. Use <code>foreach</code> instead of <code>action</code>.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val parser = new scopt.OptionParser[Unit](&quot;scopt&quot;) {\n  head(&quot;scopt&quot;, &quot;4.x&quot;)\n\n  opt[Int]('f', &quot;foo&quot;)\n    .foreach( x =&gt; c = c.copy(foo = x) )\n    .text(&quot;foo is an integer property&quot;)\n\n  opt[File]('o', &quot;out&quot;)\n    .required()\n    .valueName(&quot;&lt;file&gt;&quot;)\n    .foreach( x =&gt; c = c.copy(out = x) )\n    .text(&quot;out is a required file property&quot;)\n}\nif (parser.parse(args), ()) {\n  // do stuff\n}\nelse {\n  // arguments are bad, usage message will have been displayed\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">parser</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> scopt.<span class=\"pl-en\">OptionParser</span>[<span class=\"pl-en\">Unit</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>) {\n  head(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scopt<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4.x<span class=\"pl-pds\">\"</span></span>)\n\n  opt[<span class=\"pl-en\">Int</span>](<span class=\"pl-s\">'f'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\n    .foreach( x <span class=\"pl-k\">=&gt;</span> c <span class=\"pl-k\">=</span> c.copy(foo <span class=\"pl-k\">=</span> x) )\n    .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo is an integer property<span class=\"pl-pds\">\"</span></span>)\n\n  opt[<span class=\"pl-en\">File</span>](<span class=\"pl-s\">'o'</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out<span class=\"pl-pds\">\"</span></span>)\n    .required()\n    .valueName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;file&gt;<span class=\"pl-pds\">\"</span></span>)\n    .foreach( x <span class=\"pl-k\">=&gt;</span> c <span class=\"pl-k\">=</span> c.copy(out <span class=\"pl-k\">=</span> x) )\n    .text(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>out is a required file property<span class=\"pl-pds\">\"</span></span>)\n}\n<span class=\"pl-k\">if</span> (parser.parse(args), ()) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> do stuff</span>\n}\n<span class=\"pl-k\">else</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> arguments are bad, usage message will have been displayed</span>\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-advanced-showusageonerror\" class=\"anchor\" aria-hidden=\"true\" href=\"#advanced-showusageonerror\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Advanced: showUsageOnError</h3>\n<p dir=\"auto\">When <code>help(\"help\")</code> is defined, parser will print out short error message when it fails instead of printing the entire usage text.</p>\n<p dir=\"auto\">This behavior could be changed by overriding <code>showUsageOnError</code> as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scopt.{ OParserSetup, DefaultOParserSetup }\nval setup: OParserSetup = new DefaultOParserSetup {\n  override def showUsageOnError = Some(true)\n}\nval result = OParser.parse(parser1, args, Config(), setup)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scopt</span>.{ <span class=\"pl-en\">OParserSetup</span>, <span class=\"pl-en\">DefaultOParserSetup</span> }\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">setup</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">OParserSetup</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultOParserSetup</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">showUsageOnError</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">true</span>)\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">OParser</span>.parse(parser1, args, <span class=\"pl-en\">Config</span>(), setup)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-advanced-rendering-mode\" class=\"anchor\" aria-hidden=\"true\" href=\"#advanced-rendering-mode\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Advanced: Rendering mode</h3>\n<p dir=\"auto\">scopt 3.5.0 introduced rendering mode, and adopted two-column rendeing of the usage text by default. To switch back to the older one-column rendering override the <code>renderingMode</code> method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scopt.{ OParserSetup, DefaultOParserSetup }\nval setup: OParserSetup = new DefaultOParserSetup {\n  override def renderingMode = scopt.RenderingMode.OneColumn\n}\nval result = OParser.parse(parser1, args, Config(), setup)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scopt</span>.{ <span class=\"pl-en\">OParserSetup</span>, <span class=\"pl-en\">DefaultOParserSetup</span> }\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">setup</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">OParserSetup</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultOParserSetup</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">renderingMode</span> <span class=\"pl-k\">=</span> scopt.<span class=\"pl-en\">RenderingMode</span>.<span class=\"pl-en\">OneColumn</span>\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">OParser</span>.parse(parser1, args, <span class=\"pl-en\">Config</span>(), setup)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-advanced-termination-handling\" class=\"anchor\" aria-hidden=\"true\" href=\"#advanced-termination-handling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Advanced: Termination handling</h3>\n<p dir=\"auto\">By default, when the <code>--help</code> or <code>--version</code> are invoked, they call <code>sys.exit(0)</code> after printing the help or version information. If this is not desired (e.g. testing purposes), you can override the <code>terminate(exitState: Either[String, Unit])</code> method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scopt.{ OParser, DefaultOEffectSetup }\n\nOParser.runParser(parser1, args, Config()) match {\n  case (result, effects) =&gt;\n    OParser.runEffects(effects, new DefaultOEffectSetup {\n      // ignore terminate\n      override def terminate(exitState: Either[String, Unit]): Unit = ()\n    })\n\n    result match {\n      Some(config) =&gt;\n        // do something\n      case _ =&gt;\n        // arguments are bad, error message will have been displayed\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scopt</span>.{ <span class=\"pl-en\">OParser</span>, <span class=\"pl-en\">DefaultOEffectSetup</span> }\n\n<span class=\"pl-en\">OParser</span>.runParser(parser1, args, <span class=\"pl-en\">Config</span>()) <span class=\"pl-k\">match</span> {\n  <span class=\"pl-k\">case</span> (result, effects) <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-en\">OParser</span>.runEffects(effects, <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultOEffectSetup</span> {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> ignore terminate</span>\n      <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">terminate</span>(<span class=\"pl-v\">exitState</span>: <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Unit</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> ()\n    })\n\n    result <span class=\"pl-k\">match</span> {\n      <span class=\"pl-en\">Some</span>(config) <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> do something</span>\n      <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> arguments are bad, error message will have been displayed</span>\n    }\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-building\" class=\"anchor\" aria-hidden=\"true\" href=\"#building\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Building</h2>\n<p dir=\"auto\">sbt to build scopt.</p>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\"><a href=\"LICENSE.md\">MIT License</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-credits\" class=\"anchor\" aria-hidden=\"true\" href=\"#credits\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Credits</h2>\n<ul dir=\"auto\">\n<li>January 13, 2008: Aaron Harnly creates <a href=\"https://github.com/aaronharnly/scala-options\">aaronharnly/scala-options</a>.</li>\n<li>December 1, 2009: Tim Perrett introduces it <a href=\"http://gist.github.com/246481\">as a gist</a> on <a href=\"http://www.scala-lang.org/node/4380\" rel=\"nofollow\">Parsing command lines argument in a \"scalaesque\" way</a>.</li>\n<li>January 10, 2010: James Strachan takes the code, adds usage text, sbt build, etc and creates <a href=\"https://github.com/jstrachan/scopt\">jstrachan/scopt</a>, which is also mentioned in <a href=\"http://www.scala-lang.org/node/4959\" rel=\"nofollow\">Scala CLI Library?</a>.</li>\n<li>March 4th, 2010: Eugene Yokota joins scopt project, improves usage text, and adds support for key=value option and argument list.</li>\n<li>May 27, 2011: scopt 1.0.0 is released to scala-tools.org.</li>\n<li>March 18, 2012: Eugene adds immutable parser, forks the project to <a href=\"https://github.com/scopt/scopt\">scopt/scopt</a>, and releases scopt 2.0.0.</li>\n<li>June 7, 2013: Eugene rewrites scopt from scratch for polymorphic options, and releases scopt 3.0.0.</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-changes\" class=\"anchor\" aria-hidden=\"true\" href=\"#changes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Changes</h2>\n<p dir=\"auto\">See <a href=\"https://github.com/scopt/scopt/tree/scopt3/notes\">notes</a>.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "eed3si9n",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/184683?v=4",
        "url" : "https://api.github.com/users/eed3si9n",
        "contributions" : 314
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://api.github.com/users/xuwei-k",
        "contributions" : 42
      },
      {
        "login" : "jstrachan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30140?v=4",
        "url" : "https://api.github.com/users/jstrachan",
        "contributions" : 9
      },
      {
        "login" : "aappddeevv",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1183337?v=4",
        "url" : "https://api.github.com/users/aappddeevv",
        "contributions" : 9
      },
      {
        "login" : "krizalys",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1499352?v=4",
        "url" : "https://api.github.com/users/krizalys",
        "contributions" : 6
      },
      {
        "login" : "avdv",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3471749?v=4",
        "url" : "https://api.github.com/users/avdv",
        "contributions" : 6
      },
      {
        "login" : "jibbers42",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/797824?v=4",
        "url" : "https://api.github.com/users/jibbers42",
        "contributions" : 4
      },
      {
        "login" : "morgen-peschke",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6216438?v=4",
        "url" : "https://api.github.com/users/morgen-peschke",
        "contributions" : 4
      },
      {
        "login" : "Sciss",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/131300?v=4",
        "url" : "https://api.github.com/users/Sciss",
        "contributions" : 4
      },
      {
        "login" : "tototoshi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/264469?v=4",
        "url" : "https://api.github.com/users/tototoshi",
        "contributions" : 4
      },
      {
        "login" : "javabrett",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1103477?v=4",
        "url" : "https://api.github.com/users/javabrett",
        "contributions" : 3
      },
      {
        "login" : "kxbmap",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/409709?v=4",
        "url" : "https://api.github.com/users/kxbmap",
        "contributions" : 3
      },
      {
        "login" : "rhpvorderman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/26142226?v=4",
        "url" : "https://api.github.com/users/rhpvorderman",
        "contributions" : 3
      },
      {
        "login" : "tksk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/555990?v=4",
        "url" : "https://api.github.com/users/tksk",
        "contributions" : 3
      },
      {
        "login" : "alexanderfefelov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5790321?v=4",
        "url" : "https://api.github.com/users/alexanderfefelov",
        "contributions" : 2
      },
      {
        "login" : "daniel0611",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30466471?v=4",
        "url" : "https://api.github.com/users/daniel0611",
        "contributions" : 2
      },
      {
        "login" : "gzoller",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/772873?v=4",
        "url" : "https://api.github.com/users/gzoller",
        "contributions" : 2
      },
      {
        "login" : "melrief",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1481478?v=4",
        "url" : "https://api.github.com/users/melrief",
        "contributions" : 2
      },
      {
        "login" : "Zejnilovic",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/17467768?v=4",
        "url" : "https://api.github.com/users/Zejnilovic",
        "contributions" : 2
      },
      {
        "login" : "matthoffman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/59442?v=4",
        "url" : "https://api.github.com/users/matthoffman",
        "contributions" : 2
      },
      {
        "login" : "serejja",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1804417?v=4",
        "url" : "https://api.github.com/users/serejja",
        "contributions" : 2
      },
      {
        "login" : "sonenko",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2334744?v=4",
        "url" : "https://api.github.com/users/sonenko",
        "contributions" : 2
      },
      {
        "login" : "ashawley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/358615?v=4",
        "url" : "https://api.github.com/users/ashawley",
        "contributions" : 1
      },
      {
        "login" : "aaabramov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11317222?v=4",
        "url" : "https://api.github.com/users/aaabramov",
        "contributions" : 1
      },
      {
        "login" : "chris-martin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/399718?v=4",
        "url" : "https://api.github.com/users/chris-martin",
        "contributions" : 1
      },
      {
        "login" : "dwijnand",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/344610?v=4",
        "url" : "https://api.github.com/users/dwijnand",
        "contributions" : 1
      },
      {
        "login" : "densh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/320966?v=4",
        "url" : "https://api.github.com/users/densh",
        "contributions" : 1
      },
      {
        "login" : "EnverOsmanov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9248764?v=4",
        "url" : "https://api.github.com/users/EnverOsmanov",
        "contributions" : 1
      },
      {
        "login" : "sumkincpp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/738925?v=4",
        "url" : "https://api.github.com/users/sumkincpp",
        "contributions" : 1
      },
      {
        "login" : "193s",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6814758?v=4",
        "url" : "https://api.github.com/users/193s",
        "contributions" : 1
      },
      {
        "login" : "jamesfielder",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/402553?v=4",
        "url" : "https://api.github.com/users/jamesfielder",
        "contributions" : 1
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://api.github.com/users/lolgab",
        "contributions" : 1
      },
      {
        "login" : "Duhemm",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1765926?v=4",
        "url" : "https://api.github.com/users/Duhemm",
        "contributions" : 1
      },
      {
        "login" : "2m",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/422086?v=4",
        "url" : "https://api.github.com/users/2m",
        "contributions" : 1
      },
      {
        "login" : "mpollmeier",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/506752?v=4",
        "url" : "https://api.github.com/users/mpollmeier",
        "contributions" : 1
      },
      {
        "login" : "mslinn",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/485818?v=4",
        "url" : "https://api.github.com/users/mslinn",
        "contributions" : 1
      },
      {
        "login" : "maizy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/789623?v=4",
        "url" : "https://api.github.com/users/maizy",
        "contributions" : 1
      },
      {
        "login" : "remus32",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15847729?v=4",
        "url" : "https://api.github.com/users/remus32",
        "contributions" : 1
      },
      {
        "login" : "rsertelon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/294333?v=4",
        "url" : "https://api.github.com/users/rsertelon",
        "contributions" : 1
      },
      {
        "login" : "sullis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30938?v=4",
        "url" : "https://api.github.com/users/sullis",
        "contributions" : 1
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://api.github.com/users/SethTisue",
        "contributions" : 1
      },
      {
        "login" : "thvasilo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9048995?v=4",
        "url" : "https://api.github.com/users/thvasilo",
        "contributions" : 1
      },
      {
        "login" : "timothyklim",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/387270?v=4",
        "url" : "https://api.github.com/users/timothyklim",
        "contributions" : 1
      },
      {
        "login" : "vincentdehaan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/55680?v=4",
        "url" : "https://api.github.com/users/vincentdehaan",
        "contributions" : 1
      },
      {
        "login" : "brendon-",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6272982?v=4",
        "url" : "https://api.github.com/users/brendon-",
        "contributions" : 1
      },
      {
        "login" : "danielkroeni",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142282?v=4",
        "url" : "https://api.github.com/users/danielkroeni",
        "contributions" : 1
      },
      {
        "login" : "ozeebee",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1236583?v=4",
        "url" : "https://api.github.com/users/ozeebee",
        "contributions" : 1
      },
      {
        "login" : "piegamesde",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/14054505?v=4",
        "url" : "https://api.github.com/users/piegamesde",
        "contributions" : 1
      },
      {
        "login" : "pirak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/82913078?v=4",
        "url" : "https://api.github.com/users/pirak",
        "contributions" : 1
      }
    ],
    "commits" : 457,
    "topics" : [
      "command-line",
      "options-parsing",
      "scala"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 321,
        "title" : "How to parse correctly in version 4?",
        "url" : "https://github.com/scopt/scopt/issues/321"
      },
      {
        "number" : 320,
        "title" : "Request for a new release with latest changes on `develop` branch",
        "url" : "https://github.com/scopt/scopt/issues/320"
      },
      {
        "number" : 318,
        "title" : "Locale option is not working in Calendar parsing",
        "url" : "https://github.com/scopt/scopt/issues/318"
      },
      {
        "number" : 306,
        "title" : "OParser to sbt Parser",
        "url" : "https://github.com/scopt/scopt/issues/306"
      },
      {
        "number" : 304,
        "title" : "Is there a way to accumulate several opts/args/etc. and _then_ invoke an action?",
        "url" : "https://github.com/scopt/scopt/issues/304"
      },
      {
        "number" : 300,
        "title" : "command specific `checkConfig` leaks to other commands",
        "url" : "https://github.com/scopt/scopt/issues/300"
      },
      {
        "number" : 297,
        "title" : "Forward port Make OptionParser#optionsForRender safer",
        "url" : "https://github.com/scopt/scopt/issues/297"
      },
      {
        "number" : 289,
        "title" : "make OParser covariant ",
        "url" : "https://github.com/scopt/scopt/issues/289"
      },
      {
        "number" : 270,
        "title" : "pluggable help generator",
        "url" : "https://github.com/scopt/scopt/issues/270"
      },
      {
        "number" : 269,
        "title" : "Generate scripts for autocompletion for main popular shell interpreters",
        "url" : "https://github.com/scopt/scopt/issues/269"
      },
      {
        "number" : 266,
        "title" : "child options dependendant by value",
        "url" : "https://github.com/scopt/scopt/issues/266"
      },
      {
        "number" : 265,
        "title" : "Support reading scala.Short numbers",
        "url" : "https://github.com/scopt/scopt/issues/265"
      },
      {
        "number" : 264,
        "title" : "Nested commands do not work",
        "url" : "https://github.com/scopt/scopt/issues/264"
      },
      {
        "number" : 254,
        "title" : "Scaladoc link is for old 3.5 version",
        "url" : "https://github.com/scopt/scopt/issues/254"
      },
      {
        "number" : 237,
        "title" : "Example for processing subcommands",
        "url" : "https://github.com/scopt/scopt/issues/237"
      },
      {
        "number" : 202,
        "title" : "Print default values for arguments",
        "url" : "https://github.com/scopt/scopt/issues/202"
      },
      {
        "number" : 199,
        "title" : "Question: Require one of n possible commands",
        "url" : "https://github.com/scopt/scopt/issues/199"
      },
      {
        "number" : 198,
        "title" : "Action should be able to change types",
        "url" : "https://github.com/scopt/scopt/issues/198"
      },
      {
        "number" : 191,
        "title" : "Long sentence with space parameter support ?",
        "url" : "https://github.com/scopt/scopt/issues/191"
      },
      {
        "number" : 190,
        "title" : "withPossibleFallback method",
        "url" : "https://github.com/scopt/scopt/issues/190"
      },
      {
        "number" : 189,
        "title" : "Support for Java enum",
        "url" : "https://github.com/scopt/scopt/issues/189"
      },
      {
        "number" : 179,
        "title" : "Trick to use stackable traits pattern when composing a parser",
        "url" : "https://github.com/scopt/scopt/issues/179"
      },
      {
        "number" : 174,
        "title" : "How to create a parser that accepts unbounded argument before a mandatory one?",
        "url" : "https://github.com/scopt/scopt/issues/174"
      },
      {
        "number" : 162,
        "title" : "excessive newlines in usage text",
        "url" : "https://github.com/scopt/scopt/issues/162"
      },
      {
        "number" : 161,
        "title" : "`withFallback` serializes Seq to String and then parses it back",
        "url" : "https://github.com/scopt/scopt/issues/161"
      },
      {
        "number" : 157,
        "title" : "withFallback does not play well with switches",
        "url" : "https://github.com/scopt/scopt/issues/157"
      },
      {
        "number" : 149,
        "title" : "Terminate on error",
        "url" : "https://github.com/scopt/scopt/issues/149"
      },
      {
        "number" : 142,
        "title" : "Error with Predictionio",
        "url" : "https://github.com/scopt/scopt/issues/142"
      },
      {
        "number" : 134,
        "title" : "Allow displaying usage for just one subcommand",
        "url" : "https://github.com/scopt/scopt/issues/134"
      },
      {
        "number" : 128,
        "title" : "MapParser peer to OptionParser",
        "url" : "https://github.com/scopt/scopt/issues/128"
      },
      {
        "number" : 127,
        "title" : "Generate Bash completion script ?",
        "url" : "https://github.com/scopt/scopt/issues/127"
      },
      {
        "number" : 123,
        "title" : "Allow to configure the column width",
        "url" : "https://github.com/scopt/scopt/issues/123"
      },
      {
        "number" : 120,
        "title" : "-p:param=value1,value2,value3 -p:param2=value4,value5,value6",
        "url" : "https://github.com/scopt/scopt/issues/120"
      },
      {
        "number" : 117,
        "title" : "hex numbers?",
        "url" : "https://github.com/scopt/scopt/issues/117"
      },
      {
        "number" : 116,
        "title" : "Internationalization?",
        "url" : "https://github.com/scopt/scopt/issues/116"
      },
      {
        "number" : 113,
        "title" : "making cmd/arg/opt hidden make parsing hang cycling infinitely",
        "url" : "https://github.com/scopt/scopt/issues/113"
      },
      {
        "number" : 111,
        "title" : "Map type delimiter escaping issue",
        "url" : "https://github.com/scopt/scopt/issues/111"
      },
      {
        "number" : 106,
        "title" : "Optionally use --enable-flag and --disable-flag instead of --flag true or --flag false",
        "url" : "https://github.com/scopt/scopt/issues/106"
      },
      {
        "number" : 104,
        "title" : "Way to DRY repetitive options",
        "url" : "https://github.com/scopt/scopt/issues/104"
      },
      {
        "number" : 102,
        "title" : "Nice library",
        "url" : "https://github.com/scopt/scopt/issues/102"
      },
      {
        "number" : 85,
        "title" : "minOccurs not working with opt",
        "url" : "https://github.com/scopt/scopt/issues/85"
      },
      {
        "number" : 84,
        "title" : "provide a parse variant that returns Either[List[String],C]",
        "url" : "https://github.com/scopt/scopt/issues/84"
      },
      {
        "number" : 76,
        "title" : "Decompose case class used in OptionsParser into smaller case classes",
        "url" : "https://github.com/scopt/scopt/issues/76"
      },
      {
        "number" : 72,
        "title" : "Unhelpful error message when passing in duplicate options",
        "url" : "https://github.com/scopt/scopt/issues/72"
      },
      {
        "number" : 69,
        "title" : "Make partial argument parsing more friendly",
        "url" : "https://github.com/scopt/scopt/issues/69"
      },
      {
        "number" : 68,
        "title" : "Punctation in “Argment $x' must be given $n times”",
        "url" : "https://github.com/scopt/scopt/issues/68"
      },
      {
        "number" : 65,
        "title" : "Add the way to define groups of mutually exclusive options.",
        "url" : "https://github.com/scopt/scopt/issues/65"
      },
      {
        "number" : 60,
        "title" : "Add ability to wrap description text",
        "url" : "https://github.com/scopt/scopt/issues/60"
      },
      {
        "number" : 59,
        "title" : "When I send scopt an empty args list, it passes my immutable data structure through",
        "url" : "https://github.com/scopt/scopt/issues/59"
      },
      {
        "number" : 50,
        "title" : "optional commands not being treated as optional",
        "url" : "https://github.com/scopt/scopt/issues/50"
      },
      {
        "number" : 49,
        "title" : "In the presence of required args, any required opt in one command is also required in all other commands",
        "url" : "https://github.com/scopt/scopt/issues/49"
      },
      {
        "number" : 48,
        "title" : "checkConfig blocks in one command are run in all other commands as well",
        "url" : "https://github.com/scopt/scopt/issues/48"
      },
      {
        "number" : 47,
        "title" : "Rather than returning Option[MyConfCaseClass] should have the option to get a Try[MyConfCaseClass]",
        "url" : "https://github.com/scopt/scopt/issues/47"
      },
      {
        "number" : 44,
        "title" : "Get usage text of a single command, rather than the full usage text",
        "url" : "https://github.com/scopt/scopt/issues/44"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "command-line-parsing",
    "beginnerIssuesLabel" : null
  }
}