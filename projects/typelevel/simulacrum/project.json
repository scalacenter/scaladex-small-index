{
  "organization" : "typelevel",
  "repository" : "simulacrum",
  "creationDate" : 1453299741643,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644311158929
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : "First class syntax support for type classes in Scala",
    "logo" : "https://avatars.githubusercontent.com/u/3731824?v=4",
    "stars" : 926,
    "forks" : 62,
    "watchers" : 36,
    "issues" : 29,
    "creationDate" : 1421466570000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-simulacrum\" class=\"anchor\" aria-hidden=\"true\" href=\"#simulacrum\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>simulacrum</h1>\n<p dir=\"auto\"><a href=\"https://github.com/typelevel/simulacrum/actions/workflows/ci.yml\"><img src=\"https://github.com/typelevel/simulacrum/actions/workflows/ci.yml/badge.svg\" alt=\"Continuous Integration\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/org.typelevel/simulacrum_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/4e58d34021f7b91fe51d29bd60ff1a0cd21e9780862a6903e510b8b3b118b880/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f6f72672e747970656c6576656c2f73696d756c616372756d5f322e31332f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/org.typelevel/simulacrum_2.13/badge.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/mpilquist/simulacrum?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Gitter\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a></p>\n<hr>\n<p dir=\"auto\"><strong>Note on maintenance</strong></p>\n<p dir=\"auto\">This project is only maintained for Scala 2.x. No new features are developed, but bug fix releases will still be made available. For Dotty/Scala 3, please use <a href=\"https://github.com/typelevel/simulacrum-scalafix\">simulacrum-scalafix</a>, which is a set of Scalafix rewrites that mirror simulacrum's features.</p>\n<hr>\n<p dir=\"auto\">Type classes rock. Alas, their encoding in Scala requires a lot of boilerplate, which doesn't rock. There is inconsistency between projects, where type classes are encoded differently. There is inconsistency within projects, where object-oriented forwarders (aka. ops, syntax) accidentally differ in exact parameter lists or forwarders are missing where they are expected to be. Even in disciplined teams, the bike-shedding opportunities alone are a source of lost productivity.</p>\n<p dir=\"auto\">This project addresses these concerns by introducing first class support for type classes in Scala 2.11. For example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import simulacrum._\n\n@typeclass trait Semigroup[A] {\n  @op(&quot;|+|&quot;) def append(x: A, y: A): A\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">simulacrum</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">@</span>typeclass <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>] {\n  <span class=\"pl-k\">@</span>op(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>|+|<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">def</span> <span class=\"pl-en\">append</span>(<span class=\"pl-v\">x</span>: <span class=\"pl-en\">A</span>, <span class=\"pl-v\">y</span>: <span class=\"pl-en\">A</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n}</pre></div>\n<p dir=\"auto\">Given this definition, something similar to the following is generated at compile time:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait Semigroup[A] {\n  def append(x: A, y: A): A\n}\n\nobject Semigroup {\n  def apply[A](implicit instance: Semigroup[A]): Semigroup[A] = instance\n\n  trait Ops[A] {\n    def typeClassInstance: Semigroup[A]\n    def self: A\n    def |+|(y: A): A = typeClassInstance.append(self, y)\n  }\n\n  trait ToSemigroupOps {\n    implicit def toSemigroupOps[A](target: A)(implicit tc: Semigroup[A]): Ops[A] = new Ops[A] {\n      val self = target\n      val typeClassInstance = tc\n    }\n  }\n\n  object nonInheritedOps extends ToSemigroupOps\n\n  trait AllOps[A] extends Ops[A] {\n    def typeClassInstance: Semigroup[A]\n  }\n\n  object ops {\n    implicit def toAllSemigroupOps[A](target: A)(implicit tc: Semigroup[A]): AllOps[A] = new AllOps[A] {\n      val self = target\n      val typeClassInstance = tc\n    }\n  }\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">append</span>(<span class=\"pl-v\">x</span>: <span class=\"pl-en\">A</span>, <span class=\"pl-v\">y</span>: <span class=\"pl-en\">A</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Semigroup</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">instance</span>: <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> instance\n\n  <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Ops</span>[<span class=\"pl-en\">A</span>] {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">typeClassInstance</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>]\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">self</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">|+|</span>(<span class=\"pl-v\">y</span>: <span class=\"pl-en\">A</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span> <span class=\"pl-k\">=</span> typeClassInstance.append(self, y)\n  }\n\n  <span class=\"pl-k\">trait</span> <span class=\"pl-en\">ToSemigroupOps</span> {\n    <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toSemigroupOps</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">target</span>: <span class=\"pl-en\">A</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">tc</span>: <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Ops</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Ops</span>[<span class=\"pl-en\">A</span>] {\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">self</span> <span class=\"pl-k\">=</span> target\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">typeClassInstance</span> <span class=\"pl-k\">=</span> tc\n    }\n  }\n\n  <span class=\"pl-k\">object</span> <span class=\"pl-en\">nonInheritedOps</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">ToSemigroupOps</span>\n\n  <span class=\"pl-k\">trait</span> <span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Ops</span>[<span class=\"pl-en\">A</span>] {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">typeClassInstance</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>]\n  }\n\n  <span class=\"pl-k\">object</span> <span class=\"pl-en\">ops</span> {\n    <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toAllSemigroupOps</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">target</span>: <span class=\"pl-en\">A</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">tc</span>: <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] {\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">self</span> <span class=\"pl-k\">=</span> target\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">typeClassInstance</span> <span class=\"pl-k\">=</span> tc\n    }\n  }\n}</pre></div>\n<p dir=\"auto\">The <code>Ops</code> trait contains extension methods for a value of type <code>A</code> for which there's a <code>Semigroup[A]</code> instance available. The <code>ToSemigroupOps</code> trait contains an implicit conversion from an <code>A</code> to an <code>Ops[A]</code>. The <code>ToSemigroupOps</code> trait can be mixed in to a class in order to get access to the extension methods. It can also be mixed in to an object, along with other <code>ToXyzOps</code> traits, in order to provide a single mass import object.</p>\n<p dir=\"auto\">The <code>AllOps</code> trait mixes in <code>Ops</code> along with the <code>AllOps</code> traits of all super types. In this example, there are no super types, but we'll look at such an example soon. Finally, the <code>ops</code> object provides an implicit conversion that can be directly imported in order to use the extension methods.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val semigroupInt: Semigroup[Int] = new Semigroup[Int] {\n  def append(x: Int, y: Int) = x + y\n}\n\nimport Semigroup.ops._\n1 |+| 2 // 3\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">semigroupInt</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Semigroup</span>[<span class=\"pl-en\">Int</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">append</span>(<span class=\"pl-v\">x</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">y</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=</span> x <span class=\"pl-k\">+</span> y\n}\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">Semigroup</span>.<span class=\"pl-en\">ops</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c1\">1</span> <span class=\"pl-k\">|</span><span class=\"pl-k\">+</span><span class=\"pl-k\">|</span> <span class=\"pl-c1\">2</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 3</span></pre></div>\n<p dir=\"auto\">Subtyping of type classes is supported. For example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@typeclass trait Monoid[A] extends Semigroup[A] {\n  def id: A\n}\"><pre><span class=\"pl-k\">@</span>typeclass <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Semigroup</span>[<span class=\"pl-en\">A</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">id</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n}</pre></div>\n<p dir=\"auto\">Generates:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait Monoid[A] extends Semigroup[A] {\n  def id: A\n}\n\nobject Monoid {\n  def apply[A](implicit instance: Monoid[A]): Monoid[A] = instance\n\n  trait Ops[A] {\n    def typeClassInstance: Monoid[A]\n    def self: A\n  }\n\n  trait ToMonoidOps {\n    implicit def toMonoidOps[A](target: A)(implicit tc: Monoid[A]): Ops[A] = new Ops[A] {\n      val self = target\n      val typeClassInstance = tc\n    }\n  }\n\n  trait AllOps[A] extends Ops[A] with Semigroup.AllOps[A] {\n    def typeClassInstance: Monoid[A]\n  }\n\n  object ops {\n    implicit def toAllMonoidOps[A](target: A)(implicit tc: Monoid[A]): AllOps[A] = new AllOps[A] {\n      val self = target\n      val typeClassInstance = tc\n    }\n  }\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Semigroup</span>[<span class=\"pl-en\">A</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">id</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Monoid</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">instance</span>: <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> instance\n\n  <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Ops</span>[<span class=\"pl-en\">A</span>] {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">typeClassInstance</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>]\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">self</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n  }\n\n  <span class=\"pl-k\">trait</span> <span class=\"pl-en\">ToMonoidOps</span> {\n    <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toMonoidOps</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">target</span>: <span class=\"pl-en\">A</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">tc</span>: <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Ops</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Ops</span>[<span class=\"pl-en\">A</span>] {\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">self</span> <span class=\"pl-k\">=</span> target\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">typeClassInstance</span> <span class=\"pl-k\">=</span> tc\n    }\n  }\n\n  <span class=\"pl-k\">trait</span> <span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Ops</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">with</span> <span class=\"pl-e\">Semigroup</span>.<span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">typeClassInstance</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>]\n  }\n\n  <span class=\"pl-k\">object</span> <span class=\"pl-en\">ops</span> {\n    <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">toAllMonoidOps</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">target</span>: <span class=\"pl-en\">A</span>)(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">tc</span>: <span class=\"pl-en\">Monoid</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AllOps</span>[<span class=\"pl-en\">A</span>] {\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">self</span> <span class=\"pl-k\">=</span> target\n      <span class=\"pl-k\">val</span> <span class=\"pl-smi\">typeClassInstance</span> <span class=\"pl-k\">=</span> tc\n    }\n  }\n}</pre></div>\n<p dir=\"auto\">In this example, the <code>id</code> method was not lifted to the <code>Ops</code> trait because it is not an extension method for an <code>A</code> value. Even though there were no such methods, an empty <code>Ops</code> trait was still generated. This is important for various subtyping scenarios as they relate to separate compilation.</p>\n<p dir=\"auto\">Higher kinds are also supported -- specifically, type classes that are polymorphic over type constructors, like <code>Functor</code>. The current implementation only supports unary type constructors, but support for binary type constructors is planned.</p>\n<p dir=\"auto\">This allows usage like:</p>\n<p dir=\"auto\">See <a href=\"examples/src/test/scala/simulacrum/examples/examples.scala\">the examples</a> for more.</p>\n<h2 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h2>\n<p dir=\"auto\">The generated code supports two modes of method extension. Consider the case of the <code>Monad</code> typeclass: it is a subtype of <code>Applicative</code> which is, itself, a subtype of <code>Functor</code>. After extending our monad with the <code>Monad</code> trait, we need to bring our implicits into scope.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/**\n * We can simply import the contents of Monad's ops\n *  object to get it and all ancestor methods:\n */\nimport Monad.ops._\n\n/**\n * Alternatively, we can use the ToMonadOps trait\n *  to mixin just the operations we want:\n */\nobject NoMapForMonad extends ToMonadOps with ToApplicativeOps {}\nimport NoMapForMonad._\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * We can simply import the contents of Monad's ops</span>\n<span class=\"pl-c\"> *  object to get it and all ancestor methods:</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">Monad</span>.<span class=\"pl-en\">ops</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * Alternatively, we can use the ToMonadOps trait</span>\n<span class=\"pl-c\"> *  to mixin just the operations we want:</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">NoMapForMonad</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">ToMonadOps</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ToApplicativeOps</span> {}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">NoMapForMonad</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Note that the second approach will not include the <code>map</code> operation of its grandparent type, <code>Functor</code>. The benefit of this second approach is that a collection of method extensions can be brought into scope all at once. Indeed, the typeclasses of operations imported in this second fashion need not be related.</p>\n<h2 dir=\"auto\"><a id=\"user-content-including-simulacrum\" class=\"anchor\" aria-hidden=\"true\" href=\"#including-simulacrum\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Including Simulacrum</h2>\n<p dir=\"auto\">This project supports Scala 2.11, 2.12, and 2.13. The project is based on macro paradise. To use the project, add the following to your build.sbt:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.typelevel&quot; %% &quot;simulacrum&quot; % &quot;1.0.1&quot;\n\n// For Scala 2.11-2.12\naddCompilerPlugin(&quot;org.scalamacros&quot; % &quot;paradise&quot; % &quot;2.1.0&quot; cross CrossVersion.full)\n\n// For Scala 2.13+\nscalacOptions += &quot;-Ymacro-annotations&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>simulacrum<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.1<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> For Scala 2.11-2.12</span>\naddCompilerPlugin(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.scalamacros<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>paradise<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.1.0<span class=\"pl-pds\">\"</span></span> cross <span class=\"pl-en\">CrossVersion</span>.full)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> For Scala 2.13+</span>\nscalacOptions <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-Ymacro-annotations<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Macro paradise must exist in projects which use <code>@typeclass</code>, but code that depends on the generated type classes do not need macro paradise.</p>\n<p dir=\"auto\">Feedback is much appreciated. The generated code is a result of working with project leads of a variety of open source projects that use type classes. However, there's certainly room for improvement, so please open issues or PRs containing feedback.</p>\n<h2 dir=\"auto\"><a id=\"user-content-known-limitations\" class=\"anchor\" aria-hidden=\"true\" href=\"#known-limitations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Known Limitations</h2>\n<ul dir=\"auto\">\n<li>Only type classes that abstract over a proper type or a unary type constructor are currently supported. This will be extended to binary type constructors in the future, and perhaps n-ary type constructors.</li>\n<li>When defining a type class as a subtype of another type class, and defining an abstract member of the super type concretely in the sub type, the <code>override</code> keyword must be used. For example, defining <code>map</code> in terms of <code>flatMap</code> requires <code>override def map[A, B](...)</code>.</li>\n<li>See the GitHub issues list for other known limitations and please open issues for any other limitations you encounter. If you suspect a problem, it may be helpful to run with the <code>simulacrum.trace</code> system property (e.g., <code>sbt -Dsimulacrum.trace compile</code>), which adds a significant amount of logging to the compiler output.</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-code-of-conduct\" class=\"anchor\" aria-hidden=\"true\" href=\"#code-of-conduct\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Code of Conduct</h2>\n<p dir=\"auto\">See the <a href=\"CODE_OF_CONDUCT.md\">Code of Conduct</a>.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "mpilquist",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/118078?v=4",
        "url" : "https://api.github.com/users/mpilquist",
        "contributions" : 200
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://api.github.com/users/larsrh",
        "contributions" : 74
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 57
      },
      {
        "login" : "sh0hei",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/884074?v=4",
        "url" : "https://api.github.com/users/sh0hei",
        "contributions" : 18
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://api.github.com/users/xuwei-k",
        "contributions" : 12
      },
      {
        "login" : "yilinwei",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8933128?v=4",
        "url" : "https://api.github.com/users/yilinwei",
        "contributions" : 11
      },
      {
        "login" : "Jasper-M",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3708353?v=4",
        "url" : "https://api.github.com/users/Jasper-M",
        "contributions" : 8
      },
      {
        "login" : "travisbrown",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/316049?v=4",
        "url" : "https://api.github.com/users/travisbrown",
        "contributions" : 7
      },
      {
        "login" : "djspiewak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/752?v=4",
        "url" : "https://api.github.com/users/djspiewak",
        "contributions" : 2
      },
      {
        "login" : "dariuszpm",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22668609?v=4",
        "url" : "https://api.github.com/users/dariuszpm",
        "contributions" : 2
      },
      {
        "login" : "joroKr21",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2218841?v=4",
        "url" : "https://api.github.com/users/joroKr21",
        "contributions" : 2
      },
      {
        "login" : "sellout",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/33031?v=4",
        "url" : "https://api.github.com/users/sellout",
        "contributions" : 2
      },
      {
        "login" : "mikejcurry",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10455080?v=4",
        "url" : "https://api.github.com/users/mikejcurry",
        "contributions" : 2
      },
      {
        "login" : "milessabin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/131183?v=4",
        "url" : "https://api.github.com/users/milessabin",
        "contributions" : 2
      },
      {
        "login" : "paulp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9135?v=4",
        "url" : "https://api.github.com/users/paulp",
        "contributions" : 2
      },
      {
        "login" : "jhnsmth",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15067848?v=4",
        "url" : "https://api.github.com/users/jhnsmth",
        "contributions" : 1
      },
      {
        "login" : "Alistair-Johnson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/44881886?v=4",
        "url" : "https://api.github.com/users/Alistair-Johnson",
        "contributions" : 1
      },
      {
        "login" : "dberg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/201971?v=4",
        "url" : "https://api.github.com/users/dberg",
        "contributions" : 1
      },
      {
        "login" : "erikkaplun",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/17533?v=4",
        "url" : "https://api.github.com/users/erikkaplun",
        "contributions" : 1
      },
      {
        "login" : "erwan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16061?v=4",
        "url" : "https://api.github.com/users/erwan",
        "contributions" : 1
      },
      {
        "login" : "fthomas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/141252?v=4",
        "url" : "https://api.github.com/users/fthomas",
        "contributions" : 1
      },
      {
        "login" : "gabro",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/691940?v=4",
        "url" : "https://api.github.com/users/gabro",
        "contributions" : 1
      },
      {
        "login" : "tkawachi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22657?v=4",
        "url" : "https://api.github.com/users/tkawachi",
        "contributions" : 1
      },
      {
        "login" : "kailuowang",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/83257?v=4",
        "url" : "https://api.github.com/users/kailuowang",
        "contributions" : 1
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://api.github.com/users/lolgab",
        "contributions" : 1
      },
      {
        "login" : "marcesquerra",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2683206?v=4",
        "url" : "https://api.github.com/users/marcesquerra",
        "contributions" : 1
      },
      {
        "login" : "mslinn",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/485818?v=4",
        "url" : "https://api.github.com/users/mslinn",
        "contributions" : 1
      },
      {
        "login" : "moradology",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1977405?v=4",
        "url" : "https://api.github.com/users/moradology",
        "contributions" : 1
      },
      {
        "login" : "stew",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/66772?v=4",
        "url" : "https://api.github.com/users/stew",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://api.github.com/users/gitter-badger",
        "contributions" : 1
      },
      {
        "login" : "cameo-js",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1317429?v=4",
        "url" : "https://api.github.com/users/cameo-js",
        "contributions" : 1
      },
      {
        "login" : "takayahilton",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12049838?v=4",
        "url" : "https://api.github.com/users/takayahilton",
        "contributions" : 1
      }
    ],
    "commits" : 418,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 173,
        "title" : "@op annotation causing compilation error on 2.13.1",
        "url" : "https://github.com/typelevel/simulacrum/issues/173"
      },
      {
        "number" : 172,
        "title" : "Type missmatch errors",
        "url" : "https://github.com/typelevel/simulacrum/issues/172"
      },
      {
        "number" : 162,
        "title" : "Type mismatch when generating instances for `F[G[_]]`",
        "url" : "https://github.com/typelevel/simulacrum/issues/162"
      },
      {
        "number" : 115,
        "title" : "Compiler error when using type constraint",
        "url" : "https://github.com/typelevel/simulacrum/issues/115"
      },
      {
        "number" : 113,
        "title" : "varargs does not works",
        "url" : "https://github.com/typelevel/simulacrum/issues/113"
      },
      {
        "number" : 103,
        "title" : "Some generated public members don't have explicit return types",
        "url" : "https://github.com/typelevel/simulacrum/issues/103"
      },
      {
        "number" : 95,
        "title" : "Experiment with scalagen",
        "url" : "https://github.com/typelevel/simulacrum/issues/95"
      },
      {
        "number" : 90,
        "title" : "`sbt doc` fails on `@typeclasses` methods with scaladocs",
        "url" : "https://github.com/typelevel/simulacrum/issues/90"
      },
      {
        "number" : 89,
        "title" : "Limit visibility of implementation details",
        "url" : "https://github.com/typelevel/simulacrum/issues/89"
      },
      {
        "number" : 87,
        "title" : "Ops itself should have a proxy type class",
        "url" : "https://github.com/typelevel/simulacrum/issues/87"
      },
      {
        "number" : 83,
        "title" : "Type mismatch in typeclass definition",
        "url" : "https://github.com/typelevel/simulacrum/issues/83"
      },
      {
        "number" : 82,
        "title" : "Extension methods disappear if giving them Scaladoc",
        "url" : "https://github.com/typelevel/simulacrum/issues/82"
      },
      {
        "number" : 79,
        "title" : "Rethink type traversal",
        "url" : "https://github.com/typelevel/simulacrum/issues/79"
      },
      {
        "number" : 76,
        "title" : "Generate Ops for operations where instance type is in a function.",
        "url" : "https://github.com/typelevel/simulacrum/issues/76"
      },
      {
        "number" : 75,
        "title" : "Allow partially-manually defined `Ops` classes.",
        "url" : "https://github.com/typelevel/simulacrum/issues/75"
      },
      {
        "number" : 65,
        "title" : "Does not support constrait on this.type",
        "url" : "https://github.com/typelevel/simulacrum/issues/65"
      },
      {
        "number" : 62,
        "title" : "eliminate instance boiler plate: seamless migration to type classes",
        "url" : "https://github.com/typelevel/simulacrum/issues/62"
      },
      {
        "number" : 57,
        "title" : "Methods with lazy initial param don’t end up in ops.",
        "url" : "https://github.com/typelevel/simulacrum/issues/57"
      },
      {
        "number" : 55,
        "title" : "Ops doesn’t always import the typeclass instance when it needs to.",
        "url" : "https://github.com/typelevel/simulacrum/issues/55"
      },
      {
        "number" : 50,
        "title" : "Alternative encoding integration.",
        "url" : "https://github.com/typelevel/simulacrum/issues/50"
      },
      {
        "number" : 47,
        "title" : "machinist integration",
        "url" : "https://github.com/typelevel/simulacrum/issues/47"
      },
      {
        "number" : 45,
        "title" : "Add support for operators that return values of the type of the type class parameter",
        "url" : "https://github.com/typelevel/simulacrum/issues/45"
      },
      {
        "number" : 32,
        "title" : "Hygiene problems when ops-eligible methods refer to type members of type class",
        "url" : "https://github.com/typelevel/simulacrum/issues/32"
      },
      {
        "number" : 28,
        "title" : "Quickstart documentation for simulacrum (and its annotations)",
        "url" : "https://github.com/typelevel/simulacrum/issues/28"
      },
      {
        "number" : 27,
        "title" : "inheritance for @op",
        "url" : "https://github.com/typelevel/simulacrum/issues/27"
      },
      {
        "number" : 16,
        "title" : "Document how to create a custom subclass of @typeclass annotation that specifies project specific settings",
        "url" : "https://github.com/typelevel/simulacrum/issues/16"
      },
      {
        "number" : 6,
        "title" : "Add support for type classes that abstract over type constructors of 2 type params",
        "url" : "https://github.com/typelevel/simulacrum/issues/6"
      },
      {
        "number" : 5,
        "title" : "Add `instance` support:",
        "url" : "https://github.com/typelevel/simulacrum/issues/5"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "simulacrum",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "scala-language-extensions",
    "beginnerIssuesLabel" : null
  }
}