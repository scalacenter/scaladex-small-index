{
  "organization" : "typelevel",
  "repository" : "log4cats",
  "creationDate" : 1524588307000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1653647660925
    }
  },
  "githubInfo" : {
    "homepage" : "https://typelevel.org/log4cats/",
    "description" : "Logging Tools For Interaction with cats-effect",
    "logo" : "https://avatars.githubusercontent.com/u/3731824?v=4",
    "stars" : 323,
    "forks" : 53,
    "watchers" : 10,
    "issues" : 16,
    "creationDate" : 1524584481000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-log4cats-\" class=\"anchor\" aria-hidden=\"true\" href=\"#log4cats-\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>log4cats <a href=\"https://maven-badges.herokuapp.com/maven-central/org.typelevel/log4cats-core_2.12\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/662be5f95f1eefd91552637bcd8e9b31b80a829674758caebb0678a484e8f4b0/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f6f72672e747970656c6576656c2f6c6f6734636174732d636f72655f322e31322f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/org.typelevel/log4cats-core_2.12/badge.svg\" style=\"max-width: 100%;\"></a></h1>\n<h2 dir=\"auto\"><a id=\"user-content-project-goals\" class=\"anchor\" aria-hidden=\"true\" href=\"#project-goals\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Project Goals</h2>\n<p dir=\"auto\">log4cats attempts to make referentially transparent logging a reality. These F algebras allow you to write\ncode for logging knowing you won't be doing side-effects as it offers no way to do so. We provide our own slf4j layer,\nor you can use any of the supported backends, or create your own.</p>\n<h2 dir=\"auto\"><a id=\"user-content-quick-start\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-start\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick Start</h2>\n<p dir=\"auto\">To use log4cats in an existing SBT project with Scala 2.12 or a later version, add the following dependency to your\n<code>build.sbt</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.typelevel&quot; %% &quot;log4cats-core&quot;    % &quot;&lt;version&gt;&quot;,  // Only if you want to Support Any Backend\n  &quot;org.typelevel&quot; %% &quot;log4cats-slf4j&quot;   % &quot;&lt;version&gt;&quot;,  // Direct Slf4j Support - Recommended\n)\"><pre>libraryDependencies <span class=\"pl-k\">++</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>log4cats-core<span class=\"pl-pds\">\"</span></span>    <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;version&gt;<span class=\"pl-pds\">\"</span></span>,  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Only if you want to Support Any Backend</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>log4cats-slf4j<span class=\"pl-pds\">\"</span></span>   <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;version&gt;<span class=\"pl-pds\">\"</span></span>,  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Direct Slf4j Support - Recommended</span>\n)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-examples\" class=\"anchor\" aria-hidden=\"true\" href=\"#examples\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Examples</h2>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.typelevel.log4cats.Logger\nimport org.typelevel.log4cats.slf4j.Slf4jLogger\nimport cats.effect.Sync\nimport cats.implicits._\n\nobject MyThing {\n  // Impure But What 90% of Folks I know do with log4s\n  implicit def unsafeLogger[F[_]: Sync] = Slf4jLogger.getLogger[F]\n\n  // Arbitrary Local Function Declaration\n  def doSomething[F[_]: Sync]: F[Unit] =\n    Logger[F].info(&quot;Logging Start Something&quot;) *&gt;\n    Sync[F].delay(println(&quot;I could be doing anything&quot;))\n      .attempt.flatMap{\n        case Left(e) =&gt; Logger[F].error(e)(&quot;Something Went Wrong&quot;)\n        case Right(_) =&gt; Sync[F].pure(())\n      }\n\n  def safelyDoThings[F[_]: Sync]: F[Unit] = for {\n    logger &lt;- Slf4jLogger.create[F]\n    _ &lt;- logger.info(&quot;Logging at start of safelyDoThings&quot;)\n    something &lt;- Sync[F].delay(println(&quot;I could do anything&quot;))\n      .onError{case e =&gt; logger.error(e)(&quot;Something Went Wrong in safelyDoThings&quot;)}\n    _ &lt;- logger.info(&quot;Logging at end of safelyDoThings&quot;)\n  } yield something\n\n  def passForEasierUse[F[_]: Sync: Logger] = for {\n    _ &lt;- Logger[F].info(&quot;Logging at start of passForEasierUse&quot;)\n    something &lt;- Sync[F].delay(println(&quot;I could do anything&quot;))\n      .onError{case e =&gt; Logger[F].error(e)(&quot;Something Went Wrong in passForEasierUse&quot;)}\n    _ &lt;- Logger[F].info(&quot;Logging at end of passForEasierUse&quot;)\n  } yield something\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">Logger</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">slf4j</span>.<span class=\"pl-en\">Slf4jLogger</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.<span class=\"pl-en\">Sync</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyThing</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Impure But What 90% of Folks I know do with log4s</span>\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">unsafeLogger</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Slf4jLogger</span>.getLogger[<span class=\"pl-en\">F</span>]\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Arbitrary Local Function Declaration</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">doSomething</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span>]<span class=\"pl-k\">:</span> <span class=\"pl-en\">F</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span>\n    <span class=\"pl-en\">Logger</span>[<span class=\"pl-en\">F</span>].info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Logging Start Something<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-en\">Sync</span>[<span class=\"pl-en\">F</span>].delay(println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I could be doing anything<span class=\"pl-pds\">\"</span></span>))\n      .attempt.flatMap{\n        <span class=\"pl-k\">case</span> <span class=\"pl-en\">Left</span>(e) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Logger</span>[<span class=\"pl-en\">F</span>].error(e)(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something Went Wrong<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-k\">case</span> <span class=\"pl-en\">Right</span>(_) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Sync</span>[<span class=\"pl-en\">F</span>].pure(())\n      }\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">safelyDoThings</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span>]<span class=\"pl-k\">:</span> <span class=\"pl-en\">F</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n    logger <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Slf4jLogger</span>.create[<span class=\"pl-en\">F</span>]\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> logger.info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Logging at start of safelyDoThings<span class=\"pl-pds\">\"</span></span>)\n    something <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Sync</span>[<span class=\"pl-en\">F</span>].delay(println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I could do anything<span class=\"pl-pds\">\"</span></span>))\n      .onError{<span class=\"pl-k\">case</span> e <span class=\"pl-k\">=&gt;</span> logger.error(e)(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something Went Wrong in safelyDoThings<span class=\"pl-pds\">\"</span></span>)}\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> logger.info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Logging at end of safelyDoThings<span class=\"pl-pds\">\"</span></span>)\n  } <span class=\"pl-k\">yield</span> something\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">passForEasierUse</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Logger</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Logger</span>[<span class=\"pl-en\">F</span>].info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Logging at start of passForEasierUse<span class=\"pl-pds\">\"</span></span>)\n    something <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Sync</span>[<span class=\"pl-en\">F</span>].delay(println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I could do anything<span class=\"pl-pds\">\"</span></span>))\n      .onError{<span class=\"pl-k\">case</span> e <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Logger</span>[<span class=\"pl-en\">F</span>].error(e)(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Something Went Wrong in passForEasierUse<span class=\"pl-pds\">\"</span></span>)}\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Logger</span>[<span class=\"pl-en\">F</span>].info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Logging at end of passForEasierUse<span class=\"pl-pds\">\"</span></span>)\n  } <span class=\"pl-k\">yield</span> something\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-laconic-syntax\" class=\"anchor\" aria-hidden=\"true\" href=\"#laconic-syntax\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Laconic syntax</h3>\n<p dir=\"auto\">It's possible to use interpolated syntax for logging.\nCurrently, supported ops are: <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>.\nYou can use it for your custom <code>Logger</code> as well as for Slf4j <code>Logger</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.Applicative\nimport cats.effect.Sync\nimport org.typelevel.log4cats.Logger\nimport org.typelevel.log4cats.syntax._\n\ndef successComputation[F[_]: Applicative]: F[Int] = Applicative[F].pure(1)\ndef errorComputation[F[_]: Sync]: F[Unit] = Sync[F].raiseError[Unit](new Throwable(&quot;Sorry!&quot;))\n\ndef log[F[_]: Sync: Logger] = \n  for {\n    result1 &lt;- successComputation[F]\n    _ &lt;- info&quot;First result is $result1&quot;\n    _ &lt;- errorComputation[F].onError(_ =&gt; error&quot;We got an error!&quot;)\n  } yield ()\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">Applicative</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.<span class=\"pl-en\">Sync</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">Logger</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">successComputation</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Applicative</span>]<span class=\"pl-k\">:</span> <span class=\"pl-en\">F</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Applicative</span>[<span class=\"pl-en\">F</span>].pure(<span class=\"pl-c1\">1</span>)\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">errorComputation</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span>]<span class=\"pl-k\">:</span> <span class=\"pl-en\">F</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Sync</span>[<span class=\"pl-en\">F</span>].raiseError[<span class=\"pl-en\">Unit</span>](<span class=\"pl-k\">new</span> <span class=\"pl-en\">Throwable</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sorry!<span class=\"pl-pds\">\"</span></span>))\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">log</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Logger</span>] <span class=\"pl-k\">=</span> \n  <span class=\"pl-k\">for</span> {\n    result1 <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> successComputation[<span class=\"pl-en\">F</span>]\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-k\">info</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">First result is </span>$result1<span class=\"pl-s\">\"</span>\n    _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> errorComputation[<span class=\"pl-en\">F</span>].onError(_ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">error</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">We got an error!</span><span class=\"pl-s\">\"</span>)\n  } <span class=\"pl-k\">yield</span> ()</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-logging-using-capabilities\" class=\"anchor\" aria-hidden=\"true\" href=\"#logging-using-capabilities\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Logging using capabilities</h2>\n<p dir=\"auto\">You can work with logging using capabilities. It's implemented via the <code>LoggerFactory</code> trait.\nYou instantiate it once (dependent on the specific logging backend you use)\nand pass this around in your application.</p>\n<p dir=\"auto\">This brings several advantages:</p>\n<ul dir=\"auto\">\n<li>it's no more needed to pass the very powerful <code>F[_]: Sync</code> constraint everywhere\nthat can do almost anything when you only need logging.</li>\n<li>you have control of loggers creation, and you can even add in whatever custom\nfunctionality you need for your applications here. E.g. create loggers that also push logs\nto some external providers by giving a custom implementation of this trait.</li>\n</ul>\n<p dir=\"auto\">If you are unsure how to create a new <code>LoggerFactory[F]</code> instance, then you can look at the <code>log4cats-slf4j</code>,\nor <code>log4cats-noop</code> modules for concrete implementations.</p>\n<p dir=\"auto\">The quickest fix might be to import needed implicits:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// assumes dependency on log4cats-slf4j module\nimport org.typelevel.log4cats._\nimport org.typelevel.log4cats.slf4j._\n\nval logger: SelfAwareStructuredLogger[IO] = LoggerFactory[IO].getLogger\n\n// or\ndef anyFSyncLogger[F[_]: Sync]: SelfAwareStructuredLogger[F] = Slf4jFactory[F].getLogger\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> assumes dependency on log4cats-slf4j module</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">slf4j</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SelfAwareStructuredLogger</span>[<span class=\"pl-en\">IO</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">LoggerFactory</span>[<span class=\"pl-en\">IO</span>].getLogger\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">anyFSyncLogger</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Sync</span>]<span class=\"pl-k\">:</span> <span class=\"pl-en\">SelfAwareStructuredLogger</span>[<span class=\"pl-en\">F</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Slf4jFactory</span>[<span class=\"pl-en\">F</span>].getLogger</pre></div>\n<p dir=\"auto\">Alternatively, a mutually exclusive solution is to explicitly create your\n<code>LoggerFactory[F]</code> instance and pass them around implicitly:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.effect.IO\nimport cats.Monad\nimport cats.syntax.all._\nimport org.typelevel.log4cats._\nimport org.typelevel.log4cats.slf4j.Slf4jFactory\n\n// create our LoggerFactory\nimplicit val logging: LoggerFactory[IO] = Slf4jFactory[IO]\n\n// we summon LoggerFactory instance, and create logger\nval logger: SelfAwareStructuredLogger[IO] = LoggerFactory[IO].getLogger\nlogger.info(&quot;logging in IO!&quot;): IO[Unit]\n\n// basic example of a service using LoggerFactory\nclass LoggerUsingService[F[_]: LoggerFactory: Monad] {\n  val logger = LoggerFactory[F].getLogger\n  def use(args: String): F[Unit] =\n    for {\n      _ &lt;- logger.info(&quot;yay! effect polymorphic code&quot;)\n      _ &lt;- logger.debug(s&quot;and $args&quot;)\n    } yield ()\n}\nnew LoggerUsingService[IO].use(&quot;foo&quot;)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.<span class=\"pl-en\">IO</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">Monad</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">all</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">log4cats</span>.<span class=\"pl-en\">slf4j</span>.<span class=\"pl-en\">Slf4jFactory</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> create our LoggerFactory</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">logging</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">LoggerFactory</span>[<span class=\"pl-en\">IO</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Slf4jFactory</span>[<span class=\"pl-en\">IO</span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> we summon LoggerFactory instance, and create logger</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">SelfAwareStructuredLogger</span>[<span class=\"pl-en\">IO</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">LoggerFactory</span>[<span class=\"pl-en\">IO</span>].getLogger\nlogger.info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>logging in IO!<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">IO</span>[<span class=\"pl-en\">Unit</span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> basic example of a service using LoggerFactory</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">LoggerUsingService</span>[<span class=\"pl-en\">F</span>[_]<span class=\"pl-k\">:</span> <span class=\"pl-en\">LoggerFactory</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Monad</span>] {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">LoggerFactory</span>[<span class=\"pl-en\">F</span>].getLogger\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">use</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">String</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">F</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span>\n    <span class=\"pl-k\">for</span> {\n      _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> logger.info(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yay! effect polymorphic code<span class=\"pl-pds\">\"</span></span>)\n      _ <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> logger.debug(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">and </span>$args<span class=\"pl-s\">\"</span>)\n    } <span class=\"pl-k\">yield</span> ()\n}\n<span class=\"pl-k\">new</span> <span class=\"pl-en\">LoggerUsingService</span>[<span class=\"pl-en\">IO</span>].use(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-cve-2021-44228-log4shell\" class=\"anchor\" aria-hidden=\"true\" href=\"#cve-2021-44228-log4shell\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>CVE-2021-44228 (\"log4shell\")</h2>\n<p dir=\"auto\">log4cats is not directly susceptible to CVS-2021-44228.  The\nlog4cats-slf4j implementation delegates all logging operations to\n<a href=\"https://www.slf4j.org/\" rel=\"nofollow\">slf4j</a>.  if you use log4cats-slf4j, your configured slf4j\nprovider may put you at risk.  See <a href=\"https://www.slf4j.org/log4shell.html\" rel=\"nofollow\">slf4j's comments on\nCVE-2021-44228</a> for more.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "ChristopherDavenport",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10272700?v=4",
        "url" : "https://github.com/ChristopherDavenport",
        "contributions" : 386
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 355
      },
      {
        "login" : "rossabaker",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142698?v=4",
        "url" : "https://github.com/rossabaker",
        "contributions" : 136
      },
      {
        "login" : "danicheg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19841757?v=4",
        "url" : "https://github.com/danicheg",
        "contributions" : 111
      },
      {
        "login" : "lorandszakacs",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/843135?v=4",
        "url" : "https://github.com/lorandszakacs",
        "contributions" : 100
      },
      {
        "login" : "dj707chen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/80285637?v=4",
        "url" : "https://github.com/dj707chen",
        "contributions" : 37
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://github.com/larsrh",
        "contributions" : 31
      },
      {
        "login" : "mergify[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/10562?v=4",
        "url" : "https://github.com/apps/mergify",
        "contributions" : 30
      },
      {
        "login" : "hamnis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/75431?v=4",
        "url" : "https://github.com/hamnis",
        "contributions" : 15
      },
      {
        "login" : "kubukoz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/894884?v=4",
        "url" : "https://github.com/kubukoz",
        "contributions" : 7
      },
      {
        "login" : "alexcardell",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/29524087?v=4",
        "url" : "https://github.com/alexcardell",
        "contributions" : 5
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://github.com/armanbilge",
        "contributions" : 4
      },
      {
        "login" : "ivan-klass",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2673108?v=4",
        "url" : "https://github.com/ivan-klass",
        "contributions" : 3
      },
      {
        "login" : "VlachJosef",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5246747?v=4",
        "url" : "https://github.com/VlachJosef",
        "contributions" : 3
      },
      {
        "login" : "tbrown1979",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3231194?v=4",
        "url" : "https://github.com/tbrown1979",
        "contributions" : 2
      },
      {
        "login" : "travisbrown",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/316049?v=4",
        "url" : "https://github.com/travisbrown",
        "contributions" : 2
      },
      {
        "login" : "lavrov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2944597?v=4",
        "url" : "https://github.com/lavrov",
        "contributions" : 2
      },
      {
        "login" : "bplommer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8990749?v=4",
        "url" : "https://github.com/bplommer",
        "contributions" : 1
      },
      {
        "login" : "bpholt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1455476?v=4",
        "url" : "https://github.com/bpholt",
        "contributions" : 1
      },
      {
        "login" : "cquiroz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3615303?v=4",
        "url" : "https://github.com/cquiroz",
        "contributions" : 1
      },
      {
        "login" : "nigredo-tori",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5962285?v=4",
        "url" : "https://github.com/nigredo-tori",
        "contributions" : 1
      },
      {
        "login" : "Daenyth",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/14644?v=4",
        "url" : "https://github.com/Daenyth",
        "contributions" : 1
      },
      {
        "login" : "jkachmar",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8461423?v=4",
        "url" : "https://github.com/jkachmar",
        "contributions" : 1
      },
      {
        "login" : "jopecko",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/49766?v=4",
        "url" : "https://github.com/jopecko",
        "contributions" : 1
      },
      {
        "login" : "keirlawson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/49213?v=4",
        "url" : "https://github.com/keirlawson",
        "contributions" : 1
      },
      {
        "login" : "martijnhoekstra",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/882449?v=4",
        "url" : "https://github.com/martijnhoekstra",
        "contributions" : 1
      },
      {
        "login" : "ollyw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/632442?v=4",
        "url" : "https://github.com/ollyw",
        "contributions" : 1
      },
      {
        "login" : "Qi77Qi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/32771737?v=4",
        "url" : "https://github.com/Qi77Qi",
        "contributions" : 1
      },
      {
        "login" : "rpiaggio",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1895643?v=4",
        "url" : "https://github.com/rpiaggio",
        "contributions" : 1
      },
      {
        "login" : "tdbgamer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3655689?v=4",
        "url" : "https://github.com/tdbgamer",
        "contributions" : 1
      },
      {
        "login" : "weipingc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3513061?v=4",
        "url" : "https://github.com/weipingc",
        "contributions" : 1
      },
      {
        "login" : "catostrophe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/40268503?v=4",
        "url" : "https://github.com/catostrophe",
        "contributions" : 1
      }
    ],
    "commits" : 1244,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 525,
        "title" : "Proposal for `log4cats-sourcecode` module to provide information about the call site",
        "url" : "https://github.com/typelevel/log4cats/issues/525"
      },
      {
        "number" : 492,
        "title" : "Usability issue with `Sync` constraint requirement.",
        "url" : "https://github.com/typelevel/log4cats/issues/492"
      },
      {
        "number" : 461,
        "title" : "FiberLocal / IOLocal logger wrapper",
        "url" : "https://github.com/typelevel/log4cats/issues/461"
      },
      {
        "number" : 440,
        "title" : "Blocking Slf4j Logger Backer",
        "url" : "https://github.com/typelevel/log4cats/issues/440"
      },
      {
        "number" : 439,
        "title" : "Improvement proposal: \"LoggerForType\", use phantom types to disambiguate loggers",
        "url" : "https://github.com/typelevel/log4cats/issues/439"
      },
      {
        "number" : 397,
        "title" : "Class in log output shown as the class where log was instantiated",
        "url" : "https://github.com/typelevel/log4cats/issues/397"
      },
      {
        "number" : 272,
        "title" : "How to raise test coverage on parameters passed to NoOpLogger ",
        "url" : "https://github.com/typelevel/log4cats/issues/272"
      },
      {
        "number" : 238,
        "title" : "Way to change logger name",
        "url" : "https://github.com/typelevel/log4cats/issues/238"
      },
      {
        "number" : 224,
        "title" : "Support LoggerFactory",
        "url" : "https://github.com/typelevel/log4cats/issues/224"
      },
      {
        "number" : 193,
        "title" : "Better documentation",
        "url" : "https://github.com/typelevel/log4cats/issues/193"
      },
      {
        "number" : 180,
        "title" : "Changelog is missing 0.3.0 info",
        "url" : "https://github.com/typelevel/log4cats/issues/180"
      },
      {
        "number" : 151,
        "title" : "A working example in README.md",
        "url" : "https://github.com/typelevel/log4cats/issues/151"
      },
      {
        "number" : 116,
        "title" : "Add String interpolators",
        "url" : "https://github.com/typelevel/log4cats/issues/116"
      },
      {
        "number" : 80,
        "title" : "Additional Data Type Instances",
        "url" : "https://github.com/typelevel/log4cats/issues/80"
      },
      {
        "number" : 38,
        "title" : "ScalaJS Implementation for our slf4j-api wrapper.",
        "url" : "https://github.com/typelevel/log4cats/issues/38"
      }
    ],
    "scalaPercentage" : 100,
    "license" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "logging",
    "beginnerIssuesLabel" : null
  }
}