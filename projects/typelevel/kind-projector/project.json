{
  "organization" : "typelevel",
  "repository" : "kind-projector",
  "creationDate" : 1430945788529,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660800676367
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Compiler plugin for making type lambdas (type projections) easier to write",
    "logo" : "https://avatars.githubusercontent.com/u/3731824?v=4",
    "stars" : 864,
    "forks" : 69,
    "watchers" : 30,
    "issues" : 9,
    "creationDate" : 1330062956000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h2 dir=\"auto\"><a id=\"user-content-kind-projector\" class=\"anchor\" aria-hidden=\"true\" href=\"#kind-projector\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Kind Projector</h2>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/typelevel/kind-projector/workflows/Continuous%20Integration/badge.svg\"><img src=\"https://github.com/typelevel/kind-projector/workflows/Continuous%20Integration/badge.svg\" alt=\"Continuous Integration\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/org.typelevel/kind-projector_2.13.6\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/d15a7f3415f55e827c7a935d05c749312c4c80c38364bcb3f822fef7b8935f79/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f6f72672e747970656c6576656c2f6b696e642d70726f6a6563746f725f322e31332e362f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/org.typelevel/kind-projector_2.13.6/badge.svg\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-note-on-maintenance\" class=\"anchor\" aria-hidden=\"true\" href=\"#note-on-maintenance\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Note on maintenance</h3>\n<p dir=\"auto\">This project is only maintained for Scala 2.x. No new features are developed, but bug fix releases will still be made available. Dotty/Scala 3 has <a href=\"https://docs.scala-lang.org/scala3/reference/new-types/type-lambdas-spec.html\" rel=\"nofollow\">built-in type lambda syntax</a> and <a href=\"https://docs.scala-lang.org/scala3/reference/changed-features/wildcards.html\" rel=\"nofollow\">kind-projector compatible syntax</a>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-dedication\" class=\"anchor\" aria-hidden=\"true\" href=\"#dedication\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dedication</h3>\n<blockquote>\n<p dir=\"auto\">\"But I don't want to go among mad people,\" Alice remarked.</p>\n<p dir=\"auto\">\"Oh, you can't help that,\" said the Cat: \"we're all mad here. I'm mad.\nYou're mad.\"</p>\n<p dir=\"auto\">\"How do you know I'm mad?\" said Alice.</p>\n<p dir=\"auto\">\"You must be,\" said the Cat, \"or you wouldn't have come here.\"</p>\n<p dir=\"auto\">--Lewis Carroll, \"Alice's Adventures in Wonderland\"</p>\n</blockquote>\n<h3 dir=\"auto\"><a id=\"user-content-overview\" class=\"anchor\" aria-hidden=\"true\" href=\"#overview\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overview</h3>\n<p dir=\"auto\">One piece of Scala syntactic noise that often trips people up is the\nuse of type projections to implement anonymous, partially-applied\ntypes. For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// partially-applied type named &quot;IntOrA&quot;\ntype IntOrA[A] = Either[Int, A]\n\n// type projection implementing the same type anonymously (without a name).\n({type L[A] = Either[Int, A]})#L\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> partially-applied type named \"IntOrA\"</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">IntOrA</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, <span class=\"pl-en\">A</span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> type projection implementing the same type anonymously (without a name).</span>\n({<span class=\"pl-k\">type</span> <span class=\"pl-en\">L</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, <span class=\"pl-en\">A</span>]})#<span class=\"pl-en\">L</span></pre></div>\n<p dir=\"auto\">Many people have wished for a better way to do this.</p>\n<p dir=\"auto\">The goal of this plugin is to add a syntax for type lambdas. We do\nthis by rewriting syntactically valid programs into new programs,\nletting us seem to add new keywords to the language. This is achieved\nthrough a compiler plugin performing an (un-typed) tree\ntransformation.</p>\n<p dir=\"auto\">One problem with this approach is that it changes the meaning of\n(potentially) valid programs. In practice this means that you must\navoid defining the following identifiers:</p>\n<ol dir=\"auto\">\n<li><code>Lambda</code> and <code>λ</code></li>\n<li><code>*</code>, <code>+*</code>, and <code>-*</code></li>\n<li><code>Λ$</code></li>\n<li><code>α$</code>, <code>β$</code>, ...</li>\n</ol>\n<p dir=\"auto\">If you find yourself using lots of type lambdas, and you don't mind\nreserving those identifiers, then this compiler plugin is for you!</p>\n<h3 dir=\"auto\"><a id=\"user-content-using-the-plugin\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-plugin\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using the plugin</h3>\n<p dir=\"auto\">Kind-projector supports Scala 2.11, 2.12, and 2.13.</p>\n<p dir=\"auto\"><em>Note</em>: as of version 0.11.0 the plugin is published against the full Scala version\n(see #15)</p>\n<p dir=\"auto\">To use this plugin in your own projects, add the following lines to\nyour <code>build.sbt</code> file:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"addCompilerPlugin(&quot;org.typelevel&quot; % &quot;kind-projector&quot; % &quot;0.13.2&quot; cross CrossVersion.full)\"><pre>addCompilerPlugin(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kind-projector<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.13.2<span class=\"pl-pds\">\"</span></span> cross <span class=\"pl-en\">CrossVersion</span>.full)</pre></div>\n<p dir=\"auto\"><em>Note</em>: for multi-project builds - put <code>addCompilerPlugin</code> clause into settings section for each sub-project.</p>\n<p dir=\"auto\">For maven projects, add the plugin to the configuration of the\nmaven-scala-plugin (remember to use <code>_2.11.12</code>, <code>_2.12.15</code>, <code>_2.13.6</code> etc as appropriate):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;plugin&gt;\n  &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;\n  &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;\n  ...\n  &lt;configuration&gt;\n    &lt;compilerPlugins&gt;\n      &lt;compilerPlugin&gt;\n        &lt;groupId&gt;org.typelevel&lt;/groupId&gt;\n        &lt;artifactId&gt;kind-projector_2.13.6&lt;/artifactId&gt;\n        &lt;version&gt;0.13.2&lt;/version&gt;\n      &lt;/compilerPlugin&gt;\n    &lt;/compilerPlugins&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\"><pre class=\"notranslate\"><code>&lt;plugin&gt;\n  &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;\n  &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;\n  ...\n  &lt;configuration&gt;\n    &lt;compilerPlugins&gt;\n      &lt;compilerPlugin&gt;\n        &lt;groupId&gt;org.typelevel&lt;/groupId&gt;\n        &lt;artifactId&gt;kind-projector_2.13.6&lt;/artifactId&gt;\n        &lt;version&gt;0.13.2&lt;/version&gt;\n      &lt;/compilerPlugin&gt;\n    &lt;/compilerPlugins&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre></div>\n<p dir=\"auto\">For mill projects, add the plugin to the <code>scalacPluginIvyDep</code>\nNote the triple colons (<code>:::</code>) to ensure it uses the full scala version.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"override def scalacPluginIvyDeps = Agg(\n  ivy&quot;org.typelevel:::kind-projector:0.13.2&quot;\n)\"><pre class=\"notranslate\"><code>override def scalacPluginIvyDeps = Agg(\n  ivy\"org.typelevel:::kind-projector:0.13.2\"\n)\n</code></pre></div>\n<p dir=\"auto\">That's it!</p>\n<p dir=\"auto\">Versions of the plugin earlier than 0.10.0 were released under a\ndifferent organization (<code>org.spire-math</code>).</p>\n<h3 dir=\"auto\"><a id=\"user-content-inline-syntax\" class=\"anchor\" aria-hidden=\"true\" href=\"#inline-syntax\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Inline Syntax</h3>\n<p dir=\"auto\">The simplest syntax to use is the inline syntax. This syntax resembles\nScala's use of underscores to define anonymous functions like <code>_ + _</code>.</p>\n<p dir=\"auto\">Since underscore is used for existential types in Scala (and it is\nprobably too late to change this syntax), we use <code>*</code> for the same\npurpose. We also use <code>+*</code> and <code>-*</code> to handle covariant and\ncontravariant types parameters.</p>\n<p dir=\"auto\">Here are a few examples:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Tuple2[*, Double]        // equivalent to: type R[A] = Tuple2[A, Double]\nEither[Int, +*]          // equivalent to: type R[+A] = Either[Int, A]\nFunction2[-*, Long, +*]  // equivalent to: type R[-A, +B] = Function2[A, Long, B]\nEitherT[*[_], Int, *]    // equivalent to: type R[F[_], B] = EitherT[F, Int, B]\"><pre><span class=\"pl-en\">Tuple2</span>[<span class=\"pl-k\">*</span>, <span class=\"pl-en\">Double</span>]        <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A] = Tuple2[A, Double]</span>\n<span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, <span class=\"pl-k\">+*</span>]          <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[+A] = Either[Int, A]</span>\n<span class=\"pl-en\">Function2</span>[<span class=\"pl-k\">-*</span>, <span class=\"pl-en\">Long</span>, <span class=\"pl-k\">+*</span>]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[-A, +B] = Function2[A, Long, B]</span>\n<span class=\"pl-en\">EitherT</span>[<span class=\"pl-k\">*</span>[_], <span class=\"pl-en\">Int</span>, <span class=\"pl-k\">*</span>]    <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[F[_], B] = EitherT[F, Int, B]</span></pre></div>\n<p dir=\"auto\">As you can see, this syntax works when each type parameter in the type\nlambda is only used in the body once, and in the same order. For more\ncomplex type lambda expressions, you will need to use the function\nsyntax.</p>\n<h4 dir=\"auto\"><a id=\"user-content-inline-underscore-syntax\" class=\"anchor\" aria-hidden=\"true\" href=\"#inline-underscore-syntax\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Inline Underscore Syntax</h4>\n<p dir=\"auto\">Since version <code>0.13.0</code> kind-projector adds an option to use underscore symbol <code>_</code> instead of <code>*</code> to define anonymous type lambdas.\nThe syntax roughly follows the <a href=\"https://docs.scala-lang.org/scala3/reference/changed-features/wildcards.html#migration-strategy\" rel=\"nofollow\">proposed new syntax for wildcards and placeholders</a> for Scala 3.2+ and is designed to allow cross-compilation of libraries between Scala 2 and Scala 3 while using the new Scala 3 syntax for both versions.</p>\n<p dir=\"auto\">To enable this mode, add <code>-P:kind-projector:underscore-placeholders</code> to your scalac command-line. In sbt you may do this as follows:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ThisBuild / scalacOptions += &quot;-P:kind-projector:underscore-placeholders&quot;\"><pre><span class=\"pl-en\">ThisBuild</span> <span class=\"pl-k\">/</span> scalacOptions <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-P:kind-projector:underscore-placeholders<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">This mode is designed to be used with scalac versions <code>2.12.14</code>+ and <code>2.13.6</code>+, these versions add an the ability to use <code>?</code> as the existential type wildcard (<a href=\"https://github.com/scala/scala/pull/9560\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/scala/scala/pull/9560/hovercard\">scala/scala#9560</a>), allowing to repurpose the underscore without losing the ability to write existential types. It is not advised that you use this mode with older versions of scalac or without <code>-Xsource:3</code> flag, since you will lose the underscore syntax entirely.</p>\n<p dir=\"auto\">Here are a few examples:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Tuple2[_, Double]        // equivalent to: type R[A] = Tuple2[A, Double]\nEither[Int, +_]          // equivalent to: type R[+A] = Either[Int, A]\nFunction2[-_, Long, +_]  // equivalent to: type R[-A, +B] = Function2[A, Long, B]\nEitherT[_[_], Int, _]    // equivalent to: type R[F[_], B] = EitherT[F, Int, B]\"><pre><span class=\"pl-en\">Tuple2</span>[_, <span class=\"pl-en\">Double</span>]        <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A] = Tuple2[A, Double]</span>\n<span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, <span class=\"pl-k\">+</span>_]          <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[+A] = Either[Int, A]</span>\n<span class=\"pl-en\">Function2</span>[<span class=\"pl-k\">-</span>_, <span class=\"pl-en\">Long</span>, <span class=\"pl-k\">+</span>_]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[-A, +B] = Function2[A, Long, B]</span>\n<span class=\"pl-en\">EitherT</span>[_[_], <span class=\"pl-en\">Int</span>, _]    <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[F[_], B] = EitherT[F, Int, B]</span></pre></div>\n<p dir=\"auto\">Examples with <code>-Xsource:3</code>'s <code>?</code>-wildcard:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Tuple2[_, ?]        // equivalent to: type R[A] = Tuple2[A, x] forSome { type x }\nEither[?, +_]          // equivalent to: type R[+A] = Either[x, A] forSome { type x }\nFunction2[-_, ?, +_]  // equivalent to: type R[-A, +B] = Function2[A, x, B] forSome { type x }\nEitherT[_[_], ?, _]    // equivalent to: type R[F[_], B] = EitherT[F, x, B] forSome { type x }\"><pre><span class=\"pl-en\">Tuple2</span>[_, <span class=\"pl-k\">?</span>]        <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A] = Tuple2[A, x] forSome { type x }</span>\n<span class=\"pl-en\">Either</span>[<span class=\"pl-k\">?</span>, <span class=\"pl-k\">+</span>_]          <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[+A] = Either[x, A] forSome { type x }</span>\n<span class=\"pl-en\">Function2</span>[<span class=\"pl-k\">-</span>_, <span class=\"pl-k\">?</span>, <span class=\"pl-k\">+</span>_]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[-A, +B] = Function2[A, x, B] forSome { type x }</span>\n<span class=\"pl-en\">EitherT</span>[_[_], <span class=\"pl-k\">?</span>, _]    <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[F[_], B] = EitherT[F, x, B] forSome { type x }</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-function-syntax\" class=\"anchor\" aria-hidden=\"true\" href=\"#function-syntax\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Function Syntax</h3>\n<p dir=\"auto\">The more powerful syntax to use is the function syntax. This syntax\nresembles anonymous functions like <code>x =&gt; x + 1</code> or <code>(x, y) =&gt; x + y</code>.\nIn the case of type lambdas, we wrap the entire function type in a\n<code>Lambda</code> or <code>λ</code> type. Both names are equivalent: the former may be\neasier to type or say, and the latter is less verbose.</p>\n<p dir=\"auto\">Here are some examples:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Lambda[A =&gt; (A, A)]              // equivalent to: type R[A] = (A, A)\nLambda[(A, B) =&gt; Either[B, A]]   // equivalent to: type R[A, B] = Either[B, A]\nLambda[A =&gt; Either[A, List[A]]]  // equivalent to: type R[A] = Either[A, List[A]]\"><pre><span class=\"pl-en\">Lambda</span>[<span class=\"pl-en\">A</span> <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-en\">A</span>, <span class=\"pl-en\">A</span>)]              <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A] = (A, A)</span>\n<span class=\"pl-en\">Lambda</span>[(<span class=\"pl-en\">A</span>, <span class=\"pl-en\">B</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">B</span>, <span class=\"pl-en\">A</span>]]   <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A, B] = Either[B, A]</span>\n<span class=\"pl-en\">Lambda</span>[<span class=\"pl-en\">A</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>]]]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A] = Either[A, List[A]]</span></pre></div>\n<p dir=\"auto\">Since types like <code>(+A, +B) =&gt; Either[A, B]</code> are not syntactically\nvalid, we provide two alternate methods to specify variance when using\nfunction syntax:</p>\n<ul dir=\"auto\">\n<li>Plus/minus: <code>(+[A], +[B]) =&gt; Either[A, B]</code></li>\n<li>Backticks: <code>(`+A`, `+B`) =&gt; Either[A, B]</code></li>\n</ul>\n<p dir=\"auto\">(Note that unlike names like <code>*</code>, <code>+</code> and <code>-</code> do not have to be\nreserved. They will only be interpreted this way when used in\nparameters to <code>Lambda[...]</code> types, which should never conflict with\nother usage.)</p>\n<p dir=\"auto\">Here are some examples with variance:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"λ[`-A` =&gt; Function1[A, Double]]          // equivalent to: type R[-A] = Function1[A, Double]\nλ[(-[A], +[B]) =&gt; Function2[A, Int, B]]  // equivalent to: type R[-A, +B] = Function2[A, Int, B]\nλ[`+A` =&gt; Either[List[A], List[A]]]      // equivalent to: type R[+A] = Either[List[A], List[A]]\"><pre>λ[`-A` <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Function1</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">Double</span>]]          <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[-A] = Function1[A, Double]</span>\nλ[(<span class=\"pl-k\">-</span>[<span class=\"pl-en\">A</span>], <span class=\"pl-k\">+</span>[<span class=\"pl-en\">B</span>]) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Function2</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">Int</span>, <span class=\"pl-en\">B</span>]]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[-A, +B] = Function2[A, Int, B]</span>\nλ[`+A` <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>], <span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>]]]      <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[+A] = Either[List[A], List[A]]</span></pre></div>\n<p dir=\"auto\">The function syntax also supports higher-kinded types as type\nparameters. The syntax overloads the existential syntax in this case\n(since the type parameters to a type lambda should never contain an\nexistential).</p>\n<p dir=\"auto\">Here are a few examples with higher-kinded types:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Lambda[A[_] =&gt; List[A[Int]]]  // equivalent to: type R[A[_]] = List[A[Int]]\nLambda[(A, B[_]) =&gt; B[A]]     // equivalent to: type R[A, B[_]] = B[A]\"><pre><span class=\"pl-en\">Lambda</span>[<span class=\"pl-en\">A</span>[_] <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>[<span class=\"pl-en\">Int</span>]]]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A[_]] = List[A[Int]]</span>\n<span class=\"pl-en\">Lambda</span>[(<span class=\"pl-en\">A</span>, <span class=\"pl-en\">B</span>[_]) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">B</span>[<span class=\"pl-en\">A</span>]]     <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[A, B[_]] = B[A]</span></pre></div>\n<p dir=\"auto\">Finally, variance annotations on higher-kinded sub-parameters are\nsupported using backticks:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Lambda[`x[+_]` =&gt; Q[x, List] // equivalent to: type R[x[+_]] = Q[x, List]\nLambda[`f[-_, +_]` =&gt; B[f]   // equivalent to: type R[f[-_, +_]] = B[f]\"><pre><span class=\"pl-en\">Lambda</span>[`x[+_]` <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Q</span>[x, <span class=\"pl-en\">List</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[x[+_]] = Q[x, List]</span>\n<span class=\"pl-en\">Lambda</span>[`f[-_, +_]` <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">B</span>[f]   <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: type R[f[-_, +_]] = B[f]</span></pre></div>\n<p dir=\"auto\">The function syntax with backtick type parameters is the most\nexpressive syntax kind-projector supports. The other syntaxes are\neasier to read at the cost of being unable to express certain\n(hopefully rare) type lambdas.</p>\n<h3 dir=\"auto\"><a id=\"user-content-type-lambda-gotchas\" class=\"anchor\" aria-hidden=\"true\" href=\"#type-lambda-gotchas\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Type lambda gotchas</h3>\n<p dir=\"auto\">The inline syntax is the tersest and is often preferable when\npossible. However, there are some type lambdas which it cannot\nexpress.</p>\n<p dir=\"auto\">For example, imagine that we have <code>trait Functor[F[_]]</code>.</p>\n<p dir=\"auto\">You might want to write <code>Functor[Future[List[*]]]</code>, expecting to get\nsomething like:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type X[a] = Future[List[a]]\nFunctor[X]\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">X</span>[a] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Future</span>[<span class=\"pl-en\">List</span>[a]]\n<span class=\"pl-en\">Functor</span>[<span class=\"pl-en\">X</span>]</pre></div>\n<p dir=\"auto\">However, <code>*</code> always binds at the tightest level, meaning that\n<code>List[*]</code> is interpreted as <code>type X[a] = List[a]</code>, and that\n<code>Future[List[*]]</code> is invalid.</p>\n<p dir=\"auto\">In these cases you should prefer the lambda syntax, which would be\nwritten as:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Functor[Lambda[a =&gt; Future[List[a]]]]\"><pre><span class=\"pl-en\">Functor</span>[<span class=\"pl-en\">Lambda</span>[a <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Future</span>[<span class=\"pl-en\">List</span>[a]]]]</pre></div>\n<p dir=\"auto\">Other types which cannot be written correctly using inline syntax are:</p>\n<ul dir=\"auto\">\n<li><code>Lambda[a =&gt; (a, a)]</code> (repeated use of <code>a</code>).</li>\n<li><code>Lambda[(a, b) =&gt; Either[b, a]]</code> (reverse order of type params).</li>\n<li><code>Lambda[(a, b) =&gt; Function1[a, Option[b]]]</code> (similar to example).</li>\n</ul>\n<p dir=\"auto\">(And of course, you can use <code>λ[...]</code> instead of <code>Lambda[...]</code> in any\nof these expressions.)</p>\n<h3 dir=\"auto\"><a id=\"user-content-under-the-hood\" class=\"anchor\" aria-hidden=\"true\" href=\"#under-the-hood\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Under The Hood</h3>\n<p dir=\"auto\">This section shows the exact code produced for a few type lambda\nexpressions.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Either[Int, *]\n({type Λ$[β$0$] = Either[Int, β$0$]})#Λ$\n\nFunction2[-*, String, +*]\n({type Λ$[-α$0$, +γ$0$] = Function2[α$0$, String, γ$0$]})#Λ$\n\nLambda[A =&gt; (A, A)]\n({type Λ$[A] = (A, A)})#Λ$\n\nLambda[(`+A`, B) =&gt; Either[A, Option[B]]]\n({type Λ$[+A, B] = Either[A, Option[B]]})#Λ$\n\nLambda[(A, B[_]) =&gt; B[A]]\n({type Λ$[A, B[_]] = B[A]})#Λ$\"><pre><span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, <span class=\"pl-k\">*</span>]\n({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[β$<span class=\"pl-c1\">0</span>$] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, β$<span class=\"pl-c1\">0</span>$]})#Λ$\n\n<span class=\"pl-en\">Function2</span>[<span class=\"pl-k\">-*</span>, <span class=\"pl-en\">String</span>, <span class=\"pl-k\">+*</span>]\n({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[<span class=\"pl-k\">-</span>α$<span class=\"pl-c1\">0</span>$, <span class=\"pl-k\">+</span>γ$<span class=\"pl-c1\">0</span>$] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Function2</span>[α$<span class=\"pl-c1\">0</span>$, <span class=\"pl-en\">String</span>, γ$<span class=\"pl-c1\">0</span>$]})#Λ$\n\n<span class=\"pl-en\">Lambda</span>[<span class=\"pl-en\">A</span> <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-en\">A</span>, <span class=\"pl-en\">A</span>)]\n({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> (<span class=\"pl-en\">A</span>, <span class=\"pl-en\">A</span>)})#Λ$\n\n<span class=\"pl-en\">Lambda</span>[(`+A`, <span class=\"pl-en\">B</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">B</span>]]]\n({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[<span class=\"pl-k\">+</span><span class=\"pl-en\">A</span>, <span class=\"pl-en\">B</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">B</span>]]})#Λ$\n\n<span class=\"pl-en\">Lambda</span>[(<span class=\"pl-en\">A</span>, <span class=\"pl-en\">B</span>[_]) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">B</span>[<span class=\"pl-en\">A</span>]]\n({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">B</span>[_]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">B</span>[<span class=\"pl-en\">A</span>]})#Λ$</pre></div>\n<p dir=\"auto\">As you can see, names like <code>Λ$</code> and <code>α$</code> are forbidden because they\nmight conflict with names the plugin generates.</p>\n<p dir=\"auto\">If you dislike these unicode names, pass <code>-Dkp:genAsciiNames=true</code> to\nscalac to use munged ASCII names. This will use <code>L_kp</code> in place of\n<code>Λ$</code>, <code>X_kp0$</code> in place of <code>α$</code>, and so on.</p>\n<h3 dir=\"auto\"><a id=\"user-content-polymorphic-lambda-values\" class=\"anchor\" aria-hidden=\"true\" href=\"#polymorphic-lambda-values\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Polymorphic lambda values</h3>\n<p dir=\"auto\">Scala does not have built-in syntax or types for anonymous function\nvalues which are polymorphic (i.e. which can be parameterized with\ntypes). To illustrate that consider both of these methods:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def firstInt(xs: List[Int]): Option[Int] = xs.headOption\ndef firstGeneric[A](xs: List[A]): Option[A] = xs.headOption\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">firstInt</span>(<span class=\"pl-v\">xs</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span> xs.headOption\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">firstGeneric</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">xs</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> xs.headOption</pre></div>\n<p dir=\"auto\">Having implemented these methods, we can see that the second just\ngeneralizes the first to work with any type: the function bodies are\nidentical. We'd like to be able to rewrite each of these methods as a\nfunction value, but we can only represent the first method\n(<code>firstInt</code>) this way:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val firstInt0: List[Int] =&gt; Option[Int] = _.headOption\nval firstGeneric0 &lt;what to put here???&gt;\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">firstInt0</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span> _.headOption\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">firstGeneric0</span> &lt;<span class=\"pl-ent\">what</span> to put here???&gt;</pre></div>\n<p dir=\"auto\">(One reason to want to do this rewrite is that we might have a method\nlike <code>.map</code> which we'd like to pass an anonymous function value.)</p>\n<p dir=\"auto\">Several libraries define their own polymorphic function types, such as\nthe following polymorphic version of <code>Function1</code> (which we can use to\nimplement <code>firstGeneric0</code>):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait PolyFunction1[-F[_], +G[_]] {\n  def apply[A](fa: F[A]): G[A]\n}\n\nval firstGeneric0: PolyFunction1[List, Option] =\n  new PolyFunction1[List, Option] {\n    def apply[A](xs: List[A]): Option[A] = xs.headOption\n  }\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">PolyFunction1</span>[<span class=\"pl-k\">-</span><span class=\"pl-en\">F</span>[_], <span class=\"pl-k\">+</span><span class=\"pl-en\">G</span>[_]] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">fa</span>: <span class=\"pl-en\">F</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">G</span>[<span class=\"pl-en\">A</span>]\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">firstGeneric0</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">PolyFunction1</span>[<span class=\"pl-en\">List</span>, <span class=\"pl-en\">Option</span>] <span class=\"pl-k\">=</span>\n  <span class=\"pl-k\">new</span> <span class=\"pl-en\">PolyFunction1</span>[<span class=\"pl-en\">List</span>, <span class=\"pl-en\">Option</span>] {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">xs</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> xs.headOption\n  }</pre></div>\n<p dir=\"auto\">It's nice that <code>PolyFunction1</code> enables us to express polymorphic\nfunction values, but at the level of syntax it's not clear that we've\nsaved much over defining a polymorphic method (i.e. <code>firstGeneric</code>).</p>\n<p dir=\"auto\">Since 0.9.0, Kind-projector provides a value-level rewrite to fix this\nissue and make polymorphic functions (and other types that share their\ngeneral shape) easier to work with:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val firstGeneric0 = λ[PolyFunction1[List, Option]](_.headOption)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">firstGeneric0</span> <span class=\"pl-k\">=</span> λ[<span class=\"pl-en\">PolyFunction1</span>[<span class=\"pl-en\">List</span>, <span class=\"pl-en\">Option</span>]](_.headOption)</pre></div>\n<p dir=\"auto\">Either <code>λ</code> or <code>Lambda</code> can be used (in a value position) to trigger\nthis rewrite. By default, the rewrite assumes that the \"target method\"\nto define is called <code>apply</code> (as in the previous example), but a\ndifferent method can be selected via an explicit call.</p>\n<p dir=\"auto\">In the following example we are using the polymorphic lambda syntax to\ndefine a <code>run</code> method on an instance of the <code>PF</code> trait:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait PF[-F[_], +G[_]] {\n  def run[A](fa: F[A]): G[A]\n}\n\nval f = Lambda[PF[List, Option]].run(_.headOption)\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">PF</span>[<span class=\"pl-k\">-</span><span class=\"pl-en\">F</span>[_], <span class=\"pl-k\">+</span><span class=\"pl-en\">G</span>[_]] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">fa</span>: <span class=\"pl-en\">F</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">G</span>[<span class=\"pl-en\">A</span>]\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">f</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Lambda</span>[<span class=\"pl-en\">PF</span>[<span class=\"pl-en\">List</span>, <span class=\"pl-en\">Option</span>]].run(_.headOption)</pre></div>\n<p dir=\"auto\">It's possible to nest this syntax. Here's an example taken from\n<a href=\"http://www.slideshare.net/timperrett/enterprise-algebras-scala-world-2016/49\" rel=\"nofollow\">the wild</a>\nof using nested polymorphic lambdas to remove boilerplate:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// without polymorphic lambdas, as in the slide\ndef injectFC[F[_], G[_]](implicit I: Inject[F, G]) =\n  new (FreeC[F, *] ~&gt; FreeC[G, *]) {\n    def apply[A](fa: FreeC[F, A]): FreeC[G, A] =\n      fa.mapSuspension[Coyoneda[G, *]](\n        new (Coyoneda[F, *] ~&gt; Coyoneda[G, *]) {\n          def apply[B](fb: Coyoneda[F, B]): Coyoneda[G, B] = fb.trans(I)\n        }\n      )\n  }\n\n// with polymorphic lambdas\ndef injectFC[F[_], G[_]](implicit I: Inject[F, G]) =\n  λ[FreeC[F, *] ~&gt; FreeC[G, *]](\n    _.mapSuspension(λ[Coyoneda[F, *] ~&gt; Coyoneda[G, *]](_.trans(I)))\n  )\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> without polymorphic lambdas, as in the slide</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">injectFC</span>[<span class=\"pl-en\">F</span>[_], <span class=\"pl-en\">G</span>[_]](<span class=\"pl-k\">implicit</span> <span class=\"pl-en\">I</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Inject</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-en\">G</span>]) <span class=\"pl-k\">=</span>\n  <span class=\"pl-k\">new</span> (<span class=\"pl-en\">FreeC</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-k\">*</span>] <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">FreeC</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-k\">*</span>]) {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">fa</span>: <span class=\"pl-en\">FreeC</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">FreeC</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span>\n      fa.mapSuspension[<span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-k\">*</span>]](\n        <span class=\"pl-k\">new</span> (<span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-k\">*</span>] <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-k\">*</span>]) {\n          <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">B</span>](<span class=\"pl-v\">fb</span>: <span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-en\">B</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-en\">B</span>] <span class=\"pl-k\">=</span> fb.trans(<span class=\"pl-en\">I</span>)\n        }\n      )\n  }\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> with polymorphic lambdas</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">injectFC</span>[<span class=\"pl-en\">F</span>[_], <span class=\"pl-en\">G</span>[_]](<span class=\"pl-k\">implicit</span> <span class=\"pl-en\">I</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Inject</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-en\">G</span>]) <span class=\"pl-k\">=</span>\n  λ[<span class=\"pl-en\">FreeC</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-k\">*</span>] <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">FreeC</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-k\">*</span>]](\n    _.mapSuspension(λ[<span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-k\">*</span>] <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Coyoneda</span>[<span class=\"pl-en\">G</span>, <span class=\"pl-k\">*</span>]](_.trans(<span class=\"pl-en\">I</span>)))\n  )</pre></div>\n<p dir=\"auto\">Kind-projector's support for type lambdas operates at the <em>type level</em>\n(in type positions), whereas this feature operates at the <em>value\nlevel</em> (in value positions). To avoid reserving too many names the <code>λ</code>\nand <code>Lambda</code> names were overloaded to do both (mirroring the\nrelationship between types and their companion objects).</p>\n<p dir=\"auto\">Here are some examples of expressions, along with whether the lambda\nsymbol involved represents a type (traditional type lambda) or a value\n(polymorphic lambda):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// type lambda (type level)\nval functor: Functor[λ[a =&gt; Either[Int, a]]] = implicitly\n\n// polymorphic lambda (value level)\nval f = λ[Vector ~&gt; List](_.toList)\n\n// type lambda (type level)\ntrait CF2 extends Contravariant[λ[a =&gt; Function2[a, a, Double]]] {\n  ...\n}\n\n// polymorphic lambda (value level)\nxyz.translate(λ[F ~&gt; G](fx =&gt; fx.flatMap(g)))\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> type lambda (type level)</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">functor</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Functor</span>[λ[a <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Int</span>, a]]] <span class=\"pl-k\">=</span> implicitly\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> polymorphic lambda (value level)</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">f</span> <span class=\"pl-k\">=</span> λ[<span class=\"pl-en\">Vector</span> <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">List</span>](_.toList)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> type lambda (type level)</span>\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">CF2</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Contravariant</span>[λ[a <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Function2</span>[a, a, <span class=\"pl-en\">Double</span>]]] {\n  ...\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> polymorphic lambda (value level)</span>\nxyz.translate(λ[<span class=\"pl-en\">F</span> <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">G</span>](fx <span class=\"pl-k\">=&gt;</span> fx.flatMap(g)))</pre></div>\n<p dir=\"auto\">One pattern you might notice is that when <code>λ</code> occurs immediately\nwithin <code>[]</code> it is referring to a type lambda (since <code>[]</code> signals a\ntype application), whereas when it occurs after <code>=</code> or within <code>()</code> it\nusually refers to a polymorphic lambda, since those tokens usually\nsignal a value. (The <code>()</code> syntax for tuple and function types is an\nexception to this pattern.)</p>\n<p dir=\"auto\">The bottom line is that if you could replace a λ-expression with a\ntype constructor, it's a type lambda, and if you could replace it with\na value (e.g. <code>new Xyz[...] { ... }</code>) then it's a polymorphic lambda.</p>\n<h3 dir=\"auto\"><a id=\"user-content-polymorphic-lambdas-under-the-hood\" class=\"anchor\" aria-hidden=\"true\" href=\"#polymorphic-lambdas-under-the-hood\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Polymorphic lambdas under the hood</h3>\n<p dir=\"auto\">What follows are the gory details of the polymorphic lambda rewrite.</p>\n<p dir=\"auto\">Polymorphic lambdas are a syntactic transformation that occurs just\nafter parsing (before name resolution or typechecking). Your code will\nbe typechecked <em>after</em> the rewrite.</p>\n<p dir=\"auto\">Written in its most explicit form, a polymorphic lambda looks like\nthis:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"λ[Op[F, G]].someMethod(&lt;expr&gt;)\"><pre>λ[<span class=\"pl-en\">Op</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-en\">G</span>]].someMethod(&lt;<span class=\"pl-ent\">expr</span>&gt;)</pre></div>\n<p dir=\"auto\">and is rewritten into something like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"new Op[F, G] {\n  def someMethod[A](x: F[A]): G[A] = &lt;expr&gt;(x)\n}\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">Op</span>[<span class=\"pl-en\">F</span>, <span class=\"pl-en\">G</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">someMethod</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">x</span>: <span class=\"pl-en\">F</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">G</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> &lt;<span class=\"pl-ent\">expr</span>&gt;(x)\n}</pre></div>\n<p dir=\"auto\">(The names <code>A</code> and <code>x</code> are used for clarity –- in practice unique\nnames will be used for both.)</p>\n<p dir=\"auto\">This rewrite requires that the following are true:</p>\n<ul dir=\"auto\">\n<li><code>F</code> and <code>G</code> are unary type constructors (i.e. of shape <code>F[_]</code> and <code>G[_]</code>).</li>\n<li><code>&lt;expr&gt;</code> is an expression of type <code>Function1[_, _]</code>.</li>\n<li><code>Op</code> is parameterized on two unary type constructors.</li>\n<li><code>someMethod</code> is parametric (for any type <code>A</code> it takes <code>F[A]</code> and returns <code>G[A]</code>).</li>\n</ul>\n<p dir=\"auto\">For example, <code>Op</code> might be defined like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait Op[M[_], N[_]] {\n  def someMethod[A](x: M[A]): N[A]\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">Op</span>[<span class=\"pl-en\">M</span>[_], <span class=\"pl-en\">N</span>[_]] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">someMethod</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">x</span>: <span class=\"pl-en\">M</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">N</span>[<span class=\"pl-en\">A</span>]\n}</pre></div>\n<p dir=\"auto\">The entire λ-expression will be rewritten immediately after parsing\n(and before name resolution or typechecking). If any of these\nconstraints are not met, then a compiler error will occur during a\nlater phase (likely type-checking).</p>\n<p dir=\"auto\">Here are some polymorphic lambdas along with the corresponding code\nafter the rewrite:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val f = Lambda[NaturalTransformation[Stream, List]](_.toList)\nval f = new NaturalTransformation[Stream, List] {\n  def apply[A](x: Stream[A]): List[A] = x.toList\n}\n\ntype Id[A] = A\nval g = λ[Id ~&gt; Option].run(x =&gt; Some(x))\nval g = new (Id ~&gt; Option) {\n  def run[A](x: Id[A]): Option[A] = Some(x)\n}\n\nval h = λ[Either[Unit, *] Convert Option](_.fold(_ =&gt; None, a =&gt; Some(a)))\nval h = new Convert[Either[Unit, *], Option] {\n  def apply[A](x: Either[Unit, A]): Option[A] =\n    x.fold(_ =&gt; None, a =&gt; Some(a))\n}\n\n// that last example also includes a type lambda.\n// the full expansion would be:\nval h = new Convert[({type Λ$[β$0$] = Either[Unit, β$0$]})#Λ$, Option] {\n  def apply[A](x: ({type Λ$[β$0$] = Either[Unit, β$0$]})#Λ$): Option[A] =\n    x.fold(_ =&gt; None, a =&gt; Some(a))\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">f</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Lambda</span>[<span class=\"pl-en\">NaturalTransformation</span>[<span class=\"pl-en\">Stream</span>, <span class=\"pl-en\">List</span>]](_.toList)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">f</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">NaturalTransformation</span>[<span class=\"pl-en\">Stream</span>, <span class=\"pl-en\">List</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">x</span>: <span class=\"pl-en\">Stream</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> x.toList\n}\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">Id</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">A</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">g</span> <span class=\"pl-k\">=</span> λ[<span class=\"pl-en\">Id</span> <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Option</span>].run(x <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Some</span>(x))\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">g</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> (<span class=\"pl-en\">Id</span> <span class=\"pl-k\">~</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Option</span>) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">x</span>: <span class=\"pl-en\">Id</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>(x)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">h</span> <span class=\"pl-k\">=</span> λ[<span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Unit</span>, <span class=\"pl-k\">*</span>] <span class=\"pl-en\">Convert</span> <span class=\"pl-en\">Option</span>](_.fold(_ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">None</span>, a <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Some</span>(a)))\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">h</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Convert</span>[<span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Unit</span>, <span class=\"pl-k\">*</span>], <span class=\"pl-en\">Option</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">x</span>: <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Unit</span>, <span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span>\n    x.fold(_ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">None</span>, a <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Some</span>(a))\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> that last example also includes a type lambda.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> the full expansion would be:</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">h</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Convert</span>[({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[β$<span class=\"pl-c1\">0</span>$] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Unit</span>, β$<span class=\"pl-c1\">0</span>$]})#Λ$, <span class=\"pl-en\">Option</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">x</span>: ({<span class=\"pl-k\">type</span> <span class=\"pl-en\">Λ$</span>[β$<span class=\"pl-c1\">0</span>$] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">Unit</span>, β$<span class=\"pl-c1\">0</span>$]})#Λ$)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">A</span>] <span class=\"pl-k\">=</span>\n    x.fold(_ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">None</span>, a <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Some</span>(a))\n}</pre></div>\n<p dir=\"auto\">Unfortunately the type errors produced by invalid polymorphic lambdas\nare likely to be difficult to read. This is an unavoidable consequence\nof doing this transformation at the syntactic level.</p>\n<h3 dir=\"auto\"><a id=\"user-content-building-the-plugin\" class=\"anchor\" aria-hidden=\"true\" href=\"#building-the-plugin\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Building the plugin</h3>\n<p dir=\"auto\">You can build kind-projector using SBT 0.13.0 or newer.</p>\n<p dir=\"auto\">Here are some useful targets:</p>\n<ul dir=\"auto\">\n<li><code>compile</code>: compile the code</li>\n<li><code>package</code>: build the plugin jar</li>\n<li><code>test</code>: compile the test files (no tests run; compilation is the test)</li>\n<li><code>console</code>: launch a REPL with the plugin loaded so you can play around</li>\n</ul>\n<p dir=\"auto\">You can use the plugin with <code>scalac</code> by specifying it on the\ncommand-line. For instance:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scalac -Xplugin:kind-projector_2.13.6-0.13.2.jar test.scala\"><pre class=\"notranslate\"><code>scalac -Xplugin:kind-projector_2.13.6-0.13.2.jar test.scala\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-releasing-the-plugin\" class=\"anchor\" aria-hidden=\"true\" href=\"#releasing-the-plugin\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Releasing the plugin</h3>\n<p dir=\"auto\">This project must use full cross-versioning and thus needs to be\nrepublished for each new release of Scala, but if the code doesn't\nchange, we prefer not to ripple downstream with a version bump.  Thus,\nwe typically republish from a tag.</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Be sure you're on Java 8.</p>\n</li>\n<li>\n<p dir=\"auto\">Run <code>./scripts/back-publish</code> with the tag and Scala version</p>\n<div class=\"highlight highlight-text-shell-session notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ ./scripts/back-publish\nUsage: ./scripts/back-publish [-t &lt;tag&gt;] [-s &lt;scala_version&gt;]\n$ ./scripts/back-publish -t v0.13.2 -s 2.13.8\"><pre>$ <span class=\"pl-s1\">./scripts/back-publish</span>\n<span class=\"pl-c1\">Usage: ./scripts/back-publish [-t &lt;tag&gt;] [-s &lt;scala_version&gt;]</span>\n$ <span class=\"pl-s1\">./scripts/back-publish -t v0.13.2 -s 2.13.8</span></pre></div>\n</li>\n</ol>\n<p dir=\"auto\">You can also run the above steps in CI by manually triggering the\nworkflow in <code>backpublish.yml</code>. To do so, navigate to the <strong>Actions</strong>\ntab, select the <strong>Back-Publish</strong> workflow from the left side-bar, and\nclick <strong>Run workflow</strong> to access a drop-down menu to run the workflow.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/3119428/149005987-5643361f-bb76-4e3b-8347-69bb55fbed60.png\"><img width=\"376\" alt=\"Screen Shot 2022-01-11 at 11 09 12\" src=\"https://user-images.githubusercontent.com/3119428/149005987-5643361f-bb76-4e3b-8347-69bb55fbed60.png\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-known-issues--errata\" class=\"anchor\" aria-hidden=\"true\" href=\"#known-issues--errata\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Known issues &amp; errata</h3>\n<p dir=\"auto\">When dealing with type parameters that take covariant or contravariant\ntype parameters, only the function syntax is supported. Huh???</p>\n<p dir=\"auto\">Here's an example that highlights this issue:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def xyz[F[_[+_]]] = 12345\ntrait Q[A[+_], B[+_]]\n\n// we can use kind-projector to adapt Q for xyz\nxyz[λ[`x[+_]` =&gt; Q[x, List]] // ok\n\n// but these don't work (although support for the second form\n// could be added in a future release).\nxyz[Q[*[+_], List]]          // invalid syntax\nxyz[Q[*[`+_`], List]]        // unsupported\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">xyz</span>[<span class=\"pl-en\">F</span>[_[<span class=\"pl-k\">+</span>_]]] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">12345</span>\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">Q</span>[<span class=\"pl-en\">A</span>[<span class=\"pl-k\">+</span>_], <span class=\"pl-en\">B</span>[<span class=\"pl-k\">+</span>_]]\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> we can use kind-projector to adapt Q for xyz</span>\nxyz[λ[`x[+_]` <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Q</span>[x, <span class=\"pl-en\">List</span>]] <span class=\"pl-c\"><span class=\"pl-c\">//</span> ok</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> but these don't work (although support for the second form</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> could be added in a future release).</span>\nxyz[<span class=\"pl-en\">Q</span>[<span class=\"pl-k\">*</span>[<span class=\"pl-k\">+</span>_], <span class=\"pl-en\">List</span>]]          <span class=\"pl-c\"><span class=\"pl-c\">//</span> invalid syntax</span>\nxyz[<span class=\"pl-en\">Q</span>[<span class=\"pl-k\">*</span>[`+_`], <span class=\"pl-en\">List</span>]]        <span class=\"pl-c\"><span class=\"pl-c\">//</span> unsupported</span></pre></div>\n<p dir=\"auto\">There have been suggestions for better syntax, like\n<code>[A, B]Either[B, A]</code> or <code>[A, B] =&gt; Either[B, A]</code> instead of\n<code>Lambda[(A, B) =&gt; Either[B, A]]</code>.  Unfortunately this would actually\nrequire modifying the parser (i.e. the language itself) which is\noutside the scope of this project (at least, until there is an earlier\ncompiler phase to plug into).</p>\n<p dir=\"auto\">Others have noted that it would be nicer to be able to use <code>_</code> for\ntypes the way we do for values, so that we could use <code>Either[Int, _]</code>\nto define a type lambda the way we use <code>3 + _</code> to define a\nfunction. Unfortunately, it's probably too late to modify the meaning\nof <code>_</code>, which is why we chose to use <code>*</code> instead.</p>\n<h3 dir=\"auto\"><a id=\"user-content-future-work\" class=\"anchor\" aria-hidden=\"true\" href=\"#future-work\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Future Work</h3>\n<p dir=\"auto\">As of 0.5.3, kind-projector should be able to support any type lambda\nthat can be expressed via type projections, at least using the\nfunction syntax. If you come across a type for which kind-projector\nlacks a syntax, please report it.</p>\n<h3 dir=\"auto\"><a id=\"user-content-disclaimers\" class=\"anchor\" aria-hidden=\"true\" href=\"#disclaimers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Disclaimers</h3>\n<p dir=\"auto\">Kind projector is an unusual compiler plugin in that it runs <em>before</em>\nthe <code>typer</code> phase. This means that the rewrites and renaming we are\ndoing are relatively fragile, and the author disclaims all warranty or\nliability of any kind.</p>\n<p dir=\"auto\">(That said, there are currently no known bugs.)</p>\n<p dir=\"auto\">If you are using kind-projector in one of your projects, please feel\nfree to get in touch to report problems (or a lack of problems)!</p>\n<h3 dir=\"auto\"><a id=\"user-content-community\" class=\"anchor\" aria-hidden=\"true\" href=\"#community\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Community</h3>\n<p dir=\"auto\">People are expected to follow the\n<a href=\"https://scala-lang.org/conduct/\" rel=\"nofollow\">Scala Code of Conduct</a>\nwhen discussing Kind-projector on GitHub or other venues.</p>\n<p dir=\"auto\">The project's current maintainers are:</p>\n<ul dir=\"auto\">\n<li><a href=\"http://github.com/non\">Erik Osheim</a></li>\n<li><a href=\"http://github.com/tomasmikula\">Tomas Mikula</a></li>\n<li><a href=\"https://github.com/sethtisue\">Seth Tisue</a></li>\n<li><a href=\"https://github.com/milessabin\">Miles Sabin</a></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-copyright-and-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#copyright-and-license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Copyright and License</h3>\n<p dir=\"auto\">All code is available to you under the MIT license, available at\n<a href=\"http://opensource.org/licenses/mit-license.php\" rel=\"nofollow\">http://opensource.org/licenses/mit-license.php</a> and also in the COPYING\nfile.</p>\n<p dir=\"auto\">Copyright Erik Osheim, 2011-2021.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "non",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/218045?v=4",
        "url" : "https://github.com/non",
        "contributions" : 165
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://github.com/larsrh",
        "contributions" : 53
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 29
      },
      {
        "login" : "sh0hei",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/884074?v=4",
        "url" : "https://github.com/sh0hei",
        "contributions" : 22
      },
      {
        "login" : "TomasMikula",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/433439?v=4",
        "url" : "https://github.com/TomasMikula",
        "contributions" : 20
      },
      {
        "login" : "rossabaker",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142698?v=4",
        "url" : "https://github.com/rossabaker",
        "contributions" : 17
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://github.com/SethTisue",
        "contributions" : 16
      },
      {
        "login" : "mergify[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/10562?v=4",
        "url" : "https://github.com/apps/mergify",
        "contributions" : 12
      },
      {
        "login" : "erik-stripe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16106269?v=4",
        "url" : "https://github.com/erik-stripe",
        "contributions" : 7
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://github.com/armanbilge",
        "contributions" : 6
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://github.com/xuwei-k",
        "contributions" : 5
      },
      {
        "login" : "dwijnand",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/344610?v=4",
        "url" : "https://github.com/dwijnand",
        "contributions" : 4
      },
      {
        "login" : "vasilmkd",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7115459?v=4",
        "url" : "https://github.com/vasilmkd",
        "contributions" : 4
      },
      {
        "login" : "djspiewak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/752?v=4",
        "url" : "https://github.com/djspiewak",
        "contributions" : 3
      },
      {
        "login" : "martijnhoekstra",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/882449?v=4",
        "url" : "https://github.com/martijnhoekstra",
        "contributions" : 3
      },
      {
        "login" : "paulp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9135?v=4",
        "url" : "https://github.com/paulp",
        "contributions" : 3
      },
      {
        "login" : "travisbrown",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/316049?v=4",
        "url" : "https://github.com/travisbrown",
        "contributions" : 3
      },
      {
        "login" : "Alistair-Johnson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/44881886?v=4",
        "url" : "https://github.com/Alistair-Johnson",
        "contributions" : 2
      },
      {
        "login" : "barambani",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/201339?v=4",
        "url" : "https://github.com/barambani",
        "contributions" : 2
      },
      {
        "login" : "retronym",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/65551?v=4",
        "url" : "https://github.com/retronym",
        "contributions" : 2
      },
      {
        "login" : "m50d",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1283489?v=4",
        "url" : "https://github.com/m50d",
        "contributions" : 2
      },
      {
        "login" : "fommil",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1914041?v=4",
        "url" : "https://github.com/fommil",
        "contributions" : 2
      },
      {
        "login" : "neko-kai",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/450507?v=4",
        "url" : "https://github.com/neko-kai",
        "contributions" : 2
      },
      {
        "login" : "kell18",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3949900?v=4",
        "url" : "https://github.com/kell18",
        "contributions" : 1
      },
      {
        "login" : "kubum",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/169803?v=4",
        "url" : "https://github.com/kubum",
        "contributions" : 1
      },
      {
        "login" : "andrelfpinto",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/774790?v=4",
        "url" : "https://github.com/andrelfpinto",
        "contributions" : 1
      },
      {
        "login" : "ceedubs",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/977929?v=4",
        "url" : "https://github.com/ceedubs",
        "contributions" : 1
      },
      {
        "login" : "coltfred",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/587319?v=4",
        "url" : "https://github.com/coltfred",
        "contributions" : 1
      },
      {
        "login" : "danicheg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19841757?v=4",
        "url" : "https://github.com/danicheg",
        "contributions" : 1
      },
      {
        "login" : "japgolly",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/202935?v=4",
        "url" : "https://github.com/japgolly",
        "contributions" : 1
      },
      {
        "login" : "FranklinChen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/134491?v=4",
        "url" : "https://github.com/FranklinChen",
        "contributions" : 1
      },
      {
        "login" : "smarter",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/63430?v=4",
        "url" : "https://github.com/smarter",
        "contributions" : 1
      },
      {
        "login" : "hrhino",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/28076058?v=4",
        "url" : "https://github.com/hrhino",
        "contributions" : 1
      },
      {
        "login" : "kubukoz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/894884?v=4",
        "url" : "https://github.com/kubukoz",
        "contributions" : 1
      },
      {
        "login" : "jedws",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/228337?v=4",
        "url" : "https://github.com/jedws",
        "contributions" : 1
      },
      {
        "login" : "JLLeitschuh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1323708?v=4",
        "url" : "https://github.com/JLLeitschuh",
        "contributions" : 1
      },
      {
        "login" : "sirocchj",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/601807?v=4",
        "url" : "https://github.com/sirocchj",
        "contributions" : 1
      },
      {
        "login" : "BalmungSan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11336950?v=4",
        "url" : "https://github.com/BalmungSan",
        "contributions" : 1
      },
      {
        "login" : "Fristi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/141265?v=4",
        "url" : "https://github.com/Fristi",
        "contributions" : 1
      },
      {
        "login" : "mberndt123",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11650737?v=4",
        "url" : "https://github.com/mberndt123",
        "contributions" : 1
      },
      {
        "login" : "milessabin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/131183?v=4",
        "url" : "https://github.com/milessabin",
        "contributions" : 1
      },
      {
        "login" : "som-snytt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/369425?v=4",
        "url" : "https://github.com/som-snytt",
        "contributions" : 1
      },
      {
        "login" : "gokyo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6510179?v=4",
        "url" : "https://github.com/gokyo",
        "contributions" : 1
      },
      {
        "login" : "vinayakpathak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1771775?v=4",
        "url" : "https://github.com/vinayakpathak",
        "contributions" : 1
      },
      {
        "login" : "catostrophe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/40268503?v=4",
        "url" : "https://github.com/catostrophe",
        "contributions" : 1
      },
      {
        "login" : "golem131",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2429587?v=4",
        "url" : "https://github.com/golem131",
        "contributions" : 1
      },
      {
        "login" : "nafg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/98384?v=4",
        "url" : "https://github.com/nafg",
        "contributions" : 1
      },
      {
        "login" : "takayahilton",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12049838?v=4",
        "url" : "https://github.com/takayahilton",
        "contributions" : 1
      }
    ],
    "commits" : 409,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 214,
        "title" : "Migration plan for placeholders in higher kinded type lambdas?",
        "url" : "https://github.com/typelevel/kind-projector/issues/214"
      },
      {
        "number" : 207,
        "title" : "java.lang.NoSuchMethodError: scala.tools.nsc.Global.reporter()Lscala/tools/nsc/reporters/Reporter",
        "url" : "https://github.com/typelevel/kind-projector/issues/207"
      },
      {
        "number" : 197,
        "title" : "Set versionScheme",
        "url" : "https://github.com/typelevel/kind-projector/issues/197"
      },
      {
        "number" : 144,
        "title" : "not found: value λ",
        "url" : "https://github.com/typelevel/kind-projector/issues/144"
      },
      {
        "number" : 138,
        "title" : "Alternative syntax for polymorphic lambdas (for Shapeless)",
        "url" : "https://github.com/typelevel/kind-projector/issues/138"
      },
      {
        "number" : 101,
        "title" : "release notes for recent versions?",
        "url" : "https://github.com/typelevel/kind-projector/issues/101"
      },
      {
        "number" : 78,
        "title" : "Assertions with -Ycheck:all",
        "url" : "https://github.com/typelevel/kind-projector/issues/78"
      },
      {
        "number" : 65,
        "title" : "proper plugin options",
        "url" : "https://github.com/typelevel/kind-projector/issues/65"
      },
      {
        "number" : 64,
        "title" : "Document usage with gradle",
        "url" : "https://github.com/typelevel/kind-projector/issues/64"
      }
    ],
    "scalaPercentage" : 95,
    "license" : "MIT",
    "commitActivity" : [
      {
        "total" : 5,
        "week" : 1629590400000,
        "days" : [
          0,
          0,
          1,
          0,
          2,
          2,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1630195200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1630800000000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          1,
          2,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632009600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632614400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1633219200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1633824000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1634428800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635033600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1635638400000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636243200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636848000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1637452800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638662400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639872000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1640476800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641081600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1641686400000,
        "days" : [
          0,
          0,
          6,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642291200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642896000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1643500800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644105600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645315200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645920000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1646524800000,
        "days" : [
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647734400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648339200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648944000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1649548800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650758400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651363200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1654387200000,
        "days" : [
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654992000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1655596800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656201600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656806400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1657411200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658016000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658620800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659225600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659830400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1660435200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "kind-projector",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "scala-language-extensions",
    "beginnerIssuesLabel" : null
  }
}