{
  "organization" : "typelevel",
  "repository" : "cats-parse",
  "creationDate" : 1607367217000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1643196533325
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : "A parsing library for the cats ecosystem",
    "logo" : "https://avatars.githubusercontent.com/u/3731824?v=4",
    "stars" : 164,
    "forks" : 37,
    "watchers" : 16,
    "issues" : 32,
    "creationDate" : 1604094804000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-cats-parse\" class=\"anchor\" aria-hidden=\"true\" href=\"#cats-parse\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>cats-parse</h1>\n<p dir=\"auto\"><a href=\"https://github.com/typelevel/cats-parse/actions?query=workflow%3A%22Continuous+Integration%22\"><img src=\"https://github.com/typelevel/cats-parse/workflows/Continuous%20Integration/badge.svg\" alt=\"Continuous Integration\" style=\"max-width: 100%;\"></a><a href=\"https://codecov.io/gh/typelevel/cats-parse\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/b23f107c1295d91004d0a735ce0e032cae5ce91aeb0f57e4c8056c4cfb525d27/68747470733a2f2f636f6465636f762e696f2f67682f747970656c6576656c2f636174732d70617273652f6272616e63682f6d61696e2f67726170682f62616467652e737667\" alt=\"codecov\" data-canonical-src=\"https://codecov.io/gh/typelevel/cats-parse/branch/main/graph/badge.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">A parsing library for the cats ecosystem.</p>\n<p dir=\"auto\">To use in sbt add, the following to your <code>libraryDependencies</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// use this snippet for the JVM\nlibraryDependencies += &quot;org.typelevel&quot; %% &quot;cats-parse&quot; % &quot;0.3.6&quot;\n\n// use this snippet for JS, or cross-building\nlibraryDependencies += &quot;org.typelevel&quot; %%% &quot;cats-parse&quot; % &quot;0.3.6&quot;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> use this snippet for the JVM</span>\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cats-parse<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.3.6<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> use this snippet for JS, or cross-building</span>\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cats-parse<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.3.6<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">The <a href=\"https://oss.sonatype.org/service/local/repositories/releases/archive/org/typelevel/cats-parse_2.13/0.3.6/cats-parse_2.13-0.3.6-javadoc.jar/!/cats/parse/index.html\" rel=\"nofollow\">API docs</a> are published.</p>\n<p dir=\"auto\">Why another parsing library? See this <a href=\"https://posco.medium.com/designing-a-parsing-library-in-scala-d5076de52536\" rel=\"nofollow\">blog post detailing the\ndesign</a>. To reiterate,\nthis library has a few goals:</p>\n<ol dir=\"auto\">\n<li>Compatibility: should work on all scala platforms and recent versions. Currently it supports JVM, JS on versions 2.11, 2.12, 2.13, and 3. The core library should have minimal dependencies. Currently this library only depends on cats.</li>\n<li>Excellent performance: should be as fast or faster than any parser combinator that has comparable scala version support.</li>\n<li>Cats friendliness: method names match cats style, and out of the box support for cats typeclasses.</li>\n<li>Precise errors: following the <a href=\"https://hackage.haskell.org/package/trifecta\" rel=\"nofollow\">Haskell Trifecta parsing library</a>, backtracking is opt-in vs opt-out. This design tends to make it easier to write parsers that point correctly to failure points.</li>\n<li>Safety: by separating Parser0, a parser that may consume no input, from Parser, a parser must consume at least one character on success. Most combinators and methods can be made safer to use and less prone to runtime errors.</li>\n<li>Stability: we are very reluctant to break compatibility between versions. We want to put a minimal tax on users to stay on the latest versions.</li>\n</ol>\n<h1 dir=\"auto\"><a id=\"user-content-tutorial\" class=\"anchor\" aria-hidden=\"true\" href=\"#tutorial\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Tutorial</h1>\n<h2 dir=\"auto\"><a id=\"user-content-simple-parser\" class=\"anchor\" aria-hidden=\"true\" href=\"#simple-parser\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Simple parser</h2>\n<p dir=\"auto\">The library provides a set of simple parsers which might be combined to create any parsing logic. The simplest parser is <code>Parser.anyChar</code> which is successful where there is one char at the input. It has type <code>Parser[Char]</code> which means it returns one parsed char.</p>\n<p dir=\"auto\">To provide any input to parser one need to use <code>parse</code> method.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Parser\n\nval p: Parser[Char] = Parser.anyChar\n\np.parse(&quot;t&quot;)\n// res0: Either[Error, Tuple2[String, Char]] = Right((,t))\np.parse(&quot;&quot;)\n// res1: Either[Error, Tuple2[String, Char]] = Left(Error(0,NonEmptyList(InRange(0,,))))\np.parse(&quot;two&quot;)\n// res2: Either[Error, Tuple2[String, Char]] = Right((wo,t))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Parser</span>.anyChar\n\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, Char]] = Right((,t))</span>\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, Char]] = Left(Error(0,NonEmptyList(InRange(0,,))))</span>\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>two<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2: Either[Error, Tuple2[String, Char]] = Right((wo,t))</span></pre></div>\n<p dir=\"auto\">Notice the return type. <code>Tuple2[String, Char]</code> contains the rest of the input string and one parsed char if parsing was successful. It returns <code>Left</code> with error message if there was some parsing error.</p>\n<h2 dir=\"auto\"><a id=\"user-content-mapping-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapping-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mapping output</h2>\n<p dir=\"auto\">The output of the parser might be processed with <code>map</code> method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Parser\n\ncase class CharWrapper(value: Char) \n\nval p: Parser[CharWrapper] = Parser.anyChar.map(char =&gt; CharWrapper(char))\n\np.parse(&quot;t&quot;)\n// res0 = Right((,CharWrapper(t)))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">CharWrapper</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Char</span>) \n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">CharWrapper</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Parser</span>.anyChar.map(char <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">CharWrapper</span>(char))\n\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0 = Right((,CharWrapper(t)))</span></pre></div>\n<p dir=\"auto\">There are built-in methods for mapping the output to types <code>String</code> or <code>Unit</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.digit\nimport cats.parse.Parser\n\n/* String */\n\nval p2: Parser[String] = digit.map((c: Char) =&gt; c.toString)\n// is analog to\nval p3: Parser[String] = digit.string\n\np3.parse(&quot;1&quot;)\n// res0: Either[Error, Tuple2[String, String]] = Right((,1))\n\n/* Unit */\n\nval p4: Parser[Unit] = digit.map(_ =&gt; ())\n// is analog to\nval p5: Parser[Unit] = digit.void\n\np5.parse(&quot;1&quot;)\n// res1: Either[Error, Tuple2[String, Unit]] = Right((,()))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.<span class=\"pl-en\">digit</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> String <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> digit.map((<span class=\"pl-v\">c</span>: <span class=\"pl-en\">Char</span>) <span class=\"pl-k\">=&gt;</span> c.toString)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> is analog to</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p3</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> digit.string\n\np3.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, String]] = Right((,1))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> Unit <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p4</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> digit.map(_ <span class=\"pl-k\">=&gt;</span> ())\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> is analog to</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p5</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> digit.void\n\np5.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, Unit]] = Right((,()))</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-combining-parsers\" class=\"anchor\" aria-hidden=\"true\" href=\"#combining-parsers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Combining parsers</h2>\n<p dir=\"auto\">The parsers might be combined through operators:</p>\n<ul dir=\"auto\">\n<li><code>~</code> - product. Allows continuing parsing if the left side was successful;</li>\n<li><code>&lt;*</code>, <code>*&gt;</code> - productL and productR. Works just like product but drop part of result;</li>\n<li><code>surroundedBy</code> - identical to <code>border *&gt; parsingResult &lt;* border</code>;</li>\n<li><code>between</code> - identical to <code>border1 *&gt; parsingResult &lt;* border2</code>;</li>\n<li><code>|</code>, <code>orElse</code>. Parser will be successful if any of sides is successful.</li>\n</ul>\n<p dir=\"auto\">For this example we'll be using <code>cats.parse.Rfc5234</code> package which contains such parsers as <code>alpha</code> (Latin alphabet) and <code>sp</code> (whitespace).</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{sp, alpha, digit}\nimport cats.parse.Parser\n\n/* Product */\n\n// the sp parser won't return the whitespace, it just returns Unit if it successful\nval p1: Parser[(Char, Unit)] = alpha ~ sp\n\np1.parse(&quot;t&quot;)\n// res0: Either[Error, Tuple2[String, Tuple2[Char, Unit]]] = Left(Error(1,NonEmptyList(InRange(1, , ))))\np1.parse(&quot;t &quot;)\n// res1: Either[Error, Tuple2[String, Tuple2[Char, Unit]]] = Right((,(t,())))\n\n/* productL, productR */\n\n// The type is just Char because we dropping the space\n// to drop the alphabet change the arrow side: alpha *&gt; sp\nval p2: Parser[Char] = alpha &lt;* sp\n\n// still error since we need the space even if we drop it\np2.parse(&quot;t&quot;)\n// res2: Either[Error, Tuple2[String, Char]] = Left(Error(1,NonEmptyList(InRange(1, , ))))\np2.parse(&quot;t &quot;)\n// res3: Either[Error, Tuple2[String, Char]] = Right((,t))\n\n/* surroundedBy */\n\nval p4: Parser[Char] = sp *&gt; alpha &lt;* sp\nval p5: Parser[Char] = alpha.surroundedBy(sp)\n\np4.parse(&quot; a &quot;)\n// res0: Either[Error, Tuple2[String, Char]] = Right((,a))\np5.parse(&quot; a &quot;)\n// res1: Either[Error, Tuple2[String, Char]] = Right((,a))\n\n/* between */\n\nval p6: Parser[Char] = sp *&gt; alpha &lt;* digit\nval p7: Parser[Char] = alpha.between(sp, digit)\n\np6.parse(&quot; a1&quot;)\n// res2: Either[Error, Tuple2[String, Char]] = Right((,a))\np7.parse(&quot; a1&quot;)\n// res3: Either[Error, Tuple2[String, Char]] = Right((,a))\n\n/* OrElse */\n\nval p3: Parser[AnyVal] = alpha | sp\n\np3.parse(&quot;t&quot;)\n// res4: Either[Error, Tuple2[String, AnyVal]] = Right((,t))\np3.parse(&quot; &quot;)\n// res5: Either[Error, Tuple2[String, AnyVal]] = Right((,()))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">sp</span>, <span class=\"pl-en\">alpha</span>, <span class=\"pl-en\">digit</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> Product <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> the sp parser won't return the whitespace, it just returns Unit if it successful</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[(<span class=\"pl-en\">Char</span>, <span class=\"pl-en\">Unit</span>)] <span class=\"pl-k\">=</span> alpha <span class=\"pl-k\">~</span> sp\n\np1.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, Tuple2[Char, Unit]]] = Left(Error(1,NonEmptyList(InRange(1, , ))))</span>\np1.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t <span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, Tuple2[Char, Unit]]] = Right((,(t,())))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> productL, productR <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> The type is just Char because we dropping the space</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> to drop the alphabet change the arrow side: alpha *&gt; sp</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> alpha <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> still error since we need the space even if we drop it</span>\np2.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2: Either[Error, Tuple2[String, Char]] = Left(Error(1,NonEmptyList(InRange(1, , ))))</span>\np2.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t <span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res3: Either[Error, Tuple2[String, Char]] = Right((,t))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> surroundedBy <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p4</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> alpha <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p5</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> alpha.surroundedBy(sp)\n\np4.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> a <span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, Char]] = Right((,a))</span>\np5.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> a <span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, Char]] = Right((,a))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> between <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p6</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> alpha <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> digit\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p7</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> alpha.between(sp, digit)\n\np6.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> a1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2: Either[Error, Tuple2[String, Char]] = Right((,a))</span>\np7.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> a1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res3: Either[Error, Tuple2[String, Char]] = Right((,a))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> OrElse <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p3</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">AnyVal</span>] <span class=\"pl-k\">=</span> alpha <span class=\"pl-k\">|</span> sp\n\np3.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>t<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res4: Either[Error, Tuple2[String, AnyVal]] = Right((,t))</span>\np3.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res5: Either[Error, Tuple2[String, AnyVal]] = Right((,()))</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-repeating-parsers\" class=\"anchor\" aria-hidden=\"true\" href=\"#repeating-parsers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Repeating parsers</h2>\n<p dir=\"auto\">Sometimes we need something to repeat zero or more types. The cats-parse have <code>rep</code> and <code>rep0</code> methods for repeating values. <code>rep</code> means that the parser must be successful <em>at least one time</em>. <code>rep0</code> means that the parser output might be empty.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.data.NonEmptyList\nimport cats.parse.Rfc5234.alpha\nimport cats.parse.{Parser, Parser0}\n\nval p1: Parser[NonEmptyList[Char]]  = alpha.rep\nval p2: Parser0[List[Char]] = alpha.rep0\n\np1.parse(&quot;&quot;)\n// Left(Error(0,NonEmptyList(InRange(0,A,Z), InRange(0,a,z))))\np2.parse(&quot;&quot;)\n// Right((,List()))\np2.parse(&quot;something&quot;)\n// Right((,List(s, o, m, e, t, h, i, n, g)))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">data</span>.<span class=\"pl-en\">NonEmptyList</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.<span class=\"pl-en\">alpha</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.{<span class=\"pl-en\">Parser</span>, <span class=\"pl-en\">Parser0</span>}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">NonEmptyList</span>[<span class=\"pl-en\">Char</span>]]  <span class=\"pl-k\">=</span> alpha.rep\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser0</span>[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Char</span>]] <span class=\"pl-k\">=</span> alpha.rep0\n\np1.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Left(Error(0,NonEmptyList(InRange(0,A,Z), InRange(0,a,z))))</span>\np2.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Right((,List()))</span>\np2.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>something<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Right((,List(s, o, m, e, t, h, i, n, g)))</span></pre></div>\n<p dir=\"auto\">Notice the types of parsers. <code>Parser</code> type always means some non-empty output and the output of <code>Parser0</code> might be empty.</p>\n<p dir=\"auto\">One common task in this example is to parse a full line (or words) of text. In the example it is done by <code>rep</code>, and then it could be mapped to <code>String</code> in different ways:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.data.NonEmptyList\nimport cats.parse.Rfc5234.alpha\nimport cats.parse.Parser\n\nval p: Parser[String]  = alpha.rep.map((l: NonEmptyList[Char]) =&gt; l.toList.mkString)\n\nval p2: Parser[String] = alpha.rep.string\nval p3: Parser[String] = alpha.repAs[String]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">data</span>.<span class=\"pl-en\">NonEmptyList</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.<span class=\"pl-en\">alpha</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>]  <span class=\"pl-k\">=</span> alpha.rep.map((<span class=\"pl-v\">l</span>: <span class=\"pl-en\">NonEmptyList</span>[<span class=\"pl-en\">Char</span>]) <span class=\"pl-k\">=&gt;</span> l.toList.mkString)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> alpha.rep.string\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p3</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> alpha.repAs[<span class=\"pl-en\">String</span>]</pre></div>\n<p dir=\"auto\">All three parsers will be identical in parsing results, but <code>p2</code> and <code>p3</code> are using built-in methods which will not create intermediate list. <code>rep</code> + <code>map</code> creates intermediate list which is mapped to string in this example.</p>\n<h2 dir=\"auto\"><a id=\"user-content-parsers-with-empty-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#parsers-with-empty-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Parsers with empty output</h2>\n<p dir=\"auto\">Some parsers never return a value. They have a type <code>Parser0</code>. One might get this type of parser when using <code>rep0</code> or <code>.?</code> methods.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{alpha, sp}\nimport cats.parse.Parser\n\nval p: Parser[String] = (alpha.rep &lt;* sp.?).rep.string\n\np.parse(&quot;hello world&quot;)\n// res0 = Right((,hello world))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">alpha</span>, <span class=\"pl-en\">sp</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> (alpha.rep <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp.<span class=\"pl-k\">?</span>).rep.string\n\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello world<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0 = Right((,hello world))</span></pre></div>\n<p dir=\"auto\">Notice the type we got - <code>Parser[String]</code>. That is because we have <code>rep</code> outside and our <code>alpha.rep</code> parser with <code>Parser</code> type is on the left side of the clause. But what if we want to parse strings with spaces at the beginning?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val p = (sp.? *&gt; alpha.rep &lt;* sp.?).rep.string\"><pre lang=\"scala:fail\"><code>val p = (sp.? *&gt; alpha.rep &lt;* sp.?).rep.string\n</code></pre></div>\n<p dir=\"auto\">We will get an error <code>value rep is not a member of cats.parse.Parser0</code>. This happens since we have the left-side parser as optional in <code>sp.? *&gt; alpha.rep &lt;* sp.?</code> clause. This clause has a type <code>Parser0</code> which can't be repeated.</p>\n<p dir=\"auto\">But this parser can't be empty because of <code>alpha.rep</code> parser, and we know it. For these types of parsers we need to use <code>with1</code> wrapper method on the <em>left side</em> of the clause:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{alpha, sp}\nimport cats.parse.Parser\n\n\nval p: Parser[String] = (sp.?.with1 *&gt; alpha.rep &lt;* sp.?).rep.string\n\np.parse(&quot;hello world&quot;)\n// res0: Either[Error, Tuple2[String, String]] = Right((,hello world))\np.parse(&quot; hello world&quot;)\n// res1: Either[Error, Tuple2[String, String]] = Right((,hello world))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">alpha</span>, <span class=\"pl-en\">sp</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> (sp.<span class=\"pl-k\">?</span>.with1 <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> alpha.rep <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp.<span class=\"pl-k\">?</span>).rep.string\n\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello world<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, String]] = Right((,hello world))</span>\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> hello world<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, String]] = Right((,hello world))</span></pre></div>\n<p dir=\"auto\">If we have multiple <code>Parser0</code> parsers before the <code>Parser</code> - we'd need to use parenthesis like this:\n<code>(sp.? ~ sp.?).with1 *&gt; alpha.rep</code>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-error-handling\" class=\"anchor\" aria-hidden=\"true\" href=\"#error-handling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Error handling</h2>\n<p dir=\"auto\">Parser might be interrupted by parsing error. There are two kinds of errors:</p>\n<ul dir=\"auto\">\n<li>an error that has consumed 0 characters (<strong>epsilon failure</strong>);</li>\n<li>an error that has consumed 1 or more characters (<strong>arresting failure</strong>) (sometimes called halting failure).</li>\n</ul>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{alpha, sp}\nimport cats.parse.Parser\n\nval p1: Parser[Char] = alpha\nval p2: Parser[Char] = sp *&gt; alpha\n\n// epsilon failure\np1.parse(&quot;123&quot;)\n// res0: Either[Error, Tuple2[String, Char]] = Left(Error(0,NonEmptyList(InRange(0,A,Z), InRange(0,a,z))))\n\n// arresting failure\np2.parse(&quot; 1&quot;)\n// res1: Either[Error, Tuple2[String, Char]] = Left(Error(1,NonEmptyList(InRange(1,A,Z), InRange(1,a,z))))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">alpha</span>, <span class=\"pl-en\">sp</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> alpha\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser</span>[<span class=\"pl-en\">Char</span>] <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> alpha\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> epsilon failure</span>\np1.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>123<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, Char]] = Left(Error(0,NonEmptyList(InRange(0,A,Z), InRange(0,a,z))))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> arresting failure</span>\np2.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> 1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, Char]] = Left(Error(1,NonEmptyList(InRange(1,A,Z), InRange(1,a,z))))</span></pre></div>\n<p dir=\"auto\">We need to make this difference because the first type of error allows us to say that parser is not matching the input before we started to process it and the second error happens while parser processing the input.</p>\n<h3 dir=\"auto\"><a id=\"user-content-backtrack\" class=\"anchor\" aria-hidden=\"true\" href=\"#backtrack\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Backtrack</h3>\n<p dir=\"auto\">Backtrack allows us to convert an <em>arresting failure</em> to <em>epsilon failure</em>. It also rewinds the input to the offset to that used before parsing began. The resulting parser might still be combined with others. Let's look at the example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{digit, sp}\n\nval p = sp *&gt; digit &lt;* sp\n\np.parse(&quot; 1&quot;)\n// res1 = Left(Error(2,NonEmptyList(InRange(2, , ))))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">digit</span>, <span class=\"pl-en\">sp</span>}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span> <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> digit <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp\n\np.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> 1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1 = Left(Error(2,NonEmptyList(InRange(2, , ))))</span></pre></div>\n<p dir=\"auto\"><code>Parser.Error</code> contains two parameters:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final case class Error(failedAtOffset: Int, expected: NonEmptyList[Expectation])\n\ncase class InRange(offset: Int, lower: Char, upper: Char) extends Expectation\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Error</span>(<span class=\"pl-v\">failedAtOffset</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">expected</span>: <span class=\"pl-en\">NonEmptyList</span>[<span class=\"pl-en\">Expectation</span>])\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">InRange</span>(<span class=\"pl-v\">offset</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">lower</span>: <span class=\"pl-en\">Char</span>, <span class=\"pl-v\">upper</span>: <span class=\"pl-en\">Char</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Expectation</span></pre></div>\n<p dir=\"auto\">In the error message we see the failed offset and the expected value. There is a lot of expected error types which can be found in source code.</p>\n<p dir=\"auto\">One thing we can do in this situation is providing a fallback parser which can be used in case of error. We can do this by using <code>backtrack</code> (which rewinds the input, so it will be passed to fallback parser as it was before the error) and combining it with <code>orElse</code> operator:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{digit, sp}\n\nval p1 = sp *&gt; digit &lt;* sp\nval p2 = sp *&gt; digit\n\np1.backtrack.orElse(p2).parse(&quot; 1&quot;)\n// res0: Either[Error, Tuple2[String, Char]] = Right((,1))\n(p1.backtrack | p2 ).parse(&quot; 1&quot;)\n// res1: Either[Error, Tuple2[String, Char]] = Right((,1))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">digit</span>, <span class=\"pl-en\">sp</span>}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p1</span> <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> digit <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span> <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> digit\n\np1.backtrack.orElse(p2).parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> 1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: Either[Error, Tuple2[String, Char]] = Right((,1))</span>\n(p1.backtrack <span class=\"pl-k\">|</span> p2 ).parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> 1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: Either[Error, Tuple2[String, Char]] = Right((,1))</span></pre></div>\n<p dir=\"auto\">Notice that <code>(p1.backtrack | p2)</code> clause is another parser by itself since we're still combining parsers by using <code>orElse</code>.</p>\n<p dir=\"auto\">But we've already used <code>orElse</code> in example before without any <code>backtrack</code> operator, and it worked just fine. Why do we need <code>backtrack</code> now? Let's look at this example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{digit, sp}\n\nval p1 = sp *&gt; digit &lt;* sp\nval p2 = sp *&gt; digit\nval p3 = digit\n\n(p1 | p2).parse(&quot; 1&quot;)\n// res1 = Left(Error(2,NonEmptyList(InRange(2, , ))))\n\n(p1 | p2 | p3).parse(&quot;1&quot;)\n// res2 = Right((,1))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">digit</span>, <span class=\"pl-en\">sp</span>}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p1</span> <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> digit <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> sp\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span> <span class=\"pl-k\">=</span> sp <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> digit\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p3</span> <span class=\"pl-k\">=</span> digit\n\n(p1 <span class=\"pl-k\">|</span> p2).parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> 1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1 = Left(Error(2,NonEmptyList(InRange(2, , ))))</span>\n\n(p1 <span class=\"pl-k\">|</span> p2 <span class=\"pl-k\">|</span> p3).parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2 = Right((,1))</span></pre></div>\n<p dir=\"auto\">The first parser combination is interrupted by <em>arresting failures</em> and the second parsing combination will only suffer from <em>epsilon failures</em>. The second parser works because <code>orElse</code> and <code>|</code> operators actually allows recovering from epsilon failures, but not from arresting failures.</p>\n<p dir=\"auto\">So the <code>backtrack</code> helps us where the <em>left side</em> returns arresting failure.</p>\n<h3 dir=\"auto\"><a id=\"user-content-soft\" class=\"anchor\" aria-hidden=\"true\" href=\"#soft\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Soft</h3>\n<p dir=\"auto\">This method might look similar to <code>backtrack</code>, but it allows us to <em>proceed</em> the parsing when the <em>right side</em> is returning an epsilon failure. It is really useful for ambiguous parsers when we can't really tell what exactly we are parsing before the end. Let's say we want to parse some input to the search engine which contains fields. This might look like \"field:search_query\". Let's try to write a parser for this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.Rfc5234.{alpha, sp}\nimport cats.parse.Parser\nimport cats.parse.Parser.{char =&gt; pchar}\n\nval searchWord = alpha.rep.string\n\nval fieldValue = alpha.rep.string ~ pchar(':')\n\nval p1 = fieldValue.? ~ (searchWord ~ sp.?).rep.string\n\n\np1.parse(&quot;title:The Wind Has Risen&quot;)\n// res0 = Right((,(Some((title,())),The Wind Has Risen)))\np1.parse(&quot;The Wind Has Risen&quot;)\n// res1 = Left(Error(3,NonEmptyList(InRange(3,:,:))))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Rfc5234</span>.{<span class=\"pl-en\">alpha</span>, <span class=\"pl-en\">sp</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">Parser</span>.{<span class=\"pl-en\">char</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">pchar</span>}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">searchWord</span> <span class=\"pl-k\">=</span> alpha.rep.string\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">fieldValue</span> <span class=\"pl-k\">=</span> alpha.rep.string <span class=\"pl-k\">~</span> pchar(<span class=\"pl-s\">':'</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p1</span> <span class=\"pl-k\">=</span> fieldValue.<span class=\"pl-k\">?</span> <span class=\"pl-k\">~</span> (searchWord <span class=\"pl-k\">~</span> sp.<span class=\"pl-k\">?</span>).rep.string\n\n\np1.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title:The Wind Has Risen<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0 = Right((,(Some((title,())),The Wind Has Risen)))</span>\np1.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The Wind Has Risen<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1 = Left(Error(3,NonEmptyList(InRange(3,:,:))))</span></pre></div>\n<p dir=\"auto\">This error happens because we can't really tell if we are parsing the <code>fieldValue</code> before we met a <code>:</code> char. We might do this with by writing two parsers, converting the first one's failure to epsilon failure by <code>backtrack</code> and then providing fallback parser by <code>|</code> operator (which allows the epsilon failures):</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val p2 = fieldValue.? ~ (searchWord ~ sp.?).rep.string\n\nval p3 = (searchWord ~ sp.?).rep.string\n\n(p2.backtrack | p3).parse(&quot;title:The Wind Has Risen&quot;)\n// res0 = Right((,(Some((title,())),The Wind Has Risen)))\n(p2.backtrack | p3).parse(&quot;The Wind Has Risen&quot;)\n// res1 = Right((,The Wind Has Risen))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">p2</span> <span class=\"pl-k\">=</span> fieldValue.<span class=\"pl-k\">?</span> <span class=\"pl-k\">~</span> (searchWord <span class=\"pl-k\">~</span> sp.<span class=\"pl-k\">?</span>).rep.string\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p3</span> <span class=\"pl-k\">=</span> (searchWord <span class=\"pl-k\">~</span> sp.<span class=\"pl-k\">?</span>).rep.string\n\n(p2.backtrack <span class=\"pl-k\">|</span> p3).parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title:The Wind Has Risen<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0 = Right((,(Some((title,())),The Wind Has Risen)))</span>\n(p2.backtrack <span class=\"pl-k\">|</span> p3).parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The Wind Has Risen<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1 = Right((,The Wind Has Risen))</span></pre></div>\n<p dir=\"auto\">But this problem might be resolved with <code>soft</code> method inside the first parser since the right side of it actually returns an epsilon failure itself:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val fieldValueSoft = alpha.rep.string.soft ~ pchar(':')\n\nval p4 = fieldValueSoft.? ~ (searchWord ~ sp.?).rep.string\n\np4.parse(&quot;title:The Wind Has Risen&quot;)\n// res2 = Right((,(Some((title,())),The Wind Has Risen)))\np4.parse(&quot;The Wind Has Risen&quot;)\n// res3 = Right((,(None,The Wind Has Risen)))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">fieldValueSoft</span> <span class=\"pl-k\">=</span> alpha.rep.string.soft <span class=\"pl-k\">~</span> pchar(<span class=\"pl-s\">':'</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p4</span> <span class=\"pl-k\">=</span> fieldValueSoft.<span class=\"pl-k\">?</span> <span class=\"pl-k\">~</span> (searchWord <span class=\"pl-k\">~</span> sp.<span class=\"pl-k\">?</span>).rep.string\n\np4.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title:The Wind Has Risen<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2 = Right((,(Some((title,())),The Wind Has Risen)))</span>\np4.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The Wind Has Risen<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res3 = Right((,(None,The Wind Has Risen)))</span></pre></div>\n<p dir=\"auto\">So when the <em>right side</em> returns an epsilon failure the <code>soft</code> method allows us to rewind parsed input and try to proceed it's parsing with next parsers (without changing the parser itself!).</p>\n<h1 dir=\"auto\"><a id=\"user-content-json-parser-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#json-parser-example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>JSON parser example</h1>\n<p dir=\"auto\">Below is most of a json parser (the string unescaping is elided). This example can give you a feel\nfor what it is like to use this library.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.bench.self.JsonStringUtil\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.<span class=\"pl-en\">bench</span>.<span class=\"pl-en\">self</span>.<span class=\"pl-en\">JsonStringUtil</span></pre></div>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.parse.{Parser0, Parser =&gt; P, Numbers}\nimport org.typelevel.jawn.ast._\n\nobject Json {\n  private[this] val whitespace: P[Unit] = P.charIn(&quot; \\t\\r\\n&quot;).void\n  private[this] val whitespaces0: Parser0[Unit] = whitespace.rep0.void\n\n  val parser: P[JValue] = P.recursive[JValue] { recurse =&gt;\n    val pnull = P.string(&quot;null&quot;).as(JNull)\n    val bool = P.string(&quot;true&quot;).as(JBool.True).orElse(P.string(&quot;false&quot;).as(JBool.False))\n    val justStr = JsonStringUtil.escapedString('&quot;')\n    val str = justStr.map(JString(_))\n    val num = Numbers.jsonNumber.map(JNum(_))\n\n    val listSep: P[Unit] =\n      P.char(',').soft.surroundedBy(whitespaces0).void\n\n    def rep[A](pa: P[A]): Parser0[List[A]] =\n      pa.repSep0(listSep).surroundedBy(whitespaces0)\n\n    val list = rep(recurse).with1\n      .between(P.char('['), P.char(']'))\n      .map { vs =&gt; JArray.fromSeq(vs) }\n\n    val kv: P[(String, JValue)] =\n      justStr ~ (P.char(':').surroundedBy(whitespaces0) *&gt; recurse)\n\n    val obj = rep(kv).with1\n      .between(P.char('{'), P.char('}'))\n      .map { vs =&gt; JObject.fromSeq(vs) }\n\n    P.oneOf(str :: num :: list :: obj :: bool :: pnull :: Nil)\n  }\n\n  // any whitespace followed by json followed by whitespace followed by end\n  val parserFile: P[JValue] = whitespaces0.with1 *&gt; parser &lt;* (whitespaces0 ~ P.end)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">parse</span>.{<span class=\"pl-en\">Parser0</span>, <span class=\"pl-en\">Parser</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">P</span>, <span class=\"pl-en\">Numbers</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">ast</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Json</span> {\n  <span class=\"pl-k\">private</span>[<span class=\"pl-c1\">this</span>] <span class=\"pl-k\">val</span> <span class=\"pl-smi\">whitespace</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">P</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>.charIn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-cce\">\\t\\r\\n</span><span class=\"pl-pds\">\"</span></span>).void\n  <span class=\"pl-k\">private</span>[<span class=\"pl-c1\">this</span>] <span class=\"pl-k\">val</span> <span class=\"pl-smi\">whitespaces0</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser0</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span> whitespace.rep0.void\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">parser</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">P</span>[<span class=\"pl-en\">JValue</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>.recursive[<span class=\"pl-en\">JValue</span>] { recurse <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">pnull</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>.string(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>null<span class=\"pl-pds\">\"</span></span>).as(<span class=\"pl-en\">JNull</span>)\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">bool</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">P</span>.string(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true<span class=\"pl-pds\">\"</span></span>).as(<span class=\"pl-en\">JBool</span>.<span class=\"pl-en\">True</span>).orElse(<span class=\"pl-en\">P</span>.string(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>false<span class=\"pl-pds\">\"</span></span>).as(<span class=\"pl-en\">JBool</span>.<span class=\"pl-en\">False</span>))\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">justStr</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsonStringUtil</span>.escapedString(<span class=\"pl-s\">'\"'</span>)\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">str</span> <span class=\"pl-k\">=</span> justStr.map(<span class=\"pl-en\">JString</span>(_))\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">num</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Numbers</span>.jsonNumber.map(<span class=\"pl-en\">JNum</span>(_))\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">listSep</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">P</span>[<span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span>\n      <span class=\"pl-en\">P</span>.char(<span class=\"pl-s\">','</span>).soft.surroundedBy(whitespaces0).void\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">rep</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">pa</span>: <span class=\"pl-en\">P</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Parser0</span>[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">A</span>]] <span class=\"pl-k\">=</span>\n      pa.repSep0(listSep).surroundedBy(whitespaces0)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">list</span> <span class=\"pl-k\">=</span> rep(recurse).with1\n      .between(<span class=\"pl-en\">P</span>.char(<span class=\"pl-s\">'['</span>), <span class=\"pl-en\">P</span>.char(<span class=\"pl-s\">']'</span>))\n      .map { vs <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">JArray</span>.fromSeq(vs) }\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">kv</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">P</span>[(<span class=\"pl-en\">String</span>, <span class=\"pl-en\">JValue</span>)] <span class=\"pl-k\">=</span>\n      justStr <span class=\"pl-k\">~</span> (<span class=\"pl-en\">P</span>.char(<span class=\"pl-s\">':'</span>).surroundedBy(whitespaces0) <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> recurse)\n\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">obj</span> <span class=\"pl-k\">=</span> rep(kv).with1\n      .between(<span class=\"pl-en\">P</span>.char(<span class=\"pl-s\">'{'</span>), <span class=\"pl-en\">P</span>.char(<span class=\"pl-s\">'}'</span>))\n      .map { vs <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">JObject</span>.fromSeq(vs) }\n\n    <span class=\"pl-en\">P</span>.oneOf(str <span class=\"pl-k\">::</span> num <span class=\"pl-k\">::</span> list <span class=\"pl-k\">::</span> obj <span class=\"pl-k\">::</span> bool <span class=\"pl-k\">::</span> pnull <span class=\"pl-k\">::</span> <span class=\"pl-en\">Nil</span>)\n  }\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> any whitespace followed by json followed by whitespace followed by end</span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">parserFile</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">P</span>[<span class=\"pl-en\">JValue</span>] <span class=\"pl-k\">=</span> whitespaces0.with1 <span class=\"pl-k\">*</span><span class=\"pl-k\">&gt;</span> parser <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">*</span> (whitespaces0 <span class=\"pl-k\">~</span> <span class=\"pl-en\">P</span>.end)\n}</pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-performance\" class=\"anchor\" aria-hidden=\"true\" href=\"#performance\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Performance</h1>\n<p dir=\"auto\">We have a benchmark suite that compares JSON parsing across several commonly used libraries. A\nrecent (2021/11/05) result is below:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[info] Benchmark                         Mode  Cnt    Score    Error  Units\n[info] BarBench.catsParseParse           avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.fastparseParse           avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.jawnParse                avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.parboiled2Parse          avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.parsleyParseCold         avgt    4    0.064 ±  0.001  ms/op\n[info] Bla25Bench.catsParseParse         avgt    4   23.095 ±  0.174  ms/op\n[info] Bla25Bench.fastparseParse         avgt    4   15.622 ±  0.414  ms/op\n[info] Bla25Bench.jawnParse              avgt    4    7.501 ±  0.143  ms/op\n[info] Bla25Bench.parboiled2Parse        avgt    4   18.423 ±  6.094  ms/op\n[info] Bla25Bench.parsleyParseCold       avgt    4   30.752 ±  0.279  ms/op\n[info] CountriesBench.catsParseParse     avgt    4    7.169 ±  0.041  ms/op\n[info] CountriesBench.fastparseParse     avgt    4    5.023 ±  0.023  ms/op\n[info] CountriesBench.jawnParse          avgt    4    1.235 ±  0.011  ms/op\n[info] CountriesBench.parboiled2Parse    avgt    4    2.936 ±  0.008  ms/op\n[info] CountriesBench.parsleyParseCold   avgt    4   11.800 ±  0.162  ms/op\n[info] Qux2Bench.catsParseParse          avgt    4    7.031 ±  0.599  ms/op\n[info] Qux2Bench.fastparseParse          avgt    4    6.597 ±  0.031  ms/op\n[info] Qux2Bench.jawnParse               avgt    4    2.227 ±  0.014  ms/op\n[info] Qux2Bench.parboiled2Parse         avgt    4    5.514 ±  0.472  ms/op\n[info] Qux2Bench.parsleyParseCold        avgt    4   10.327 ±  0.293  ms/op\n[info] StringInBenchmarks.oneOfParse     avgt    4   88.105 ±  2.658  ns/op\n[info] StringInBenchmarks.stringInParse  avgt    4  129.246 ±  1.820  ns/op\n[info] Ugh10kBench.catsParseParse        avgt    4   53.679 ±  1.385  ms/op\n[info] Ugh10kBench.fastparseParse        avgt    4   45.165 ±  0.356  ms/op\n[info] Ugh10kBench.jawnParse             avgt    4   11.404 ±  0.068  ms/op\n[info] Ugh10kBench.parboiled2Parse       avgt    4   31.984 ±  0.748  ms/op\n[info] Ugh10kBench.parsleyParseCold      avgt    4   77.150 ±  1.093  ms/op\"><pre><code>[info] Benchmark                         Mode  Cnt    Score    Error  Units\n[info] BarBench.catsParseParse           avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.fastparseParse           avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.jawnParse                avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.parboiled2Parse          avgt    4   ≈ 10⁻⁴           ms/op\n[info] BarBench.parsleyParseCold         avgt    4    0.064 ±  0.001  ms/op\n[info] Bla25Bench.catsParseParse         avgt    4   23.095 ±  0.174  ms/op\n[info] Bla25Bench.fastparseParse         avgt    4   15.622 ±  0.414  ms/op\n[info] Bla25Bench.jawnParse              avgt    4    7.501 ±  0.143  ms/op\n[info] Bla25Bench.parboiled2Parse        avgt    4   18.423 ±  6.094  ms/op\n[info] Bla25Bench.parsleyParseCold       avgt    4   30.752 ±  0.279  ms/op\n[info] CountriesBench.catsParseParse     avgt    4    7.169 ±  0.041  ms/op\n[info] CountriesBench.fastparseParse     avgt    4    5.023 ±  0.023  ms/op\n[info] CountriesBench.jawnParse          avgt    4    1.235 ±  0.011  ms/op\n[info] CountriesBench.parboiled2Parse    avgt    4    2.936 ±  0.008  ms/op\n[info] CountriesBench.parsleyParseCold   avgt    4   11.800 ±  0.162  ms/op\n[info] Qux2Bench.catsParseParse          avgt    4    7.031 ±  0.599  ms/op\n[info] Qux2Bench.fastparseParse          avgt    4    6.597 ±  0.031  ms/op\n[info] Qux2Bench.jawnParse               avgt    4    2.227 ±  0.014  ms/op\n[info] Qux2Bench.parboiled2Parse         avgt    4    5.514 ±  0.472  ms/op\n[info] Qux2Bench.parsleyParseCold        avgt    4   10.327 ±  0.293  ms/op\n[info] StringInBenchmarks.oneOfParse     avgt    4   88.105 ±  2.658  ns/op\n[info] StringInBenchmarks.stringInParse  avgt    4  129.246 ±  1.820  ns/op\n[info] Ugh10kBench.catsParseParse        avgt    4   53.679 ±  1.385  ms/op\n[info] Ugh10kBench.fastparseParse        avgt    4   45.165 ±  0.356  ms/op\n[info] Ugh10kBench.jawnParse             avgt    4   11.404 ±  0.068  ms/op\n[info] Ugh10kBench.parboiled2Parse       avgt    4   31.984 ±  0.748  ms/op\n[info] Ugh10kBench.parsleyParseCold      avgt    4   77.150 ±  1.093  ms/op\n</code></pre></div>\n<p dir=\"auto\">Note that parboiled and fastparse both use macros that make them very difficult to port to Dotty.\nJawn is a specialized and optimized JSON parser, so that can be considered an upper bound on\nperformance.\nKeep in mind that parser performance depends both on the parsing library but also how the parser\nis written, but these results suggest that this library is already quite competitive.</p>\n<h1 dir=\"auto\"><a id=\"user-content-migrating-from-fastparse\" class=\"anchor\" aria-hidden=\"true\" href=\"#migrating-from-fastparse\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Migrating from Fastparse</h1>\n<p dir=\"auto\">You should find all the Fastparse methods you are used to. If not, feel free to open an issue.\nThere are a few things to keep in mind:</p>\n<ol dir=\"auto\">\n<li>In fastparse, you wrap a parser in <code>P(...)</code> to make the interior lazy. Following cats, to get a lazily constructed parser use <code>Parser.defer</code> or <code>cats.Defer[Parser].defer</code>.</li>\n<li>In fastparse the <code>~</code> operator does tuple concatenation. This can be nice, but also complex to see what the resulting type is. In cats-parse, <code>~</code> always returns a Tuple2 containing the parsed values from the left and right. To recover fastparse-like behavior, use cats syntax <code>(pa, pb, pc...).tupled</code>.</li>\n<li>In fastparse, backtracking is opt-out by using cuts. In cats-parse, backtracking is opt-in using <code>.backtrack</code>. Put another way, normal product operations in cats-parse are like <code>~/</code> in fastparse.</li>\n<li>In cats-parse, using <code>*&gt;</code>, <code>&lt;*</code>, and <code>.void</code> methods can be a significant optimization: if you don't need a result, communicate that to the library with those methods.</li>\n</ol>\n<h1 dir=\"auto\"><a id=\"user-content-getting-and-giving-help\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-and-giving-help\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Getting and Giving Help</h1>\n<p dir=\"auto\">We welcome new contributors and new maintainers. Please feel free to open issues and PRs. If you have any\nproblem using the library, an issue is the best way to ask a question until we flush out more\ndocumentation.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 135
      },
      {
        "login" : "johnynek",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/67958?v=4",
        "url" : "https://api.github.com/users/johnynek",
        "contributions" : 58
      },
      {
        "login" : "regadas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/163899?v=4",
        "url" : "https://api.github.com/users/regadas",
        "contributions" : 35
      },
      {
        "login" : "mpilquist",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/118078?v=4",
        "url" : "https://api.github.com/users/mpilquist",
        "contributions" : 7
      },
      {
        "login" : "martijnhoekstra",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/882449?v=4",
        "url" : "https://api.github.com/users/martijnhoekstra",
        "contributions" : 5
      },
      {
        "login" : "stephenjudkins",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8593?v=4",
        "url" : "https://api.github.com/users/stephenjudkins",
        "contributions" : 5
      },
      {
        "login" : "rossabaker",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142698?v=4",
        "url" : "https://api.github.com/users/rossabaker",
        "contributions" : 4
      },
      {
        "login" : "Slakah",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16853?v=4",
        "url" : "https://api.github.com/users/Slakah",
        "contributions" : 4
      },
      {
        "login" : "non",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/218045?v=4",
        "url" : "https://api.github.com/users/non",
        "contributions" : 2
      },
      {
        "login" : "zmccoy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/280974?v=4",
        "url" : "https://api.github.com/users/zmccoy",
        "contributions" : 2
      },
      {
        "login" : "ankitson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/855649?v=4",
        "url" : "https://api.github.com/users/ankitson",
        "contributions" : 1
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://api.github.com/users/armanbilge",
        "contributions" : 1
      },
      {
        "login" : "DenisNovac",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22966999?v=4",
        "url" : "https://api.github.com/users/DenisNovac",
        "contributions" : 1
      },
      {
        "login" : "hugo-vrijswijk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10114577?v=4",
        "url" : "https://api.github.com/users/hugo-vrijswijk",
        "contributions" : 1
      },
      {
        "login" : "VlachJosef",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5246747?v=4",
        "url" : "https://api.github.com/users/VlachJosef",
        "contributions" : 1
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://api.github.com/users/larsrh",
        "contributions" : 1
      },
      {
        "login" : "satabin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2537737?v=4",
        "url" : "https://api.github.com/users/satabin",
        "contributions" : 1
      },
      {
        "login" : "oguzhanunlu",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4786472?v=4",
        "url" : "https://api.github.com/users/oguzhanunlu",
        "contributions" : 1
      },
      {
        "login" : "ghostdogpr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7413894?v=4",
        "url" : "https://api.github.com/users/ghostdogpr",
        "contributions" : 1
      },
      {
        "login" : "vasilmkd",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7115459?v=4",
        "url" : "https://api.github.com/users/vasilmkd",
        "contributions" : 1
      },
      {
        "login" : "zsluedem",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13496262?v=4",
        "url" : "https://api.github.com/users/zsluedem",
        "contributions" : 1
      },
      {
        "login" : "tsao-chi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/57285379?v=4",
        "url" : "https://api.github.com/users/tsao-chi",
        "contributions" : 1
      }
    ],
    "commits" : 269,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : "https://gitter.im/typelevel/cats-parse",
    "openIssues" : [
      {
        "number" : 350,
        "title" : "RadixNode and stringIn are a bit slow",
        "url" : "https://github.com/typelevel/cats-parse/issues/350"
      },
      {
        "number" : 344,
        "title" : "idea for safe repetition on Parser0",
        "url" : "https://github.com/typelevel/cats-parse/issues/344"
      },
      {
        "number" : 330,
        "title" : "Backtracking with context",
        "url" : "https://github.com/typelevel/cats-parse/issues/330"
      },
      {
        "number" : 323,
        "title" : "Recursive parser creates infinite loop.",
        "url" : "https://github.com/typelevel/cats-parse/issues/323"
      },
      {
        "number" : 316,
        "title" : "Either x or not y",
        "url" : "https://github.com/typelevel/cats-parse/issues/316"
      },
      {
        "number" : 285,
        "title" : "set up CI to use latest scala 3 but publish on oldest scala 3",
        "url" : "https://github.com/typelevel/cats-parse/issues/285"
      },
      {
        "number" : 281,
        "title" : "Non-string inputs?",
        "url" : "https://github.com/typelevel/cats-parse/issues/281"
      },
      {
        "number" : 279,
        "title" : "Parser creation performance",
        "url" : "https://github.com/typelevel/cats-parse/issues/279"
      },
      {
        "number" : 239,
        "title" : "Parser error prettyprinting",
        "url" : "https://github.com/typelevel/cats-parse/issues/239"
      },
      {
        "number" : 235,
        "title" : "Tuple semigroupal operations on parsers result in the wider Parser0 type - workarounds?",
        "url" : "https://github.com/typelevel/cats-parse/issues/235"
      },
      {
        "number" : 234,
        "title" : "API to read source position",
        "url" : "https://github.com/typelevel/cats-parse/issues/234"
      },
      {
        "number" : 205,
        "title" : "Why is Parser0#repSep not possible?",
        "url" : "https://github.com/typelevel/cats-parse/issues/205"
      },
      {
        "number" : 203,
        "title" : "Different way of combining Parser0 and Parser",
        "url" : "https://github.com/typelevel/cats-parse/issues/203"
      },
      {
        "number" : 201,
        "title" : "Bug? - surroundedBy with optional whitespace fails to parse",
        "url" : "https://github.com/typelevel/cats-parse/issues/201"
      },
      {
        "number" : 197,
        "title" : "Problem with Maven RC2 release?",
        "url" : "https://github.com/typelevel/cats-parse/issues/197"
      },
      {
        "number" : 185,
        "title" : "add ability to parse substrings",
        "url" : "https://github.com/typelevel/cats-parse/issues/185"
      },
      {
        "number" : 179,
        "title" : "Using cats-parse with Scala string interpolation",
        "url" : "https://github.com/typelevel/cats-parse/issues/179"
      },
      {
        "number" : 165,
        "title" : "Detect start of line",
        "url" : "https://github.com/typelevel/cats-parse/issues/165"
      },
      {
        "number" : 131,
        "title" : "It's hard to run targeted tests",
        "url" : "https://github.com/typelevel/cats-parse/issues/131"
      },
      {
        "number" : 121,
        "title" : "add a FAQ entry on using fix to parse recursive structures",
        "url" : "https://github.com/typelevel/cats-parse/issues/121"
      },
      {
        "number" : 64,
        "title" : "Consistency of return types",
        "url" : "https://github.com/typelevel/cats-parse/issues/64"
      },
      {
        "number" : 49,
        "title" : "Add a way to make a fully generally parser",
        "url" : "https://github.com/typelevel/cats-parse/issues/49"
      },
      {
        "number" : 18,
        "title" : "test cats laws",
        "url" : "https://github.com/typelevel/cats-parse/issues/18"
      },
      {
        "number" : 7,
        "title" : "set up a documentation site",
        "url" : "https://github.com/typelevel/cats-parse/issues/7"
      },
      {
        "number" : 5,
        "title" : "add a benchmark suite to compare against fastparse v1",
        "url" : "https://github.com/typelevel/cats-parse/issues/5"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : null,
    "beginnerIssuesLabel" : null
  }
}