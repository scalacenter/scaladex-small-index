{
  "organization" : "typelevel",
  "repository" : "jawn",
  "creationDate" : 1405433713607,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1643187176731
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Jawn is for parsing jay-sawn (JSON)",
    "logo" : "https://avatars.githubusercontent.com/u/3731824?v=4",
    "stars" : 414,
    "forks" : 67,
    "watchers" : 22,
    "issues" : 13,
    "creationDate" : 1349057085000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h2 dir=\"auto\"><a id=\"user-content-jawn\" class=\"anchor\" aria-hidden=\"true\" href=\"#jawn\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Jawn</h2>\n<p dir=\"auto\">\"Jawn is for parsing jay-sawn.\"</p>\n<h3 dir=\"auto\"><a id=\"user-content-origin\" class=\"anchor\" aria-hidden=\"true\" href=\"#origin\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Origin</h3>\n<p dir=\"auto\">The term \"jawn\" comes from the Philadelphia area. It conveys about as\nmuch information as \"thing\" does. I chose the name because I had moved\nto Montreal so I was remembering Philly fondly. Also, there isn't a\nbetter way to describe objects encoded in JSON than \"things\". Finally,\nwe get a catchy slogan.</p>\n<p dir=\"auto\">Jawn was designed to parse JSON into an AST as quickly as possible.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/typelevel/jawn/workflows/Scala/badge.svg\"><img src=\"https://github.com/typelevel/jawn/workflows/Scala/badge.svg\" alt=\"\" style=\"max-width: 100%;\"></a>\n<a href=\"https://index.scala-lang.org/typelevel/jawn/jawn-parser\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/02a6e6891aaf9c0ec01977ecc2334dbafcb12c62f9d42759e5a0805eb0f0ec5c/68747470733a2f2f696e6465782e7363616c612d6c616e672e6f72672f747970656c6576656c2f6a61776e2f6a61776e2d7061727365722f6c61746573742e7376673f636f6c6f723d6f72616e6765\" alt=\"Latest version\" data-canonical-src=\"https://index.scala-lang.org/typelevel/jawn/jawn-parser/latest.svg?color=orange\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-overview\" class=\"anchor\" aria-hidden=\"true\" href=\"#overview\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Overview</h3>\n<p dir=\"auto\">Jawn consists of three parts:</p>\n<ol dir=\"auto\">\n<li>A fast, generic JSON parser (<code>jawn-parser</code>)</li>\n<li>A small, somewhat anemic AST (<code>jawn-ast</code>)</li>\n<li>A few helpful utilities (<code>jawn-util</code>)</li>\n</ol>\n<p dir=\"auto\">Currently Jawn is competitive with the fastest Java JSON libraries\n(GSON and Jackson) and in the author's benchmarks it often wins. It\nseems to be faster than any other Scala parser that exists (as of July\n2014).</p>\n<p dir=\"auto\">Given the plethora of really nice JSON libraries for Scala, the\nexpectation is that you're probably here for <code>jawn-parser</code> or a\nsupport package.</p>\n<h3 dir=\"auto\"><a id=\"user-content-quick-start\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-start\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick Start</h3>\n<p dir=\"auto\">Jawn supports Scala 2.12, 2.13, and 3 on the JVM and Scala.js.  Scala\n2.12 and 2.13 are supported on Scala Native.</p>\n<p dir=\"auto\">Here's a <code>build.sbt</code> snippet that shows you how to depend on Jawn in\nyour own sbt project:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// use this if you just want jawn's parser, and will implement your own facade\nlibraryDependencies += &quot;org.typelevel&quot; %% &quot;jawn-parser&quot; % &quot;1.3.2&quot;\n\n// use this if you want jawn's parser and also jawn's ast\nlibraryDependencies += &quot;org.typelevel&quot; %% &quot;jawn-ast&quot; % &quot;1.3.2&quot;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> use this if you just want jawn's parser, and will implement your own facade</span>\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jawn-parser<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.3.2<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> use this if you want jawn's parser and also jawn's ast</span>\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jawn-ast<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.3.2<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">If you want to use Jawn's parser with another project's AST, see the\n\"Supporting external ASTs with Jawn\" section.  There are a few reasons\nyou might want to do this:</p>\n<ul dir=\"auto\">\n<li>The library's built-in parser is significantly slower than Jawn's.</li>\n<li>Jawn supports more input types (<code>ByteBuffer</code>, <code>File</code>, etc.).</li>\n<li>You need asynchronous JSON parsing.</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-dependencies\" class=\"anchor\" aria-hidden=\"true\" href=\"#dependencies\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dependencies</h3>\n<p dir=\"auto\"><em>jawn-parser</em> has no dependencies other than Scala.</p>\n<p dir=\"auto\"><em>jawn-ast</em> depends on <em>jawn-parser</em> but nothing else.</p>\n<h3 dir=\"auto\"><a id=\"user-content-parsing\" class=\"anchor\" aria-hidden=\"true\" href=\"#parsing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Parsing</h3>\n<p dir=\"auto\">Jawn's parser is both fast and relatively featureful. Assuming you\nwant to get back an AST of type <code>J</code> and you have a <code>Facade[J]</code>\ndefined, you can use the following <code>parse</code> signatures:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Parser.parseUnsafe[J](String) → J\nParser.parseFromString[J](String) → Try[J]\nParser.parsefromPath[J](String) → Try[J]\nParser.parseFromFile[J](File) → Try[J]\nParser.parseFromChannel[J](ReadableByteChannel) → Try[J]\nParser.parseFromByteBuffer[J](ByteBuffer) → Try[J]\"><pre><span class=\"pl-en\">Parser</span>.parseUnsafe[<span class=\"pl-en\">J</span>](<span class=\"pl-en\">String</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">J</span>\n<span class=\"pl-en\">Parser</span>.parseFromString[<span class=\"pl-en\">J</span>](<span class=\"pl-en\">String</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Try</span>[<span class=\"pl-en\">J</span>]\n<span class=\"pl-en\">Parser</span>.parsefromPath[<span class=\"pl-en\">J</span>](<span class=\"pl-en\">String</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Try</span>[<span class=\"pl-en\">J</span>]\n<span class=\"pl-en\">Parser</span>.parseFromFile[<span class=\"pl-en\">J</span>](<span class=\"pl-en\">File</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Try</span>[<span class=\"pl-en\">J</span>]\n<span class=\"pl-en\">Parser</span>.parseFromChannel[<span class=\"pl-en\">J</span>](<span class=\"pl-en\">ReadableByteChannel</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Try</span>[<span class=\"pl-en\">J</span>]\n<span class=\"pl-en\">Parser</span>.parseFromByteBuffer[<span class=\"pl-en\">J</span>](<span class=\"pl-en\">ByteBuffer</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Try</span>[<span class=\"pl-en\">J</span>]</pre></div>\n<p dir=\"auto\">Jawn also supports asynchronous parsing, which allows users to feed\nthe parser with data as it is available. There are three modes:</p>\n<ul dir=\"auto\">\n<li><code>SingleValue</code> waits to return a single <code>J</code> value once parsing is done.</li>\n<li><code>UnwrapArray</code> if the top-level element is an array, return values as they become available.</li>\n<li><code>ValueStream</code> parse one-or-more json values separated by whitespace.</li>\n</ul>\n<p dir=\"auto\">Here's an example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.typelevel.jawn.ast\nimport org.typelevel.jawn.AsyncParser\nimport org.typelevel.jawn.ParseException\n\nval p = ast.JParser.async(mode = AsyncParser.UnwrapArray)\n\ndef chunks: Stream[String] = ???\ndef sink(j: ast.JValue): Unit = ???\n\ndef loop(st: Stream[String]): Either[ParseException, Unit] =\n  st match {\n    case s #:: tail =&gt;\n      p.absorb(s) match {\n        case Right(js) =&gt;\n          js.foreach(sink)\n          loop(tail)\n        case Left(e) =&gt;\n          Left(e)\n      }\n    case _ =&gt;\n      p.finish().right.map(_.foreach(sink))\n  }\n\nloop(chunks)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">ast</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">AsyncParser</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">typelevel</span>.<span class=\"pl-en\">jawn</span>.<span class=\"pl-en\">ParseException</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span> <span class=\"pl-k\">=</span> ast.<span class=\"pl-en\">JParser</span>.async(mode <span class=\"pl-k\">=</span> <span class=\"pl-en\">AsyncParser</span>.<span class=\"pl-en\">UnwrapArray</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">chunks</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Stream</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">???</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">sink</span>(<span class=\"pl-v\">j</span>: ast.<span class=\"pl-en\">JValue</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">???</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">loop</span>(<span class=\"pl-v\">st</span>: <span class=\"pl-en\">Stream</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">ParseException</span>, <span class=\"pl-en\">Unit</span>] <span class=\"pl-k\">=</span>\n  st <span class=\"pl-k\">match</span> {\n    <span class=\"pl-k\">case</span> s #<span class=\"pl-k\">::</span> tail <span class=\"pl-k\">=&gt;</span>\n      p.absorb(s) <span class=\"pl-k\">match</span> {\n        <span class=\"pl-k\">case</span> <span class=\"pl-en\">Right</span>(js) <span class=\"pl-k\">=&gt;</span>\n          js.foreach(sink)\n          loop(tail)\n        <span class=\"pl-k\">case</span> <span class=\"pl-en\">Left</span>(e) <span class=\"pl-k\">=&gt;</span>\n          <span class=\"pl-en\">Left</span>(e)\n      }\n    <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span>\n      p.finish().right.map(_.foreach(sink))\n  }\n\nloop(chunks)</pre></div>\n<p dir=\"auto\">You can also call <code>Parser.async[J]</code> to use async parsing with an\narbitrary data type (provided you also have an implicit <code>Facade[J]</code>).</p>\n<h3 dir=\"auto\"><a id=\"user-content-supporting-external-asts-with-jawn\" class=\"anchor\" aria-hidden=\"true\" href=\"#supporting-external-asts-with-jawn\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Supporting external ASTs with Jawn</h3>\n<h4 dir=\"auto\"><a id=\"user-content-circe\" class=\"anchor\" aria-hidden=\"true\" href=\"#circe\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Circe</h4>\n<p dir=\"auto\"><a href=\"https://circe.github.io/circe/\" rel=\"nofollow\">circe</a> is supported via its <a href=\"https://circe.github.io/circe/parsing.html\" rel=\"nofollow\"><code>circe-parser</code></a> module.</p>\n<h4 dir=\"auto\"><a id=\"user-content-argonaut\" class=\"anchor\" aria-hidden=\"true\" href=\"#argonaut\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Argonaut</h4>\n<p dir=\"auto\"><a href=\"http://argonaut.io\" rel=\"nofollow\">argonaut</a> is supported via its <code>argonaut-jawn</code> module.</p>\n<h3 dir=\"auto\"><a id=\"user-content-do-it-yourself-parsing\" class=\"anchor\" aria-hidden=\"true\" href=\"#do-it-yourself-parsing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Do-It-Yourself Parsing</h3>\n<p dir=\"auto\">Jawn supports building any JSON AST you need via type classes. You\nbenefit from Jawn's fast parser while still using your favorite Scala\nJSON library. This mechanism is also what allows Jawn to provide\n\"support\" for other libraries' ASTs.</p>\n<p dir=\"auto\">To include Jawn's parser in your project, add the following\nsnippet to your <code>build.sbt</code> file:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"resolvers += Resolver.sonatypeRepo(&quot;releases&quot;)\n\nlibraryDependencies += &quot;org.typelevel&quot; %% &quot;jawn-parser&quot; % &quot;1.3.2&quot;\"><pre>resolvers <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Resolver</span>.sonatypeRepo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>releases<span class=\"pl-pds\">\"</span></span>)\n\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.typelevel<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jawn-parser<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.3.2<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">To support your AST of choice, you'll want to define a <code>Facade[J]</code>\ninstance, where the <code>J</code> type parameter represents the base of your JSON\nAST. For example, here's a facade that supports Spray:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import spray.json._\nobject Spray extends SimpleFacade[JsValue] {\n  def jnull() = JsNull\n  def jfalse() = JsFalse\n  def jtrue() = JsTrue\n  def jnum(s: String) = JsNumber(s)\n  def jint(s: String) = JsNumber(s)\n  def jstring(s: String) = JsString(s)\n  def jarray(vs: List[JsValue]) = JsArray(vs)\n  def jobject(vs: Map[String, JsValue]) = JsObject(vs)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">spray</span>.<span class=\"pl-en\">json</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Spray</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">SimpleFacade</span>[<span class=\"pl-en\">JsValue</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jnull</span>() <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsNull</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jfalse</span>() <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsFalse</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jtrue</span>() <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsTrue</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jnum</span>(<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsNumber</span>(s)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jint</span>(<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsNumber</span>(s)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jstring</span>(<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsString</span>(s)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jarray</span>(<span class=\"pl-v\">vs</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">JsValue</span>]) <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsArray</span>(vs)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jobject</span>(<span class=\"pl-v\">vs</span>: <span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">JsValue</span>]) <span class=\"pl-k\">=</span> <span class=\"pl-en\">JsObject</span>(vs)\n}</pre></div>\n<p dir=\"auto\">Most ASTs will be easy to define using the <code>SimpleFacade</code> or\n<code>MutableFacade</code> traits. However, if an ASTs object or array instances\ndo more than just wrap a Scala collection, it may be necessary to\nextend <code>Facade</code> directly.</p>\n<p dir=\"auto\">Extend <code>SupportParser[J]</code>, supplying your facade as the abstract\n<code>facade</code>, to get convenient methods for parsing various input types or\nan <code>AsyncParser</code>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-using-the-ast\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-ast\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using the AST</h3>\n<h4 dir=\"auto\"><a id=\"user-content-access\" class=\"anchor\" aria-hidden=\"true\" href=\"#access\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Access</h4>\n<p dir=\"auto\">For accessing atomic values, <code>JValue</code> supports two sets of\nmethods: <em>get-style</em> methods and <em>as-style</em> methods.</p>\n<p dir=\"auto\">The <em>get-style</em> methods return <code>Some(_)</code> when called on a compatible\nJSON value (e.g. strings can return <code>Some[String]</code>, numbers can return\n<code>Some[Double]</code>, etc.), and <code>None</code> otherwise:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"getBoolean → Option[Boolean]\ngetString → Option[String]\ngetLong → Option[Long]\ngetDouble → Option[Double]\ngetBigInt → Option[BigInt]\ngetBigDecimal → Option[BigDecimal]\"><pre>getBoolean <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Boolean</span>]\ngetString <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>]\ngetLong <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Long</span>]\ngetDouble <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Double</span>]\ngetBigInt <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">BigInt</span>]\ngetBigDecimal <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">BigDecimal</span>]</pre></div>\n<p dir=\"auto\">In constrast, the <em>as-style</em> methods will either return an unwrapped\nvalue (instead of returning <code>Some(_)</code>) or throw an exception (instead\nof returning <code>None</code>):</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"asBoolean → Boolean // or exception\nasString → String // or exception\nasLong → Long // or exception\nasDouble → Double // or exception\nasBigInt → BigInt // or exception\nasBigDecimal → BigDecimal // or exception\"><pre>asBoolean <span class=\"pl-k\">→</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> or exception</span>\nasString <span class=\"pl-k\">→</span> <span class=\"pl-en\">String</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> or exception</span>\nasLong <span class=\"pl-k\">→</span> <span class=\"pl-en\">Long</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> or exception</span>\nasDouble <span class=\"pl-k\">→</span> <span class=\"pl-en\">Double</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> or exception</span>\nasBigInt <span class=\"pl-k\">→</span> <span class=\"pl-en\">BigInt</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> or exception</span>\nasBigDecimal <span class=\"pl-k\">→</span> <span class=\"pl-en\">BigDecimal</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> or exception</span></pre></div>\n<p dir=\"auto\">To access elements of an array, call <code>get</code> with an <code>Int</code> position:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"get(i: Int) → JValue // returns JNull if index is illegal\"><pre>get(<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">JValue</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns JNull if index is illegal</span></pre></div>\n<p dir=\"auto\">To access elements of an object, call <code>get</code> with a <code>String</code> key:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"get(k: String) → JValue // returns JNull if key is not found\"><pre>get(<span class=\"pl-v\">k</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">JValue</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns JNull if key is not found</span></pre></div>\n<p dir=\"auto\">Both of these methods also return <code>JNull</code> if the value is not the\nappropraite container. This allows the caller to chain lookups without\nhaving to check that each level is correct:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val v: JValue = ???\n\n// returns JNull if a problem is encountered in structure of 'v'.\nval t: JValue = v.get(&quot;novels&quot;).get(0).get(&quot;title&quot;)\n\n// if 'v' had the right structure and 't' is JString(s), then Some(s).\n// otherwise, None.\nval titleOrNone: Option[String] = t.getString\n\n// equivalent to titleOrNone.getOrElse(throw ...)\nval titleOrDie: String = t.asString\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">v</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">???</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> returns JNull if a problem is encountered in structure of 'v'.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">t</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> v.get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>novels<span class=\"pl-pds\">\"</span></span>).get(<span class=\"pl-c1\">0</span>).get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> if 'v' had the right structure and 't' is JString(s), then Some(s).</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> otherwise, None.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">titleOrNone</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> t.getString\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to titleOrNone.getOrElse(throw ...)</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">titleOrDie</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> t.asString</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-updating\" class=\"anchor\" aria-hidden=\"true\" href=\"#updating\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Updating</h4>\n<p dir=\"auto\">The atomic values (<code>JNum</code>, <code>JBoolean</code>, <code>JNum</code>, and <code>JString</code>) are\nimmutable.</p>\n<p dir=\"auto\">Objects are fully-mutable and can have items added, removed, or\nchanged:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"set(k: String, v: JValue) → Unit\nremove(k: String) → Option[JValue]\"><pre>set(<span class=\"pl-v\">k</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">v</span>: <span class=\"pl-en\">JValue</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Unit</span>\nremove(<span class=\"pl-v\">k</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">JValue</span>]</pre></div>\n<p dir=\"auto\">If <code>set</code> is called on a non-object, an exception will be thrown.\nIf <code>remove</code> is called on a non-object, <code>None</code> will be returned.</p>\n<p dir=\"auto\">Arrays are semi-mutable. Their values can be changed, but their size\nis fixed:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"set(i: Int, v: JValue) → Unit\"><pre>set(<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">v</span>: <span class=\"pl-en\">JValue</span>) <span class=\"pl-k\">→</span> <span class=\"pl-en\">Unit</span></pre></div>\n<p dir=\"auto\">If <code>set</code> is called on a non-array, or called with an illegal index, an\nexception will be thrown.</p>\n<p dir=\"auto\">(A future version of Jawn may provide an array whose length can be\nchanged.)</p>\n<h3 dir=\"auto\"><a id=\"user-content-profiling\" class=\"anchor\" aria-hidden=\"true\" href=\"#profiling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Profiling</h3>\n<p dir=\"auto\">Jawn uses <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\" rel=\"nofollow\">JMH</a>\nalong with the <a href=\"https://github.com/ktoso/sbt-jmh\">sbt-jmh</a> plugin.</p>\n<h4 dir=\"auto\"><a id=\"user-content-running-benchmarks\" class=\"anchor\" aria-hidden=\"true\" href=\"#running-benchmarks\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Running Benchmarks</h4>\n<p dir=\"auto\">The benchmarks are located in the <code>benchmark</code> project. You can run the\nbenchmarks by typing <code>benchmark/jmh:run</code> from SBT. There are many\nsupported arguments, so here are a few examples:</p>\n<p dir=\"auto\">Run all benchmarks, with 10 warmups, 10 iterations, using 3 threads:</p>\n<p dir=\"auto\"><code>benchmark/jmh:run -wi 10 -i 10 -f1 -t3</code></p>\n<p dir=\"auto\">Run just the <code>CountriesBench</code> test (5 warmups, 5 iterations, 1 thread):</p>\n<p dir=\"auto\"><code>benchmark/jmh:run -wi 5 -i 5 -f1 -t1 .*CountriesBench</code></p>\n<h4 dir=\"auto\"><a id=\"user-content-benchmark-issues\" class=\"anchor\" aria-hidden=\"true\" href=\"#benchmark-issues\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Benchmark Issues</h4>\n<p dir=\"auto\">Currently, the benchmarks are a bit fiddily. The most obvious symptom\nis that if you compile the benchmarks, make changes, and compile\nagain, you may see errors like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[error] (benchmark/jmh:generateJavaSources) java.lang.NoClassDefFoundError: jawn/benchmark/Bla25Bench\"><pre><code>[error] (benchmark/jmh:generateJavaSources) java.lang.NoClassDefFoundError: jawn/benchmark/Bla25Bench\n</code></pre></div>\n<p dir=\"auto\">The fix here is to run <code>benchmark/clean</code> and try again.</p>\n<p dir=\"auto\">You will also see intermittent problems like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[error] (benchmark/jmh:compile) java.lang.reflect.MalformedParameterizedTypeException\"><pre><code>[error] (benchmark/jmh:compile) java.lang.reflect.MalformedParameterizedTypeException\n</code></pre></div>\n<p dir=\"auto\">The solution here is easier (though frustrating): just try it\nagain. If you continue to have problems, consider cleaning the project\nand trying again.</p>\n<p dir=\"auto\">(In the future I hope to make the benchmarking here a bit more\nresilient. Suggestions and pull requests gladly welcome!)</p>\n<h4 dir=\"auto\"><a id=\"user-content-files\" class=\"anchor\" aria-hidden=\"true\" href=\"#files\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Files</h4>\n<p dir=\"auto\">The benchmarks use files located in <code>benchmark/src/main/resources</code>. If\nyou want to test your own files (e.g. <code>mydata.json</code>), you would:</p>\n<ul dir=\"auto\">\n<li>Copy the file to <code>benchmark/src/main/resources/mydata.json</code>.</li>\n<li>Add the following code to <code>JmhBenchmarks.scala</code>:</li>\n</ul>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyDataBench extends JmhBenchmarks(&quot;mydata.json&quot;)\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyDataBench</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JmhBenchmarks</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mydata.json<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">Jawn has been tested with much larger files, e.g. 100M - 1G, but these\nare obviously too large to ship with the project.</p>\n<p dir=\"auto\">With large files, it's usually easier to comment out most of the\nbenchmarking methods and only test one (or a few) methods. Some of the\nslower JSON parsers get <em>much</em> slower for large files.</p>\n<h4 dir=\"auto\"><a id=\"user-content-interpreting-the-results\" class=\"anchor\" aria-hidden=\"true\" href=\"#interpreting-the-results\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Interpreting the results</h4>\n<p dir=\"auto\">Remember that the benchmarking results you see will vary based on:</p>\n<ul dir=\"auto\">\n<li>Hardware</li>\n<li>Java version</li>\n<li>JSON file size</li>\n<li>JSON file structure</li>\n<li>JSON data values</li>\n</ul>\n<p dir=\"auto\">I have tried to use each library in the most idiomatic and fastest way\npossible (to parse the JSON into a simple AST). Pull requests to\nupdate library versions and improve usage are very welcome.</p>\n<h3 dir=\"auto\"><a id=\"user-content-future-work\" class=\"anchor\" aria-hidden=\"true\" href=\"#future-work\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Future Work</h3>\n<p dir=\"auto\">More support libraries could be added.</p>\n<p dir=\"auto\">It's likely that some of Jawn's I/O could be optimized a bit more, and\nalso made more configurable. The heuristics around all-at-once loading\nversus input chunking could definitely be improved.</p>\n<p dir=\"auto\">In cases where the user doesn't need fast lookups into JSON objects,\nan even lighter AST could be used to improve parsing and rendering\nspeeds.</p>\n<p dir=\"auto\">Strategies to cache/intern field names of objects could pay big\ndividends in some cases (this might require AST changes).</p>\n<p dir=\"auto\">If you have ideas for any of these (or other ideas) please feel free\nto open an issue or pull request so we can talk about it.</p>\n<h3 dir=\"auto\"><a id=\"user-content-disclaimers\" class=\"anchor\" aria-hidden=\"true\" href=\"#disclaimers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Disclaimers</h3>\n<p dir=\"auto\">Jawn only supports UTF-8 when parsing bytes. This might change in the\nfuture, but for now that's the target case. You can always decode your\ndata to a string, and handle the character set decoding using Java's\nstandard tools.</p>\n<p dir=\"auto\">Jawn's AST is intended to be very lightweight and simple. It supports\nsimple access, and limited mutable updates. It intentionally lacks the\npower and sophistication of many other JSON libraries.</p>\n<h3 dir=\"auto\"><a id=\"user-content-community\" class=\"anchor\" aria-hidden=\"true\" href=\"#community\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Community</h3>\n<p dir=\"auto\">People are expected to follow the\n<a href=\"https://scala-lang.org/conduct/\" rel=\"nofollow\">Scala Code of Conduct</a> when\ndiscussing Jawn on GitHub or other venues.</p>\n<p dir=\"auto\">Jawn's current maintainers are:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/rossabaker\">Ross A. Baker</a></li>\n<li><a href=\"https://github.com/travisbrown\">Travis Brown</a></li>\n<li><a href=\"https://github.com/non\">Erik Osheim</a></li>\n<li><a href=\"https://github.com/dwijnand\">Dale Wijnand</a></li>\n<li><a href=\"https://github.com/eed3si9n\">Eugene Yokota</a></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-copyright-and-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#copyright-and-license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Copyright and License</h3>\n<p dir=\"auto\">All code is available to you under the MIT license, available at\n<a href=\"http://opensource.org/licenses/mit-license.php\" rel=\"nofollow\">http://opensource.org/licenses/mit-license.php</a>.</p>\n<p dir=\"auto\">Copyright Erik Osheim, 2012-2022.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "non",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/218045?v=4",
        "url" : "https://api.github.com/users/non",
        "contributions" : 300
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 207
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://api.github.com/users/larsrh",
        "contributions" : 125
      },
      {
        "login" : "travisbrown",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/316049?v=4",
        "url" : "https://api.github.com/users/travisbrown",
        "contributions" : 116
      },
      {
        "login" : "rossabaker",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142698?v=4",
        "url" : "https://api.github.com/users/rossabaker",
        "contributions" : 107
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://api.github.com/users/xuwei-k",
        "contributions" : 20
      },
      {
        "login" : "eed3si9n",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/184683?v=4",
        "url" : "https://api.github.com/users/eed3si9n",
        "contributions" : 16
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://api.github.com/users/armanbilge",
        "contributions" : 15
      },
      {
        "login" : "erik-stripe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16106269?v=4",
        "url" : "https://api.github.com/users/erik-stripe",
        "contributions" : 12
      },
      {
        "login" : "travisbrown-stripe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/28275810?v=4",
        "url" : "https://api.github.com/users/travisbrown-stripe",
        "contributions" : 6
      },
      {
        "login" : "dwijnand",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/344610?v=4",
        "url" : "https://api.github.com/users/dwijnand",
        "contributions" : 3
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://api.github.com/users/lolgab",
        "contributions" : 3
      },
      {
        "login" : "tapmania",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/20778754?v=4",
        "url" : "https://api.github.com/users/tapmania",
        "contributions" : 2
      },
      {
        "login" : "dsmatter",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/854902?v=4",
        "url" : "https://api.github.com/users/dsmatter",
        "contributions" : 2
      },
      {
        "login" : "derekjw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7174?v=4",
        "url" : "https://api.github.com/users/derekjw",
        "contributions" : 2
      },
      {
        "login" : "Philippus",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1923596?v=4",
        "url" : "https://api.github.com/users/Philippus",
        "contributions" : 2
      },
      {
        "login" : "vasilmkd",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7115459?v=4",
        "url" : "https://api.github.com/users/vasilmkd",
        "contributions" : 2
      },
      {
        "login" : "yanns",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/51669?v=4",
        "url" : "https://api.github.com/users/yanns",
        "contributions" : 2
      },
      {
        "login" : "nrktkt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3280689?v=4",
        "url" : "https://api.github.com/users/nrktkt",
        "contributions" : 2
      },
      {
        "login" : "asakaev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3930435?v=4",
        "url" : "https://api.github.com/users/asakaev",
        "contributions" : 1
      },
      {
        "login" : "ceedubs",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/977929?v=4",
        "url" : "https://api.github.com/users/ceedubs",
        "contributions" : 1
      },
      {
        "login" : "danicheg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19841757?v=4",
        "url" : "https://api.github.com/users/danicheg",
        "contributions" : 1
      },
      {
        "login" : "drbild",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1329694?v=4",
        "url" : "https://api.github.com/users/drbild",
        "contributions" : 1
      },
      {
        "login" : "htmldoug",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/663139?v=4",
        "url" : "https://api.github.com/users/htmldoug",
        "contributions" : 1
      },
      {
        "login" : "eparejatobes",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/204693?v=4",
        "url" : "https://api.github.com/users/eparejatobes",
        "contributions" : 1
      },
      {
        "login" : "joroKr21",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2218841?v=4",
        "url" : "https://api.github.com/users/joroKr21",
        "contributions" : 1
      },
      {
        "login" : "jedesah",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1780116?v=4",
        "url" : "https://api.github.com/users/jedesah",
        "contributions" : 1
      },
      {
        "login" : "jeffreyolchovy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/202277?v=4",
        "url" : "https://api.github.com/users/jeffreyolchovy",
        "contributions" : 1
      },
      {
        "login" : "jlopez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/64746?v=4",
        "url" : "https://api.github.com/users/jlopez",
        "contributions" : 1
      },
      {
        "login" : "julienrf",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/332812?v=4",
        "url" : "https://api.github.com/users/julienrf",
        "contributions" : 1
      },
      {
        "login" : "julien-truffaut",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1859417?v=4",
        "url" : "https://api.github.com/users/julien-truffaut",
        "contributions" : 1
      },
      {
        "login" : "seratch",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19658?v=4",
        "url" : "https://api.github.com/users/seratch",
        "contributions" : 1
      },
      {
        "login" : "lihaoyi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/934140?v=4",
        "url" : "https://api.github.com/users/lihaoyi",
        "contributions" : 1
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://api.github.com/users/SethTisue",
        "contributions" : 1
      },
      {
        "login" : "softprops",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2242?v=4",
        "url" : "https://api.github.com/users/softprops",
        "contributions" : 1
      },
      {
        "login" : "vincenzobaz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6325220?v=4",
        "url" : "https://api.github.com/users/vincenzobaz",
        "contributions" : 1
      },
      {
        "login" : "lukaszwawrzyk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10235198?v=4",
        "url" : "https://api.github.com/users/lukaszwawrzyk",
        "contributions" : 1
      }
    ],
    "commits" : 962,
    "topics" : [
      "json",
      "scala"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 255,
        "title" : "use the faster ryu code for converting double to string",
        "url" : "https://github.com/typelevel/jawn/issues/255"
      },
      {
        "number" : 107,
        "title" : "Allowing comments",
        "url" : "https://github.com/typelevel/jawn/issues/107"
      },
      {
        "number" : 95,
        "title" : "How to do stream parsing?",
        "url" : "https://github.com/typelevel/jawn/issues/95"
      },
      {
        "number" : 89,
        "title" : "Integration with scala-json AST",
        "url" : "https://github.com/typelevel/jawn/issues/89"
      },
      {
        "number" : 72,
        "title" : "Parser.parseNum() no support `Long` type number?",
        "url" : "https://github.com/typelevel/jawn/issues/72"
      },
      {
        "number" : 71,
        "title" : "Add JParser examples to the README",
        "url" : "https://github.com/typelevel/jawn/issues/71"
      },
      {
        "number" : 50,
        "title" : "How does one convert JSON object with list into something iterable?",
        "url" : "https://github.com/typelevel/jawn/issues/50"
      },
      {
        "number" : 44,
        "title" : "Use scala-offheap for performance",
        "url" : "https://github.com/typelevel/jawn/issues/44"
      },
      {
        "number" : 40,
        "title" : "Steal parsing strategies from sirthias",
        "url" : "https://github.com/typelevel/jawn/issues/40"
      },
      {
        "number" : 39,
        "title" : "Speed up ByteBuffer parsing",
        "url" : "https://github.com/typelevel/jawn/issues/39"
      },
      {
        "number" : 32,
        "title" : "Make JObject and JArray immutable",
        "url" : "https://github.com/typelevel/jawn/issues/32"
      },
      {
        "number" : 26,
        "title" : "Faster whitespace detection",
        "url" : "https://github.com/typelevel/jawn/issues/26"
      },
      {
        "number" : 6,
        "title" : "Facade for serialization of supported ASTs?",
        "url" : "https://github.com/typelevel/jawn/issues/6"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "jawn-parser",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "json",
    "beginnerIssuesLabel" : null
  }
}