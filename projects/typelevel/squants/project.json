{
  "organization" : "typelevel",
  "repository" : "squants",
  "creationDate" : 1396759363000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660818062012
    }
  },
  "githubInfo" : {
    "homepage" : "https://www.squants.com",
    "description" : "The Scala API for Quantities, Units of Measure and Dimensional Analysis",
    "logo" : "https://avatars.githubusercontent.com/u/3731824?v=4",
    "stars" : 862,
    "forks" : 114,
    "watchers" : 21,
    "issues" : 52,
    "creationDate" : 1394123312000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-squants\" class=\"anchor\" aria-hidden=\"true\" href=\"#squants\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Squants</h1>\n<p dir=\"auto\"><strong>The Scala API for Quantities, Units of Measure and Dimensional Analysis</strong></p>\n<p dir=\"auto\">Squants is a framework of data types and a domain specific language (DSL) for representing Quantities,\ntheir Units of Measure, and their Dimensional relationships.\nThe API supports typesafe dimensional analysis, improved domain models and more.\nAll types are immutable and thread-safe.</p>\n<p dir=\"auto\"><a href=\"http:/www.squants.com/\">Website</a>\n|\n<a href=\"https://github.com/typelevel/squants\">GitHub</a>\n|\n<a href=\"https://github.com/typelevel/squants/wiki\">Wiki</a>\n|\n<a href=\"https://gitter.im/typelevel/squants?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/8787cefdf8fcf4dd491efc5dea9dda68e35bf13a79544bb5fbb498b27f8f78fc/68747470733a2f2f6261646765732e6769747465722e696d2f747970656c6576656c2f737175616e74732e737667\" alt=\"Join the chat at https://gitter.im/typelevel/squants\" data-canonical-src=\"https://badges.gitter.im/typelevel/squants.svg\" style=\"max-width: 100%;\"></a>\n|\n<a href=\"https://static.javadoc.io/org.typelevel/squants_2.13/1.6.0/squants/index.html\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/8d517de3adc8255ea1f1d873d9f1241d6f89037040ebfca2563233b76ae1493d/68747470733a2f2f7777772e6a617661646f632e696f2f62616467652f6f72672e747970656c6576656c2f737175616e74735f322e31332e7376673f6c6162656c3d7363616c61646f63\" alt=\"Scaladocs\" data-canonical-src=\"https://www.javadoc.io/badge/org.typelevel/squants_2.13.svg?label=scaladoc\" style=\"max-width: 100%;\"></a>\n|\n<a href=\"https://travis-ci.org/typelevel/squants\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/faf6e9e7392d7a62c4fdf62d300e93c9703a89e045f1394f419de02d10d49521/68747470733a2f2f7472617669732d63692e6f72672f747970656c6576656c2f737175616e74732e706e673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/typelevel/squants.png?branch=master\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-current-versions\" class=\"anchor\" aria-hidden=\"true\" href=\"#current-versions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Current Versions</h3>\n<p dir=\"auto\">Current Release: <strong>1.6.0</strong>\n(<a href=\"https://oss.sonatype.org/service/local/repositories/releases/archive/org/typelevel/squants_2.13/1.6.0/squants_2.13-1.6.0-javadoc.jar/!/index.html#squants.package\" rel=\"nofollow\">API Docs</a>)</p>\n<p dir=\"auto\">Development Build: <strong>1.7.0-SNAPSHOT</strong>\n(<a href=\"https://oss.sonatype.org/service/local/repositories/snapshots/archive/org/typelevel/squants_2.13/1.6.0-SNAPSHOT/squants_2.13-1.7.0-SNAPSHOT-javadoc.jar/!/index.html#squants.package\" rel=\"nofollow\">API Docs</a>)</p>\n<p dir=\"auto\"><a href=\"https://github.com/typelevel/squants/wiki/Release-History\">Release History</a></p>\n<p dir=\"auto\">Build services provided by <a href=\"https://travis-ci.com/\" rel=\"nofollow\">Travis CI</a></p>\n<p dir=\"auto\">NOTE - This README reflects the feature set in the branch it can be found.\nFor more information on feature availability of a specific version see the Release History or the README for a that version</p>\n<h2 dir=\"auto\"><a id=\"user-content-installation\" class=\"anchor\" aria-hidden=\"true\" href=\"#installation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Installation</h2>\n<p dir=\"auto\">Repository hosting for Squants is provided by <a href=\"https://oss.sonatype.org/\" rel=\"nofollow\">Sonatype</a>.\nTo use Squants in your SBT project add the following dependency to your build.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;org.typelevel&quot;  %% &quot;squants&quot;  % &quot;1.6.0&quot;\"><pre class=\"notranslate\"><code>\"org.typelevel\"  %% \"squants\"  % \"1.6.0\"\n</code></pre></div>\n<p dir=\"auto\">or</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;org.typelevel&quot;  %% &quot;squants&quot;  % &quot;1.7.0-SNAPSHOT&quot;\"><pre class=\"notranslate\"><code>\"org.typelevel\"  %% \"squants\"  % \"1.7.0-SNAPSHOT\"\n</code></pre></div>\n<p dir=\"auto\">To use Squants in your Maven project add the following dependency</p>\n<div class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;dependency&gt;\n    &lt;groupId&gt;org.typelevel&lt;/groupId&gt;\n    &lt;artifactId&gt;squants_2.11&lt;/artifactId&gt;\n    &lt;version&gt;1.6.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;org.typelevel&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;squants_2.11&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;1.6.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\">Beginning with Squants 0.4.x series, both Scala 2.10 and 2.11 builds are available.\nBeginning with Squants 1.x series, Scala 2.11, 2.12 and 2.13 builds are available.\nScala.js is supported on version 0.6.31 and 1.0.0-RC1</p>\n<p dir=\"auto\">To use Squants interactively in the Scala REPL, clone the git repo and run <code>sbt squantsJVM/console</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"git clone https://github.com/typelevel/squants\ncd squants\nsbt squantsJVM/console\"><pre class=\"notranslate\"><code>git clone https://github.com/typelevel/squants\ncd squants\nsbt squantsJVM/console\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-third-party-integrations\" class=\"anchor\" aria-hidden=\"true\" href=\"#third-party-integrations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Third-party integrations</h2>\n<p dir=\"auto\">This is an incomplete list of third-party libraries that support squants:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/melrief/pureconfig/\">PureConfig</a></li>\n<li><a href=\"https://cir.is/\" rel=\"nofollow\">Ciris</a></li>\n</ul>\n<p dir=\"auto\">If your library isn't listed here, please open a PR to add it!</p>\n<h2 dir=\"auto\"><a id=\"user-content-type-safe-dimensional-analysis\" class=\"anchor\" aria-hidden=\"true\" href=\"#type-safe-dimensional-analysis\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Type Safe Dimensional Analysis</h2>\n<p dir=\"auto\"><em>The Trouble with Doubles</em></p>\n<p dir=\"auto\">When building programs that perform dimensional analysis, developers are quick to declare\nquantities using a basic numeric type, usually Double.  While this may be satisfactory in some situations,\nit can often lead to semantic and other logic issues.</p>\n<p dir=\"auto\">For example, when using a Double to describe quantities of Energy (kWh) and Power (kW), it is possible\nto compile a program that adds these two values together.  This is not appropriate as kW and kWh\nmeasure quantities of two different dimensions.  The unit kWh is used to measure an amount of Energy used\nor produced.  The unit kW is used to measure Power/Load, the rate at which Energy is being used\nor produced, that is, Power is the first time derivative of Energy.</p>\n<p dir=\"auto\"><em>Power = Energy / Time</em></p>\n<p dir=\"auto\">Consider the following code:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val loadKw = 1.2\nloadKw: Double = 1.2\n\nscala&gt; val energyMwh = 24.2\nenergyMwh: Double = 24.2\n\nscala&gt; val sumKw = loadKw + energyMwh\nsumKw: Double = 25.4\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadKw</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span>\nloadKw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyMwh</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">24.2</span>\nenergyMwh<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">24.2</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sumKw</span> <span class=\"pl-k\">=</span> loadKw <span class=\"pl-k\">+</span> energyMwh\nsumKw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">25.4</span></pre></div>\n<p dir=\"auto\">This example not only adds quantities of different dimensions (Power vs Energy),\nit also fails to convert the scales implied in the val names (Mega vs Kilo).\nBecause this code compiles, detection of these errors is pushed further into the development cycle.</p>\n<h3 dir=\"auto\"><a id=\"user-content-dimensional-type-safety\" class=\"anchor\" aria-hidden=\"true\" href=\"#dimensional-type-safety\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dimensional Type Safety</h3>\n<p dir=\"auto\"><em>Only quantities with the same dimensions may be compared, equated, added, or subtracted.</em></p>\n<p dir=\"auto\">Squants helps prevent errors like these by type checking operations at compile time and\nautomatically applying scale and type conversions at run-time.  For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.energy.{Kilowatts, Megawatts, Power}\nimport squants.energy.{Kilowatts, Megawatts, Power}\n\nscala&gt; val load1: Power = Kilowatts(12)\nload1: squants.energy.Power = 12.0 kW\n\nscala&gt; val load2: Power = Megawatts(0.023)\nload2: squants.energy.Power = 0.023 MW\n\nscala&gt; val sum = load1 + load2\nsum: squants.energy.Power = 35.0 kW\n\nscala&gt; sum == Kilowatts(35)\nres0: Boolean = true\n\nscala&gt; sum == Megawatts(0.035) // comparisons automatically convert scale\nres1: Boolean = true\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Megawatts</span>, <span class=\"pl-en\">Power</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Megawatts</span>, <span class=\"pl-en\">Power</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">12</span>)\nload1<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">12.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Megawatts</span>(<span class=\"pl-c1\">0.023</span>)\nload2<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.023</span> <span class=\"pl-en\">MW</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sum</span> <span class=\"pl-k\">=</span> load1 <span class=\"pl-k\">+</span> load2\nsum<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">35.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> sum <span class=\"pl-k\">==</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">35</span>)\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n\nscala<span class=\"pl-k\">&gt;</span> sum <span class=\"pl-k\">==</span> <span class=\"pl-en\">Megawatts</span>(<span class=\"pl-c1\">0.035</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> comparisons automatically convert scale</span>\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span></pre></div>\n<p dir=\"auto\">The above sample works because Kilowatts and Megawatts are both units of Power.  Only the scale is\ndifferent and the library applies an appropriate conversion.  Also, notice that keeping track of\nthe scale within the value name is no longer needed:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.energy.{Energy, Power, Kilowatts, KilowattHours}\nimport squants.energy.{Energy, Power, Kilowatts, KilowattHours}\n\nscala&gt; val load: Power = Kilowatts(1.2)\nload: squants.energy.Power = 1.2 kW\n\nscala&gt; val energy: Energy = KilowattHours(23.0)\nenergy: squants.energy.Energy = 23.0 kWh\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Energy</span>, <span class=\"pl-en\">Power</span>, <span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">KilowattHours</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Energy</span>, <span class=\"pl-en\">Power</span>, <span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">KilowattHours</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1.2</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energy</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">KilowattHours</span>(<span class=\"pl-c1\">23.0</span>)\nenergy<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">23.0</span> kWh</pre></div>\n<p dir=\"auto\">Invalid operations, like adding power and energy, no longer compile:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val sum = load + energy\n&lt;console&gt;:16: error: type mismatch;\n found   : squants.energy.Energy\n required: squants.energy.Power\n       val sum = load + energy\n                        ^\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sum</span> <span class=\"pl-k\">=</span> load <span class=\"pl-k\">+</span> energy\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">16</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-k\">type</span> <span class=\"pl-en\">mismatch</span>;\n <span class=\"pl-v\">found</span>   : squants.energy.<span class=\"pl-en\">Energy</span>\n <span class=\"pl-v\">required</span>: squants.energy.<span class=\"pl-en\">Power</span>\n       <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sum</span> <span class=\"pl-k\">=</span> load <span class=\"pl-k\">+</span> energy\n                        ^</pre></div>\n<p dir=\"auto\">By using stronger types, we catch the error earlier in the development cycle, preventing the error made when using Double in the example above.</p>\n<h3 dir=\"auto\"><a id=\"user-content-dimensionally-correct-type-conversions\" class=\"anchor\" aria-hidden=\"true\" href=\"#dimensionally-correct-type-conversions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dimensionally Correct Type Conversions</h3>\n<p dir=\"auto\"><em>One may take quantities with different dimensions, and multiply or divide them.</em></p>\n<p dir=\"auto\">Dimensionally correct type conversions are a key feature of Squants.\nConversions are implemented by defining relationships between Quantity types using the <code>*</code> and <code>/</code> operators.</p>\n<p dir=\"auto\">Code samples in this section assume these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.energy.{Kilowatts, Power}\nimport squants.time.{Hours, Days}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Power</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.{<span class=\"pl-en\">Hours</span>, <span class=\"pl-en\">Days</span>}</pre></div>\n<p dir=\"auto\">The following code demonstrates creating ratio between two quantities of the same dimension,\nresulting in a dimensionless value:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val ratio = Days(1) / Hours(3)\nratio: Double = 8.0\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ratio</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Days</span>(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">/</span> <span class=\"pl-en\">Hours</span>(<span class=\"pl-c1\">3</span>)\nratio<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">8.0</span></pre></div>\n<p dir=\"auto\">This code demonstrates use of the <code>Power.*</code> method that takes a <code>Time</code> and returns an <code>Energy</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load = Kilowatts(1.2)\nload: squants.energy.Power = 1.2 kW\n\nscala&gt; val time = Hours(2)\ntime: squants.time.Time = 2.0 h\n\nscala&gt; val energyUsed = load * time\nenergyUsed: squants.energy.Energy = 2400.0 Wh\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1.2</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">time</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Hours</span>(<span class=\"pl-c1\">2</span>)\ntime<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.0</span> h\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyUsed</span> <span class=\"pl-k\">=</span> load <span class=\"pl-k\">*</span> time\nenergyUsed<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2400.0</span> <span class=\"pl-en\">Wh</span></pre></div>\n<p dir=\"auto\">This code demonstrates use of the <code>Energy./</code> method that takes a <code>Time</code> and returns a <code>Power</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val aveLoad: Power = energyUsed / time\naveLoad: squants.energy.Power = 1200.0 W\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">aveLoad</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> energyUsed <span class=\"pl-k\">/</span> time\naveLoad<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> <span class=\"pl-en\">W</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-unit-conversions\" class=\"anchor\" aria-hidden=\"true\" href=\"#unit-conversions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Unit Conversions</h3>\n<p dir=\"auto\">Code samples in this section assume these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.language.postfixOps\nimport squants.energy.{Gigawatts, Kilowatts, Power, Megawatts}\nimport squants.mass.MassConversions._\nimport squants.mass.{Kilograms, Pounds}\nimport squants.thermal.TemperatureConversions._\nimport squants.thermal.Fahrenheit\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">language</span>.<span class=\"pl-en\">postfixOps</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Gigawatts</span>, <span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Power</span>, <span class=\"pl-en\">Megawatts</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.<span class=\"pl-en\">MassConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.{<span class=\"pl-en\">Kilograms</span>, <span class=\"pl-en\">Pounds</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">thermal</span>.<span class=\"pl-en\">TemperatureConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">thermal</span>.<span class=\"pl-en\">Fahrenheit</span></pre></div>\n<p dir=\"auto\">Quantity values are based in the units used to create them.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val loadA: Power = Kilowatts(1200)\nloadA: squants.energy.Power = 1200.0 kW\n\nscala&gt; val loadB: Power = Megawatts(1200)\nloadB: squants.energy.Power = 1200.0 MW\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadA</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1200</span>)\nloadA<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadB</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Megawatts</span>(<span class=\"pl-c1\">1200</span>)\nloadB<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> <span class=\"pl-en\">MW</span></pre></div>\n<p dir=\"auto\">Since Squants properly equates values of a like dimension, regardless of the unit,\nthere is usually no reason to explicitly convert from one to the other.\nThis is especially true if the user code is primarily performing dimensional analysis.</p>\n<p dir=\"auto\">However, there are times when you may need to set a Quantity value to a specific unit (eg, for proper JSON encoding).</p>\n<p dir=\"auto\">When necessary, a quantity can be converted to another unit using the <code>in</code> method.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val loadA = Kilowatts(1200)\nloadA: squants.energy.Power = 1200.0 kW\n\nscala&gt; val loadB = loadA in Megawatts\nloadB: squants.energy.Power = 1.2 MW\n\nscala&gt; val loadC = loadA in Gigawatts\nloadC: squants.energy.Power = 0.0012 GW\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadA</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1200</span>)\nloadA<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadB</span> <span class=\"pl-k\">=</span> loadA in <span class=\"pl-en\">Megawatts</span>\nloadB<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span> <span class=\"pl-en\">MW</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadC</span> <span class=\"pl-k\">=</span> loadA in <span class=\"pl-en\">Gigawatts</span>\nloadC<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.0012</span> <span class=\"pl-en\">GW</span></pre></div>\n<p dir=\"auto\">Sometimes you need to get the numeric value of the quantity in a specific unit\n(eg, for submission to an external service that requires a numeric in a specified unit\nor to perform analysis beyond Squant's domain)</p>\n<p dir=\"auto\">When necessary, the value can be extracted in the desired unit with the <code>to</code> method.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load: Power = Kilowatts(1200)\nload: squants.energy.Power = 1200.0 kW\n\nscala&gt; val kw: Double = load to Kilowatts\nkw: Double = 1200.0\n\nscala&gt; val mw: Double = load to Megawatts\nmw: Double = 1.2\n\nscala&gt; val gw: Double = load to Gigawatts\ngw: Double = 0.0012\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1200</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">kw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> load to <span class=\"pl-en\">Kilowatts</span>\nkw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">mw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> load to <span class=\"pl-en\">Megawatts</span>\nmw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">gw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> load to <span class=\"pl-en\">Gigawatts</span>\ngw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.0012</span></pre></div>\n<p dir=\"auto\">Most types include methods with convenient aliases for the <code>to</code> methods.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val kw: Double = load toKilowatts\nkw: Double = 1200.0\n\nscala&gt; val mw: Double = load toMegawatts\nmw: Double = 1.2\n\nscala&gt; val gw: Double = load toGigawatts\ngw: Double = 0.0012\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">kw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> load toKilowatts\nkw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">mw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> load toMegawatts\nmw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">gw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> load toGigawatts\ngw<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.0012</span></pre></div>\n<p dir=\"auto\">NOTE - It is important to use the <code>to</code> method for extracting the numeric value,\nas this ensures you will be getting the numeric value for the desired unit.\n<code>Quantity.value</code> should not be accessed directly.\nTo prevent improper usage, direct access to the <code>Quantity.value</code> field may be deprecated in a future version.</p>\n<p dir=\"auto\">Creating strings formatted in the desired unit:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val kw: String = load toString Kilowatts\nkw: String = 1200.0 kW\n\nscala&gt; val mw: String = load toString Megawatts\nmw: String = 1.2 MW\n\nscala&gt; val gw: String = load toString Gigawatts\ngw: String = 0.0012 GW\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">kw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> load toString <span class=\"pl-en\">Kilowatts</span>\nkw<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">mw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> load toString <span class=\"pl-en\">Megawatts</span>\nmw<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2</span> <span class=\"pl-en\">MW</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">gw</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> load toString <span class=\"pl-en\">Gigawatts</span>\ngw<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.0012</span> <span class=\"pl-en\">GW</span></pre></div>\n<p dir=\"auto\">Creating <code>Tuple2[Double, String]</code> that includes a numeric value and unit symbol:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load: Power = Kilowatts(1200)\nload: squants.energy.Power = 1200.0 kW\n\nscala&gt; val kw = load toTuple\nkw: (Double, String) = (1200.0,kW)\n\nscala&gt; val mw = load toTuple Megawatts\nmw: (Double, String) = (1.2,MW)\n\nscala&gt; val gw = load toTuple Gigawatts\ngw: (Double, String) = (0.0012,GW)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1200</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">kw</span> <span class=\"pl-k\">=</span> load toTuple\nkw<span class=\"pl-k\">:</span> (<span class=\"pl-en\">Double</span>, <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">1200.0</span>,kW)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">mw</span> <span class=\"pl-k\">=</span> load toTuple <span class=\"pl-en\">Megawatts</span>\nmw<span class=\"pl-k\">:</span> (<span class=\"pl-en\">Double</span>, <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">1.2</span>,<span class=\"pl-en\">MW</span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">gw</span> <span class=\"pl-k\">=</span> load toTuple <span class=\"pl-en\">Gigawatts</span>\ngw<span class=\"pl-k\">:</span> (<span class=\"pl-en\">Double</span>, <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">0.0012</span>,<span class=\"pl-en\">GW</span>)</pre></div>\n<p dir=\"auto\">This can be useful for passing properly scaled quantities to other processes\nthat do not use Squants, or require use of more basic types (Double, String)</p>\n<p dir=\"auto\">Simple console based conversions (using DSL described below)</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; 1.kilograms to Pounds\nres0: Double = 2.2046226218487757\n\nscala&gt; kilogram / pound\nres1: Double = 2.2046226218487757\n\nscala&gt; 2.1.pounds to Kilograms\nres2: Double = 0.952543977\n\nscala&gt; 2.1.pounds / kilogram\nres3: Double = 0.9525439770000002\n\nscala&gt; 100.C to Fahrenheit\nres4: Double = 212.0\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>.kilograms to <span class=\"pl-en\">Pounds</span>\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.2046226218487757</span>\n\nscala<span class=\"pl-k\">&gt;</span> kilogram <span class=\"pl-k\">/</span> pound\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.2046226218487757</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">2.1</span>.pounds to <span class=\"pl-en\">Kilograms</span>\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.952543977</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">2.1</span>.pounds <span class=\"pl-k\">/</span> kilogram\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.9525439770000002</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">100</span>.<span class=\"pl-en\">C</span> to <span class=\"pl-en\">Fahrenheit</span>\nres4<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">212.0</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-mapping-over-quantity-values\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapping-over-quantity-values\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mapping over Quantity values</h3>\n<p dir=\"auto\">Apply a <code>Double =&gt; Double</code> operation to the underlying value of a quantity, while preserving its type and unit.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.energy.Kilowatts\nimport squants.energy.Kilowatts\n\nscala&gt; val load = Kilowatts(2.0)\nload: squants.energy.Power = 2.0 kW\n\nscala&gt; val newLoad = load.map(v =&gt; v * 2 + 10)\nnewLoad: squants.energy.Power = 14.0 kW\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">Kilowatts</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">Kilowatts</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">2.0</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">newLoad</span> <span class=\"pl-k\">=</span> load.map(v <span class=\"pl-k\">=&gt;</span> v <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">10</span>)\nnewLoad<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">14.0</span> kW</pre></div>\n<p dir=\"auto\">The <code>q.map(f)</code> method effectively expands to <code>q.unit(f(q.to(q.unit))</code></p>\n<p dir=\"auto\">NOTE - For Money objects, use the <code>mapAmount</code> method as this will retain the BigDecimal precision used there.</p>\n<h3 dir=\"auto\"><a id=\"user-content-approximations\" class=\"anchor\" aria-hidden=\"true\" href=\"#approximations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Approximations</h3>\n<p dir=\"auto\">Create an implicit Quantity value to be used as a tolerance in approximations.\nThen use the <code>approx</code> method (or <code>=~</code>, <code>~=</code>, <code>≈</code> operators) like you would use the <code>equals</code> method (<code>==</code> operator).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.energy.{Kilowatts, Watts}\nimport squants.energy.{Kilowatts, Watts}\n\nscala&gt; val load = Kilowatts(2.0)\nload: squants.energy.Power = 2.0 kW\n\nscala&gt; val reading = Kilowatts(1.9999)\nreading: squants.energy.Power = 1.9999 kW\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Watts</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Watts</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">2.0</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">reading</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1.9999</span>)\nreading<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.9999</span> kW</pre></div>\n<p dir=\"auto\">Calls to <code>approx</code> (and its symbolic aliases) use an implicit tolerance:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; implicit val tolerance = Watts(.1)\ntolerance: squants.energy.Power = 0.1 W\n\nscala&gt; load =~ reading\nres0: Boolean = true\n\nscala&gt; load ≈ reading\nres1: Boolean = true\n\nscala&gt; load approx reading\nres2: Boolean = true\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">tolerance</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Watts</span>(<span class=\"pl-c1\">.1</span>)\ntolerance<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span> <span class=\"pl-en\">W</span>\n\nscala<span class=\"pl-k\">&gt;</span> load <span class=\"pl-k\">=</span><span class=\"pl-k\">~</span> reading\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n\nscala<span class=\"pl-k\">&gt;</span> load ≈ reading\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n\nscala<span class=\"pl-k\">&gt;</span> load approx reading\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span></pre></div>\n<p dir=\"auto\">The <code>=~</code> and <code>≈</code> are the preferred operators as they have the correct precedence for equality operations.\nThe <code>~=</code> is provided for those who wish to use a more natural looking approx operator using standard characters.\nHowever, because of its lower precedence, user code may require parenthesis around these comparisons.</p>\n<h3 dir=\"auto\"><a id=\"user-content-vectors\" class=\"anchor\" aria-hidden=\"true\" href=\"#vectors\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Vectors</h3>\n<p dir=\"auto\">All <code>Quantity</code> types in Squants represent the scalar value of a quantity.\nThat is, there is no direction information encoded in any of the Quantity types.\nThis is true even for Quantities which are normally vector quantities (ie. Velocity, Acceleration, etc).</p>\n<p dir=\"auto\">Vector quantities in Squants are implemented as case classes that takes a variable parameter list of like quantities\nrepresenting a set of point coordinates in Cartesian space.\nThe SVector object is a factory for creating DoubleVectors and QuantityVectors.\nThe dimensionality of the vector is determined by the number of arguments.\nMost basic vector operations are currently supported (addition, subtraction, scaling, cross and dot products)</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.{QuantityVector, SVector}\nimport squants.{QuantityVector, SVector}\n\nscala&gt; import squants.space.{Kilometers, Length}\nimport squants.space.{Kilometers, Length}\n\nscala&gt; import squants.space.LengthConversions._\nimport squants.space.LengthConversions._\n\nscala&gt; val vector: QuantityVector[Length] = SVector(Kilometers(1.2), Kilometers(4.3), Kilometers(2.3))\nvector: squants.QuantityVector[squants.space.Length] = QuantityVector(WrappedArray(1.2 km, 4.3 km, 2.3 km))\n\nscala&gt; val magnitude: Length = vector.magnitude        // returns the scalar value of the vector\nmagnitude: squants.space.Length = 5.021951811795888 km\n\nscala&gt; val normalized = vector.normalize(Kilometers)   // returns a corresponding vector scaled to 1 of the given unit\nnormalized: vector.SVectorType = QuantityVector(ArrayBuffer(0.2389509188800581 km, 0.8562407926535415 km, 0.45798926118677796 km))\n\nscala&gt; val vector2: QuantityVector[Length] = SVector(Kilometers(1.2), Kilometers(4.3), Kilometers(2.3))\nvector2: squants.QuantityVector[squants.space.Length] = QuantityVector(WrappedArray(1.2 km, 4.3 km, 2.3 km))\n\nscala&gt; val vectorSum = vector + vector2        // returns the sum of two vectors\nvectorSum: vector.SVectorType = QuantityVector(ArrayBuffer(2.4 km, 8.6 km, 4.6 km))\n\nscala&gt; val vectorDiff = vector - vector2       // return the difference of two vectors\nvectorDiff: vector.SVectorType = QuantityVector(ArrayBuffer(0.0 km, 0.0 km, 0.0 km))\n\nscala&gt; val vectorScaled = vector * 5           // returns vector scaled 5 times\nvectorScaled: vector.SVectorType = QuantityVector(ArrayBuffer(6.0 km, 21.5 km, 11.5 km))\n\nscala&gt; val vectorReduced = vector / 5          // returns vector reduced 5 time\nvectorReduced: vector.SVectorType = QuantityVector(ArrayBuffer(0.24 km, 0.86 km, 0.45999999999999996 km))\n\nscala&gt; val vectorDouble = vector / 5.meters    // returns vector reduced and converted to DoubleVector\nvectorDouble: squants.DoubleVector = DoubleVector(ArrayBuffer(240.0, 860.0, 459.99999999999994))\n\nscala&gt; val dotProduct = vector * vectorDouble  // returns the Dot Product of vector and vectorDouble\ndotProduct: squants.space.Length = 5044.0 km\n\nscala&gt; val crossProduct = vector crossProduct vectorDouble  // currently only supported for 3-dimensional vectors\ncrossProduct: vector.SVectorType = QuantityVector(WrappedArray(0.0 km, 1.1368683772161603E-13 km, 0.0 km))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">QuantityVector</span>, <span class=\"pl-en\">SVector</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">QuantityVector</span>, <span class=\"pl-en\">SVector</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.{<span class=\"pl-en\">Kilometers</span>, <span class=\"pl-en\">Length</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.{<span class=\"pl-en\">Kilometers</span>, <span class=\"pl-en\">Length</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vector</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">QuantityVector</span>[<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">SVector</span>(<span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">1.2</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">4.3</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">2.3</span>))\nvector<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">WrappedArray</span>(<span class=\"pl-c1\">1.2</span> km, <span class=\"pl-c1\">4.3</span> km, <span class=\"pl-c1\">2.3</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">magnitude</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> vector.magnitude        <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns the scalar value of the vector</span>\nmagnitude<span class=\"pl-k\">:</span> squants.space.<span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5.021951811795888</span> km\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">normalized</span> <span class=\"pl-k\">=</span> vector.normalize(<span class=\"pl-en\">Kilometers</span>)   <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns a corresponding vector scaled to 1 of the given unit</span>\nnormalized<span class=\"pl-k\">:</span> vector.<span class=\"pl-en\">SVectorType</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">0.2389509188800581</span> km, <span class=\"pl-c1\">0.8562407926535415</span> km, <span class=\"pl-c1\">0.45798926118677796</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vector2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">QuantityVector</span>[<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">SVector</span>(<span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">1.2</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">4.3</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">2.3</span>))\nvector2<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">WrappedArray</span>(<span class=\"pl-c1\">1.2</span> km, <span class=\"pl-c1\">4.3</span> km, <span class=\"pl-c1\">2.3</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorSum</span> <span class=\"pl-k\">=</span> vector <span class=\"pl-k\">+</span> vector2        <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns the sum of two vectors</span>\nvectorSum<span class=\"pl-k\">:</span> vector.<span class=\"pl-en\">SVectorType</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">2.4</span> km, <span class=\"pl-c1\">8.6</span> km, <span class=\"pl-c1\">4.6</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorDiff</span> <span class=\"pl-k\">=</span> vector <span class=\"pl-k\">-</span> vector2       <span class=\"pl-c\"><span class=\"pl-c\">//</span> return the difference of two vectors</span>\nvectorDiff<span class=\"pl-k\">:</span> vector.<span class=\"pl-en\">SVectorType</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">0.0</span> km, <span class=\"pl-c1\">0.0</span> km, <span class=\"pl-c1\">0.0</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorScaled</span> <span class=\"pl-k\">=</span> vector <span class=\"pl-k\">*</span> <span class=\"pl-c1\">5</span>           <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns vector scaled 5 times</span>\nvectorScaled<span class=\"pl-k\">:</span> vector.<span class=\"pl-en\">SVectorType</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">6.0</span> km, <span class=\"pl-c1\">21.5</span> km, <span class=\"pl-c1\">11.5</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorReduced</span> <span class=\"pl-k\">=</span> vector <span class=\"pl-k\">/</span> <span class=\"pl-c1\">5</span>          <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns vector reduced 5 time</span>\nvectorReduced<span class=\"pl-k\">:</span> vector.<span class=\"pl-en\">SVectorType</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">0.24</span> km, <span class=\"pl-c1\">0.86</span> km, <span class=\"pl-c1\">0.45999999999999996</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorDouble</span> <span class=\"pl-k\">=</span> vector <span class=\"pl-k\">/</span> <span class=\"pl-c1\">5</span>.meters    <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns vector reduced and converted to DoubleVector</span>\nvectorDouble<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">DoubleVector</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DoubleVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">240.0</span>, <span class=\"pl-c1\">860.0</span>, <span class=\"pl-c1\">459.99999999999994</span>))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">dotProduct</span> <span class=\"pl-k\">=</span> vector <span class=\"pl-k\">*</span> vectorDouble  <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns the Dot Product of vector and vectorDouble</span>\ndotProduct<span class=\"pl-k\">:</span> squants.space.<span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5044.0</span> km\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">crossProduct</span> <span class=\"pl-k\">=</span> vector crossProduct vectorDouble  <span class=\"pl-c\"><span class=\"pl-c\">//</span> currently only supported for 3-dimensional vectors</span>\ncrossProduct<span class=\"pl-k\">:</span> vector.<span class=\"pl-en\">SVectorType</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">WrappedArray</span>(<span class=\"pl-c1\">0.0</span> km, <span class=\"pl-c1\">1.1368683772161603E-13</span> km, <span class=\"pl-c1\">0.0</span> km))</pre></div>\n<p dir=\"auto\">Simple non-quantity (Double based) vectors are also supported.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.DoubleVector\n\nval vector: DoubleVector = SVector(1.2, 4.3, 2.3, 5.4)   // a Four-dimensional vector\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">DoubleVector</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">vector</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">DoubleVector</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">SVector</span>(<span class=\"pl-c1\">1.2</span>, <span class=\"pl-c1\">4.3</span>, <span class=\"pl-c1\">2.3</span>, <span class=\"pl-c1\">5.4</span>)   <span class=\"pl-c\"><span class=\"pl-c\">//</span> a Four-dimensional vector</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-dimensional-conversions-within-vector-operations\" class=\"anchor\" aria-hidden=\"true\" href=\"#dimensional-conversions-within-vector-operations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dimensional conversions within Vector operations.</h4>\n<p dir=\"auto\">Currently dimensional conversions are supported by using the slightly verbose, but flexible map method.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.{DoubleVector, QuantityVector}\nimport squants.{DoubleVector, QuantityVector}\n\nscala&gt; import squants.motion.Velocity\nimport squants.motion.Velocity\n\nscala&gt; import squants.space.{Area, Kilometers, Length, Meters}\nimport squants.space.{Area, Kilometers, Length, Meters}\n\nscala&gt; import squants.time.Seconds\nimport squants.time.Seconds\n\nscala&gt; val vectorLength = QuantityVector(Kilometers(1.2), Kilometers(4.3), Kilometers(2.3))\nvectorLength: squants.QuantityVector[squants.space.Length] = QuantityVector(WrappedArray(1.2 km, 4.3 km, 2.3 km))\n\nscala&gt; val vectorArea = vectorLength.map[Area](_ * Kilometers(2))      // QuantityVector(2.4 km², 8.6 km², 4.6 km²)\nvectorArea: squants.QuantityVector[squants.space.Area] = QuantityVector(ArrayBuffer(2.4 km², 8.6 km², 4.6 km²))\n\nscala&gt; val vectorVelocity = vectorLength.map[Velocity](_ / Seconds(1)) // QuantityVector(1200.0 m/s, 4300.0 m/s, 2300.0 m/s)\nvectorVelocity: squants.QuantityVector[squants.motion.Velocity] = QuantityVector(ArrayBuffer(1200.0 m/s, 4300.0 m/s, 2300.0 m/s))\n\nscala&gt; val vectorDouble = DoubleVector(1.2, 4.3, 2.3)\nvectorDouble: squants.DoubleVector = DoubleVector(WrappedArray(1.2, 4.3, 2.3))\n\nscala&gt; val vectorLength = vectorDouble.map[Length](Kilometers(_))      // QuantityVector(1.2 km, 4.3 km, 2.3 km)\nvectorLength: squants.QuantityVector[squants.space.Length] = QuantityVector(ArrayBuffer(1.2 km, 4.3 km, 2.3 km))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">DoubleVector</span>, <span class=\"pl-en\">QuantityVector</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">DoubleVector</span>, <span class=\"pl-en\">QuantityVector</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">motion</span>.<span class=\"pl-en\">Velocity</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">motion</span>.<span class=\"pl-en\">Velocity</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.{<span class=\"pl-en\">Area</span>, <span class=\"pl-en\">Kilometers</span>, <span class=\"pl-en\">Length</span>, <span class=\"pl-en\">Meters</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.{<span class=\"pl-en\">Area</span>, <span class=\"pl-en\">Kilometers</span>, <span class=\"pl-en\">Length</span>, <span class=\"pl-en\">Meters</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">Seconds</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">Seconds</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorLength</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">1.2</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">4.3</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">2.3</span>))\nvectorLength<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">WrappedArray</span>(<span class=\"pl-c1\">1.2</span> km, <span class=\"pl-c1\">4.3</span> km, <span class=\"pl-c1\">2.3</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorArea</span> <span class=\"pl-k\">=</span> vectorLength.map[<span class=\"pl-en\">Area</span>](_ <span class=\"pl-k\">*</span> <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">2</span>))      <span class=\"pl-c\"><span class=\"pl-c\">//</span> QuantityVector(2.4 km², 8.6 km², 4.6 km²)</span>\nvectorArea<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Area</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">2.4</span> km², <span class=\"pl-c1\">8.6</span> km², <span class=\"pl-c1\">4.6</span> km²))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorVelocity</span> <span class=\"pl-k\">=</span> vectorLength.map[<span class=\"pl-en\">Velocity</span>](_ <span class=\"pl-k\">/</span> <span class=\"pl-en\">Seconds</span>(<span class=\"pl-c1\">1</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> QuantityVector(1200.0 m/s, 4300.0 m/s, 2300.0 m/s)</span>\nvectorVelocity<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.motion.<span class=\"pl-en\">Velocity</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">1200.0</span> m<span class=\"pl-k\">/</span>s, <span class=\"pl-c1\">4300.0</span> m<span class=\"pl-k\">/</span>s, <span class=\"pl-c1\">2300.0</span> m<span class=\"pl-k\">/</span>s))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorDouble</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DoubleVector</span>(<span class=\"pl-c1\">1.2</span>, <span class=\"pl-c1\">4.3</span>, <span class=\"pl-c1\">2.3</span>)\nvectorDouble<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">DoubleVector</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DoubleVector</span>(<span class=\"pl-en\">WrappedArray</span>(<span class=\"pl-c1\">1.2</span>, <span class=\"pl-c1\">4.3</span>, <span class=\"pl-c1\">2.3</span>))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorLength</span> <span class=\"pl-k\">=</span> vectorDouble.map[<span class=\"pl-en\">Length</span>](<span class=\"pl-en\">Kilometers</span>(_))      <span class=\"pl-c\"><span class=\"pl-c\">//</span> QuantityVector(1.2 km, 4.3 km, 2.3 km)</span>\nvectorLength<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">1.2</span> km, <span class=\"pl-c1\">4.3</span> km, <span class=\"pl-c1\">2.3</span> km))</pre></div>\n<p dir=\"auto\">Convert QuantityVectors to specific units using the <code>to</code> or <code>in</code> method - much like Quantities.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val vectorLength = QuantityVector(Kilometers(1.2), Kilometers(4.3), Kilometers(2.3))\nvectorLength: squants.QuantityVector[squants.space.Length] = QuantityVector(WrappedArray(1.2 km, 4.3 km, 2.3 km))\n\nscala&gt; val vectorMetersNum = vectorLength.to(Meters)   // DoubleVector(1200.0, 4300.0, 2300.0)\nvectorMetersNum: squants.DoubleVector = DoubleVector(ArrayBuffer(1200.0, 4300.0, 2300.0))\n\nscala&gt; val vectorMeters = vectorLength.in(Meters)      // QuantityVector(1200.0 m, 4300.0 m, 2300.0 m)\nvectorMeters: squants.QuantityVector[squants.space.Length] = QuantityVector(ArrayBuffer(1200.0 m, 4300.0 m, 2300.0 m))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorLength</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">1.2</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">4.3</span>), <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">2.3</span>))\nvectorLength<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">WrappedArray</span>(<span class=\"pl-c1\">1.2</span> km, <span class=\"pl-c1\">4.3</span> km, <span class=\"pl-c1\">2.3</span> km))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorMetersNum</span> <span class=\"pl-k\">=</span> vectorLength.to(<span class=\"pl-en\">Meters</span>)   <span class=\"pl-c\"><span class=\"pl-c\">//</span> DoubleVector(1200.0, 4300.0, 2300.0)</span>\nvectorMetersNum<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">DoubleVector</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DoubleVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">1200.0</span>, <span class=\"pl-c1\">4300.0</span>, <span class=\"pl-c1\">2300.0</span>))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">vectorMeters</span> <span class=\"pl-k\">=</span> vectorLength.in(<span class=\"pl-en\">Meters</span>)      <span class=\"pl-c\"><span class=\"pl-c\">//</span> QuantityVector(1200.0 m, 4300.0 m, 2300.0 m)</span>\nvectorMeters<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityVector</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityVector</span>(<span class=\"pl-en\">ArrayBuffer</span>(<span class=\"pl-c1\">1200.0</span> m, <span class=\"pl-c1\">4300.0</span> m, <span class=\"pl-c1\">2300.0</span> m))</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-market-package\" class=\"anchor\" aria-hidden=\"true\" href=\"#market-package\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Market Package</h2>\n<p dir=\"auto\">Market Types are similar but not quite the same as other quantities in the library.\nThe primary type, Money, is a Dimensional Quantity, and its Units of Measure are Currencies.\nHowever, because the conversion multipliers between currency units can not be predefined,\nmany of the behaviors have been overridden and augmented to realize correct behavior.</p>\n<h3 dir=\"auto\"><a id=\"user-content-money\" class=\"anchor\" aria-hidden=\"true\" href=\"#money\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Money</h3>\n<p dir=\"auto\">A Quantity of purchasing power measured in Currency units.\nLike other quantities, the Unit of Measures are used to create Money values.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.market.{BTC, JPY, USD, XAU}\nimport squants.market.{BTC, JPY, USD, XAU}\n\nscala&gt; val tenBucks = USD(10)      // Money: 10 USD\ntenBucks: squants.market.Money = 1E+1 USD\n\nscala&gt; val someYen = JPY(1200)     // Money: 1200 JPY\nsomeYen: squants.market.Money = 1.2E+3 JPY\n\nscala&gt; val goldStash = XAU(50)     // Money: 50 XAU\ngoldStash: squants.market.Money = 5E+1 XAU\n\nscala&gt; val digitalCache = BTC(50)  // Money: 50 BTC\ndigitalCache: squants.market.Money = 5E+1 BTC\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">BTC</span>, <span class=\"pl-en\">JPY</span>, <span class=\"pl-en\">USD</span>, <span class=\"pl-en\">XAU</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">BTC</span>, <span class=\"pl-en\">JPY</span>, <span class=\"pl-en\">USD</span>, <span class=\"pl-en\">XAU</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">tenBucks</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">10</span>)      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Money: 10 USD</span>\ntenBucks<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1E+1</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">someYen</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">1200</span>)     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Money: 1200 JPY</span>\nsomeYen<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.2E+3</span> <span class=\"pl-en\">JPY</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">goldStash</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">XAU</span>(<span class=\"pl-c1\">50</span>)     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Money: 50 XAU</span>\ngoldStash<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5E+1</span> <span class=\"pl-en\">XAU</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">digitalCache</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">BTC</span>(<span class=\"pl-c1\">50</span>)  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Money: 50 BTC</span>\ndigitalCache<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5E+1</span> <span class=\"pl-en\">BTC</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-price\" class=\"anchor\" aria-hidden=\"true\" href=\"#price\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Price</h3>\n<p dir=\"auto\">A Ratio between Money and another Quantity.\nA Price value is typed on a Quantity and can be denominated in any defined Currency.</p>\n<p dir=\"auto\"><em>Price = Money / Quantity</em></p>\n<p dir=\"auto\">Assuming these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.{Dozen, Each}\nimport squants.energy.MegawattHours\nimport squants.market.USD\nimport squants.space.UsGallons\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">Dozen</span>, <span class=\"pl-en\">Each</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">MegawattHours</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">USD</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">UsGallons</span></pre></div>\n<p dir=\"auto\">You can compute the following:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val threeForADollar = USD(1) / Each(3)\nthreeForADollar: squants.market.Price[squants.Dimensionless] = 1 USD/3.0 ea\n\nscala&gt; val energyPrice = USD(102.20) / MegawattHours(1)\nenergyPrice: squants.market.Price[squants.energy.Energy] = 102.2 USD/1.0 MWh\n\nscala&gt; val milkPrice = USD(4) / UsGallons(1)\nmilkPrice: squants.market.Price[squants.space.Volume] = 4 USD/1.0 gal\n\nscala&gt; val costForABunch = threeForADollar * Dozen(10)\ncostForABunch: squants.market.Money = 4E+1 USD\n\nscala&gt; val energyCost = energyPrice * MegawattHours(4)\nenergyCost: squants.market.Money = 408.8 USD\n\nscala&gt; val milkQuota = USD(20) / milkPrice\nmilkQuota: squants.space.Volume = 5.0 gal\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">threeForADollar</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">/</span> <span class=\"pl-en\">Each</span>(<span class=\"pl-c1\">3</span>)\nthreeForADollar<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.<span class=\"pl-en\">Dimensionless</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">3.0</span> ea\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyPrice</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">102.20</span>) <span class=\"pl-k\">/</span> <span class=\"pl-en\">MegawattHours</span>(<span class=\"pl-c1\">1</span>)\nenergyPrice<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">102.2</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">milkPrice</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">4</span>) <span class=\"pl-k\">/</span> <span class=\"pl-en\">UsGallons</span>(<span class=\"pl-c1\">1</span>)\nmilkPrice<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.space.<span class=\"pl-en\">Volume</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> gal\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">costForABunch</span> <span class=\"pl-k\">=</span> threeForADollar <span class=\"pl-k\">*</span> <span class=\"pl-en\">Dozen</span>(<span class=\"pl-c1\">10</span>)\ncostForABunch<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4E+1</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyCost</span> <span class=\"pl-k\">=</span> energyPrice <span class=\"pl-k\">*</span> <span class=\"pl-en\">MegawattHours</span>(<span class=\"pl-c1\">4</span>)\nenergyCost<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">408.8</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">milkQuota</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">20</span>) <span class=\"pl-k\">/</span> milkPrice\nmilkQuota<span class=\"pl-k\">:</span> squants.space.<span class=\"pl-en\">Volume</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5.0</span> gal</pre></div>\n<p dir=\"auto\">Conversions to Strings</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val money = USD(123.456)\nmoney: squants.market.Money = 123.456 USD\n\nscala&gt; val s = money.toString  // returns full precision amount with currency code\ns: String = 123.456 USD\n\nscala&gt; val s = money.toFormattedString // returns currency symbol and amount rounded based on currency rules\ns: String = $123.46\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">money</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">123.456</span>)\nmoney<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">123.456</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">s</span> <span class=\"pl-k\">=</span> money.toString  <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns full precision amount with currency code</span>\ns<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">123.456</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">s</span> <span class=\"pl-k\">=</span> money.toFormattedString <span class=\"pl-c\"><span class=\"pl-c\">//</span> returns currency symbol and amount rounded based on currency rules</span>\ns<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> $<span class=\"pl-c1\">123.46</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-fx-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#fx-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>FX Support</h3>\n<p dir=\"auto\">Currency Exchange Rates are used to define the conversion factors between currencies</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.market.{CurrencyExchangeRate, JPY, Money, USD}\nimport squants.market.{CurrencyExchangeRate, JPY, Money, USD}\n\nscala&gt; // create an exchange rate\n     | val rate1 = CurrencyExchangeRate(USD(1), JPY(100))\nrate1: squants.market.CurrencyExchangeRate = USD/JPY 100.0\n\nscala&gt; // OR\n     | val rate2 = USD / JPY(100)\nrate2: squants.market.CurrencyExchangeRate = USD/JPY 100.0\n\nscala&gt; // OR\n     | val rate3 = JPY(100) -&gt; USD(1)\nrate3: squants.market.CurrencyExchangeRate = USD/JPY 100.0\n\nscala&gt; // OR\n     | val rate4 = JPY(100) toThe USD(1)\nrate4: squants.market.CurrencyExchangeRate = USD/JPY 100.0\n\nscala&gt; val someYen: Money = JPY(350)\nsomeYen: squants.market.Money = 3.5E+2 JPY\n\nscala&gt; val someBucks: Money = USD(23.50)\nsomeBucks: squants.market.Money = 23.5 USD\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">CurrencyExchangeRate</span>, <span class=\"pl-en\">JPY</span>, <span class=\"pl-en\">Money</span>, <span class=\"pl-en\">USD</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">CurrencyExchangeRate</span>, <span class=\"pl-en\">JPY</span>, <span class=\"pl-en\">Money</span>, <span class=\"pl-en\">USD</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> create an exchange rate</span>\n     <span class=\"pl-k\">|</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">rate1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">CurrencyExchangeRate</span>(<span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">1</span>), <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">100</span>))\nrate1<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">CurrencyExchangeRate</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">JPY</span> <span class=\"pl-c1\">100.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> OR</span>\n     <span class=\"pl-k\">|</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">rate2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span> <span class=\"pl-k\">/</span> <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">100</span>)\nrate2<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">CurrencyExchangeRate</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">JPY</span> <span class=\"pl-c1\">100.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> OR</span>\n     <span class=\"pl-k\">|</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">rate3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">100</span>) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">1</span>)\nrate3<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">CurrencyExchangeRate</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">JPY</span> <span class=\"pl-c1\">100.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> OR</span>\n     <span class=\"pl-k\">|</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">rate4</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">100</span>) toThe <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">1</span>)\nrate4<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">CurrencyExchangeRate</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">JPY</span> <span class=\"pl-c1\">100.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">someYen</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">350</span>)\nsomeYen<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.5E+2</span> <span class=\"pl-en\">JPY</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">someBucks</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">23.50</span>)\nsomeBucks<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">23.5</span> <span class=\"pl-en\">USD</span></pre></div>\n<p dir=\"auto\">Use the <code>convert</code> method which automatically converts the money to the 'other' currency:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val dollarAmount: Money = rate1.convert(someYen)\ndollarAmount: squants.market.Money = 3.5 USD\n\nscala&gt; val yenAmount: Money = rate1.convert(someBucks)\nyenAmount: squants.market.Money = 2.35E+3 JPY\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">dollarAmount</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> rate1.convert(someYen)\ndollarAmount<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.5</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">yenAmount</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> rate1.convert(someBucks)\nyenAmount<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.35E+3</span> <span class=\"pl-en\">JPY</span></pre></div>\n<p dir=\"auto\">Or just use the <code>*</code> operator in either direction (money * rate, or rate * money):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val dollarAmount2: Money = rate1 * someYen\ndollarAmount2: squants.market.Money = 3.5 USD\n\nscala&gt; val yenAmount2: Money = someBucks * rate1\nyenAmount2: squants.market.Money = 2.35E+3 JPY\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">dollarAmount2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> rate1 <span class=\"pl-k\">*</span> someYen\ndollarAmount2<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.5</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">yenAmount2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> someBucks <span class=\"pl-k\">*</span> rate1\nyenAmount2<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.35E+3</span> <span class=\"pl-en\">JPY</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-money-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#money-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Money Context</h3>\n<p dir=\"auto\">A MoneyContext can be implicitly declared to define default settings and applicable exchange rates within its scope.\nThis allows your application to work with a default currency based on an application configuration or other dynamic source.\nIt also provides support for updating exchange rates and using those rates for automatic conversions between currencies.\nThe technique and frequency chosen for exchange rate updates is completely in control of the application.</p>\n<p dir=\"auto\">Assuming these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.energy.MegawattHours\nimport squants.market.{CAD, JPY, MXN, USD}\nimport squants.market.defaultMoneyContext\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">MegawattHours</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">CAD</span>, <span class=\"pl-en\">JPY</span>, <span class=\"pl-en\">MXN</span>, <span class=\"pl-en\">USD</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">defaultMoneyContext</span></pre></div>\n<p dir=\"auto\">You can compute:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val exchangeRates = List(USD / CAD(1.05), USD / MXN(12.50), USD / JPY(100))\nexchangeRates: List[squants.market.CurrencyExchangeRate] = List(USD/CAD 1.05, USD/MXN 12.5, USD/JPY 100.0)\n\nscala&gt; implicit val moneyContext = defaultMoneyContext withExchangeRates exchangeRates\nmoneyContext: squants.market.MoneyContext = MoneyContext(DefaultCurrency(USD),Currencies(ARS,AUD,BRL,BTC,CAD,CHF,CLP,CNY,CZK,DKK,ETH,EUR,GBP,HKD,INR,JPY,KRW,LTC,MXN,MYR,NAD,NOK,NZD,RUB,SEK,USD,XAG,XAU,ZAR),ExchangeRates(USD/CAD 1.05,USD/JPY 100.0,USD/MXN 12.5),AllowIndirectConversions(true))\n\nscala&gt; val energyPrice = USD(102.20) / MegawattHours(1)\nenergyPrice: squants.market.Price[squants.energy.Energy] = 102.2 USD/1.0 MWh\n\nscala&gt; val someMoney = Money(350) // 350 in the default Cur\nsomeMoney: squants.market.Money = 3.5E+2 USD\n\nscala&gt; val usdMoney: Money = someMoney in USD\nusdMoney: squants.market.Money = 3.5E+2 USD\n\nscala&gt; val usdBigDecimal: BigDecimal = someMoney to USD\nusdBigDecimal: BigDecimal = 350.0\n\nscala&gt; val yenCost: Money = (energyPrice * MegawattHours(5)) in JPY\nyenCost: squants.market.Money = 5.11E+4 JPY\n\nscala&gt; val northAmericanSales: Money = (CAD(275) + USD(350) + MXN(290)) in USD\nnorthAmericanSales: squants.market.Money = 635.1047619047619047619047619047619 USD\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">exchangeRates</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">USD</span> <span class=\"pl-k\">/</span> <span class=\"pl-en\">CAD</span>(<span class=\"pl-c1\">1.05</span>), <span class=\"pl-en\">USD</span> <span class=\"pl-k\">/</span> <span class=\"pl-en\">MXN</span>(<span class=\"pl-c1\">12.50</span>), <span class=\"pl-en\">USD</span> <span class=\"pl-k\">/</span> <span class=\"pl-en\">JPY</span>(<span class=\"pl-c1\">100</span>))\nexchangeRates<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[squants.market.<span class=\"pl-en\">CurrencyExchangeRate</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">CAD</span> <span class=\"pl-c1\">1.05</span>, <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">MXN</span> <span class=\"pl-c1\">12.5</span>, <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">JPY</span> <span class=\"pl-c1\">100.0</span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">moneyContext</span> <span class=\"pl-k\">=</span> defaultMoneyContext withExchangeRates exchangeRates\nmoneyContext<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">MoneyContext</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MoneyContext</span>(<span class=\"pl-en\">DefaultCurrency</span>(<span class=\"pl-en\">USD</span>),<span class=\"pl-en\">Currencies</span>(<span class=\"pl-en\">ARS</span>,<span class=\"pl-en\">AUD</span>,<span class=\"pl-en\">BRL</span>,<span class=\"pl-en\">BTC</span>,<span class=\"pl-en\">CAD</span>,<span class=\"pl-en\">CHF</span>,<span class=\"pl-en\">CLP</span>,<span class=\"pl-en\">CNY</span>,<span class=\"pl-en\">CZK</span>,<span class=\"pl-en\">DKK</span>,<span class=\"pl-en\">ETH</span>,<span class=\"pl-en\">EUR</span>,<span class=\"pl-en\">GBP</span>,<span class=\"pl-en\">HKD</span>,<span class=\"pl-en\">INR</span>,<span class=\"pl-en\">JPY</span>,<span class=\"pl-en\">KRW</span>,<span class=\"pl-en\">LTC</span>,<span class=\"pl-en\">MXN</span>,<span class=\"pl-en\">MYR</span>,<span class=\"pl-en\">NAD</span>,<span class=\"pl-en\">NOK</span>,<span class=\"pl-en\">NZD</span>,<span class=\"pl-en\">RUB</span>,<span class=\"pl-en\">SEK</span>,<span class=\"pl-en\">USD</span>,<span class=\"pl-en\">XAG</span>,<span class=\"pl-en\">XAU</span>,<span class=\"pl-en\">ZAR</span>),<span class=\"pl-en\">ExchangeRates</span>(<span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">CAD</span> <span class=\"pl-c1\">1.05</span>,<span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">JPY</span> <span class=\"pl-c1\">100.0</span>,<span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">MXN</span> <span class=\"pl-c1\">12.5</span>),<span class=\"pl-en\">AllowIndirectConversions</span>(<span class=\"pl-c1\">true</span>))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyPrice</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">102.20</span>) <span class=\"pl-k\">/</span> <span class=\"pl-en\">MegawattHours</span>(<span class=\"pl-c1\">1</span>)\nenergyPrice<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">102.2</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">someMoney</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Money</span>(<span class=\"pl-c1\">350</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> 350 in the default Cur</span>\nsomeMoney<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.5E+2</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">usdMoney</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> someMoney in <span class=\"pl-en\">USD</span>\nusdMoney<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.5E+2</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">usdBigDecimal</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">BigDecimal</span> <span class=\"pl-k\">=</span> someMoney to <span class=\"pl-en\">USD</span>\nusdBigDecimal<span class=\"pl-k\">:</span> <span class=\"pl-en\">BigDecimal</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">350.0</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">yenCost</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> (energyPrice <span class=\"pl-k\">*</span> <span class=\"pl-en\">MegawattHours</span>(<span class=\"pl-c1\">5</span>)) in <span class=\"pl-en\">JPY</span>\nyenCost<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5.11E+4</span> <span class=\"pl-en\">JPY</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">northAmericanSales</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> (<span class=\"pl-en\">CAD</span>(<span class=\"pl-c1\">275</span>) <span class=\"pl-k\">+</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">350</span>) <span class=\"pl-k\">+</span> <span class=\"pl-en\">MXN</span>(<span class=\"pl-c1\">290</span>)) in <span class=\"pl-en\">USD</span>\nnorthAmericanSales<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">635.1047619047619047619047619047619</span> <span class=\"pl-en\">USD</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quantity-ranges\" class=\"anchor\" aria-hidden=\"true\" href=\"#quantity-ranges\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quantity Ranges</h2>\n<p dir=\"auto\">A <code>QuantityRange</code> is used to represent a range of Quantity values between an upper and lower bound:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.QuantityRange\nimport squants.energy.{Kilowatts, Megawatts, Power}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">QuantityRange</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">Megawatts</span>, <span class=\"pl-en\">Power</span>}</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val load1: Power = Kilowatts(1000)\n// load1: squants.energy.Power = 1000.0 kW\n\nval load2: Power = Kilowatts(5000)\n// load2: squants.energy.Power = 5000.0 kW\n\nval range: QuantityRange[Power] = QuantityRange(load1, load2)\n// range: squants.QuantityRange[squants.energy.Power] = QuantityRange(1000.0 kW,5000.0 kW)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">load1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">1000</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> load1: squants.energy.Power = 1000.0 kW</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">load2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">5000</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> load2: squants.energy.Power = 5000.0 kW</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">range</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">QuantityRange</span>[<span class=\"pl-en\">Power</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityRange</span>(load1, load2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> range: squants.QuantityRange[squants.energy.Power] = QuantityRange(1000.0 kW,5000.0 kW)</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-inclusivity-and-exclusivitiy\" class=\"anchor\" aria-hidden=\"true\" href=\"#inclusivity-and-exclusivitiy\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Inclusivity and Exclusivitiy</h3>\n<p dir=\"auto\">The <code>QuantityRange</code> constructor requires that <code>upper</code> is strictly greater than <code>lower</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.space.LengthConversions._\n// import squants.space.LengthConversions._\n\n// this will work b/c upper &gt; lower\nQuantityRange(1.km, 5.km)\n// res1: squants.QuantityRange[squants.space.Length] = QuantityRange(1.0 km,5.0 km)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.space.LengthConversions._</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> this will work b/c upper &gt; lower</span>\n<span class=\"pl-en\">QuantityRange</span>(<span class=\"pl-c1\">1</span>.km, <span class=\"pl-c1\">5</span>.km)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: squants.QuantityRange[squants.space.Length] = QuantityRange(1.0 km,5.0 km)</span></pre></div>\n<p dir=\"auto\">This will fail because <code>lower</code> = <code>upper</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; QuantityRange(1.km, 1.km)\njava.lang.IllegalArgumentException: QuantityRange upper bound must be strictly greater than to the lower bound\n  at squants.QuantityRange.&lt;init&gt;(QuantityRange.scala:25)\n  ... 43 elided\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">QuantityRange</span>(<span class=\"pl-c1\">1</span>.km, <span class=\"pl-c1\">1</span>.km)\njava.lang.<span class=\"pl-en\">IllegalArgumentException</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">QuantityRange</span> upper bound must be strictly greater than to the lower bound\n  at squants.<span class=\"pl-en\">QuantityRange</span>.&lt;<span class=\"pl-ent\">init</span>&gt;(<span class=\"pl-en\">QuantityRange</span>.scala<span class=\"pl-k\">:</span><span class=\"pl-c1\">25</span>)\n  ... <span class=\"pl-c1\">43</span> elided</pre></div>\n<p dir=\"auto\"><code>QuantityRange</code> contains two functions that check if an element is part of the range, <code>contains</code> and <code>includes</code>.\nThese differ in how they treat the range's upper bound: <code>contains()</code> <em>excludes</em> it but <code>includes()</code> <em>includes</em> it.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val distances = QuantityRange(1.km, 5.km)\ndistances: squants.QuantityRange[squants.space.Length] = QuantityRange(1.0 km,5.0 km)\n\nscala&gt; distances.contains(5.km) // this is false b/c contains() doesn't include the upper range\nres3: Boolean = false\n\nscala&gt; distances.includes(5.km) // this is true b/c includes() does include the upper range\nres4: Boolean = true\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">distances</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityRange</span>(<span class=\"pl-c1\">1</span>.km, <span class=\"pl-c1\">5</span>.km)\ndistances<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">QuantityRange</span>[squants.space.<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">QuantityRange</span>(<span class=\"pl-c1\">1.0</span> km,<span class=\"pl-c1\">5.0</span> km)\n\nscala<span class=\"pl-k\">&gt;</span> distances.contains(<span class=\"pl-c1\">5</span>.km) <span class=\"pl-c\"><span class=\"pl-c\">//</span> this is false b/c contains() doesn't include the upper range</span>\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>\n\nscala<span class=\"pl-k\">&gt;</span> distances.includes(<span class=\"pl-c1\">5</span>.km) <span class=\"pl-c\"><span class=\"pl-c\">//</span> this is true b/c includes() does include the upper range</span>\nres4<span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quantityrange-transformation\" class=\"anchor\" aria-hidden=\"true\" href=\"#quantityrange-transformation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>QuantityRange transformation</h3>\n<p dir=\"auto\">The multiplication and division operators create a <code>Seq</code> of ranges from the original.</p>\n<p dir=\"auto\">For example:</p>\n<p dir=\"auto\">Create a Seq of 10 sequential ranges starting with the original and each the same size as the original:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val rs1 = range * 10\n// rs1: squants.QuantitySeries[squants.energy.Power] = Vector(QuantityRange(1000.0 kW,5000.0 kW), QuantityRange(5000.0 kW,9000.0 kW), QuantityRange(9000.0 kW,13000.0 kW), QuantityRange(13000.0 kW,17000.0 kW), QuantityRange(17000.0 kW,21000.0 kW), QuantityRange(21000.0 kW,25000.0 kW), QuantityRange(25000.0 kW,29000.0 kW), QuantityRange(29000.0 kW,33000.0 kW), QuantityRange(33000.0 kW,37000.0 kW), QuantityRange(37000.0 kW,41000.0 kW))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">rs1</span> <span class=\"pl-k\">=</span> range <span class=\"pl-k\">*</span> <span class=\"pl-c1\">10</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> rs1: squants.QuantitySeries[squants.energy.Power] = Vector(QuantityRange(1000.0 kW,5000.0 kW), QuantityRange(5000.0 kW,9000.0 kW), QuantityRange(9000.0 kW,13000.0 kW), QuantityRange(13000.0 kW,17000.0 kW), QuantityRange(17000.0 kW,21000.0 kW), QuantityRange(21000.0 kW,25000.0 kW), QuantityRange(25000.0 kW,29000.0 kW), QuantityRange(29000.0 kW,33000.0 kW), QuantityRange(33000.0 kW,37000.0 kW), QuantityRange(37000.0 kW,41000.0 kW))</span></pre></div>\n<p dir=\"auto\">Create a Seq of 10 sequential ranges each 1/10th of the original size:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val rs2 = range / 10\n// rs2: squants.QuantitySeries[squants.energy.Power] = Vector(QuantityRange(1000.0 kW,1400.0 kW), QuantityRange(1400.0 kW,1800.0 kW), QuantityRange(1800.0 kW,2200.0 kW), QuantityRange(2200.0 kW,2600.0 kW), QuantityRange(2600.0 kW,3000.0 kW), QuantityRange(3000.0 kW,3400.0 kW), QuantityRange(3400.0 kW,3800.0 kW), QuantityRange(3800.0 kW,4200.0 kW), QuantityRange(4200.0 kW,4600.0 kW), QuantityRange(4600.0 kW,5000.0 kW))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">rs2</span> <span class=\"pl-k\">=</span> range <span class=\"pl-k\">/</span> <span class=\"pl-c1\">10</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> rs2: squants.QuantitySeries[squants.energy.Power] = Vector(QuantityRange(1000.0 kW,1400.0 kW), QuantityRange(1400.0 kW,1800.0 kW), QuantityRange(1800.0 kW,2200.0 kW), QuantityRange(2200.0 kW,2600.0 kW), QuantityRange(2600.0 kW,3000.0 kW), QuantityRange(3000.0 kW,3400.0 kW), QuantityRange(3400.0 kW,3800.0 kW), QuantityRange(3800.0 kW,4200.0 kW), QuantityRange(4200.0 kW,4600.0 kW), QuantityRange(4600.0 kW,5000.0 kW))</span></pre></div>\n<p dir=\"auto\">Create a Seq of 10 sequential ranges each with a size of 400 kilowatts:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val rs3 = range / Kilowatts(400)\n// rs3: squants.QuantitySeries[squants.energy.Power] = Vector(QuantityRange(1000.0 kW,1400.0 kW), QuantityRange(1400.0 kW,1800.0 kW), QuantityRange(1800.0 kW,2200.0 kW), QuantityRange(2200.0 kW,2600.0 kW), QuantityRange(2600.0 kW,3000.0 kW), QuantityRange(3000.0 kW,3400.0 kW), QuantityRange(3400.0 kW,3800.0 kW), QuantityRange(3800.0 kW,4200.0 kW), QuantityRange(4200.0 kW,4600.0 kW), QuantityRange(4600.0 kW,5000.0 kW))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">rs3</span> <span class=\"pl-k\">=</span> range <span class=\"pl-k\">/</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">400</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> rs3: squants.QuantitySeries[squants.energy.Power] = Vector(QuantityRange(1000.0 kW,1400.0 kW), QuantityRange(1400.0 kW,1800.0 kW), QuantityRange(1800.0 kW,2200.0 kW), QuantityRange(2200.0 kW,2600.0 kW), QuantityRange(2600.0 kW,3000.0 kW), QuantityRange(3000.0 kW,3400.0 kW), QuantityRange(3400.0 kW,3800.0 kW), QuantityRange(3800.0 kW,4200.0 kW), QuantityRange(4200.0 kW,4600.0 kW), QuantityRange(4600.0 kW,5000.0 kW))</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quantityrange-operations\" class=\"anchor\" aria-hidden=\"true\" href=\"#quantityrange-operations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>QuantityRange operations</h3>\n<p dir=\"auto\"><code>QuantityRange</code> supports foreach, map, and foldLeft/foldRight. These vary slightly from the versions\nin the Scala standard library in that they take a divisior as the first parameter. The examples below\nillustrate their use.</p>\n<p dir=\"auto\">Subdivide range into 1-Megawatt \"slices\", and foreach over each of slices:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"range.foreach(Megawatts(1)) { r =&gt; println(s&quot;lower = ${r.lower}, upper = ${r.upper}&quot;) }\n// lower = 1000.0 kW, upper = 2000.0 kW\n// lower = 2000.0 kW, upper = 3000.0 kW\n// lower = 3000.0 kW, upper = 4000.0 kW\n// lower = 4000.0 kW, upper = 5000.0 kW\"><pre>range.foreach(<span class=\"pl-en\">Megawatts</span>(<span class=\"pl-c1\">1</span>)) { r <span class=\"pl-k\">=&gt;</span> println(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">lower = </span>${r.lower}<span class=\"pl-s\">, upper = </span>${r.upper}<span class=\"pl-s\">\"</span>) }\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> lower = 1000.0 kW, upper = 2000.0 kW</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> lower = 2000.0 kW, upper = 3000.0 kW</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> lower = 3000.0 kW, upper = 4000.0 kW</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> lower = 4000.0 kW, upper = 5000.0 kW</span></pre></div>\n<p dir=\"auto\">Subdivide range into 10 slices and map over each slice:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"range.map(10) { r =&gt; r.upper }\n// res6: Seq[squants.energy.Power] = Vector(1400.0 kW, 1800.0 kW, 2200.0 kW, 2600.0 kW, 3000.0 kW, 3400.0 kW, 3800.0 kW, 4200.0 kW, 4600.0 kW, 5000.0 kW)\"><pre>range.map(<span class=\"pl-c1\">10</span>) { r <span class=\"pl-k\">=&gt;</span> r.upper }\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res6: Seq[squants.energy.Power] = Vector(1400.0 kW, 1800.0 kW, 2200.0 kW, 2600.0 kW, 3000.0 kW, 3400.0 kW, 3800.0 kW, 4200.0 kW, 4600.0 kW, 5000.0 kW)</span></pre></div>\n<p dir=\"auto\">Subdivide range into 10 slices and fold over them, using 0 Megawatts as a starting value:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"range.foldLeft(10, Megawatts(0)) { (z, r) =&gt; z + r.upper }\n// res7: squants.energy.Power = 32.0 MW\"><pre>range.foldLeft(<span class=\"pl-c1\">10</span>, <span class=\"pl-en\">Megawatts</span>(<span class=\"pl-c1\">0</span>)) { (z, r) <span class=\"pl-k\">=&gt;</span> z <span class=\"pl-k\">+</span> r.upper }\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res7: squants.energy.Power = 32.0 MW</span></pre></div>\n<p dir=\"auto\">NOTE - Because these implementations of foreach, map and fold* take a parameter (the divisor), these methods\nare not directly compatible with Scala's for comprehensions.\nTo use in a for comprehension, apply the * or / operators as described above to create a Seq from the Range.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for {\n    interval &lt;- (0.seconds to 1.seconds) * 60  // 60 time ranges, 0s to 1s, 1s to 2s, ...., 59s to 60s\n    ...\n} yield ...\"><pre><span class=\"pl-k\">for</span> {\n    interval <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> (<span class=\"pl-c1\">0</span>.seconds to <span class=\"pl-c1\">1</span>.seconds) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">60</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 60 time ranges, 0s to 1s, 1s to 2s, ...., 59s to 60s</span>\n    ...\n} <span class=\"pl-k\">yield</span> ...</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-natural-language-dsl\" class=\"anchor\" aria-hidden=\"true\" href=\"#natural-language-dsl\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Natural Language DSL</h2>\n<p dir=\"auto\">Implicit conversions give the DSL some features that allows user code to express quantities in a\nmore naturally expressive and readable way.</p>\n<p dir=\"auto\">Code samples in this section assume these imports</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.energy.{Kilowatts, MegawattHours, Power}\nimport squants.market.{Price, USD}\nimport squants.time.Hours\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Kilowatts</span>, <span class=\"pl-en\">MegawattHours</span>, <span class=\"pl-en\">Power</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">Price</span>, <span class=\"pl-en\">USD</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">Hours</span></pre></div>\n<p dir=\"auto\">Create Quantities using Unit Of Measure Factory objects (no implicits required):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load = Kilowatts(100)\nload: squants.energy.Power = 100.0 kW\n\nscala&gt; val time = Hours(3.75)\ntime: squants.time.Time = 3.75 h\n\nscala&gt; val money = USD(112.50)\nmoney: squants.market.Money = 112.5 USD\n\nscala&gt; val price = Price(money, MegawattHours(1))\nprice: squants.market.Price[squants.energy.Energy] = 112.5 USD/1.0 MWh\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">100</span>)\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">time</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Hours</span>(<span class=\"pl-c1\">3.75</span>)\ntime<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.75</span> h\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">money</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">112.50</span>)\nmoney<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">112.5</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">price</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Price</span>(money, <span class=\"pl-en\">MegawattHours</span>(<span class=\"pl-c1\">1</span>))\nprice<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">112.5</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span></pre></div>\n<p dir=\"auto\">Create Quantities using Unit of Measure names and/or symbols (uses implicits):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.language.postfixOps\nimport squants.energy.EnergyConversions._\nimport squants.energy.PowerConversions._\nimport squants.information.InformationConversions._\nimport squants.market.MoneyConversions._\nimport squants.space.LengthConversions._\nimport squants.time.TimeConversions._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">language</span>.<span class=\"pl-en\">postfixOps</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">EnergyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">PowerConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">information</span>.<span class=\"pl-en\">InformationConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">MoneyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">TimeConversions</span>.<span class=\"pl-en\">_</span></pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load1 = 100 kW \t\t\t        // Simple expressions don’t need dots\nload1: squants.energy.Power = 100.0 kW\n\nscala&gt; val load2 = 100 megawatts\nload2: squants.energy.Power = 100.0 MW\n\nscala&gt; val time = 3.hours + 45.minutes     // Compound expressions may need dots\ntime: squants.time.Time = 3.75 h\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load1</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span> kW \t\t\t        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Simple expressions don’t need dots</span>\nload1<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load2</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span> megawatts\nload2<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100.0</span> <span class=\"pl-en\">MW</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>.hours <span class=\"pl-k\">+</span> <span class=\"pl-c1\">45</span>.minutes     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Compound expressions may need dots</span>\ntime<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3.75</span> h</pre></div>\n<p dir=\"auto\">Create Quantities using operations between other Quantities:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val energyUsed = 100.kilowatts * (3.hours + 45.minutes)\nenergyUsed: squants.energy.Energy = 375000.0 Wh\n\nscala&gt; val price = 112.50.USD / 1.megawattHours\nprice: squants.market.Price[squants.energy.Energy] = 112.5 USD/1.0 MWh\n\nscala&gt; val speed = 55.miles / 1.hours\nspeed: squants.motion.Velocity = 24.587249174399997 m/s\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyUsed</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>.kilowatts <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">3</span>.hours <span class=\"pl-k\">+</span> <span class=\"pl-c1\">45</span>.minutes)\nenergyUsed<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">375000.0</span> <span class=\"pl-en\">Wh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">price</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">112.50</span>.<span class=\"pl-en\">USD</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">1</span>.megawattHours\nprice<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">112.5</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">speed</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">55</span>.miles <span class=\"pl-k\">/</span> <span class=\"pl-c1\">1</span>.hours\nspeed<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">Velocity</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">24.587249174399997</span> m<span class=\"pl-k\">/</span>s</pre></div>\n<p dir=\"auto\">Create Quantities using formatted Strings:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load = Power(&quot;40 MW&quot;)\nload: scala.util.Try[squants.energy.Power] = Success(40.0 MW)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Power</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>40 MW<span class=\"pl-pds\">\"</span></span>)\nload<span class=\"pl-k\">:</span> scala.util.<span class=\"pl-en\">Try</span>[squants.energy.<span class=\"pl-en\">Power</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Success</span>(<span class=\"pl-c1\">40.0</span> <span class=\"pl-en\">MW</span>)</pre></div>\n<p dir=\"auto\">Create Quantities using Tuples:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load = Power((40.5, &quot;MW&quot;))\nload: scala.util.Try[squants.energy.Power] = Success(40.5 MW)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Power</span>((<span class=\"pl-c1\">40.5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MW<span class=\"pl-pds\">\"</span></span>))\nload<span class=\"pl-k\">:</span> scala.util.<span class=\"pl-en\">Try</span>[squants.energy.<span class=\"pl-en\">Power</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Success</span>(<span class=\"pl-c1\">40.5</span> <span class=\"pl-en\">MW</span>)</pre></div>\n<p dir=\"auto\">Use single unit values to simplify expressions:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; // Hours(1) == 1.hours == hour\n     | val ramp = 100.kilowatts / hour\nramp: squants.energy.PowerRamp = 100000.0 W/h\n\nscala&gt; val speed = 100.kilometers / hour\nspeed: squants.motion.Velocity = 27.77777777777778 m/s\n\nscala&gt; // MegawattHours(1) == 1.megawattHours == megawattHour == MWh\n     | val hi = 100.dollars / MWh\nhi: squants.market.Price[squants.energy.Energy] = 1E+2 USD/1.0 MWh\n\nscala&gt; val low = 40.dollars / megawattHour\nlow: squants.market.Price[squants.energy.Energy] = 4E+1 USD/1.0 MWh\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Hours(1) == 1.hours == hour</span>\n     <span class=\"pl-k\">|</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ramp</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>.kilowatts <span class=\"pl-k\">/</span> hour\nramp<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">PowerRamp</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100000.0</span> <span class=\"pl-en\">W</span><span class=\"pl-k\">/</span>h\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">speed</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>.kilometers <span class=\"pl-k\">/</span> hour\nspeed<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">Velocity</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">27.77777777777778</span> m<span class=\"pl-k\">/</span>s\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> MegawattHours(1) == 1.megawattHours == megawattHour == MWh</span>\n     <span class=\"pl-k\">|</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">hi</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>.dollars <span class=\"pl-k\">/</span> <span class=\"pl-en\">MWh</span>\nhi<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1E+2</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">low</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">40</span>.dollars <span class=\"pl-k\">/</span> megawattHour\nlow<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4E+1</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span></pre></div>\n<p dir=\"auto\">Implicit conversion support for using Doubles, Longs and BigDecimals on the left side of multiply and divide operations:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val load = 10.22 * 4.MW\nload: squants.energy.Power = 40.88 MW\n\nscala&gt; val driveArrayCapacity = 12 * 600.gb\ndriveArrayCapacity: squants.information.Information = 7200.0 GB\n\nscala&gt; val freq = 60 / second\nfreq: squants.time.Frequency = 60.0 Hz\n\nscala&gt; val freq2 = BigDecimal(36000000) / hour\nfreq2: squants.time.Frequency = 10000.0 Hz\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10.22</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">4</span>.<span class=\"pl-en\">MW</span>\nload<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">40.88</span> <span class=\"pl-en\">MW</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">driveArrayCapacity</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">12</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">600</span>.gb\ndriveArrayCapacity<span class=\"pl-k\">:</span> squants.information.<span class=\"pl-en\">Information</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">7200.0</span> <span class=\"pl-en\">GB</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">freq</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">60</span> <span class=\"pl-k\">/</span> second\nfreq<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Frequency</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">60.0</span> <span class=\"pl-en\">Hz</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">freq2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">BigDecimal</span>(<span class=\"pl-c1\">36000000</span>) <span class=\"pl-k\">/</span> hour\nfreq2<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Frequency</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10000.0</span> <span class=\"pl-en\">Hz</span></pre></div>\n<p dir=\"auto\">Create Quantity Ranges using <code>to</code> or <code>plusOrMinus</code> (<code>+-</code>) operators:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val range1 = 1000.kW to 5000.kW\t             // 1000.kW to 5000.kW\nval range2 = 5000.kW plusOrMinus 1000.kW     // 4000.kW to 6000.kW\nval range2 = 5000.kW +- 1000.kW              // 4000.kW to 6000.kW\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">range1</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000</span>.kW to <span class=\"pl-c1\">5000</span>.kW\t             <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1000.kW to 5000.kW</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">range2</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5000</span>.kW plusOrMinus <span class=\"pl-c1\">1000</span>.kW     <span class=\"pl-c\"><span class=\"pl-c\">//</span> 4000.kW to 6000.kW</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">range2</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5000</span>.kW <span class=\"pl-k\">+-</span> <span class=\"pl-c1\">1000</span>.kW              <span class=\"pl-c\"><span class=\"pl-c\">//</span> 4000.kW to 6000.kW</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-numeric-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#numeric-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Numeric Support</h3>\n<p dir=\"auto\">Most Quantities that support implicit conversions also include an implicit Numeric object that can be imported\nto your code where Numeric support is required.  These follow the following pattern:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.mass.{Grams, Kilograms}\nimport squants.mass.{Grams, Kilograms}\n\nscala&gt; import squants.mass.MassConversions.MassNumeric\nimport squants.mass.MassConversions.MassNumeric\n\nscala&gt; val sum = List(Kilograms(100), Grams(34510)).sum\nsum: squants.mass.Mass = 134510.0 g\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.{<span class=\"pl-en\">Grams</span>, <span class=\"pl-en\">Kilograms</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.{<span class=\"pl-en\">Grams</span>, <span class=\"pl-en\">Kilograms</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.<span class=\"pl-en\">MassConversions</span>.<span class=\"pl-en\">MassNumeric</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.<span class=\"pl-en\">MassConversions</span>.<span class=\"pl-en\">MassNumeric</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sum</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">Kilograms</span>(<span class=\"pl-c1\">100</span>), <span class=\"pl-en\">Grams</span>(<span class=\"pl-c1\">34510</span>)).sum\nsum<span class=\"pl-k\">:</span> squants.mass.<span class=\"pl-en\">Mass</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">134510.0</span> g</pre></div>\n<p dir=\"auto\">NOTE - Because a quantity can not be multiplied by a like quantity and return a like quantity, the <code>Numeric.times</code>\noperation of numeric is implemented to throw an UnsupportedOperationException for all types except <code>Dimensionless</code>.</p>\n<p dir=\"auto\">The MoneyNumeric implementation is a bit different than the implementations for other quantity types\nin a few important ways.</p>\n<ol dir=\"auto\">\n<li>MoneyNumeric is a class, not an object like the others.</li>\n<li>To create a MoneyNumeric value there must be an implicit MoneyContext in scope.</li>\n<li>The MoneyContext must contain applicable exchange rates if you will be applying cross-currency Numeric ops.</li>\n</ol>\n<p dir=\"auto\">The following code provides a basic example for creating a MoneyNumeric:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.market.defaultMoneyContext\nimport squants.market.MoneyConversions._\nimport squants.market.USD\nimplicit val moneyContext = defaultMoneyContext\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">defaultMoneyContext</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">MoneyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">USD</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">moneyContext</span> <span class=\"pl-k\">=</span> defaultMoneyContext</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; implicit val moneyNum = new MoneyNumeric()\nmoneyNum: squants.market.MoneyConversions.MoneyNumeric = MoneyNumeric(MoneyContext(DefaultCurrency(USD),Currencies(ARS,AUD,BRL,BTC,CAD,CHF,CLP,CNY,CZK,DKK,ETH,EUR,GBP,HKD,INR,JPY,KRW,LTC,MXN,MYR,NAD,NOK,NZD,RUB,SEK,USD,XAG,XAU,ZAR),ExchangeRates(),AllowIndirectConversions(true)))\n\nscala&gt; val sum = List(USD(100), USD(10)).sum\nsum: squants.market.Money = 1.1E+2 USD\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">moneyNum</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MoneyNumeric</span>()\nmoneyNum<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">MoneyConversions</span>.<span class=\"pl-en\">MoneyNumeric</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MoneyNumeric</span>(<span class=\"pl-en\">MoneyContext</span>(<span class=\"pl-en\">DefaultCurrency</span>(<span class=\"pl-en\">USD</span>),<span class=\"pl-en\">Currencies</span>(<span class=\"pl-en\">ARS</span>,<span class=\"pl-en\">AUD</span>,<span class=\"pl-en\">BRL</span>,<span class=\"pl-en\">BTC</span>,<span class=\"pl-en\">CAD</span>,<span class=\"pl-en\">CHF</span>,<span class=\"pl-en\">CLP</span>,<span class=\"pl-en\">CNY</span>,<span class=\"pl-en\">CZK</span>,<span class=\"pl-en\">DKK</span>,<span class=\"pl-en\">ETH</span>,<span class=\"pl-en\">EUR</span>,<span class=\"pl-en\">GBP</span>,<span class=\"pl-en\">HKD</span>,<span class=\"pl-en\">INR</span>,<span class=\"pl-en\">JPY</span>,<span class=\"pl-en\">KRW</span>,<span class=\"pl-en\">LTC</span>,<span class=\"pl-en\">MXN</span>,<span class=\"pl-en\">MYR</span>,<span class=\"pl-en\">NAD</span>,<span class=\"pl-en\">NOK</span>,<span class=\"pl-en\">NZD</span>,<span class=\"pl-en\">RUB</span>,<span class=\"pl-en\">SEK</span>,<span class=\"pl-en\">USD</span>,<span class=\"pl-en\">XAG</span>,<span class=\"pl-en\">XAU</span>,<span class=\"pl-en\">ZAR</span>),<span class=\"pl-en\">ExchangeRates</span>(),<span class=\"pl-en\">AllowIndirectConversions</span>(<span class=\"pl-c1\">true</span>)))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sum</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">100</span>), <span class=\"pl-en\">USD</span>(<span class=\"pl-c1\">10</span>)).sum\nsum<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.1E+2</span> <span class=\"pl-en\">USD</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-unit-groups\" class=\"anchor\" aria-hidden=\"true\" href=\"#unit-groups\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Unit groups</h2>\n<p dir=\"auto\">Squants provides an experimental API for grouping related <code>UnitOfMeasure</code> values together.\nThis are called <code>UnitGroup</code>s. Squants provides <code>UnitGroup</code> implementations for the SI, the US Customary system, and various other systems. End-users can create their own ad-hoc <code>UnitGroup</code>s for <code>UnitOfMeasure</code>s in a related dimension.</p>\n<p dir=\"auto\">The <code>UnitGroup</code> trait defines two public fields: <code>units</code>, a <code>Set[UnitOfMeasure]</code>, and <code>sortedUnits</code>, which contains <code>units</code> sorted in ascending order.</p>\n<h3 dir=\"auto\"><a id=\"user-content-si-unitgroups\" class=\"anchor\" aria-hidden=\"true\" href=\"#si-unitgroups\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SI UnitGroups</h3>\n<p dir=\"auto\">Almost every <code>Dimension</code> in Squants has SI Units (with the exception of <code>Information</code>\nand <code>Money</code>). To avoid boilerplate, Squants generates <code>UnitGroup</code>s for SI using implicits.</p>\n<p dir=\"auto\">There are two <code>UnitGroup</code>s provided for SI: \"strict\" and \"expanded.\" Strict only includes SI\nUnitOfMeasure defined in the SI; \"expanded\" includes <a href=\"http://www.bipm.org/en/publications/si-brochure/table6.html\" rel=\"nofollow\">non-SI units that are commonly used in</a>\nSI, such as litre, hectare, hour, minute, etc). See the linked document for a detailed list.</p>\n<p dir=\"auto\">To summon the strict SI <code>UnitGroup</code> for <code>Length</code>, you would use this code:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.space.Length\n// import squants.space.Length\n\nimport squants.experimental.unitgroups.ImplicitDimensions.space._\n// import squants.experimental.unitgroups.ImplicitDimensions.space._\n\nimport squants.experimental.unitgroups.UnitGroup\n// import squants.experimental.unitgroups.UnitGroup\n\nimport squants.experimental.unitgroups.si.strict.implicits._\n// import squants.experimental.unitgroups.si.strict.implicits._\n\nval siLengths: UnitGroup[Length] = implicitly[UnitGroup[Length]]\n// siLengths: squants.experimental.unitgroups.UnitGroup[squants.space.Length] = squants.experimental.unitgroups.si.strict.package$implicits$$anon$1@f52ca1b\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">Length</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.space.Length</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">ImplicitDimensions</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.experimental.unitgroups.ImplicitDimensions.space._</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">UnitGroup</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.experimental.unitgroups.UnitGroup</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">si</span>.<span class=\"pl-en\">strict</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.experimental.unitgroups.si.strict.implicits._</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">siLengths</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">UnitGroup</span>[<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">=</span> implicitly[<span class=\"pl-en\">UnitGroup</span>[<span class=\"pl-en\">Length</span>]]\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> siLengths: squants.experimental.unitgroups.UnitGroup[squants.space.Length] = squants.experimental.unitgroups.si.strict.package$implicits$$anon$1@f52ca1b</span></pre></div>\n<p dir=\"auto\">To print out units and their conversion factors to the primary SI unit, you could use this code:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.{Quantity, UnitOfMeasure}\n// import squants.{Quantity, UnitOfMeasure}\n\ndef mkConversionFactor[A &lt;: Quantity[A]](uom: UnitOfMeasure[A]): Double = {\n  val one = uom(1)\n  one.to(one.dimension.siUnit)\n}\n// mkConversionFactor: [A &lt;: squants.Quantity[A]](uom: squants.UnitOfMeasure[A])Double\n\ndef mkTuple[A &lt;: Quantity[A]](uom: UnitOfMeasure[A]): (String, Double) = {\n  (uom.symbol, mkConversionFactor(uom))\n}\n// mkTuple: [A &lt;: squants.Quantity[A]](uom: squants.UnitOfMeasure[A])(String, Double)\n\nsiLengths.sortedUnits.toList.map(mkTuple).foreach(println)\n// (nm,1.0E-9)\n// (µm,1.0E-6)\n// (mm,0.001)\n// (cm,0.01)\n// (dm,0.1)\n// (m,1.0)\n// (dam,10.0)\n// (hm,100.0)\n// (km,1000.0)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">Quantity</span>, <span class=\"pl-en\">UnitOfMeasure</span>}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.{Quantity, UnitOfMeasure}</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">mkConversionFactor</span>[<span class=\"pl-en\">A</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Quantity</span>[<span class=\"pl-en\">A</span>]](<span class=\"pl-v\">uom</span>: <span class=\"pl-en\">UnitOfMeasure</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">one</span> <span class=\"pl-k\">=</span> uom(<span class=\"pl-c1\">1</span>)\n  one.to(one.dimension.siUnit)\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> mkConversionFactor: [A &lt;: squants.Quantity[A]](uom: squants.UnitOfMeasure[A])Double</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">mkTuple</span>[<span class=\"pl-en\">A</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Quantity</span>[<span class=\"pl-en\">A</span>]](<span class=\"pl-v\">uom</span>: <span class=\"pl-en\">UnitOfMeasure</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> (<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Double</span>) <span class=\"pl-k\">=</span> {\n  (uom.symbol, mkConversionFactor(uom))\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> mkTuple: [A &lt;: squants.Quantity[A]](uom: squants.UnitOfMeasure[A])(String, Double)</span>\n\nsiLengths.sortedUnits.toList.map(mkTuple).foreach(println)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (nm,1.0E-9)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (µm,1.0E-6)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (mm,0.001)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (cm,0.01)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (dm,0.1)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (m,1.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (dam,10.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (hm,100.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (km,1000.0)</span></pre></div>\n<p dir=\"auto\">Note that <code>UnitGroup</code>'s <code>sortedUnits</code> field is a <code>SortedSet</code>, so before mapping over it,\nyou will probably want to convert it to a List, otherwise the output may be resorted.</p>\n<h3 dir=\"auto\"><a id=\"user-content-non-si-unitgroups\" class=\"anchor\" aria-hidden=\"true\" href=\"#non-si-unitgroups\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Non-SI UnitGroups</h3>\n<p dir=\"auto\">Other <code>UnitGroup</code> definitions don't use implicits. For example, <code>squants.experimental.unitgroups.uscustomary.space.UsCustomaryLiquidVolumes</code> or <code>squants.experimental.unitgroups.misc.TroyMasses</code> can be imported and used directly.</p>\n<h3 dir=\"auto\"><a id=\"user-content-creating-an-ad-hoc-unitgroup\" class=\"anchor\" aria-hidden=\"true\" href=\"#creating-an-ad-hoc-unitgroup\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Creating an ad-hoc UnitGroup</h3>\n<p dir=\"auto\">To create an ad-hoc <code>UnitGroup</code> just implement the trait. For example, to make a US cooking measure <code>UnitGroup</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.{Quantity, Dimension}\n// import squants.{Quantity, Dimension}\n\nimport squants.space._\n// import squants.space._\n\nimport squants.experimental.unitgroups.UnitGroup\n// import squants.experimental.unitgroups.UnitGroup\n\nval usCookingUnitGroup = new UnitGroup[Volume] {\n  // units don't have to be specified in-order.\n  val units: Set[UnitOfMeasure[Volume]] = Set(UsPints, UsGallons, Teaspoons, Tablespoons, UsQuarts, FluidOunces)\n}\n// usCookingUnitGroup: squants.experimental.unitgroups.UnitGroup[squants.space.Volume]{val units: Set[squants.UnitOfMeasure[squants.space.Volume]]} = $anon$1@495c28e0\n\n// squants automatically sorts units\nusCookingUnitGroup.sortedUnits.foreach(println)\n// squants.space.Teaspoons$@1f2aa9fd\n// squants.space.Tablespoons$@20a4318e\n// squants.space.FluidOunces$@3f31c22\n// squants.space.UsPints$@6b5332c3\n// squants.space.UsQuarts$@5293da73\n// squants.space.UsGallons$@25de9dee\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.{<span class=\"pl-en\">Quantity</span>, <span class=\"pl-en\">Dimension</span>}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.{Quantity, Dimension}</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.space._</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">UnitGroup</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.experimental.unitgroups.UnitGroup</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">usCookingUnitGroup</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">UnitGroup</span>[<span class=\"pl-en\">Volume</span>] {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> units don't have to be specified in-order.</span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">units</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Set</span>[<span class=\"pl-en\">UnitOfMeasure</span>[<span class=\"pl-en\">Volume</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Set</span>(<span class=\"pl-en\">UsPints</span>, <span class=\"pl-en\">UsGallons</span>, <span class=\"pl-en\">Teaspoons</span>, <span class=\"pl-en\">Tablespoons</span>, <span class=\"pl-en\">UsQuarts</span>, <span class=\"pl-en\">FluidOunces</span>)\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> usCookingUnitGroup: squants.experimental.unitgroups.UnitGroup[squants.space.Volume]{val units: Set[squants.UnitOfMeasure[squants.space.Volume]]} = $anon$1@495c28e0</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants automatically sorts units</span>\nusCookingUnitGroup.sortedUnits.foreach(println)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants.space.Teaspoons$@1f2aa9fd</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants.space.Tablespoons$@20a4318e</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants.space.FluidOunces$@3f31c22</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants.space.UsPints$@6b5332c3</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants.space.UsQuarts$@5293da73</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> squants.space.UsGallons$@25de9dee</span></pre></div>\n<p dir=\"auto\">The <code>UnitGroup</code> values provided with Squants are only samples and aren't intended to be exhaustive.\nWe encourage users to make their own <code>UnitGroup</code> defintitions and submit them as PRs if they're generally\napplicable.</p>\n<h2 dir=\"auto\"><a id=\"user-content-formatters\" class=\"anchor\" aria-hidden=\"true\" href=\"#formatters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Formatters</h2>\n<p dir=\"auto\">Squants provides an experimental API for formatting Quantities in the \"best unit.\" For example,\nconvert Inches(12) to Feet(1). This is useful for producing human-friendly output.</p>\n<p dir=\"auto\">To use a formatter, you must implement the <code>squants.formatters.Formatter</code> trait:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait Formatter[A &lt;: Quantity[A]] {\n  def inBestUnit(quantity: Quantity[A]): A\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">Formatter</span>[<span class=\"pl-en\">A</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Quantity</span>[<span class=\"pl-en\">A</span>]] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">inBestUnit</span>(<span class=\"pl-v\">quantity</span>: <span class=\"pl-en\">Quantity</span>[<span class=\"pl-en\">A</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span>\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-default-formatter-implementation\" class=\"anchor\" aria-hidden=\"true\" href=\"#default-formatter-implementation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Default Formatter implementation</h3>\n<p dir=\"auto\">There is a default formatter implementation in <code>squants.experimental.formatter.DefaultFormatter</code>. This builds on the <code>UnitGroup</code>\nAPI discussed above to choose the best <code>UnitOfMeasure</code> for a <code>Quantity</code>. The <code>DefaultFormatter</code> algorithm will probably\nwork for most use-cases, but users can create their own <code>Formatters</code> if they have custom needs.</p>\n<p dir=\"auto\">To use <code>DefaultFormatter</code> import it, and a unit group:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.experimental.formatter.DefaultFormatter\nimport squants.experimental.unitgroups.misc.AstronomicalLengthUnitGroup\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">formatter</span>.<span class=\"pl-en\">DefaultFormatter</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">misc</span>.<span class=\"pl-en\">AstronomicalLengthUnitGroup</span></pre></div>\n<p dir=\"auto\">Then create the formatter by passing in a unit group:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val astroFormatter = new DefaultFormatter(AstronomicalLengthUnitGroup)\n// astroFormatter: squants.experimental.formatter.DefaultFormatter[squants.space.Length] = squants.experimental.formatter.DefaultFormatter@790fe346\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">astroFormatter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormatter</span>(<span class=\"pl-en\">AstronomicalLengthUnitGroup</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> astroFormatter: squants.experimental.formatter.DefaultFormatter[squants.space.Length] = squants.experimental.formatter.DefaultFormatter@790fe346</span></pre></div>\n<p dir=\"auto\">Now, we create some values using human-unfriendly numbers:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.space.LengthConversions._\n// import squants.space.LengthConversions._\n\nval earthToJupiter = 588000000.km\n// earthToJupiter: squants.space.Length = 588000000.0 km\n\nval earthToVoyager1 = 2.06e10.km\n// earthToVoyager1: squants.space.Length = 20600000000.0 km\n\nval earthToAlphaCentauri = 4.1315e+13.km\n// earthToAlphaCentauri: squants.space.Length = 41315000000000.0 km\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import squants.space.LengthConversions._</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">earthToJupiter</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">588000000</span>.km\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> earthToJupiter: squants.space.Length = 588000000.0 km</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">earthToVoyager1</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.06e10</span>.km\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> earthToVoyager1: squants.space.Length = 20600000000.0 km</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">earthToAlphaCentauri</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4.1315e+13</span>.km\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> earthToAlphaCentauri: squants.space.Length = 41315000000000.0 km</span></pre></div>\n<p dir=\"auto\">And format them into appropriate units (AUs and Parsecs, in this case):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"astroFormatter.inBestUnit(earthToJupiter)\n// res3: squants.space.Length = 3.9305372278938457 au\n\nastroFormatter.inBestUnit(earthToVoyager1)\n// res4: squants.space.Length = 137.70249471872998 au\n\nastroFormatter.inBestUnit(earthToAlphaCentauri)\n// res5: squants.space.Length = 1.3389279634339382 pc\"><pre>astroFormatter.inBestUnit(earthToJupiter)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res3: squants.space.Length = 3.9305372278938457 au</span>\n\nastroFormatter.inBestUnit(earthToVoyager1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res4: squants.space.Length = 137.70249471872998 au</span>\n\nastroFormatter.inBestUnit(earthToAlphaCentauri)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res5: squants.space.Length = 1.3389279634339382 pc</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-implicit-formatters\" class=\"anchor\" aria-hidden=\"true\" href=\"#implicit-formatters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Implicit formatters</h3>\n<p dir=\"auto\">There is a nicer syntax for formatters available via implicits.\nThis lets you write expressions such as <code>12.inches.inBestUnit</code>. This syntax is added per-<code>Dimension</code>.</p>\n<p dir=\"auto\">To use this syntax, first import <code>squants.experimental.formatter.syntax._</code>.\nThen, for each <code>Dimension</code> you wish to use, place a Formatter for the Dimension in implicit scope. In this example,\nwe're adding support for <code>Length</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.experimental.formatter.DefaultFormatter\nimport squants.experimental.formatter.syntax._\nimport squants.mass.MassConversions._\nimport squants.space.Length\nimport squants.space.LengthConversions._\nimport squants.experimental.unitgroups.misc.AstronomicalLengthUnitGroup\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">formatter</span>.<span class=\"pl-en\">DefaultFormatter</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">formatter</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.<span class=\"pl-en\">MassConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">Length</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">misc</span>.<span class=\"pl-en\">AstronomicalLengthUnitGroup</span></pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val astroFormatter = new DefaultFormatter(AstronomicalLengthUnitGroup)\n// astroFormatter: squants.experimental.formatter.DefaultFormatter[squants.space.Length] = squants.experimental.formatter.DefaultFormatter@135301a1\n\nval earthToJupiter = 588000000.km\n// earthToJupiter: squants.space.Length = 588000000.0 km\n\nval earthToVoyager1 = 2.06e10.km\n// earthToVoyager1: squants.space.Length = 20600000000.0 km\n\nval earthToAlphaCentauri = 4.1315e+13.km\n// earthToAlphaCentauri: squants.space.Length = 41315000000000.0 km\n\nearthToJupiter.inBestUnit\n// res0: squants.Quantity[squants.space.Length] = 3.9305372278938457 au\n\nearthToVoyager1.inBestUnit\n// res1: squants.Quantity[squants.space.Length] = 137.70249471872998 au\n\nearthToAlphaCentauri.inBestUnit\n// res2: squants.Quantity[squants.space.Length] = 1.3389279634339382 pc\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">astroFormatter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormatter</span>(<span class=\"pl-en\">AstronomicalLengthUnitGroup</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> astroFormatter: squants.experimental.formatter.DefaultFormatter[squants.space.Length] = squants.experimental.formatter.DefaultFormatter@135301a1</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">earthToJupiter</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">588000000</span>.km\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> earthToJupiter: squants.space.Length = 588000000.0 km</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">earthToVoyager1</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.06e10</span>.km\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> earthToVoyager1: squants.space.Length = 20600000000.0 km</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">earthToAlphaCentauri</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4.1315e+13</span>.km\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> earthToAlphaCentauri: squants.space.Length = 41315000000000.0 km</span>\n\nearthToJupiter.inBestUnit\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: squants.Quantity[squants.space.Length] = 3.9305372278938457 au</span>\n\nearthToVoyager1.inBestUnit\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: squants.Quantity[squants.space.Length] = 137.70249471872998 au</span>\n\nearthToAlphaCentauri.inBestUnit\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2: squants.Quantity[squants.space.Length] = 1.3389279634339382 pc</span></pre></div>\n<p dir=\"auto\">This example won't compile because there is no <code>Formatter[Mass]</code> in implicit scope:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; 5000.grams.inBestUnit\n&lt;console&gt;:26: error: could not find implicit value for parameter formatter: squants.experimental.formatter.Formatter[squants.mass.Mass]\n       5000.grams.inBestUnit\n                  ^\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">5000</span>.grams.inBestUnit\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">26</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: could not find <span class=\"pl-k\">implicit</span> value <span class=\"pl-k\">for</span> parameter <span class=\"pl-v\">formatter</span>: squants.experimental.formatter.<span class=\"pl-en\">Formatter</span>[squants.mass.<span class=\"pl-en\">Mass</span>]\n       <span class=\"pl-c1\">5000</span>.grams.inBestUnit\n                  ^</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-si-formatters-and-implicit-syntax\" class=\"anchor\" aria-hidden=\"true\" href=\"#si-formatters-and-implicit-syntax\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SI Formatters and implicit syntax</h3>\n<p dir=\"auto\">When using SI units, and the default formatter algorithm, you don't have to declare a <code>Formatter</code> and place it in\nimplicit scope. The compiler can do that for you. This creates a very human-friendly API by using the appropriate\nimports.</p>\n<p dir=\"auto\">First, import the SI unit groups and their implicits:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.experimental.unitgroups.ImplicitDimensions.space._\nimport squants.experimental.unitgroups.si.strict.implicits._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">ImplicitDimensions</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">unitgroups</span>.<span class=\"pl-en\">si</span>.<span class=\"pl-en\">strict</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Next, import the formatter syntax described above:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.experimental.formatter.syntax._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">formatter</span>.<span class=\"pl-en\">syntax</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Finally, add imports for implicitly deriving formatters:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import squants.experimental.formatter.implicits._\nimport squants.experimental.formatter.implicits._\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">formatter</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">experimental</span>.<span class=\"pl-en\">formatter</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Now we can create quantities and format them by calling <code>.inBestUnit</code> directly:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.space.LengthConversions._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span></pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"5.cm.inBestUnit\n// res0: squants.Quantity[squants.space.Length] = 5.0 cm\n\n500.cm.inBestUnit\n// res1: squants.Quantity[squants.space.Length] = 5.0 m\n\n3000.meters.inBestUnit\n// res2: squants.Quantity[squants.space.Length] = 3.0 km\"><pre><span class=\"pl-c1\">5</span>.cm.inBestUnit\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res0: squants.Quantity[squants.space.Length] = 5.0 cm</span>\n\n<span class=\"pl-c1\">500</span>.cm.inBestUnit\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res1: squants.Quantity[squants.space.Length] = 5.0 m</span>\n\n<span class=\"pl-c1\">3000</span>.meters.inBestUnit\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> res2: squants.Quantity[squants.space.Length] = 3.0 km</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-type-hierarchy\" class=\"anchor\" aria-hidden=\"true\" href=\"#type-hierarchy\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Type Hierarchy</h2>\n<p dir=\"auto\">The type hierarchy includes the following core types:  Quantity, Dimension, and UnitOfMeasure</p>\n<h3 dir=\"auto\"><a id=\"user-content-quantity-and-dimension\" class=\"anchor\" aria-hidden=\"true\" href=\"#quantity-and-dimension\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quantity and Dimension</h3>\n<p dir=\"auto\">A Dimension represents a type of Quantity. For example: Mass, Length, Time, etc.</p>\n<p dir=\"auto\">A Quantity represents a dimensional value or measurement.  A Quantity is a combination of a numeric value and a unit.\nFor example:  2 lb, 10 km, 3.4 hr.</p>\n<p dir=\"auto\">Squants has built in support for 54 quantity dimensions.</p>\n<h3 dir=\"auto\"><a id=\"user-content-unit-of-measure\" class=\"anchor\" aria-hidden=\"true\" href=\"#unit-of-measure\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Unit of Measure</h3>\n<p dir=\"auto\">UnitOfMeasure is the scale or multiplier in which the Quantity is being measured.\nSquants has built in support for over 257 units of measure</p>\n<p dir=\"auto\">For each Dimension a set of UOM objects implement a primary UOM trait typed to that Quantity.\nThe UOM objects define the unit symbols, conversion factors, and factory methods for creating Quantities in that unit.</p>\n<h3 dir=\"auto\"><a id=\"user-content-quantity-implementations\" class=\"anchor\" aria-hidden=\"true\" href=\"#quantity-implementations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quantity Implementations</h3>\n<p dir=\"auto\">The code for specific implementations include</p>\n<ul dir=\"auto\">\n<li>A class representing the Quantity including cross-dimensional operations</li>\n<li>A companion object representing the Dimension and set of available units</li>\n<li>A base trait for its Units</li>\n<li>A set of objects defining specific units, their symbols and conversion factors</li>\n</ul>\n<p dir=\"auto\">This is an abbreviated example of how a Quantity type is constructed:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class Length(val value: Double, val unit: LengthUnit) extends Quantity[Length]  { ... }\nobject Length extends Dimension[Length]  { ... }\ntrait LengthUnit extends UnitOfMeasure[Length]  { ... }\nobject Meters extends LengthUnit { ... }\nobject Yards extends LengthUnit { ... }\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Length</span>(<span class=\"pl-k\">val</span> <span class=\"pl-smi\">value</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Double</span>, <span class=\"pl-k\">val</span> <span class=\"pl-smi\">unit</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">LengthUnit</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Quantity</span>[<span class=\"pl-en\">Length</span>]  { ... }\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Length</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Dimension</span>[<span class=\"pl-en\">Length</span>]  { ... }\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">LengthUnit</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">UnitOfMeasure</span>[<span class=\"pl-en\">Length</span>]  { ... }\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Meters</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">LengthUnit</span> { ... }\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Yards</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">LengthUnit</span> { ... }</pre></div>\n<p dir=\"auto\">The apply method of the UOM objects are implemented as factories for creating Quantity values.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val len1: Length = Meters(4.3)\nval len2: Length = Yards(5)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">len1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Meters</span>(<span class=\"pl-c1\">4.3</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">len2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Yards</span>(<span class=\"pl-c1\">5</span>)</pre></div>\n<p dir=\"auto\">Squants currently supports 257 units of measure</p>\n<h3 dir=\"auto\"><a id=\"user-content-time-derivatives\" class=\"anchor\" aria-hidden=\"true\" href=\"#time-derivatives\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Time Derivatives</h3>\n<p dir=\"auto\">Special traits are used to establish a time derivative relationship between quantities.</p>\n<p dir=\"auto\">For example Velocity is the 1st Time Derivative of Length (Distance), Acceleration is the 2nd Time Derivative.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class Length( ... ) extends Quantity[Length] with TimeIntegral[Velocity]\n...\nclass Velocity( ... ) extends Quantity[Velocity] with TimeDerivative[Length] with TimeIntegral[Acceleration]\n...\nclass Acceleration( ... ) extends Quantity[Acceleration] with TimeDerivative[Velocity]\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Length</span>( ... ) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Quantity</span>[<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">with</span> <span class=\"pl-e\">TimeIntegral</span>[<span class=\"pl-en\">Velocity</span>]\n...\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Velocity</span>( ... ) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Quantity</span>[<span class=\"pl-en\">Velocity</span>] <span class=\"pl-k\">with</span> <span class=\"pl-e\">TimeDerivative</span>[<span class=\"pl-en\">Length</span>] <span class=\"pl-k\">with</span> <span class=\"pl-e\">TimeIntegral</span>[<span class=\"pl-en\">Acceleration</span>]\n...\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Acceleration</span>( ... ) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Quantity</span>[<span class=\"pl-en\">Acceleration</span>] <span class=\"pl-k\">with</span> <span class=\"pl-e\">TimeDerivative</span>[<span class=\"pl-en\">Velocity</span>]</pre></div>\n<p dir=\"auto\">These traits provide operations with time operands which result in correct dimensional transformations.</p>\n<p dir=\"auto\">Using these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.energy.Kilowatts\nimport squants.motion.{Acceleration, Velocity}\nimport squants.space.{Kilometers, Length}\nimport squants.space.LengthConversions._\nimport squants.time.{Hours, Seconds, Time}\nimport squants.time.TimeConversions._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">Kilowatts</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">motion</span>.{<span class=\"pl-en\">Acceleration</span>, <span class=\"pl-en\">Velocity</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.{<span class=\"pl-en\">Kilometers</span>, <span class=\"pl-en\">Length</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.{<span class=\"pl-en\">Hours</span>, <span class=\"pl-en\">Seconds</span>, <span class=\"pl-en\">Time</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">TimeConversions</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">You can code the following:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val distance: Length = Kilometers(100)\ndistance: squants.space.Length = 100.0 km\n\nscala&gt; val time: Time = Hours(2)\ntime: squants.time.Time = 2.0 h\n\nscala&gt; val velocity: Velocity = distance / time\nvelocity: squants.motion.Velocity = 13.88888888888889 m/s\n\nscala&gt; val acc: Acceleration = velocity / Seconds(1)\nacc: squants.motion.Acceleration = 13.88888888888889 m/s²\n\nscala&gt; val gravity = 32.feet / second.squared\ngravity: squants.Acceleration = 9.7536195072 m/s²\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">distance</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilometers</span>(<span class=\"pl-c1\">100</span>)\ndistance<span class=\"pl-k\">:</span> squants.space.<span class=\"pl-en\">Length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100.0</span> km\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">time</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Hours</span>(<span class=\"pl-c1\">2</span>)\ntime<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.0</span> h\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">velocity</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Velocity</span> <span class=\"pl-k\">=</span> distance <span class=\"pl-k\">/</span> time\nvelocity<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">Velocity</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">13.88888888888889</span> m<span class=\"pl-k\">/</span>s\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">acc</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Acceleration</span> <span class=\"pl-k\">=</span> velocity <span class=\"pl-k\">/</span> <span class=\"pl-en\">Seconds</span>(<span class=\"pl-c1\">1</span>)\nacc<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">Acceleration</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">13.88888888888889</span> m<span class=\"pl-k\">/</span>s²\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">gravity</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">32</span>.feet <span class=\"pl-k\">/</span> second.squared\ngravity<span class=\"pl-k\">:</span> squants.<span class=\"pl-en\">Acceleration</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">9.7536195072</span> m<span class=\"pl-k\">/</span>s²</pre></div>\n<p dir=\"auto\">Power is the 1st Time Derivative of Energy, PowerRamp is the 2nd.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val power = Kilowatts(100)\npower: squants.energy.Power = 100.0 kW\n\nscala&gt; val time: Time = Hours(2)\ntime: squants.time.Time = 2.0 h\n\nscala&gt; val energy = power * time\nenergy: squants.energy.Energy = 200000.0 Wh\n\nscala&gt; val ramp = Kilowatts(50) / Hours(1)\nramp: squants.energy.PowerRamp = 50000.0 W/h\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">100</span>)\npower<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100.0</span> kW\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">time</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Hours</span>(<span class=\"pl-c1\">2</span>)\ntime<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.0</span> h\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energy</span> <span class=\"pl-k\">=</span> power <span class=\"pl-k\">*</span> time\nenergy<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">200000.0</span> <span class=\"pl-en\">Wh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ramp</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Kilowatts</span>(<span class=\"pl-c1\">50</span>) <span class=\"pl-k\">/</span> <span class=\"pl-en\">Hours</span>(<span class=\"pl-c1\">1</span>)\nramp<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">PowerRamp</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">50000.0</span> <span class=\"pl-en\">W</span><span class=\"pl-k\">/</span>h</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-use-cases\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-cases\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Use Cases</h2>\n<h3 dir=\"auto\"><a id=\"user-content-dimensional-analysis\" class=\"anchor\" aria-hidden=\"true\" href=\"#dimensional-analysis\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dimensional Analysis</h3>\n<p dir=\"auto\">The primary use case for Squants, as described above, is to produce code that is typesafe within domains\nthat perform dimensional analysis.</p>\n<p dir=\"auto\">This code samples in this section use these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.energy.Energy\nimport squants.energy.EnergyConversions._\nimport squants.energy.PowerConversions._\nimport squants.market.{Money, Price}\nimport squants.market.MoneyConversions._\nimport squants.market.defaultMoneyContext\nimport squants.mass.{Density, Mass}\nimport squants.mass.MassConversions._\nimport squants.motion.{Acceleration, Velocity, VolumeFlow}\nimport squants.motion.AccelerationConversions._\nimport squants.space.LengthConversions._\nimport squants.space.VolumeConversions._\nimport squants.time.Time\nimport squants.time.TimeConversions._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">Energy</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">EnergyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">PowerConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.{<span class=\"pl-en\">Money</span>, <span class=\"pl-en\">Price</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">MoneyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">defaultMoneyContext</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.{<span class=\"pl-en\">Density</span>, <span class=\"pl-en\">Mass</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">mass</span>.<span class=\"pl-en\">MassConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">motion</span>.{<span class=\"pl-en\">Acceleration</span>, <span class=\"pl-en\">Velocity</span>, <span class=\"pl-en\">VolumeFlow</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">motion</span>.<span class=\"pl-en\">AccelerationConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">LengthConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">space</span>.<span class=\"pl-en\">VolumeConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">Time</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">TimeConversions</span>.<span class=\"pl-en\">_</span></pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; implicit val moneyContext = defaultMoneyContext\nmoneyContext: squants.market.MoneyContext = MoneyContext(DefaultCurrency(USD),Currencies(ARS,AUD,BRL,BTC,CAD,CHF,CLP,CNY,CZK,DKK,ETH,EUR,GBP,HKD,INR,JPY,KRW,LTC,MXN,MYR,NAD,NOK,NZD,RUB,SEK,USD,XAG,XAU,ZAR),ExchangeRates(),AllowIndirectConversions(true))\n\nscala&gt; val energyPrice: Price[Energy] = 45.25.money / megawattHour\nenergyPrice: squants.market.Price[squants.energy.Energy] = 45.25 USD/1.0 MWh\n\nscala&gt; val energyUsage: Energy = 345.kilowatts * 5.4.hours\nenergyUsage: squants.energy.Energy = 1863000.0000000002 Wh\n\nscala&gt; val energyCost: Money = energyPrice * energyUsage\nenergyCost: squants.market.Money = 84.30075000000000905 USD\n\nscala&gt; val dodgeViper: Acceleration = 60.miles / hour / 3.9.seconds\ndodgeViper: squants.motion.Acceleration = 6.877552216615386 m/s²\n\nscala&gt; val speedAfter5Seconds: Velocity = dodgeViper * 5.seconds\nspeedAfter5Seconds: squants.motion.Velocity = 34.38776108307693 m/s\n\nscala&gt; val timeTo100MPH: Time = 100.miles / hour / dodgeViper\ntimeTo100MPH: squants.time.Time = 6.499999999999999 s\n\nscala&gt; val density: Density = 1200.kilograms / cubicMeter\ndensity: squants.mass.Density = 1200.0 kg/m³\n\nscala&gt; val volFlowRate: VolumeFlow = 10.gallons / minute\nvolFlowRate: squants.motion.VolumeFlow = 6.30901964E-4 m³/s\n\nscala&gt; val flowTime: Time = 30.minutes\nflowTime: squants.time.Time = 30.0 m\n\nscala&gt; val totalMassFlow: Mass = volFlowRate * flowTime * density\ntotalMassFlow: squants.mass.Mass = 1362.7482422399999 kg\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">moneyContext</span> <span class=\"pl-k\">=</span> defaultMoneyContext\nmoneyContext<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">MoneyContext</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MoneyContext</span>(<span class=\"pl-en\">DefaultCurrency</span>(<span class=\"pl-en\">USD</span>),<span class=\"pl-en\">Currencies</span>(<span class=\"pl-en\">ARS</span>,<span class=\"pl-en\">AUD</span>,<span class=\"pl-en\">BRL</span>,<span class=\"pl-en\">BTC</span>,<span class=\"pl-en\">CAD</span>,<span class=\"pl-en\">CHF</span>,<span class=\"pl-en\">CLP</span>,<span class=\"pl-en\">CNY</span>,<span class=\"pl-en\">CZK</span>,<span class=\"pl-en\">DKK</span>,<span class=\"pl-en\">ETH</span>,<span class=\"pl-en\">EUR</span>,<span class=\"pl-en\">GBP</span>,<span class=\"pl-en\">HKD</span>,<span class=\"pl-en\">INR</span>,<span class=\"pl-en\">JPY</span>,<span class=\"pl-en\">KRW</span>,<span class=\"pl-en\">LTC</span>,<span class=\"pl-en\">MXN</span>,<span class=\"pl-en\">MYR</span>,<span class=\"pl-en\">NAD</span>,<span class=\"pl-en\">NOK</span>,<span class=\"pl-en\">NZD</span>,<span class=\"pl-en\">RUB</span>,<span class=\"pl-en\">SEK</span>,<span class=\"pl-en\">USD</span>,<span class=\"pl-en\">XAG</span>,<span class=\"pl-en\">XAU</span>,<span class=\"pl-en\">ZAR</span>),<span class=\"pl-en\">ExchangeRates</span>(),<span class=\"pl-en\">AllowIndirectConversions</span>(<span class=\"pl-c1\">true</span>))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyPrice</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Price</span>[<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">45.25</span>.money <span class=\"pl-k\">/</span> megawattHour\nenergyPrice<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Price</span>[squants.energy.<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">45.25</span> <span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1.0</span> <span class=\"pl-en\">MWh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyUsage</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">345</span>.kilowatts <span class=\"pl-k\">*</span> <span class=\"pl-c1\">5.4</span>.hours\nenergyUsage<span class=\"pl-k\">:</span> squants.energy.<span class=\"pl-en\">Energy</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1863000.0000000002</span> <span class=\"pl-en\">Wh</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">energyCost</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> energyPrice <span class=\"pl-k\">*</span> energyUsage\nenergyCost<span class=\"pl-k\">:</span> squants.market.<span class=\"pl-en\">Money</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">84.30075000000000905</span> <span class=\"pl-en\">USD</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">dodgeViper</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Acceleration</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">60</span>.miles <span class=\"pl-k\">/</span> hour <span class=\"pl-k\">/</span> <span class=\"pl-c1\">3.9</span>.seconds\ndodgeViper<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">Acceleration</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">6.877552216615386</span> m<span class=\"pl-k\">/</span>s²\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">speedAfter5Seconds</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Velocity</span> <span class=\"pl-k\">=</span> dodgeViper <span class=\"pl-k\">*</span> <span class=\"pl-c1\">5</span>.seconds\nspeedAfter5Seconds<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">Velocity</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">34.38776108307693</span> m<span class=\"pl-k\">/</span>s\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">timeTo100MPH</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>.miles <span class=\"pl-k\">/</span> hour <span class=\"pl-k\">/</span> dodgeViper\ntimeTo100MPH<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">6.499999999999999</span> s\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">density</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Density</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200</span>.kilograms <span class=\"pl-k\">/</span> cubicMeter\ndensity<span class=\"pl-k\">:</span> squants.mass.<span class=\"pl-en\">Density</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1200.0</span> kg<span class=\"pl-k\">/</span>m³\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">volFlowRate</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">VolumeFlow</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>.gallons <span class=\"pl-k\">/</span> minute\nvolFlowRate<span class=\"pl-k\">:</span> squants.motion.<span class=\"pl-en\">VolumeFlow</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">6.30901964E-4</span> m³<span class=\"pl-k\">/</span>s\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">flowTime</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30</span>.minutes\nflowTime<span class=\"pl-k\">:</span> squants.time.<span class=\"pl-en\">Time</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30.0</span> m\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">totalMassFlow</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Mass</span> <span class=\"pl-k\">=</span> volFlowRate <span class=\"pl-k\">*</span> flowTime <span class=\"pl-k\">*</span> density\ntotalMassFlow<span class=\"pl-k\">:</span> squants.mass.<span class=\"pl-en\">Mass</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1362.7482422399999</span> kg</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-domain-modeling\" class=\"anchor\" aria-hidden=\"true\" href=\"#domain-modeling\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Domain Modeling</h3>\n<p dir=\"auto\">Another excellent use case for Squants is stronger typing for fields in your domain model.</p>\n<p dir=\"auto\">Code samples in this section use these imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.language.postfixOps\n\nimport squants.energy.{Energy, Power, PowerRamp}\nimport squants.energy.EnergyConversions._\nimport squants.energy.PowerConversions._\nimport squants.energy.PowerRampConversions._\nimport squants.market.Price\nimport squants.market.MoneyConversions._\nimport squants.time.Time\nimport squants.time.TimeConversions._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">language</span>.<span class=\"pl-en\">postfixOps</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.{<span class=\"pl-en\">Energy</span>, <span class=\"pl-en\">Power</span>, <span class=\"pl-en\">PowerRamp</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">EnergyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">PowerConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">energy</span>.<span class=\"pl-en\">PowerRampConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">Price</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">market</span>.<span class=\"pl-en\">MoneyConversions</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">Time</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">time</span>.<span class=\"pl-en\">TimeConversions</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">This is OK ...</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Generator(\n  id: String,\n  maxLoadKW: Double,\n  rampRateKWph: Double,\n  operatingCostPerMWh: Double,\n  currency: String,\n  maintenanceTimeHours: Double)\n\nval gen1 = Generator(&quot;Gen1&quot;, 5000, 7500, 75.4, &quot;USD&quot;, 1.5)\nval gen2 = Generator(&quot;Gen2&quot;, 100, 250, 2944.5, &quot;JPY&quot;, 0.5)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Generator</span>(\n  <span class=\"pl-v\">id</span>: <span class=\"pl-en\">String</span>,\n  <span class=\"pl-v\">maxLoadKW</span>: <span class=\"pl-en\">Double</span>,\n  <span class=\"pl-v\">rampRateKWph</span>: <span class=\"pl-en\">Double</span>,\n  <span class=\"pl-v\">operatingCostPerMWh</span>: <span class=\"pl-en\">Double</span>,\n  <span class=\"pl-v\">currency</span>: <span class=\"pl-en\">String</span>,\n  <span class=\"pl-v\">maintenanceTimeHours</span>: <span class=\"pl-en\">Double</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">gen1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Generator</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Gen1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">5000</span>, <span class=\"pl-c1\">7500</span>, <span class=\"pl-c1\">75.4</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>USD<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1.5</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">gen2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Generator</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Gen2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">250</span>, <span class=\"pl-c1\">2944.5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>JPY<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">0.5</span>)</pre></div>\n<p dir=\"auto\">... but this is much better</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Generator(\n  id: String,\n  maxLoad: Power,\n  rampRate: PowerRamp,\n  operatingCost: Price[Energy],\n  maintenanceTime: Time)\n\nval gen1 = Generator(&quot;Gen1&quot;, 5 MW, 7.5.MW/hour, 75.4.USD/MWh, 1.5 hours)\nval gen2 = Generator(&quot;Gen2&quot;, 100 kW, 250 kWph, 2944.5.JPY/MWh, 30 minutes)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Generator</span>(\n  <span class=\"pl-v\">id</span>: <span class=\"pl-en\">String</span>,\n  <span class=\"pl-v\">maxLoad</span>: <span class=\"pl-en\">Power</span>,\n  <span class=\"pl-v\">rampRate</span>: <span class=\"pl-en\">PowerRamp</span>,\n  <span class=\"pl-v\">operatingCost</span>: <span class=\"pl-en\">Price</span>[<span class=\"pl-en\">Energy</span>],\n  <span class=\"pl-v\">maintenanceTime</span>: <span class=\"pl-en\">Time</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">gen1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Generator</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Gen1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">5</span> <span class=\"pl-en\">MW</span>, <span class=\"pl-c1\">7.5</span>.<span class=\"pl-en\">MW</span><span class=\"pl-k\">/</span>hour, <span class=\"pl-c1\">75.4</span>.<span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span><span class=\"pl-en\">MWh</span>, <span class=\"pl-c1\">1.5</span> hours)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">gen2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Generator</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Gen2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">100</span> kW, <span class=\"pl-c1\">250</span> kWph, <span class=\"pl-c1\">2944.5</span>.<span class=\"pl-en\">JPY</span><span class=\"pl-k\">/</span><span class=\"pl-en\">MWh</span>, <span class=\"pl-c1\">30</span> minutes)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-anticorruption-layers\" class=\"anchor\" aria-hidden=\"true\" href=\"#anticorruption-layers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Anticorruption Layers</h3>\n<p dir=\"auto\">Create wrappers around external services that use basic types to represent quantities.\nYour application code then uses the ACL to communicate with that system thus eliminating the need to deal\nwith type and scale conversions in multiple places throughout your application logic.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ScadaServiceAnticorruption(val service: ScadaService) {\n  // ScadaService returns meter load as Double representing Megawatts\n  def getLoad: Power = Megawatts(service.getLoad(meterId))\n  }\n  // ScadaService.sendTempBias requires a Double representing Fahrenheit\n  def sendTempBias(temp: Temperature) =\n    service.sendTempBias(temp.to(Fahrenheit))\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ScadaServiceAnticorruption</span>(<span class=\"pl-k\">val</span> <span class=\"pl-smi\">service</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ScadaService</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> ScadaService returns meter load as Double representing Megawatts</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">getLoad</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Power</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Megawatts</span>(service.getLoad(meterId))\n  }\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> ScadaService.sendTempBias requires a Double representing Fahrenheit</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">sendTempBias</span>(<span class=\"pl-v\">temp</span>: <span class=\"pl-en\">Temperature</span>) <span class=\"pl-k\">=</span>\n    service.sendTempBias(temp.to(<span class=\"pl-en\">Fahrenheit</span>))\n}</pre></div>\n<p dir=\"auto\">Implement the ACL as a trait and mix in to the application's services where needed.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import squants.radio.{Irradiance, WattsPerSquareMeter}\nimport squants.thermal.{Celsius, Temperature}\n\ntrait WeatherServiceAntiCorruption {\n  val service: WeatherService\n  def getTemperature: Temperature = Celsius(service.getTemperature)\n  def getIrradiance: Irradiance = WattsPerSquareMeter(service.getIrradiance)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">radio</span>.{<span class=\"pl-en\">Irradiance</span>, <span class=\"pl-en\">WattsPerSquareMeter</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">squants</span>.<span class=\"pl-en\">thermal</span>.{<span class=\"pl-en\">Celsius</span>, <span class=\"pl-en\">Temperature</span>}\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">WeatherServiceAntiCorruption</span> {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">service</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">WeatherService</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">getTemperature</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Temperature</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Celsius</span>(service.getTemperature)\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">getIrradiance</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Irradiance</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">WattsPerSquareMeter</span>(service.getIrradiance)\n}</pre></div>\n<p dir=\"auto\">Extend the pattern to provide multi-currency support</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MarketServiceAnticorruption(val service: MarketService)\n     (implicit val moneyContext: = MoneyContext) {\n\n  // MarketService.getPrice returns a Double representing $/MegawattHour\n  def getPrice: Price[Energy] =\n    (USD(service.getPrice) in moneyContext.defaultCurrency) / megawattHour\n\n  // MarketService.sendBid requires a Double representing $/MegawattHour\n  // and another Double representing the max amount of energy in MegawattHours\n  def sendBid(bid: Price[Energy], limit: Energy) =\n    service.sendBid((bid * megawattHour) to USD, limit to MegawattHours)\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MarketServiceAnticorruption</span>(<span class=\"pl-k\">val</span> <span class=\"pl-smi\">service</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MarketService</span>)\n     (<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">moneyContext</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MoneyContext</span>) {\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> MarketService.getPrice returns a Double representing $/MegawattHour</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">getPrice</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Price</span>[<span class=\"pl-en\">Energy</span>] <span class=\"pl-k\">=</span>\n    (<span class=\"pl-en\">USD</span>(service.getPrice) in moneyContext.defaultCurrency) <span class=\"pl-k\">/</span> megawattHour\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> MarketService.sendBid requires a Double representing $/MegawattHour</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> and another Double representing the max amount of energy in MegawattHours</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">sendBid</span>(<span class=\"pl-v\">bid</span>: <span class=\"pl-en\">Price</span>[<span class=\"pl-en\">Energy</span>], <span class=\"pl-v\">limit</span>: <span class=\"pl-en\">Energy</span>) <span class=\"pl-k\">=</span>\n    service.sendBid((bid <span class=\"pl-k\">*</span> megawattHour) to <span class=\"pl-en\">USD</span>, limit to <span class=\"pl-en\">MegawattHours</span>)\n}</pre></div>\n<p dir=\"auto\">Build Anticorruption into Akka routers</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// LoadReading message used within a Squants enabled application context\ncase class LoadReading(meterId: String, time: Long, load: Power)\nclass ScadaLoadListener(router: Router) extends Actor {\n  def receive = {\n   // ScadaLoadReading - from an external service - sends load as a string\n   // eg, “10.3 MW”, “345 kW”\n   case msg @ ScadaLoadReading(meterId, time, loadString) ⇒\n    // Parse the string and on success emit the Squants enabled event to routees\n    Power(loadString) match {\n      case Success(p) =&gt; router.route(LoadReading(meterId, time, p), sender())\n      case Failure(e) =&gt; // react to QuantityStringParseException\n    }\n  }\n}\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> LoadReading message used within a Squants enabled application context</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">LoadReading</span>(<span class=\"pl-v\">meterId</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">time</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">load</span>: <span class=\"pl-en\">Power</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">ScadaLoadListener</span>(<span class=\"pl-v\">router</span>: <span class=\"pl-en\">Router</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">receive</span> <span class=\"pl-k\">=</span> {\n   <span class=\"pl-c\"><span class=\"pl-c\">//</span> ScadaLoadReading - from an external service - sends load as a string</span>\n   <span class=\"pl-c\"><span class=\"pl-c\">//</span> eg, “10.3 MW”, “345 kW”</span>\n   <span class=\"pl-k\">case</span> msg <span class=\"pl-k\">@</span> <span class=\"pl-en\">ScadaLoadReading</span>(meterId, time, loadString) <span class=\"pl-k\">⇒</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Parse the string and on success emit the Squants enabled event to routees</span>\n    <span class=\"pl-en\">Power</span>(loadString) <span class=\"pl-k\">match</span> {\n      <span class=\"pl-k\">case</span> <span class=\"pl-en\">Success</span>(p) <span class=\"pl-k\">=&gt;</span> router.route(<span class=\"pl-en\">LoadReading</span>(meterId, time, p), sender())\n      <span class=\"pl-k\">case</span> <span class=\"pl-en\">Failure</span>(e) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> react to QuantityStringParseException</span>\n    }\n  }\n}</pre></div>\n<p dir=\"auto\">... and REST API's with contracts that require basic types</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait LoadRoute extends HttpService {\n  def repo: LoadRepository\n  val loadRoute = {\n    path(&quot;meter-reading&quot;) {\n      // REST API contract requires load value and units in different fields\n      // Units are string values that may be 'kW' or 'MW'\n      post {\n        parameters(meterId, time, loadDouble, unit) { (meterId, time, loadDouble, unit) =&gt;\n          complete {\n            val load = unit match {\n              case &quot;kW&quot; =&gt; Kilowatts(loadDouble)\n              case &quot;MW&quot; =&gt; Megawatts(loadDouble)\n            }\n            repo.saveLoad(meterId, time, load)\n          }\n        }\n      } ~\n      // REST API contract requires load returned as a number representing megawatts\n      get {\n        parameters(meterId, time) { (meterId, time) =&gt;\n          complete {\n            repo.getLoad(meterId, time) to Megawatts\n          }\n        }\n      }\n    }\n  }\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">LoadRoute</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">HttpService</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">repo</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">LoadRepository</span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadRoute</span> <span class=\"pl-k\">=</span> {\n    path(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>meter-reading<span class=\"pl-pds\">\"</span></span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> REST API contract requires load value and units in different fields</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Units are string values that may be 'kW' or 'MW'</span>\n      post {\n        parameters(meterId, time, loadDouble, unit) { (meterId, time, loadDouble, unit) <span class=\"pl-k\">=&gt;</span>\n          complete {\n            <span class=\"pl-k\">val</span> <span class=\"pl-smi\">load</span> <span class=\"pl-k\">=</span> unit <span class=\"pl-k\">match</span> {\n              <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kW<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Kilowatts</span>(loadDouble)\n              <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MW<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Megawatts</span>(loadDouble)\n            }\n            repo.saveLoad(meterId, time, load)\n          }\n        }\n      } <span class=\"pl-k\">~</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> REST API contract requires load returned as a number representing megawatts</span>\n      get {\n        parameters(meterId, time) { (meterId, time) <span class=\"pl-k\">=&gt;</span>\n          complete {\n            repo.getLoad(meterId, time) to <span class=\"pl-en\">Megawatts</span>\n          }\n        }\n      }\n    }\n  }\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-contributors\" class=\"anchor\" aria-hidden=\"true\" href=\"#contributors\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contributors</h2>\n<ul dir=\"auto\">\n<li>Gary Keorkunian (<a href=\"https://github.com/garyKeorkunian\">garyKeorkunian</a>)</li>\n<li>Jeremy Apthorp (<a href=\"https://github.com/nornagon\">nornagon</a>)</li>\n<li>Steve Barham (<a href=\"https://github.com/stevebarham\">stevebarham</a>)</li>\n<li>Derek Morr (<a href=\"https://github.com/derekmorr\">derekmorr</a>)</li>\n<li>Michael Korbakov (<a href=\"https://github.com/rmihael\">rmihael</a>)</li>\n<li>Florian Nussberger (<a href=\"https://github.com/fnussber\">fnussber</a>)</li>\n<li>Ajay Chandran (<a href=\"https://github.com/ajaychandran\">ajaychandran</a>)</li>\n<li>Gia Bảo (<a href=\"https://github.com/giabao\">giabao</a>)</li>\n<li>Josh Lemer (<a href=\"https://github.com/joshlemer\">joshlemer</a>)</li>\n<li>Dave DeCarpio (<a href=\"https://github.com/DaveDeCaprio\">DaveDeCaprio</a>)</li>\n<li>Carlos Quiroz (<a href=\"https://github.com/cquiroz\">cquiroz</a>)</li>\n<li>Szabolcs Berecz (<a href=\"https://github.com/khernyo\">khernyo</a>)</li>\n<li>Matt Hicks (<a href=\"https://github.com/darkfrog26\">darkfrog26</a>)</li>\n<li>golem131 (<a href=\"https://github.com/golem131\">golem131</a>)</li>\n<li>Ian O'Hara (<a href=\"https://github.com/ianohara\">ianohara</a>)</li>\n<li>Shadaj Laddad (<a href=\"https://github.com/shadaj\">shadaj</a>)</li>\n<li>Ian McIntosh (<a href=\"https://github.com/cranst0n\">cranst0n</a>)</li>\n<li>Doug Hurst (<a href=\"https://github.com/robotsnowfall\">robotsnowfall</a>)</li>\n<li>Philip Axelrod (<a href=\"https://github.com/paxelord\">Paxelord</a>)</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-code-of-conduct\" class=\"anchor\" aria-hidden=\"true\" href=\"#code-of-conduct\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Code of Conduct</h2>\n<p dir=\"auto\">Squants is a <a href=\"http://typelevel.org/\" rel=\"nofollow\">Typelevel</a> Incubator Project and, as such, supports the <a href=\"http://typelevel.org/conduct\" rel=\"nofollow\">Typelevel Code of Conduct</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-caveats\" class=\"anchor\" aria-hidden=\"true\" href=\"#caveats\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Caveats</h2>\n<p dir=\"auto\">Code is offered as-is, with no implied warranty of any kind.\nComments, criticisms, and/or praise are welcome, especially from scientists, engineers and the like.</p>\n<h1 dir=\"auto\"><a id=\"user-content-release-procedure\" class=\"anchor\" aria-hidden=\"true\" href=\"#release-procedure\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Release procedure</h1>\n<p dir=\"auto\">Making a release requires permission to publish to sonatype, and a properly setup <a href=\"http://www.scala-sbt.org/sbt-pgp/usage.html\" rel=\"nofollow\">signing key</a>:</p>\n<p dir=\"auto\">To make a release do the following:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Ensure the version is not set to <code>SNAPSHOT</code></p>\n</li>\n<li>\n<p dir=\"auto\">Build the README using tut</p>\n</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  sbt tut\"><pre class=\"notranslate\"><code>  sbt tut\n</code></pre></div>\n<ul dir=\"auto\">\n<li>Publish a cross-version signed package (no cross-version available for Scala Native)</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  sbt +squantsJVM/publishSigned\n  sbt +squantsJS/publishSigned\n  sbt squantsNative/publishSigned\"><pre class=\"notranslate\"><code>  sbt +squantsJVM/publishSigned\n  sbt +squantsJS/publishSigned\n  sbt squantsNative/publishSigned\n</code></pre></div>\n<ul dir=\"auto\">\n<li>Repeat for scala.js 1.0.0-RC1</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  SCALAJS_VERSION=1.0.0-RC1 sbt +squantsJS/publishSigned\"><pre class=\"notranslate\"><code>  SCALAJS_VERSION=1.0.0-RC1 sbt +squantsJS/publishSigned\n</code></pre></div>\n<ul dir=\"auto\">\n<li>Then make a release (Note: after this step the release cannot be replaced)</li>\n</ul>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  sbt sonatypeRelease\"><pre class=\"notranslate\"><code>  sbt sonatypeRelease\n</code></pre></div>\n</article></div>",
    "contributors" : [
      {
        "login" : "cquiroz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3615303?v=4",
        "url" : "https://github.com/cquiroz",
        "contributions" : 226
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 113
      },
      {
        "login" : "derekmorr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6717579?v=4",
        "url" : "https://github.com/derekmorr",
        "contributions" : 79
      },
      {
        "login" : "garyKeorkunian",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1952319?v=4",
        "url" : "https://github.com/garyKeorkunian",
        "contributions" : 35
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://github.com/larsrh",
        "contributions" : 26
      },
      {
        "login" : "underscorenico",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/24507367?v=4",
        "url" : "https://github.com/underscorenico",
        "contributions" : 9
      },
      {
        "login" : "golem131",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2429587?v=4",
        "url" : "https://github.com/golem131",
        "contributions" : 7
      },
      {
        "login" : "hunterpayne",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12565097?v=4",
        "url" : "https://github.com/hunterpayne",
        "contributions" : 6
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://github.com/armanbilge",
        "contributions" : 5
      },
      {
        "login" : "fnussber",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7856060?v=4",
        "url" : "https://github.com/fnussber",
        "contributions" : 5
      },
      {
        "login" : "Lasering",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5956311?v=4",
        "url" : "https://github.com/Lasering",
        "contributions" : 5
      },
      {
        "login" : "jhnsmth",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15067848?v=4",
        "url" : "https://github.com/jhnsmth",
        "contributions" : 4
      },
      {
        "login" : "martijnblankestijn",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/271094?v=4",
        "url" : "https://github.com/martijnblankestijn",
        "contributions" : 4
      },
      {
        "login" : "darkfrog26",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/877534?v=4",
        "url" : "https://github.com/darkfrog26",
        "contributions" : 4
      },
      {
        "login" : "shadaj",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/543055?v=4",
        "url" : "https://github.com/shadaj",
        "contributions" : 4
      },
      {
        "login" : "thyandrecardoso",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/203170?v=4",
        "url" : "https://github.com/thyandrecardoso",
        "contributions" : 3
      },
      {
        "login" : "robotsnowfall",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/480646?v=4",
        "url" : "https://github.com/robotsnowfall",
        "contributions" : 3
      },
      {
        "login" : "PhilipAxelrod",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11010625?v=4",
        "url" : "https://github.com/PhilipAxelrod",
        "contributions" : 3
      },
      {
        "login" : "ybasket",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2632023?v=4",
        "url" : "https://github.com/ybasket",
        "contributions" : 3
      },
      {
        "login" : "allanrenucci",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4996324?v=4",
        "url" : "https://github.com/allanrenucci",
        "contributions" : 2
      },
      {
        "login" : "DaveDeCaprio",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/841146?v=4",
        "url" : "https://github.com/DaveDeCaprio",
        "contributions" : 2
      },
      {
        "login" : "buzden",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2602116?v=4",
        "url" : "https://github.com/buzden",
        "contributions" : 2
      },
      {
        "login" : "GerretS",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/27868686?v=4",
        "url" : "https://github.com/GerretS",
        "contributions" : 2
      },
      {
        "login" : "nornagon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/172800?v=4",
        "url" : "https://github.com/nornagon",
        "contributions" : 2
      },
      {
        "login" : "tel",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1141?v=4",
        "url" : "https://github.com/tel",
        "contributions" : 2
      },
      {
        "login" : "julienrf",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/332812?v=4",
        "url" : "https://github.com/julienrf",
        "contributions" : 2
      },
      {
        "login" : "psung",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/146557?v=4",
        "url" : "https://github.com/psung",
        "contributions" : 2
      },
      {
        "login" : "acarrasco",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1380700?v=4",
        "url" : "https://github.com/acarrasco",
        "contributions" : 1
      },
      {
        "login" : "bwignall",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5581066?v=4",
        "url" : "https://github.com/bwignall",
        "contributions" : 1
      },
      {
        "login" : "fedragon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1630843?v=4",
        "url" : "https://github.com/fedragon",
        "contributions" : 1
      },
      {
        "login" : "fnandot",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/35688033?v=4",
        "url" : "https://github.com/fnandot",
        "contributions" : 1
      },
      {
        "login" : "ianohara",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/486372?v=4",
        "url" : "https://github.com/ianohara",
        "contributions" : 1
      },
      {
        "login" : "joshlemer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5122903?v=4",
        "url" : "https://github.com/joshlemer",
        "contributions" : 1
      },
      {
        "login" : "mkotsbak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/296523?v=4",
        "url" : "https://github.com/mkotsbak",
        "contributions" : 1
      },
      {
        "login" : "rmihael",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/181909?v=4",
        "url" : "https://github.com/rmihael",
        "contributions" : 1
      },
      {
        "login" : "mtrna",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/48676?v=4",
        "url" : "https://github.com/mtrna",
        "contributions" : 1
      },
      {
        "login" : "pdobel",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5663707?v=4",
        "url" : "https://github.com/pdobel",
        "contributions" : 1
      },
      {
        "login" : "sullis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30938?v=4",
        "url" : "https://github.com/sullis",
        "contributions" : 1
      },
      {
        "login" : "quartin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/17933448?v=4",
        "url" : "https://github.com/quartin",
        "contributions" : 1
      },
      {
        "login" : "khernyo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/447532?v=4",
        "url" : "https://github.com/khernyo",
        "contributions" : 1
      },
      {
        "login" : "Passarinho4",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6765916?v=4",
        "url" : "https://github.com/Passarinho4",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://github.com/gitter-badger",
        "contributions" : 1
      },
      {
        "login" : "tomasherman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/99870?v=4",
        "url" : "https://github.com/tomasherman",
        "contributions" : 1
      },
      {
        "login" : "cranst0n",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1173143?v=4",
        "url" : "https://github.com/cranst0n",
        "contributions" : 1
      },
      {
        "login" : "fvalka",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16480529?v=4",
        "url" : "https://github.com/fvalka",
        "contributions" : 1
      },
      {
        "login" : "giabao",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1702709?v=4",
        "url" : "https://github.com/giabao",
        "contributions" : 1
      },
      {
        "login" : "emanresusername",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/860471?v=4",
        "url" : "https://github.com/emanresusername",
        "contributions" : 1
      }
    ],
    "commits" : 580,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : "https://gitter.im/typelevel/squants",
    "openIssues" : [
      {
        "number" : 544,
        "title" : "Build failure with Squants dependency: I'm probably doing it wrong",
        "url" : "https://github.com/typelevel/squants/issues/544"
      },
      {
        "number" : 543,
        "title" : "Is it possible to create custom units in the library?",
        "url" : "https://github.com/typelevel/squants/issues/543"
      },
      {
        "number" : 535,
        "title" : "Support for other currencies",
        "url" : "https://github.com/typelevel/squants/issues/535"
      },
      {
        "number" : 532,
        "title" : "Converting Micrograms to Milligrams for 5x values create non-rounded results",
        "url" : "https://github.com/typelevel/squants/issues/532"
      },
      {
        "number" : 524,
        "title" : "Quantity.toString receiving a DecimalFormat",
        "url" : "https://github.com/typelevel/squants/issues/524"
      },
      {
        "number" : 518,
        "title" : "Question about measurements",
        "url" : "https://github.com/typelevel/squants/issues/518"
      },
      {
        "number" : 507,
        "title" : "Approximation for Money type",
        "url" : "https://github.com/typelevel/squants/issues/507"
      },
      {
        "number" : 494,
        "title" : "Why not adding hacktoberfest tag?",
        "url" : "https://github.com/typelevel/squants/issues/494"
      },
      {
        "number" : 491,
        "title" : "DefaultFormatter is removed, no replacement?",
        "url" : "https://github.com/typelevel/squants/issues/491"
      },
      {
        "number" : 443,
        "title" : "toCoarsest",
        "url" : "https://github.com/typelevel/squants/issues/443"
      },
      {
        "number" : 402,
        "title" : "Currencies don't compare correctly when defined inside a trait",
        "url" : "https://github.com/typelevel/squants/issues/402"
      },
      {
        "number" : 383,
        "title" : "String input to constructor should be trimmed",
        "url" : "https://github.com/typelevel/squants/issues/383"
      },
      {
        "number" : 382,
        "title" : "Value type support?",
        "url" : "https://github.com/typelevel/squants/issues/382"
      },
      {
        "number" : 340,
        "title" : "Specific Energy is incorrectly defined",
        "url" : "https://github.com/typelevel/squants/issues/340"
      },
      {
        "number" : 324,
        "title" : "Information addition not always works as expected.",
        "url" : "https://github.com/typelevel/squants/issues/324"
      },
      {
        "number" : 322,
        "title" : "Money#parseString throws NotImplementedError",
        "url" : "https://github.com/typelevel/squants/issues/322"
      },
      {
        "number" : 321,
        "title" : "Money round-trip parsing failures",
        "url" : "https://github.com/typelevel/squants/issues/321"
      },
      {
        "number" : 314,
        "title" : "Price does not work on right side of * operator",
        "url" : "https://github.com/typelevel/squants/issues/314"
      },
      {
        "number" : 301,
        "title" : "Inconsistent Quantity.toString behaviour on locales with decimal comma",
        "url" : "https://github.com/typelevel/squants/issues/301"
      },
      {
        "number" : 300,
        "title" : "Do not require implicit  MoneyNumeric in context if calculations are in same currency",
        "url" : "https://github.com/typelevel/squants/issues/300"
      },
      {
        "number" : 298,
        "title" : "Kiloyards Length UnitOfMeasure Support",
        "url" : "https://github.com/typelevel/squants/issues/298"
      },
      {
        "number" : 296,
        "title" : "Money.apply should not use defaultCurrencyMap",
        "url" : "https://github.com/typelevel/squants/issues/296"
      },
      {
        "number" : 288,
        "title" : "Time derivative of VolumeFlow?",
        "url" : "https://github.com/typelevel/squants/issues/288"
      },
      {
        "number" : 254,
        "title" : "Loss of precision when dividing Quantity",
        "url" : "https://github.com/typelevel/squants/issues/254"
      },
      {
        "number" : 253,
        "title" : "Loss of precision when converting types",
        "url" : "https://github.com/typelevel/squants/issues/253"
      },
      {
        "number" : 252,
        "title" : "implement unimplemented functions & make new types",
        "url" : "https://github.com/typelevel/squants/issues/252"
      },
      {
        "number" : 251,
        "title" : "Stabilize string output of DefaultFormatter",
        "url" : "https://github.com/typelevel/squants/issues/251"
      },
      {
        "number" : 249,
        "title" : "Break up docs",
        "url" : "https://github.com/typelevel/squants/issues/249"
      },
      {
        "number" : 230,
        "title" : "Unsafe conversion of units possible ",
        "url" : "https://github.com/typelevel/squants/issues/230"
      },
      {
        "number" : 228,
        "title" : "Add support for longer units of time",
        "url" : "https://github.com/typelevel/squants/issues/228"
      },
      {
        "number" : 214,
        "title" : "Manage multiple dimensions in a single method",
        "url" : "https://github.com/typelevel/squants/issues/214"
      },
      {
        "number" : 171,
        "title" : "Internationalization",
        "url" : "https://github.com/typelevel/squants/issues/171"
      },
      {
        "number" : 159,
        "title" : "Update public site",
        "url" : "https://github.com/typelevel/squants/issues/159"
      },
      {
        "number" : 138,
        "title" : "MoneyContext should be abstract class",
        "url" : "https://github.com/typelevel/squants/issues/138"
      },
      {
        "number" : 132,
        "title" : "Why Price[Energy] is not a Quantity?",
        "url" : "https://github.com/typelevel/squants/issues/132"
      },
      {
        "number" : 127,
        "title" : "Provide information on type level if e.g. one dimension is the product of two other dimensions",
        "url" : "https://github.com/typelevel/squants/issues/127"
      },
      {
        "number" : 38,
        "title" : "Singular versions of natural-language-style converters",
        "url" : "https://github.com/typelevel/squants/issues/38"
      },
      {
        "number" : 22,
        "title" : "JSON Marshalling and Serialization Tests",
        "url" : "https://github.com/typelevel/squants/issues/22"
      },
      {
        "number" : 15,
        "title" : "Generic quantities support",
        "url" : "https://github.com/typelevel/squants/issues/15"
      }
    ],
    "scalaPercentage" : 100,
    "license" : "Apache-2.0",
    "commitActivity" : [
      {
        "total" : 6,
        "week" : 1629590400000,
        "days" : [
          3,
          0,
          0,
          0,
          2,
          1,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1630195200000,
        "days" : [
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1630800000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 1,
        "week" : 1632009600000,
        "days" : [
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632614400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1633219200000,
        "days" : [
          0,
          0,
          1,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1633824000000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1634428800000,
        "days" : [
          0,
          1,
          0,
          1,
          1,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635033600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1635638400000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636243200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636848000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1637452800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1638662400000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          1,
          1
        ]
      },
      {
        "total" : 1,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1639872000000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1640476800000,
        "days" : [
          0,
          1,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1641081600000,
        "days" : [
          0,
          0,
          0,
          1,
          2,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641686400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1642291200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 2,
        "week" : 1642896000000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1643500800000,
        "days" : [
          0,
          0,
          1,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644105600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1645315200000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1645920000000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      {
        "total" : 2,
        "week" : 1646524800000,
        "days" : [
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1647734400000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1648339200000,
        "days" : [
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1648944000000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1649548800000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1650758400000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651363200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654387200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654992000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1655596800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656201600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656806400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1657411200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658016000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658620800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659225600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659830400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1660435200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : "squants",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "units-of-measurement",
    "beginnerIssuesLabel" : null
  }
}