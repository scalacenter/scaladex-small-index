{
  "organization" : "zio",
  "repository" : "zio-quill",
  "creationDate" : 1468817482516,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660814373975
    }
  },
  "githubInfo" : {
    "homepage" : "https://getquill.io",
    "description" : "Compile-time Language Integrated Queries for Scala",
    "logo" : "https://avatars.githubusercontent.com/u/49655448?v=4",
    "stars" : 2072,
    "forks" : 318,
    "watchers" : 68,
    "issues" : 363,
    "creationDate" : 1437430504000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><strong>IMPORTANT: This is the documentation for the latest <code>SNAPSHOT</code> version. Please refer to the website at <a href=\"http://getquill.io\" rel=\"nofollow\">http://getquill.io</a> for the latest release's documentation.</strong></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://raw.githubusercontent.com/getquill/quill/master/quill.png\"><img src=\"https://raw.githubusercontent.com/getquill/quill/master/quill.png\" alt=\"quill\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><strong>Compile-time Language Integrated Query for Scala</strong></p>\n<p dir=\"auto\"><a href=\"https://travis-ci.org/getquill/quill\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/3eaaa922858a475306ac1ea3f01c08681e95451ad441976023cfc684bd4d86d5/68747470733a2f2f7472617669732d63692e6f72672f6765747175696c6c2f7175696c6c2e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/getquill/quill.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://codecov.io/github/getquill/quill?branch=master\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/cd03ae536b1180852eb8b97f8a2f9e20e82aced72609e5d6aefaf810daf4300a/68747470733a2f2f636f6465636f762e696f2f6769746875622f6765747175696c6c2f7175696c6c2f636f7665726167652e7376673f6272616e63683d6d6173746572\" alt=\"codecov.io\" data-canonical-src=\"https://codecov.io/github/getquill/quill/coverage.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/getquill/quill?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/06c55569604c09f117e9c9795d1c21d1cc3aa2a4fadeb0e3a2bca46bcd494a67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769747465722d6a6f696e253230636861742d677265656e2e737667\" alt=\"Join the chat at https://gitter.im/getquill/quill\" data-canonical-src=\"https://img.shields.io/badge/gitter-join%20chat-green.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/io.getquill/quill-core_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/abfda75e6d6b31842e01f5878a569498a6cb40a2615e165be5a1faef0855d940/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f696f2e6765747175696c6c2f7175696c6c2d636f72655f322e31332f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/io.getquill/quill-core_2.13/badge.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://www.javadoc.io/doc/io.getquill/quill-core_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/ddeb37c14581725d164da7b7a1a8eaf7e985c0aa1017b05eec3c12789e5dc29e/68747470733a2f2f7777772e6a617661646f632e696f2f62616467652f696f2e6765747175696c6c2f7175696c6c2d636f72655f322e31332e737667\" alt=\"Javadocs\" data-canonical-src=\"https://www.javadoc.io/badge/io.getquill/quill-core_2.13.svg\" style=\"max-width: 100%;\"></a></p>\n<h1 dir=\"auto\"><a id=\"user-content-what-is-quill\" class=\"anchor\" aria-hidden=\"true\" href=\"#what-is-quill\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>What is Quill?</h1>\n<p dir=\"auto\">Quill provides a Quoted Domain Specific Language (<a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf\" rel=\"nofollow\">QDSL</a>) to express queries in Scala and execute them in a target language. The library's core is designed to support multiple target languages, currently featuring specializations for Structured Query Language (<a href=\"https://en.wikipedia.org/wiki/SQL\" rel=\"nofollow\">SQL</a>) and Cassandra Query Language (<a href=\"https://cassandra.apache.org/doc/latest/cql/\" rel=\"nofollow\">CQL</a>).</p>\n<blockquote>\n<h3 dir=\"auto\"><a id=\"user-content-scala-3-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-3-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala 3 Support</h3>\n<p dir=\"auto\"><a href=\"https://github.com/zio/zio-protoquill\">ProtoQuill</a> provides Scala 3 support for Quill rebuilding on top of new metaprogramming capabilities from the ground &gt; up! It is published to maven-central as the <code>quill-&lt;module&gt;_3</code> line of artifacts.</p>\n</blockquote>\n<blockquote>\n<h3 dir=\"auto\"><a id=\"user-content-doobie-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#doobie-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Doobie Support</h3>\n<p dir=\"auto\">See <a href=\"#quill-doobie\">here</a> for Doobie integration instructions.</p>\n</blockquote>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://raw.githubusercontent.com/getquill/quill/master/example.gif\"><img src=\"https://raw.githubusercontent.com/getquill/quill/master/example.gif\" alt=\"example\" data-animated-image=\"\" style=\"max-width: 100%;\"></a></p>\n<ol dir=\"auto\">\n<li><strong>Boilerplate-free mapping</strong>: The database schema is mapped using simple case classes.</li>\n<li><strong>Quoted DSL</strong>: Queries are defined inside a <code>quote</code> block. Quill parses each quoted block of code (quotation) at compile time and translates them to an internal Abstract Syntax Tree (AST)</li>\n<li><strong>Compile-time query generation</strong>: The <code>ctx.run</code> call reads the quotation's AST and translates it to the target language at compile time, emitting the query string as a compilation message. As the query string is known at compile time, the runtime overhead is very low and similar to using the database driver directly.</li>\n<li><strong>Compile-time query validation</strong>: If configured, the query is verified against the database at compile time and the compilation fails if it is not valid. The query validation <strong>does not</strong> alter the database state.</li>\n</ol>\n<p dir=\"auto\">Note: The GIF example uses Eclipse, which shows compilation messages to the user.</p>\n<h1 dir=\"auto\"><a id=\"user-content-getting-started\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-started\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Getting Started</h1>\n<blockquote>\n<h3 dir=\"auto\"><a id=\"user-content-scastie-is-a-great-tool-to-try-out-quill-without-having-to-prepare-a-local-environment-it-works-with-mirror-contexts-see-this-snippet-as-an-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#scastie-is-a-great-tool-to-try-out-quill-without-having-to-prepare-a-local-environment-it-works-with-mirror-contexts-see-this-snippet-as-an-example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><a href=\"https://scastie.scala-lang.org/\" rel=\"nofollow\">Scastie</a> is a great tool to try out Quill without having to prepare a local environment. It works with <a href=\"#mirror-context\">mirror contexts</a>, see <a href=\"https://scastie.scala-lang.org/QwOewNEiR3mFlKIM7v900A\" rel=\"nofollow\">this</a> snippet as an example.</h3>\n</blockquote>\n<p dir=\"auto\">Quill has integrations with many libraries. If you are using a regular RDBMS e.g. PostgreSQL\nand want to use Quill to query it with an asychronous, non-blocking, reactive application, the easiest way to get\nstarted is by using an awesome library called ZIO.</p>\n<p dir=\"auto\">A simple ZIO + Quill application looks like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Person(name: String, age: Int)\n\nclass DataService(quill: Quill.Postgres[SnakeCase]) {\n  import quill._\n  def getPeople: ZIO[Any, SQLException, List[Person]] = run(query[Person])\n}\nobject DataService {\n  def getPeople: ZIO[DataService, SQLException, List[Person]] =\n    ZIO.serviceWithZIO[DataService](_.getPeople)\n\n  val live = ZLayer.fromFunction(new DataService(_))\n}\nobject Main extends ZIOAppDefault {\n  override def run = {\n    DataService.getPeople\n      .provide(\n        DataService.live,\n        Quill.Postgres.fromNamingStrategy(SnakeCase),\n        Quill.DataSource.fromPrefix(&quot;myDatabaseConfig&quot;)\n      )\n      .debug(&quot;Results&quot;)\n      .exitCode\n  }\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DataService</span>(<span class=\"pl-v\">quill</span>: <span class=\"pl-en\">Quill</span>.<span class=\"pl-en\">Postgres</span>[<span class=\"pl-en\">SnakeCase</span>]) {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">quill</span>.<span class=\"pl-en\">_</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">getPeople</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ZIO</span>[<span class=\"pl-en\">Any</span>, <span class=\"pl-en\">SQLException</span>, <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Person</span>]] <span class=\"pl-k\">=</span> run(query[<span class=\"pl-en\">Person</span>])\n}\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">DataService</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">getPeople</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ZIO</span>[<span class=\"pl-en\">DataService</span>, <span class=\"pl-en\">SQLException</span>, <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Person</span>]] <span class=\"pl-k\">=</span>\n    <span class=\"pl-en\">ZIO</span>.serviceWithZIO[<span class=\"pl-en\">DataService</span>](_.getPeople)\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">live</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ZLayer</span>.fromFunction(<span class=\"pl-k\">new</span> <span class=\"pl-en\">DataService</span>(_))\n}\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">Main</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">ZIOAppDefault</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-en\">DataService</span>.getPeople\n      .provide(\n        <span class=\"pl-en\">DataService</span>.live,\n        <span class=\"pl-en\">Quill</span>.<span class=\"pl-en\">Postgres</span>.fromNamingStrategy(<span class=\"pl-en\">SnakeCase</span>),\n        <span class=\"pl-en\">Quill</span>.<span class=\"pl-en\">DataSource</span>.fromPrefix(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myDatabaseConfig<span class=\"pl-pds\">\"</span></span>)\n      )\n      .debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Results<span class=\"pl-pds\">\"</span></span>)\n      .exitCode\n  }\n}</pre></div>\n<p dir=\"auto\">Add the following to build.sbt:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot;          %% &quot;quill-jdbc-zio&quot; % &quot;4.1.1-SNAPSHOT&quot;,\n  &quot;org.postgresql&quot;       %  &quot;postgresql&quot;     % &quot;42.3.1&quot;\n)\"><pre>libraryDependencies <span class=\"pl-k\">++</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>io.getquill<span class=\"pl-pds\">\"</span></span>          <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>quill-jdbc-zio<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4.1.1-SNAPSHOT<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.postgresql<span class=\"pl-pds\">\"</span></span>       <span class=\"pl-k\">%</span>  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>postgresql<span class=\"pl-pds\">\"</span></span>     <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>42.3.1<span class=\"pl-pds\">\"</span></span>\n)</pre></div>\n<p dir=\"auto\">You can find this code (with some more examples) complete with a docker-provided Postgres database <a href=\"https://github.com/deusaquilus/zio-quill-gettingstarted\">here</a>.\nA veriety of other examples using Quill with ZIO are available in the <a href=\"https://github.com/zio/zio-quill/tree/master/quill-jdbc-zio/src/test/scala/io/getquill/examples\">examples</a> folder.</p>\n<h2 dir=\"auto\"><a id=\"user-content-choosing-a-module\" class=\"anchor\" aria-hidden=\"true\" href=\"#choosing-a-module\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Choosing a Module</h2>\n<p dir=\"auto\">Choose the quill module that works for you!</p>\n<ul dir=\"auto\">\n<li>If you are starting from scratch with a regular RDBMS try using the <code>quill-jdbc-zio</code> module as shown above.</li>\n<li>If you are developing a legacy Java project and don't want/need reactive, use <code>quill-jdbc</code>.</li>\n<li>If you are developing a project with Cats and/or Monix, try <code>quill-jdbc-monix</code>.</li>\n<li>If you like to \"live dangerously\" and want to try a socket-level async library, try <code>quill-jasync-postgres</code>\nor <code>quill-jasync-mysql</code>.</li>\n<li>If you are using Cassandra, Spark, or OrientDB, try the corresponding modules for each of them.</li>\n</ul>\n<h1 dir=\"auto\"><a id=\"user-content-writing-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#writing-queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Writing Queries</h1>\n<h2 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Introduction</h2>\n<p dir=\"auto\">The QDSL allows the user to write plain Scala code, leveraging Scala's syntax and type system. Quotations are created using the <code>quote</code> method and can contain any excerpt of code that uses supported operations. To create quotations, first create a context instance. Please see the <a href=\"#contexts\">context</a> section for more details on the different context available.</p>\n<p dir=\"auto\">For this documentation, a special type of context that acts as a <a href=\"#mirror-context\">mirror</a> is used:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.getquill._\n\nval ctx = new SqlMirrorContext(MirrorSqlDialect, Literal)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlMirrorContext</span>(<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>)</pre></div>\n<p dir=\"auto\">The context instance provides all the types, methods, and encoders/decoders needed for quotations:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import ctx._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">A quotation can be a simple value:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val pi = quote(3.14159)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">pi</span> <span class=\"pl-k\">=</span> quote(<span class=\"pl-c1\">3.14159</span>)</pre></div>\n<p dir=\"auto\">And be used within another quotation:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Circle(radius: Float)\n\nval areas = quote {\n  query[Circle].map(c =&gt; pi * c.radius * c.radius)\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Circle</span>(<span class=\"pl-v\">radius</span>: <span class=\"pl-en\">Float</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">areas</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].map(c <span class=\"pl-k\">=&gt;</span> pi <span class=\"pl-k\">*</span> c.radius <span class=\"pl-k\">*</span> c.radius)\n}</pre></div>\n<p dir=\"auto\">Quotations can also contain high-order functions and inline values:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val area = quote {\n  (c: Circle) =&gt; {\n    val r2 = c.radius * c.radius\n    pi * r2\n  }\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">area</span> <span class=\"pl-k\">=</span> quote {\n  (<span class=\"pl-v\">c</span>: <span class=\"pl-en\">Circle</span>) <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">r2</span> <span class=\"pl-k\">=</span> c.radius <span class=\"pl-k\">*</span> c.radius\n    pi <span class=\"pl-k\">*</span> r2\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val areas = quote {\n  query[Circle].map(c =&gt; area(c))\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">areas</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].map(c <span class=\"pl-k\">=&gt;</span> area(c))\n}</pre></div>\n<p dir=\"auto\">Quill's normalization engine applies reduction steps before translating the quotation to the target language. The correspondent normalized quotation for both versions of the <code>areas</code> query is:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val areas = quote {\n  query[Circle].map(c =&gt; 3.14159 * c.radius * c.radius)\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">areas</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].map(c <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">3.14159</span> <span class=\"pl-k\">*</span> c.radius <span class=\"pl-k\">*</span> c.radius)\n}</pre></div>\n<p dir=\"auto\">Scala doesn't have support for high-order functions with type parameters. It's possible to use a method type parameter for this purpose:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def existsAny[T] = quote {\n  (xs: Query[T]) =&gt; (p: T =&gt; Boolean) =&gt;\n    \txs.filter(p(_)).nonEmpty\n}\n\nval q = quote {\n  query[Circle].filter { c1 =&gt;\n    existsAny(query[Circle])(c2 =&gt; c2.radius &gt; c1.radius)\n  }\n}\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">existsAny</span>[<span class=\"pl-en\">T</span>] <span class=\"pl-k\">=</span> quote {\n  (<span class=\"pl-v\">xs</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">T</span>]) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-v\">p</span>: <span class=\"pl-en\">T</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Boolean</span>) <span class=\"pl-k\">=&gt;</span>\n    \txs.filter(p(_)).nonEmpty\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].filter { c1 <span class=\"pl-k\">=&gt;</span>\n    existsAny(query[<span class=\"pl-en\">Circle</span>])(c2 <span class=\"pl-k\">=&gt;</span> c2.radius <span class=\"pl-k\">&gt;</span> c1.radius)\n  }\n}</pre></div>\n<p dir=\"auto\">You can also use implicit classes to extend things in quotations.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit class Ext(q: Query[Person]) {\n  def olderThan(age: Int) = quote {\n    query[Person].filter(p =&gt; p.age &gt; lift(age))\n  }\n}\n\nrun(query[Person].olderThan(44))\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Ext</span>(<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">olderThan</span>(<span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=</span> quote {\n    query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> lift(age))\n  }\n}\n\nrun(query[<span class=\"pl-en\">Person</span>].olderThan(<span class=\"pl-c1\">44</span>))</pre></div>\n<p dir=\"auto\">(see <a href=\"#implicit-extensions\">implicit-extensions</a> for additional information.)</p>\n<h2 dir=\"auto\"><a id=\"user-content-compile-time-quotations\" class=\"anchor\" aria-hidden=\"true\" href=\"#compile-time-quotations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Compile-time quotations</h2>\n<p dir=\"auto\">Quotations are both compile-time and runtime values. Quill uses a type refinement to store the quotation's AST as an annotation available at compile-time and the <code>q.ast</code> method exposes the AST as runtime value.</p>\n<p dir=\"auto\">It is important to avoid giving explicit types to quotations when possible. For instance, this quotation can't be read at compile-time as the type refinement is lost:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Avoid type widening (Quoted[Query[Circle]]), or else the quotation will be dynamic.\nval q: Quoted[Query[Circle]] = quote {\n  query[Circle].filter(c =&gt; c.radius &gt; 10)\n}\n\nctx.run(q) // Dynamic query\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Avoid type widening (Quoted[Query[Circle]]), or else the quotation will be dynamic.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Quoted</span>[<span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Circle</span>]] <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].filter(c <span class=\"pl-k\">=&gt;</span> c.radius <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Dynamic query</span></pre></div>\n<p dir=\"auto\">Quill falls back to runtime normalization and query generation if the quotation's AST can't be read at compile-time. Please refer to <a href=\"#dynamic-queries\">dynamic queries</a> for more information.</p>\n<h4 dir=\"auto\"><a id=\"user-content-inline-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#inline-queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Inline queries</h4>\n<p dir=\"auto\">Quoting is implicit when writing a query in a <code>run</code> statement.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.run(query[Circle].map(_.radius))\n// SELECT r.radius FROM Circle r\"><pre>ctx.run(query[<span class=\"pl-en\">Circle</span>].map(_.radius))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT r.radius FROM Circle r</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-bindings\" class=\"anchor\" aria-hidden=\"true\" href=\"#bindings\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Bindings</h2>\n<p dir=\"auto\">Quotations are designed to be self-contained, without references to runtime values outside their scope. There are two mechanisms to explicitly bind runtime values to a quotation execution.</p>\n<h3 dir=\"auto\"><a id=\"user-content-lifted-values\" class=\"anchor\" aria-hidden=\"true\" href=\"#lifted-values\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Lifted values</h3>\n<p dir=\"auto\">A runtime value can be lifted to a quotation through the method <code>lift</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def biggerThan(i: Float) = quote {\n  query[Circle].filter(r =&gt; r.radius &gt; lift(i))\n}\nctx.run(biggerThan(10)) // SELECT r.radius FROM Circle r WHERE r.radius &gt; ?\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">biggerThan</span>(<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Float</span>) <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].filter(r <span class=\"pl-k\">=&gt;</span> r.radius <span class=\"pl-k\">&gt;</span> lift(i))\n}\nctx.run(biggerThan(<span class=\"pl-c1\">10</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT r.radius FROM Circle r WHERE r.radius &gt; ?</span></pre></div>\n<p dir=\"auto\">Note that literal-constants do not need to be lifted, they can be used in queries directly. Literal constants are supported starting Scala 2.12.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final val minAge = 21  // This is the same as: final val minAge: 21 = 21\nctx.run(query[Person].filter(p =&gt; p.age &gt; minAge)) // SELECT p.name, p.age FROM Person p WHERE p.name &gt; 21\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">minAge</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">21</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> This is the same as: final val minAge: 21 = 21</span>\nctx.run(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> minAge)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM Person p WHERE p.name &gt; 21</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-lifted-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#lifted-queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Lifted queries</h3>\n<p dir=\"auto\">A <code>Iterable</code> instance can be lifted as a <code>Query</code>. There are two main usages for lifted queries:</p>\n<h4 dir=\"auto\"><a id=\"user-content-contains\" class=\"anchor\" aria-hidden=\"true\" href=\"#contains\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>contains</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def find(radiusList: List[Float]) = quote {\n  query[Circle].filter(r =&gt; liftQuery(radiusList).contains(r.radius))\n}\nctx.run(find(List(1.1F, 1.2F)))\n// SELECT r.radius FROM Circle r WHERE r.radius IN (?)\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">find</span>(<span class=\"pl-v\">radiusList</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Float</span>]) <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].filter(r <span class=\"pl-k\">=&gt;</span> liftQuery(radiusList).contains(r.radius))\n}\nctx.run(find(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">1.1F</span>, <span class=\"pl-c1\">1.2F</span>)))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT r.radius FROM Circle r WHERE r.radius IN (?)</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-batch-action\" class=\"anchor\" aria-hidden=\"true\" href=\"#batch-action\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>batch action</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def insertValues(circles: List[Circle]) = quote {\n  liftQuery(circles).foreach(c =&gt; query[Circle].insertValue(c))\n}\nctx.run(insertValues(List(Circle(1.1F), Circle(1.2F))))\n// INSERT INTO Circle (radius) VALUES (?)\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">insertValues</span>(<span class=\"pl-v\">circles</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Circle</span>]) <span class=\"pl-k\">=</span> quote {\n  liftQuery(circles).foreach(c <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Circle</span>].insertValue(c))\n}\nctx.run(insertValues(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Circle</span>(<span class=\"pl-c1\">1.1F</span>), <span class=\"pl-en\">Circle</span>(<span class=\"pl-c1\">1.2F</span>))))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Circle (radius) VALUES (?)</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-schema\" class=\"anchor\" aria-hidden=\"true\" href=\"#schema\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Schema</h2>\n<p dir=\"auto\">The database schema is represented by case classes. By default, quill uses the class and field names as the database identifiers:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Circle(radius: Float)\n\nval q = quote {\n  query[Circle].filter(c =&gt; c.radius &gt; 1)\n}\n\nctx.run(q) // SELECT c.radius FROM Circle c WHERE c.radius &gt; 1\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Circle</span>(<span class=\"pl-v\">radius</span>: <span class=\"pl-en\">Float</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Circle</span>].filter(c <span class=\"pl-k\">=&gt;</span> c.radius <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT c.radius FROM Circle c WHERE c.radius &gt; 1</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-schema-customization\" class=\"anchor\" aria-hidden=\"true\" href=\"#schema-customization\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Schema customization</h3>\n<p dir=\"auto\">Alternatively, the identifiers can be customized:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val circles = quote {\n  querySchema[Circle](&quot;circle_table&quot;, _.radius -&gt; &quot;radius_column&quot;)\n}\n\nval q = quote {\n  circles.filter(c =&gt; c.radius &gt; 1)\n}\n\nctx.run(q)\n// SELECT c.radius_column FROM circle_table c WHERE c.radius_column &gt; 1\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">circles</span> <span class=\"pl-k\">=</span> quote {\n  querySchema[<span class=\"pl-en\">Circle</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>circle_table<span class=\"pl-pds\">\"</span></span>, _.radius <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>radius_column<span class=\"pl-pds\">\"</span></span>)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  circles.filter(c <span class=\"pl-k\">=&gt;</span> c.radius <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT c.radius_column FROM circle_table c WHERE c.radius_column &gt; 1</span></pre></div>\n<p dir=\"auto\">If multiple tables require custom identifiers, it is good practice to define a <code>schema</code> object with all table queries to be reused across multiple queries:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Circle(radius: Int)\ncase class Rectangle(length: Int, width: Int)\nobject schema {\n  val circles = quote {\n    querySchema[Circle](\n        &quot;circle_table&quot;,\n        _.radius -&gt; &quot;radius_column&quot;)\n  }\n  val rectangles = quote {\n    querySchema[Rectangle](\n        &quot;rectangle_table&quot;,\n        _.length -&gt; &quot;length_column&quot;,\n        _.width -&gt; &quot;width_column&quot;)\n  }\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Circle</span>(<span class=\"pl-v\">radius</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Rectangle</span>(<span class=\"pl-v\">length</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">width</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">schema</span> {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">circles</span> <span class=\"pl-k\">=</span> quote {\n    querySchema[<span class=\"pl-en\">Circle</span>](\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>circle_table<span class=\"pl-pds\">\"</span></span>,\n        _.radius <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>radius_column<span class=\"pl-pds\">\"</span></span>)\n  }\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">rectangles</span> <span class=\"pl-k\">=</span> quote {\n    querySchema[<span class=\"pl-en\">Rectangle</span>](\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rectangle_table<span class=\"pl-pds\">\"</span></span>,\n        _.length <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>length_column<span class=\"pl-pds\">\"</span></span>,\n        _.width <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>width_column<span class=\"pl-pds\">\"</span></span>)\n  }\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-database-generated-values\" class=\"anchor\" aria-hidden=\"true\" href=\"#database-generated-values\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Database-generated values</h3>\n<h4 dir=\"auto\"><a id=\"user-content-returninggenerated\" class=\"anchor\" aria-hidden=\"true\" href=\"#returninggenerated\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>returningGenerated</h4>\n<p dir=\"auto\">Database generated values can be returned from an insert query by using <code>.returningGenerated</code>. These properties\nwill also be excluded from the insertion since they are database generated.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Product(id: Int, description: String, sku: Long)\n\nval q = quote {\n  query[Product].insertValue(lift(Product(0, &quot;My Product&quot;, 1011L))).returningGenerated(_.id)\n}\n\nval returnedIds = ctx.run(q) //: List[Int]\n// INSERT INTO Product (description,sku) VALUES (?, ?) -- NOTE that 'id' is not being inserted.\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Product</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">description</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">sku</span>: <span class=\"pl-en\">Long</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insertValue(lift(<span class=\"pl-en\">Product</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Product<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1011L</span>))).returningGenerated(_.id)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">returnedIds</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Int]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (description,sku) VALUES (?, ?) -- NOTE that 'id' is not being inserted.</span></pre></div>\n<p dir=\"auto\">Multiple properties can be returned in a Tuple or Case Class and all of them will be excluded from insertion.</p>\n<blockquote>\n<p dir=\"auto\">NOTE: Using multiple properties is currently supported by Postgres, Oracle and SQL Server</p>\n</blockquote>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Assuming sku is generated by the database.\nval q = quote {\n  query[Product].insertValue(lift(Product(0, &quot;My Product&quot;, 1011L))).returningGenerated(r =&gt; (id, sku))\n}\n\nval returnedIds = ctx.run(q) //: List[(Int, Long)]\n// INSERT INTO Product (description) VALUES (?) RETURNING id, sku -- NOTE that 'id' and 'sku' are not being inserted.\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Assuming sku is generated by the database.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insertValue(lift(<span class=\"pl-en\">Product</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Product<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1011L</span>))).returningGenerated(r <span class=\"pl-k\">=&gt;</span> (id, sku))\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">returnedIds</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Int, Long)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (description) VALUES (?) RETURNING id, sku -- NOTE that 'id' and 'sku' are not being inserted.</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-returning\" class=\"anchor\" aria-hidden=\"true\" href=\"#returning\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>returning</h4>\n<p dir=\"auto\">In UPDATE and DELETE queries we frequently want to return the records that were modified/deleted.\nThe <code>returning</code> method is used for that.</p>\n<blockquote>\n<p dir=\"auto\">Note that most of these operations are only supported in Postgres and SQL Server</p>\n</blockquote>\n<p dir=\"auto\">For example when we want to return information from records that are being updated:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val desc = &quot;Update Product&quot;\nval sku = 2002L\nval q = quote {\n  query[Product].filter(p =&gt; p.id == 42).update(_.description = lift(desc), _.sku = lift(sku)).returning(r =&gt; (r.id, r.description))\n}\nval updated = ctx.run(q) //: (Int, String)\n// Postgres\n// UPDATE Product AS p SET description = ?, sku = ? WHERE p.id = 42 RETURNING p.id, p.description\n// SQL Server\n// UPDATE Product SET description = ?, sku = ? OUTPUT id, description WHERE id = 42\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">desc</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Update Product<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">sku</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2002L</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">42</span>).update(_.description <span class=\"pl-k\">=</span> lift(desc), _.sku <span class=\"pl-k\">=</span> lift(sku)).returning(r <span class=\"pl-k\">=&gt;</span> (r.id, r.description))\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">updated</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: (Int, String)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Postgres</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = ?, sku = ? WHERE p.id = 42 RETURNING p.id, p.description</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SQL Server</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product SET description = ?, sku = ? OUTPUT id, description WHERE id = 42</span></pre></div>\n<blockquote>\n<p dir=\"auto\">When multiple records are updated using <code>update.returning</code> a warning will be issued and only the first result will be returned.\nUse <a href=\"#returningmany\"><code>returningMany</code></a> to return all the updated records in this case.</p>\n</blockquote>\n<p dir=\"auto\">You can do the same thing with <code>updateValue</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// (use an UpdateMeta to exclude generated id columns)\nimplicit val productUpdateMeta = updateMeta[Product](_.id)\nval q = quote {\n  query[Product].filter(p =&gt; p.id == 42).updateValue(lift(Product(42, &quot;Updated Product&quot;, 2022L))).returning(r =&gt; (r.id, r.description))\n}\nval updated = ctx.run(q) //: (Int, String)\n// Postgres\n// UPDATE Product AS p SET description = ?, sku = ? WHERE p.id = 42 RETURNING p.id, p.description\n// SQL Server\n// UPDATE Product SET description = ?, sku = ? OUTPUT INSERTED.id, INSERTED.description WHERE id = 42\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> (use an UpdateMeta to exclude generated id columns)</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">productUpdateMeta</span> <span class=\"pl-k\">=</span> updateMeta[<span class=\"pl-en\">Product</span>](_.id)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">42</span>).updateValue(lift(<span class=\"pl-en\">Product</span>(<span class=\"pl-c1\">42</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Updated Product<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">2022L</span>))).returning(r <span class=\"pl-k\">=&gt;</span> (r.id, r.description))\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">updated</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: (Int, String)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Postgres</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = ?, sku = ? WHERE p.id = 42 RETURNING p.id, p.description</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SQL Server</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product SET description = ?, sku = ? OUTPUT INSERTED.id, INSERTED.description WHERE id = 42</span></pre></div>\n<p dir=\"auto\">You can also return information that is being deleted in a DELETE query. Or even the entire deleted record!</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].filter(p =&gt; p.id == 42).delete.returning(r =&gt; r)\n}\n\nval deleted = ctx.run(q) //: Product\n// Postgres\n// DELETE FROM Product AS p WHERE p.id = 42 RETURNING p.id, p.description, p.sku \n// SQL Server\n// DELETE FROM Product OUTPUT DELETED.id, DELETED.description, DELETED.sku WHERE id = 42\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">42</span>).delete.returning(r <span class=\"pl-k\">=&gt;</span> r)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">deleted</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: Product</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Postgres</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Product AS p WHERE p.id = 42 RETURNING p.id, p.description, p.sku </span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SQL Server</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Product OUTPUT DELETED.id, DELETED.description, DELETED.sku WHERE id = 42</span></pre></div>\n<blockquote>\n<p dir=\"auto\">When multiple records are deleted using <code>delete.returning</code> a warning will be issued and only the first result will be returned.\nUse <a href=\"#returningmany\"><code>returningMany</code></a> to return all the deleted records in this case.</p>\n</blockquote>\n<h4 dir=\"auto\"><a id=\"user-content-returningmany\" class=\"anchor\" aria-hidden=\"true\" href=\"#returningmany\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>returningMany</h4>\n<p dir=\"auto\">Similar to insert/update.returning, the returningMany function can be used to return all the values that were\nupdated/deleted from a query. Not just one.</p>\n<p dir=\"auto\">Return <em>all</em> the records that were updated.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val desc = &quot;Update Product&quot;\nval sku = 2002L\nval q = quote {\n  query[Product].filter(p =&gt; p.id == 42).update(_.description = lift(desc), _.sku = lift(sku)).returning(r =&gt; (r.id, r.description))\n}\nval updated = ctx.run(q) //: List[(Int, String)]\n// Postgres\n// UPDATE Product AS p SET description = ?, sku = ? WHERE p.id = 42 RETURNING p.id, p.description\n// SQL Server\n// UPDATE Product SET description = ?, sku = ? OUTPUT id, description WHERE id = 42\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">desc</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Update Product<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">sku</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2002L</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">42</span>).update(_.description <span class=\"pl-k\">=</span> lift(desc), _.sku <span class=\"pl-k\">=</span> lift(sku)).returning(r <span class=\"pl-k\">=&gt;</span> (r.id, r.description))\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">updated</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Int, String)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Postgres</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = ?, sku = ? WHERE p.id = 42 RETURNING p.id, p.description</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SQL Server</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product SET description = ?, sku = ? OUTPUT id, description WHERE id = 42</span></pre></div>\n<p dir=\"auto\">Return <em>all</em> the records that were deleted.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].filter(p =&gt; p.id == 42).delete.returning(r =&gt; r)\n}\n\nval deleted = ctx.run(q) //: List[Product]\n// Postgres\n// DELETE FROM Product AS p WHERE p.id = 42 RETURNING p.id, p.description, p.sku \n// SQL Server\n// DELETE FROM Product OUTPUT DELETED.id, DELETED.description, DELETED.sku WHERE id = 42\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">42</span>).delete.returning(r <span class=\"pl-k\">=&gt;</span> r)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">deleted</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Product]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Postgres</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Product AS p WHERE p.id = 42 RETURNING p.id, p.description, p.sku </span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SQL Server</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Product OUTPUT DELETED.id, DELETED.description, DELETED.sku WHERE id = 42</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-postgres-customized-returning\" class=\"anchor\" aria-hidden=\"true\" href=\"#postgres-customized-returning\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Postgres Customized returning</h4>\n<p dir=\"auto\">Returning values returned can be further customized in some databases.</p>\n<p dir=\"auto\">In Postgres, the <code>returning</code> and <code>returningGenerated</code> methods also support arithmetic operations, SQL UDFs and\neven entire queries for INSERT, UPDATE, and DELETE actions. These are inserted directly into the SQL <code>RETURNING</code> clause.</p>\n<p dir=\"auto\">For example, assuming this basic query:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].filter(p =&gt; p.id == 42).update(_.description -&gt; &quot;My Product&quot;, _.sku -&gt; 1011L)\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">42</span>).update(_.description <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Product<span class=\"pl-pds\">\"</span></span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1011L</span>)\n}</pre></div>\n<p dir=\"auto\">Add 100 to the value of <code>id</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.run(q.returning(r =&gt; r.id + 100)) //: List[Int]\n// UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42 RETURNING p.id + 100\"><pre>ctx.run(q.returning(r <span class=\"pl-k\">=&gt;</span> r.id <span class=\"pl-k\">+</span> <span class=\"pl-c1\">100</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Int]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42 RETURNING p.id + 100</span></pre></div>\n<p dir=\"auto\">Pass the value of <code>id</code> into a UDF:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val udf = quote { (i: Long) =&gt; sql&quot;myUdf($i)&quot;.as[Int] }\nctx.run(q.returning(r =&gt; udf(r.id))) //: List[Int]\n// UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42 RETURNING myUdf(p.id)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">udf</span> <span class=\"pl-k\">=</span> quote { (<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Long</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">myUdf(</span>$i<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Int</span>] }\nctx.run(q.returning(r <span class=\"pl-k\">=&gt;</span> udf(r.id))) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Int]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42 RETURNING myUdf(p.id)</span></pre></div>\n<p dir=\"auto\">Use the return value of <code>sku</code> to issue a query:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Supplier(id: Int, clientSku: Long)\nctx.run {\n  q.returning(r =&gt; query[Supplier].filter(s =&gt; s.sku == r.sku).map(_.id).max)\n} //: List[Option[Long]]\n// UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42 RETURNING (SELECT MAX(s.id) FROM Supplier s WHERE s.sku = clientSku)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Supplier</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">clientSku</span>: <span class=\"pl-en\">Long</span>)\nctx.run {\n  q.returning(r <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Supplier</span>].filter(s <span class=\"pl-k\">=&gt;</span> s.sku <span class=\"pl-k\">==</span> r.sku).map(_.id).max)\n} <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Option[Long]]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42 RETURNING (SELECT MAX(s.id) FROM Supplier s WHERE s.sku = clientSku)</span></pre></div>\n<p dir=\"auto\">As is typically the case with Quill, you can use all of these features together.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.run {\n  q.returning(r =&gt;\n    (r.id + 100, udf(r.id), query[Supplier].filter(s =&gt; s.sku == r.sku).map(_.id).max)\n  )\n} // List[(Int, Int, Option[Long])]\n// UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42\n// RETURNING id + 100, myUdf(id), (SELECT MAX(s.id) FROM Supplier s WHERE s.sku = sku)\"><pre>ctx.run {\n  q.returning(r <span class=\"pl-k\">=&gt;</span>\n    (r.id <span class=\"pl-k\">+</span> <span class=\"pl-c1\">100</span>, udf(r.id), query[<span class=\"pl-en\">Supplier</span>].filter(s <span class=\"pl-k\">=&gt;</span> s.sku <span class=\"pl-k\">==</span> r.sku).map(_.id).max)\n  )\n} <span class=\"pl-c\"><span class=\"pl-c\">//</span> List[(Int, Int, Option[Long])]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Product AS p SET description = 'My Product', sku = 1011L WHERE p.id = 42</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> RETURNING id + 100, myUdf(id), (SELECT MAX(s.id) FROM Supplier s WHERE s.sku = sku)</span></pre></div>\n<blockquote>\n<p dir=\"auto\">NOTE: Queries used inside of return clauses can only return a single row per insert.\nOtherwise, Postgres will throw:\n<code>ERROR: more than one row returned by a subquery used as an expression</code>. This is why is it strongly\nrecommended that you use aggregators such as <code>max</code> or <code>min</code>inside of quill returning-clause queries.\nIn the case that this is impossible (e.g. when using Postgres booleans), you can use the <code>.value</code> method:\n<code>q.returning(r =&gt; query[Supplier].filter(s =&gt; s.sku == r.sku).map(_.id).value)</code>.</p>\n</blockquote>\n<h4 dir=\"auto\"><a id=\"user-content-insertreturning\" class=\"anchor\" aria-hidden=\"true\" href=\"#insertreturning\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>insert.returning</h4>\n<p dir=\"auto\">In certain situations we also may want to return information from inserted records.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].insertValue(lift(Product(0, &quot;My Product&quot;, 1011L))).returning(r =&gt; (id, description))\n}\n\nval returnedIds = ctx.run(q) //: List[(Int, String)]\n// INSERT INTO Product (id, description, sku) VALUES (?, ?, ?) RETURNING id, description\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insertValue(lift(<span class=\"pl-en\">Product</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Product<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1011L</span>))).returning(r <span class=\"pl-k\">=&gt;</span> (id, description))\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">returnedIds</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Int, String)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (id, description, sku) VALUES (?, ?, ?) RETURNING id, description</span></pre></div>\n<p dir=\"auto\">Wait a second! Why did we just insert <code>id</code> into the database? That is because <code>returning</code> does not exclude values\nfrom the insertion! We can fix this situation by manually specifying the columns to insert:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].insert(_.description -&gt; &quot;My Product&quot;, _.sku -&gt; 1011L))).returning(r =&gt; (id, description))\n}\n\nval returnedIds = ctx.run(q) //: List[(Int, String)]\n// INSERT INTO Product (description, sku) VALUES (?, ?) RETURNING id, description\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insert(_.description <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Product<span class=\"pl-pds\">\"</span></span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1011L</span>))).returning(r <span class=\"pl-k\">=&gt;</span> (id, description))\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">returnedIds</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Int, String)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (description, sku) VALUES (?, ?) RETURNING id, description</span></pre></div>\n<p dir=\"auto\">We can also fix this situation by using an insert-meta.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val productInsertMeta = insertMeta[Product](_.id)\nval q = quote {\n  query[Product].insertValue(lift(Product(0L, &quot;My Product&quot;, 1011L))).returning(r =&gt; (id, description))\n}\n\nval returnedIds = ctx.run(q) //: List[(Int, String)]\n// INSERT INTO Product (description, sku) VALUES (?, ?) RETURNING id, description\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">productInsertMeta</span> <span class=\"pl-k\">=</span> insertMeta[<span class=\"pl-en\">Product</span>](_.id)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insertValue(lift(<span class=\"pl-en\">Product</span>(<span class=\"pl-c1\">0L</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My Product<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1011L</span>))).returning(r <span class=\"pl-k\">=&gt;</span> (id, description))\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">returnedIds</span> <span class=\"pl-k\">=</span> ctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Int, String)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (description, sku) VALUES (?, ?) RETURNING id, description</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-embedded-case-classes\" class=\"anchor\" aria-hidden=\"true\" href=\"#embedded-case-classes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Embedded case classes</h3>\n<p dir=\"auto\">Quill supports nested <code>Embedded</code> case classes:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Contact(phone: String, address: String) extends Embedded\ncase class Person(id: Int, name: String, contact: Contact)\n\nctx.run(query[Person])\n// SELECT x.id, x.name, x.phone, x.address FROM Person x\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Contact</span>(<span class=\"pl-v\">phone</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">address</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Embedded</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">contact</span>: <span class=\"pl-en\">Contact</span>)\n\nctx.run(query[<span class=\"pl-en\">Person</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.phone, x.address FROM Person x</span></pre></div>\n<p dir=\"auto\">Note that default naming behavior uses the name of the nested case class properties. It's possible to override this default behavior using a custom <code>schema</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Contact(phone: String, address: String) extends Embedded\ncase class Person(id: Int, name: String, homeContact: Contact, workContact: Option[Contact])\n\nval q = quote {\n  querySchema[Person](\n    &quot;Person&quot;,\n    _.homeContact.phone          -&gt; &quot;homePhone&quot;,\n    _.homeContact.address        -&gt; &quot;homeAddress&quot;,\n    _.workContact.map(_.phone)   -&gt; &quot;workPhone&quot;,\n    _.workContact.map(_.address) -&gt; &quot;workAddress&quot;\n  )\n}\n\nctx.run(q)\n// SELECT x.id, x.name, x.homePhone, x.homeAddress, x.workPhone, x.workAddress FROM Person x\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Contact</span>(<span class=\"pl-v\">phone</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">address</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Embedded</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">homeContact</span>: <span class=\"pl-en\">Contact</span>, <span class=\"pl-v\">workContact</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Contact</span>])\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  querySchema[<span class=\"pl-en\">Person</span>](\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Person<span class=\"pl-pds\">\"</span></span>,\n    _.homeContact.phone          <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>homePhone<span class=\"pl-pds\">\"</span></span>,\n    _.homeContact.address        <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>homeAddress<span class=\"pl-pds\">\"</span></span>,\n    _.workContact.map(_.phone)   <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>workPhone<span class=\"pl-pds\">\"</span></span>,\n    _.workContact.map(_.address) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>workAddress<span class=\"pl-pds\">\"</span></span>\n  )\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.homePhone, x.homeAddress, x.workPhone, x.workAddress FROM Person x</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Queries</h2>\n<p dir=\"auto\">The overall abstraction of quill queries uses database tables as if they were in-memory collections. Scala for-comprehensions provide syntactic sugar to deal with these kinds of monadic operations:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Person(id: Int, name: String, age: Int)\ncase class Contact(personId: Int, phone: String)\n\nval q = quote {\n  for {\n    p &lt;- query[Person] if(p.id == 999)\n    c &lt;- query[Contact] if(c.personId == p.id)\n  } yield {\n    (p.name, c.phone)\n  }\n}\n\nctx.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Contact</span>(<span class=\"pl-v\">personId</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">phone</span>: <span class=\"pl-en\">String</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">if</span>(p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">999</span>)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Contact</span>] <span class=\"pl-k\">if</span>(c.personId <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> {\n    (p.name, c.phone)\n  }\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></pre></div>\n<p dir=\"auto\">Quill normalizes the quotation and translates the monadic joins to applicative joins, generating a database-friendly query that avoids nested queries.</p>\n<p dir=\"auto\">Any of the following features can be used together with the others and/or within a for-comprehension:</p>\n<h3 dir=\"auto\"><a id=\"user-content-filter\" class=\"anchor\" aria-hidden=\"true\" href=\"#filter\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>filter</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.age &gt; 18)\n}\n\nctx.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 18\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">18</span>)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 18</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-map\" class=\"anchor\" aria-hidden=\"true\" href=\"#map\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>map</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].map(p =&gt; p.name)\n}\n\nctx.run(q)\n// SELECT p.name FROM Person p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> p.name)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-flatmap\" class=\"anchor\" aria-hidden=\"true\" href=\"#flatmap\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>flatMap</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.age &gt; 18).flatMap(p =&gt; query[Contact].filter(c =&gt; c.personId == p.id))\n}\n\nctx.run(q)\n// SELECT c.personId, c.phone FROM Person p, Contact c WHERE (p.age &gt; 18) AND (c.personId = p.id)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">18</span>).flatMap(p <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Contact</span>].filter(c <span class=\"pl-k\">=&gt;</span> c.personId <span class=\"pl-k\">==</span> p.id))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT c.personId, c.phone FROM Person p, Contact c WHERE (p.age &gt; 18) AND (c.personId = p.id)</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sortby\" class=\"anchor\" aria-hidden=\"true\" href=\"#sortby\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sortBy</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q1 = quote {\n  query[Person].sortBy(p =&gt; p.age)\n}\n\nctx.run(q1)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age ASC NULLS FIRST\n\nval q2 = quote {\n  query[Person].sortBy(p =&gt; p.age)(Ord.descNullsLast)\n}\n\nctx.run(q2)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age DESC NULLS LAST\n\nval q3 = quote {\n  query[Person].sortBy(p =&gt; (p.name, p.age))(Ord(Ord.asc, Ord.desc))\n}\n\nctx.run(q3)\n// SELECT p.id, p.name, p.age FROM Person p ORDER BY p.name ASC, p.age DESC\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].sortBy(p <span class=\"pl-k\">=&gt;</span> p.age)\n}\n\nctx.run(q1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age ASC NULLS FIRST</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].sortBy(p <span class=\"pl-k\">=&gt;</span> p.age)(<span class=\"pl-en\">Ord</span>.descNullsLast)\n}\n\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p ORDER BY p.age DESC NULLS LAST</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q3</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].sortBy(p <span class=\"pl-k\">=&gt;</span> (p.name, p.age))(<span class=\"pl-en\">Ord</span>(<span class=\"pl-en\">Ord</span>.asc, <span class=\"pl-en\">Ord</span>.desc))\n}\n\nctx.run(q3)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p ORDER BY p.name ASC, p.age DESC</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-aggregation\" class=\"anchor\" aria-hidden=\"true\" href=\"#aggregation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>aggregation</h3>\n<p dir=\"auto\">You can use aggregators inside of map-clauses. Multiple aggregators can be used as needed.\nAvailable aggregators are <code>max</code>, <code>min</code>, <code>count</code>, <code>avg</code> and <code>sum</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].map(p =&gt; (min(p.age), max(p.age)))\n}\n// SELECT MIN(p.age), MAX(p.age) FROM Person p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> (min(p.age), max(p.age)))\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT MIN(p.age), MAX(p.age) FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-groupbymap\" class=\"anchor\" aria-hidden=\"true\" href=\"#groupbymap\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>groupByMap</h3>\n<p dir=\"auto\">The <code>groupByMap</code> method is the preferred way to do grouping in Quill. It provides a simple aggregation-syntax similar to SQL.\nAvailable aggregators are <code>max</code>, <code>min</code>, <code>count</code>, <code>avg</code> and <code>sum</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].groupByMap(p =&gt; p.name)(p =&gt; (p.name, max(p.age)))\n}\nctx.run(q)\n// SELECT p.name, MAX(p.age) FROM Person p GROUP BY p.name\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].groupByMap(p <span class=\"pl-k\">=&gt;</span> p.name)(p <span class=\"pl-k\">=&gt;</span> (p.name, max(p.age)))\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, MAX(p.age) FROM Person p GROUP BY p.name</span></pre></div>\n<p dir=\"auto\">You can use as many aggregators as needed and group by multiple fields (using a Tuple).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].groupByMap(p =&gt; (p.name, p.otherField))(p =&gt; (p.name, p.otherField, max(p.age)))\n}\nctx.run(q)\n// SELECT p.name, p.otherField, MAX(p.age) FROM Person p GROUP BY p.name, p.otherField\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].groupByMap(p <span class=\"pl-k\">=&gt;</span> (p.name, p.otherField))(p <span class=\"pl-k\">=&gt;</span> (p.name, p.otherField, max(p.age)))\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.otherField, MAX(p.age) FROM Person p GROUP BY p.name, p.otherField</span></pre></div>\n<p dir=\"auto\">Writing a custom aggregator using <code>infix</code> with the <code>groupByMax</code> syntax is also very simple.\nFor example, in Postgres the <code>STRING_AGG</code> function is used to concatenate all the encountered strings.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val stringAgg = quote {\n  (str: String, separator: String) =&gt; sql&quot;STRING_AGG($str, $separator)&quot;.pure.as[String]\n}\nval q = quote {\n  query[Person].groupByMap(p =&gt; p.age)(p =&gt; (p.age, stringAgg(p.name, &quot;;&quot;)))\n}\nrun(q)\n// SELECT p.age, STRING_AGG(p.name, ';') FROM Person p GROUP BY p.age\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">stringAgg</span> <span class=\"pl-k\">=</span> quote {\n  (<span class=\"pl-v\">str</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">separator</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">STRING_AGG(</span>$str<span class=\"pl-s\">, </span>$separator<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.pure.as[<span class=\"pl-en\">String</span>]\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].groupByMap(p <span class=\"pl-k\">=&gt;</span> p.age)(p <span class=\"pl-k\">=&gt;</span> (p.age, stringAgg(p.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>;<span class=\"pl-pds\">\"</span></span>)))\n}\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.age, STRING_AGG(p.name, ';') FROM Person p GROUP BY p.age</span></pre></div>\n<p dir=\"auto\">You can also map to a case class instead of a tuple. This will give you a <code>Query[YourCaseClass]</code> that you can further compose.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class NameAge(name: String, age: Int)\n// Will return Query[NameAge]\nval q = quote {\n  query[Person].groupByMap(p =&gt; p.name)(p =&gt; NameAge(p.name, max(p.age)))\n}\nctx.run(q)\n// SELECT p.name, MAX(p.age) FROM Person p GROUP BY p.name\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">NameAge</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Will return Query[NameAge]</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].groupByMap(p <span class=\"pl-k\">=&gt;</span> p.name)(p <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">NameAge</span>(p.name, max(p.age)))\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, MAX(p.age) FROM Person p GROUP BY p.name</span></pre></div>\n<blockquote>\n<p dir=\"auto\">Note that it is a requirement in SQL for every column in the selection (without an aggregator) to be in the <code>GROUP BY</code> clause.\nIf it is not, an exception will be thrown by the database. Quill does not (yet!) protect the user in this situation.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"run( query[Person].groupByMap(p =&gt; p.name)(p =&gt; (p.name, p.otherField, max(p.age))) )\n// &gt; SELECT p.name, p.otherField, MAX(p.age) FROM Person p GROUP BY p.name\n// ERROR: column &quot;person.otherField&quot; must appear in the GROUP BY clause or be used in an aggregate function\"><pre>run( query[<span class=\"pl-en\">Person</span>].groupByMap(p <span class=\"pl-k\">=&gt;</span> p.name)(p <span class=\"pl-k\">=&gt;</span> (p.name, p.otherField, max(p.age))) )\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> &gt; SELECT p.name, p.otherField, MAX(p.age) FROM Person p GROUP BY p.name</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ERROR: column \"person.otherField\" must appear in the GROUP BY clause or be used in an aggregate function</span></pre></div>\n</blockquote>\n<h3 dir=\"auto\"><a id=\"user-content-groupby\" class=\"anchor\" aria-hidden=\"true\" href=\"#groupby\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>groupBy</h3>\n<p dir=\"auto\">Quill also provides a way to do <code>groupBy/map</code> in a more scala-idiomatic way. In this case (below), the <code>groupBy</code>\nproduces a <code>Query[(Int,Query[Person])]</code> where the inner Query can be mapped to an expression with an aggregator\n(as would be the Scala <code>List[Person]</code> in <code>Map[Int,List[Person]]</code> resulting from a <code>(people:List[Person]).groupBy(_.name)</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].groupBy(p =&gt; p.age).map {\n    case (age, people) =&gt;\n      (age, people.size)\n  }\n}\n\nctx.run(q)\n// SELECT p.age, COUNT(*) FROM Person p GROUP BY p.age\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].groupBy(p <span class=\"pl-k\">=&gt;</span> p.age).map {\n    <span class=\"pl-k\">case</span> (age, people) <span class=\"pl-k\">=&gt;</span>\n      (age, people.size)\n  }\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.age, COUNT(*) FROM Person p GROUP BY p.age</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-droptake\" class=\"anchor\" aria-hidden=\"true\" href=\"#droptake\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>drop/take</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].drop(2).take(1)\n}\n\nctx.run(q)\n// SELECT x.id, x.name, x.age FROM Person x LIMIT 1 OFFSET 2\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].drop(<span class=\"pl-c1\">2</span>).take(<span class=\"pl-c1\">1</span>)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.age FROM Person x LIMIT 1 OFFSET 2</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-concatmap-ie-unnest\" class=\"anchor\" aria-hidden=\"true\" href=\"#concatmap-ie-unnest\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>concatMap (i.e. <code>UNNEST</code>)</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// similar to `flatMap` but for transformations that return a traversable instead of `Query`\n\nval q = quote {\n  query[Person].concatMap(p =&gt; p.name.split(&quot; &quot;))\n}\n\nctx.run(q)\n// SELECT UNNEST(SPLIT(p.name, &quot; &quot;)) FROM Person p\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> similar to `flatMap` but for transformations that return a traversable instead of `Query`</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].concatMap(p <span class=\"pl-k\">=&gt;</span> p.name.split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT UNNEST(SPLIT(p.name, \" \")) FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-union\" class=\"anchor\" aria-hidden=\"true\" href=\"#union\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>union</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.age &gt; 18).union(query[Person].filter(p =&gt; p.age &gt; 60))\n}\n\nctx.run(q)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18\n// UNION SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">18</span>).union(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">60</span>))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UNION SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-unionall\" class=\"anchor\" aria-hidden=\"true\" href=\"#unionall\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>unionAll/++</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.age &gt; 18).unionAll(query[Person].filter(p =&gt; p.age &gt; 60))\n}\n\nctx.run(q)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18\n// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x\n\nval q2 = quote {\n  query[Person].filter(p =&gt; p.age &gt; 18) ++ query[Person].filter(p =&gt; p.age &gt; 60)\n}\n\nctx.run(q2)\n// SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18\n// UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">18</span>).unionAll(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">60</span>))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">18</span>) <span class=\"pl-k\">++</span> query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">60</span>)\n}\n\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.age FROM (SELECT id, name, age FROM Person p WHERE p.age &gt; 18</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UNION ALL SELECT id, name, age FROM Person p1 WHERE p1.age &gt; 60) x</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-aggregation-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#aggregation-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>aggregation</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val r = quote {\n  query[Person].map(p =&gt; p.age)\n}\n\nctx.run(r.min) // SELECT MIN(p.age) FROM Person p\nctx.run(r.max) // SELECT MAX(p.age) FROM Person p\nctx.run(r.avg) // SELECT AVG(p.age) FROM Person p\nctx.run(r.sum) // SELECT SUM(p.age) FROM Person p\nctx.run(r.size) // SELECT COUNT(p.age) FROM Person p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">r</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> p.age)\n}\n\nctx.run(r.min) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT MIN(p.age) FROM Person p</span>\nctx.run(r.max) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT MAX(p.age) FROM Person p</span>\nctx.run(r.avg) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT AVG(p.age) FROM Person p</span>\nctx.run(r.sum) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT SUM(p.age) FROM Person p</span>\nctx.run(r.size) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT COUNT(p.age) FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-isemptynonempty\" class=\"anchor\" aria-hidden=\"true\" href=\"#isemptynonempty\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>isEmpty/nonEmpty</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter{ p1 =&gt;\n    query[Person].filter(p2 =&gt; p2.id != p1.id &amp;&amp; p2.age == p1.age).isEmpty\n  }\n}\n\nctx.run(q)\n// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE\n// NOT EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))\n\nval q2 = quote {\n  query[Person].filter{ p1 =&gt;\n    query[Person].filter(p2 =&gt; p2.id != p1.id &amp;&amp; p2.age == p1.age).nonEmpty\n  }\n}\n\nctx.run(q2)\n// SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE\n// EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter{ p1 <span class=\"pl-k\">=&gt;</span>\n    query[<span class=\"pl-en\">Person</span>].filter(p2 <span class=\"pl-k\">=&gt;</span> p2.id <span class=\"pl-k\">!=</span> p1.id <span class=\"pl-k\">&amp;&amp;</span> p2.age <span class=\"pl-k\">==</span> p1.age).isEmpty\n  }\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> NOT EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter{ p1 <span class=\"pl-k\">=&gt;</span>\n    query[<span class=\"pl-en\">Person</span>].filter(p2 <span class=\"pl-k\">=&gt;</span> p2.id <span class=\"pl-k\">!=</span> p1.id <span class=\"pl-k\">&amp;&amp;</span> p2.age <span class=\"pl-k\">==</span> p1.age).nonEmpty\n  }\n}\n\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p1.id, p1.name, p1.age FROM Person p1 WHERE</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> EXISTS (SELECT * FROM Person p2 WHERE (p2.id &lt;&gt; p1.id) AND (p2.age = p1.age))</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-contains-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#contains-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>contains</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; liftQuery(Set(1, 2)).contains(p.id))\n}\n\nctx.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?, ?)\n\nval q1 = quote { (ids: Query[Int]) =&gt;\n  query[Person].filter(p =&gt; ids.contains(p.id))\n}\n\nctx.run(q1(liftQuery(List(1, 2))))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?, ?)\n\nval peopleWithContacts = quote {\n  query[Person].filter(p =&gt; query[Contact].filter(c =&gt; c.personId == p.id).nonEmpty)\n}\nval q2 = quote {\n  query[Person].filter(p =&gt; peopleWithContacts.contains(p.id))\n}\n\nctx.run(q2)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (SELECT p1.* FROM Person p1 WHERE EXISTS (SELECT c.* FROM Contact c WHERE c.personId = p1.id))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> liftQuery(<span class=\"pl-en\">Set</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>)).contains(p.id))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?, ?)</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote { (<span class=\"pl-v\">ids</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=&gt;</span>\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> ids.contains(p.id))\n}\n\nctx.run(q1(liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>))))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (?, ?)</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">peopleWithContacts</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Contact</span>].filter(c <span class=\"pl-k\">=&gt;</span> c.personId <span class=\"pl-k\">==</span> p.id).nonEmpty)\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> peopleWithContacts.contains(p.id))\n}\n\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.id IN (SELECT p1.* FROM Person p1 WHERE EXISTS (SELECT c.* FROM Contact c WHERE c.personId = p1.id))</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-distinct\" class=\"anchor\" aria-hidden=\"true\" href=\"#distinct\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>distinct</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].map(p =&gt; p.age).distinct\n}\n\nctx.run(q)\n// SELECT DISTINCT p.age FROM Person p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> p.age).distinct\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT DISTINCT p.age FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-distinct-on\" class=\"anchor\" aria-hidden=\"true\" href=\"#distinct-on\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>distinct on</h3>\n<blockquote>\n<p dir=\"auto\">Note that <code>DISTINCT ON</code> is currently only supported in Postgres and H2.</p>\n</blockquote>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].distinctOn(p =&gt; p.name)\n}\n\nctx.run(q)\n// SELECT DISTINCT ON (p.name) p.name, p.age FROM Person\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].distinctOn(p <span class=\"pl-k\">=&gt;</span> p.name)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT DISTINCT ON (p.name) p.name, p.age FROM Person</span></pre></div>\n<p dir=\"auto\">Typically, <code>DISTINCT ON</code> is used with <code>SORT BY</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].distinctOn(p =&gt; p.name).sortBy(p =&gt; p.age)\n}\n\nctx.run(q)\n// SELECT DISTINCT ON (p.name) p.name, p.age FROM Person ORDER BY p.age ASC NULLS FIRST\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].distinctOn(p <span class=\"pl-k\">=&gt;</span> p.name).sortBy(p <span class=\"pl-k\">=&gt;</span> p.age)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT DISTINCT ON (p.name) p.name, p.age FROM Person ORDER BY p.age ASC NULLS FIRST</span></pre></div>\n<p dir=\"auto\">You can also use multiple fields in the <code>DISTINCT ON</code> criteria:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// case class Person(firstName: String, lastName: String, age: Int)\nval q = quote {\n  query[Person].distinctOn(p =&gt; (p.firstName, p.lastName))\n}\n\nctx.run(q)\n// SELECT DISTINCT ON (p.firstName, p.lastName) p.firstName, p.lastName, p.age FROM Person p\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> case class Person(firstName: String, lastName: String, age: Int)</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].distinctOn(p <span class=\"pl-k\">=&gt;</span> (p.firstName, p.lastName))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT DISTINCT ON (p.firstName, p.lastName) p.firstName, p.lastName, p.age FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-nested\" class=\"anchor\" aria-hidden=\"true\" href=\"#nested\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>nested</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.name == &quot;John&quot;).nested.map(p =&gt; p.age)\n}\n\nctx.run(q)\n// SELECT p.age FROM (SELECT p.age FROM Person p WHERE p.name = 'John') p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).nested.map(p <span class=\"pl-k\">=&gt;</span> p.age)\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.age FROM (SELECT p.age FROM Person p WHERE p.name = 'John') p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-joins\" class=\"anchor\" aria-hidden=\"true\" href=\"#joins\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>joins</h3>\n<p dir=\"auto\">Joins are arguably the largest source of complexity in most SQL queries.\nQuill offers a few different syntaxes so you can choose the right one for your use-case!</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class A(id: Int)\ncase class B(fk: Int)\n\n// Applicative Joins:\nquote {\n  query[A].join(query[B]).on(_.id == _.fk)\n}\n\n// Implicit Joins:\nquote {\n  for {\n    a &lt;- query[A]\n    b &lt;- query[B] if (a.id == b.fk)\n  } yield (a, b)\n}\n\n// Flat Joins:\nquote {\n  for {\n    a &lt;- query[A]\n    b &lt;- query[B].join(_.fk == a.id)\n  } yield (a, b)\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">A</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">B</span>(<span class=\"pl-v\">fk</span>: <span class=\"pl-en\">Int</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Applicative Joins:</span>\nquote {\n  query[<span class=\"pl-en\">A</span>].join(query[<span class=\"pl-en\">B</span>]).on(_.id <span class=\"pl-k\">==</span> _.fk)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Implicit Joins:</span>\nquote {\n  <span class=\"pl-k\">for</span> {\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">A</span>]\n    b <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">B</span>] <span class=\"pl-k\">if</span> (a.id <span class=\"pl-k\">==</span> b.fk)\n  } <span class=\"pl-k\">yield</span> (a, b)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Flat Joins:</span>\nquote {\n  <span class=\"pl-k\">for</span> {\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">A</span>]\n    b <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">B</span>].join(_.fk <span class=\"pl-k\">==</span> a.id)\n  } <span class=\"pl-k\">yield</span> (a, b)\n}</pre></div>\n<p dir=\"auto\">Let's see them one by one assuming the following schema:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Person(id: Int, name: String)\ncase class Address(street: String, zip: Int, fk: Int)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Address</span>(<span class=\"pl-v\">street</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">zip</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">fk</span>: <span class=\"pl-en\">Int</span>)</pre></div>\n<p dir=\"auto\">(Note: If your use case involves lots and lots of joins, both inner and outer. Skip right to the flat-joins section!)</p>\n<h4 dir=\"auto\"><a id=\"user-content-applicative-joins\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicative-joins\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>applicative joins</h4>\n<p dir=\"auto\">Applicative joins are useful for joining two tables together,\nthey are straightforward to understand, and typically look good on one line.\nQuill supports inner, left-outer, right-outer, and full-outer (i.e. cross) applicative joins.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Inner Join\nval q = quote {\n  query[Person].join(query[Address]).on(_.id == _.fk)\n}\n\nctx.run(q) //: List[(Person, Address)]\n// SELECT x1.id, x1.name, x2.street, x2.zip, x2.fk\n// FROM Person x1 INNER JOIN Address x2 ON x1.id = x2.fk\n\n// Left (Outer) Join\nval q = quote {\n  query[Person].leftJoin(query[Address]).on((p, a) =&gt; p.id == a.fk)\n}\n\nctx.run(q) //: List[(Person, Option[Address])]\n// Note that when you use named-variables in your comprehension, Quill does its best to honor them in the query.\n// SELECT p.id, p.name, a.street, a.zip, a.fk\n// FROM Person p LEFT JOIN Address a ON p.id = a.fk\n\n// Right (Outer) Join\nval q = quote {\n  query[Person].rightJoin(query[Address]).on((p, a) =&gt; p.id == a.fk)\n}\n\nctx.run(q) //: List[(Option[Person], Address)]\n// SELECT p.id, p.name, a.street, a.zip, a.fk\n// FROM Person p RIGHT JOIN Address a ON p.id = a.fk\n\n// Full (Outer) Join\nval q = quote {\n  query[Person].fullJoin(query[Address]).on((p, a) =&gt; p.id == a.fk)\n}\n\nctx.run(q) //: List[(Option[Person], Option[Address])]\n// SELECT p.id, p.name, a.street, a.zip, a.fk\n// FROM Person p FULL JOIN Address a ON p.id = a.fk\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Inner Join</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].join(query[<span class=\"pl-en\">Address</span>]).on(_.id <span class=\"pl-k\">==</span> _.fk)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Address)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x1.id, x1.name, x2.street, x2.zip, x2.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person x1 INNER JOIN Address x2 ON x1.id = x2.fk</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Left (Outer) Join</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].leftJoin(query[<span class=\"pl-en\">Address</span>]).on((p, a) <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> a.fk)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Option[Address])]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Note that when you use named-variables in your comprehension, Quill does its best to honor them in the query.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p LEFT JOIN Address a ON p.id = a.fk</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Right (Outer) Join</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].rightJoin(query[<span class=\"pl-en\">Address</span>]).on((p, a) <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> a.fk)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Option[Person], Address)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p RIGHT JOIN Address a ON p.id = a.fk</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Full (Outer) Join</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].fullJoin(query[<span class=\"pl-en\">Address</span>]).on((p, a) <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> a.fk)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Option[Person], Option[Address])]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p FULL JOIN Address a ON p.id = a.fk</span></pre></div>\n<p dir=\"auto\">What about joining more than two tables with the applicative syntax?\nHere's how to do that:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Company(zip: Int)\n\n// All is well for two tables but for three or more, the nesting mess begins:\nval q = quote {\n  query[Person]\n    .join(query[Address]).on({case (p, a) =&gt; p.id == a.fk}) // Let's use `case` here to stay consistent\n    .join(query[Company]).on({case ((p, a), c) =&gt; a.zip == c.zip})\n}\n\nctx.run(q) //: List[((Person, Address), Company)]\n// (Unfortunately when you use `case` statements, Quill can't help you with the variables names either!)\n// SELECT x01.id, x01.name, x11.street, x11.zip, x11.fk, x12.name, x12.zip\n// FROM Person x01 INNER JOIN Address x11 ON x01.id = x11.fk INNER JOIN Company x12 ON x11.zip = x12.zip\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Company</span>(<span class=\"pl-v\">zip</span>: <span class=\"pl-en\">Int</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> All is well for two tables but for three or more, the nesting mess begins:</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>]\n    .join(query[<span class=\"pl-en\">Address</span>]).on({<span class=\"pl-k\">case</span> (p, a) <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> a.fk}) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Let's use `case` here to stay consistent</span>\n    .join(query[<span class=\"pl-en\">Company</span>]).on({<span class=\"pl-k\">case</span> ((p, a), c) <span class=\"pl-k\">=&gt;</span> a.zip <span class=\"pl-k\">==</span> c.zip})\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[((Person, Address), Company)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (Unfortunately when you use `case` statements, Quill can't help you with the variables names either!)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x01.id, x01.name, x11.street, x11.zip, x11.fk, x12.name, x12.zip</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person x01 INNER JOIN Address x11 ON x01.id = x11.fk INNER JOIN Company x12 ON x11.zip = x12.zip</span></pre></div>\n<p dir=\"auto\">No worries though, implicit joins and flat joins have your other use-cases covered!</p>\n<h4 dir=\"auto\"><a id=\"user-content-implicit-joins\" class=\"anchor\" aria-hidden=\"true\" href=\"#implicit-joins\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>implicit joins</h4>\n<p dir=\"auto\">Quill's implicit joins use a monadic syntax making them pleasant to use for joining many tables together.\nThey look a lot like Scala collections when used in for-comprehensions\nmaking them familiar to a typical Scala developer.\nWhat's the catch? They can only do inner-joins.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  for {\n    p &lt;- query[Person]\n    a &lt;- query[Address] if (p.id == a.fk)\n  } yield (p, a)\n}\n\nrun(q) //: List[(Person, Address)]\n// SELECT p.id, p.name, a.street, a.zip, a.fk\n// FROM Person p, Address a WHERE p.id = a.fk\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>] <span class=\"pl-k\">if</span> (p.id <span class=\"pl-k\">==</span> a.fk)\n  } <span class=\"pl-k\">yield</span> (p, a)\n}\n\nrun(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Address)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p, Address a WHERE p.id = a.fk</span></pre></div>\n<p dir=\"auto\">Now, this is great because you can keep adding more and more joins\nwithout having to do any pesky nesting.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  for {\n    p &lt;- query[Person]\n    a &lt;- query[Address] if (p.id == a.fk)\n    c &lt;- query[Company] if (c.zip == a.zip)\n  } yield (p, a, c)\n}\n\nrun(q) //: List[(Person, Address, Company)]\n// SELECT p.id, p.name, a.street, a.zip, a.fk, c.name, c.zip\n// FROM Person p, Address a, Company c WHERE p.id = a.fk AND c.zip = a.zip\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>] <span class=\"pl-k\">if</span> (p.id <span class=\"pl-k\">==</span> a.fk)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Company</span>] <span class=\"pl-k\">if</span> (c.zip <span class=\"pl-k\">==</span> a.zip)\n  } <span class=\"pl-k\">yield</span> (p, a, c)\n}\n\nrun(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Address, Company)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk, c.name, c.zip</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p, Address a, Company c WHERE p.id = a.fk AND c.zip = a.zip</span></pre></div>\n<p dir=\"auto\">Well that looks nice but wait! What If I need to inner, <strong>and</strong> outer join lots of tables nicely?\nNo worries, flat-joins are here to help!</p>\n<h3 dir=\"auto\"><a id=\"user-content-flat-joins\" class=\"anchor\" aria-hidden=\"true\" href=\"#flat-joins\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>flat joins</h3>\n<p dir=\"auto\">Flat Joins give you the best of both worlds! In the monadic syntax, you can use both inner joins,\nand left-outer joins together without any of that pesky nesting.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Inner Join\nval q = quote {\n  for {\n    p &lt;- query[Person]\n    a &lt;- query[Address].join(a =&gt; a.fk == p.id)\n  } yield (p,a)\n}\n\nctx.run(q) //: List[(Person, Address)]\n// SELECT p.id, p.name, a.street, a.zip, a.fk\n// FROM Person p INNER JOIN Address a ON a.fk = p.id\n\n// Left (Outer) Join\nval q = quote {\n  for {\n    p &lt;- query[Person]\n    a &lt;- query[Address].leftJoin(a =&gt; a.fk == p.id)\n  } yield (p,a)\n}\n\nctx.run(q) //: List[(Person, Option[Address])]\n// SELECT p.id, p.name, a.street, a.zip, a.fk\n// FROM Person p LEFT JOIN Address a ON a.fk = p.id\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Inner Join</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>].join(a <span class=\"pl-k\">=&gt;</span> a.fk <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> (p,a)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Address)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p INNER JOIN Address a ON a.fk = p.id</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Left (Outer) Join</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>].leftJoin(a <span class=\"pl-k\">=&gt;</span> a.fk <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> (p,a)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Option[Address])]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p LEFT JOIN Address a ON a.fk = p.id</span></pre></div>\n<p dir=\"auto\">Now you can keep adding both right and left joins without nesting!</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  for {\n    p &lt;- query[Person]\n    a &lt;- query[Address].join(a =&gt; a.fk == p.id)\n    c &lt;- query[Company].leftJoin(c =&gt; c.zip == a.zip)\n  } yield (p,a,c)\n}\n\nctx.run(q) //: List[(Person, Address, Option[Company])]\n// SELECT p.id, p.name, a.street, a.zip, a.fk, c.name, c.zip\n// FROM Person p\n// INNER JOIN Address a ON a.fk = p.id\n// LEFT JOIN Company c ON c.zip = a.zip\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>].join(a <span class=\"pl-k\">=&gt;</span> a.fk <span class=\"pl-k\">==</span> p.id)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Company</span>].leftJoin(c <span class=\"pl-k\">=&gt;</span> c.zip <span class=\"pl-k\">==</span> a.zip)\n  } <span class=\"pl-k\">yield</span> (p,a,c)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Person, Address, Option[Company])]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.street, a.zip, a.fk, c.name, c.zip</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INNER JOIN Address a ON a.fk = p.id</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> LEFT JOIN Company c ON c.zip = a.zip</span></pre></div>\n<p dir=\"auto\">Can't figure out what kind of join you want to use? Who says you have to choose?</p>\n<p dir=\"auto\">With Quill the following multi-join queries are equivalent, use them according to preference:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\ncase class Employer(id: Int, personId: Int, name: String)\n\nval qFlat = quote {\n  for{\n    (p,e) &lt;- query[Person].join(query[Employer]).on(_.id == _.personId)\n       c  &lt;- query[Contact].leftJoin(_.personId == p.id)\n  } yield(p, e, c)\n}\n\nval qNested = quote {\n  for{\n    ((p,e),c) &lt;-\n      query[Person].join(query[Employer]).on(_.id == _.personId)\n      .leftJoin(query[Contact]).on(\n        _._1.id == _.personId\n      )\n  } yield(p, e, c)\n}\n\nctx.run(qFlat)\nctx.run(qNested)\n// SELECT p.id, p.name, p.age, e.id, e.personId, e.name, c.id, c.phone\n// FROM Person p INNER JOIN Employer e ON p.id = e.personId LEFT JOIN Contact c ON c.personId = p.id\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Employer</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">personId</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">qFlat</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span>{\n    (p,e) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>].join(query[<span class=\"pl-en\">Employer</span>]).on(_.id <span class=\"pl-k\">==</span> _.personId)\n       c  <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Contact</span>].leftJoin(_.personId <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span>(p, e, c)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">qNested</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span>{\n    ((p,e),c) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span>\n      query[<span class=\"pl-en\">Person</span>].join(query[<span class=\"pl-en\">Employer</span>]).on(_.id <span class=\"pl-k\">==</span> _.personId)\n      .leftJoin(query[<span class=\"pl-en\">Contact</span>]).on(\n        _._1.id <span class=\"pl-k\">==</span> _.personId\n      )\n  } <span class=\"pl-k\">yield</span>(p, e, c)\n}\n\nctx.run(qFlat)\nctx.run(qNested)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age, e.id, e.personId, e.name, c.id, c.phone</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Person p INNER JOIN Employer e ON p.id = e.personId LEFT JOIN Contact c ON c.personId = p.id</span></pre></div>\n<p dir=\"auto\">Note that in some cases implicit and flat joins cannot be used together, for example, the following\nquery will fail.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  for {\n    p &lt;- query[Person]\n    p1 &lt;- query[Person] if (p1.name == p.name)\n    c &lt;- query[Contact].leftJoin(_.personId == p.id)\n  } yield (p, c)\n}\n\n// ctx.run(q)\n// java.lang.IllegalArgumentException: requirement failed: Found an `ON` table reference of a table that is\n// not available: Set(p). The `ON` condition can only use tables defined through explicit joins.\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    p1 <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">if</span> (p1.name <span class=\"pl-k\">==</span> p.name)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Contact</span>].leftJoin(_.personId <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> (p, c)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ctx.run(q)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> java.lang.IllegalArgumentException: requirement failed: Found an `ON` table reference of a table that is</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> not available: Set(p). The `ON` condition can only use tables defined through explicit joins.</span></pre></div>\n<p dir=\"auto\">This happens because an explicit join typically cannot be done after an implicit join in the same query.</p>\n<p dir=\"auto\">A good guideline is in any query or subquery, choose one of the following:</p>\n<ul dir=\"auto\">\n<li>Use flat-joins + applicative joins or</li>\n<li>Use implicit joins</li>\n</ul>\n<p dir=\"auto\">Also, note that not all Option operations are available on outer-joined tables (i.e. tables wrapped in an <code>Option</code> object),\nonly a specific subset. This is mostly due to the inherent limitations of SQL itself. For more information, see the\n'Optional Tables' section.</p>\n<h3 dir=\"auto\"><a id=\"user-content-optionals--nullable-fields\" class=\"anchor\" aria-hidden=\"true\" href=\"#optionals--nullable-fields\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Optionals / Nullable Fields</h3>\n<blockquote>\n<p dir=\"auto\">Note that the behavior of Optionals has recently changed to include stricter null-checks. See the <a href=\"#ornull--getornull\">orNull / getOrNull</a> section for more details.</p>\n</blockquote>\n<p dir=\"auto\">Option objects are used to encode nullable fields.\nSay you have the following schema:</p>\n<div class=\"highlight highlight-source-sql notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"CREATE TABLE Person(\n  id INT NOT NULL PRIMARY KEY,\n  name VARCHAR(255) -- This is nullable!\n);\nCREATE TABLE Address(\n  fk INT, -- This is nullable!\n  street VARCHAR(255) NOT NULL,\n  zip INT NOT NULL,\n  CONSTRAINT a_to_p FOREIGN KEY (fk) REFERENCES Person(id)\n);\nCREATE TABLE Company(\n  name VARCHAR(255) NOT NULL,\n  zip INT NOT NULL\n)\"><pre><span class=\"pl-k\">CREATE</span> <span class=\"pl-k\">TABLE</span> <span class=\"pl-en\">Person</span>(\n  id <span class=\"pl-k\">INT</span> <span class=\"pl-k\">NOT NULL</span> <span class=\"pl-k\">PRIMARY KEY</span>,\n  name <span class=\"pl-k\">VARCHAR</span>(<span class=\"pl-c1\">255</span>) <span class=\"pl-c\"><span class=\"pl-c\">--</span> This is nullable!</span>\n);\n<span class=\"pl-k\">CREATE</span> <span class=\"pl-k\">TABLE</span> <span class=\"pl-en\">Address</span>(\n  fk <span class=\"pl-k\">INT</span>, <span class=\"pl-c\"><span class=\"pl-c\">--</span> This is nullable!</span>\n  street <span class=\"pl-k\">VARCHAR</span>(<span class=\"pl-c1\">255</span>) <span class=\"pl-k\">NOT NULL</span>,\n  zip <span class=\"pl-k\">INT</span> <span class=\"pl-k\">NOT NULL</span>,\n  <span class=\"pl-k\">CONSTRAINT</span> a_to_p <span class=\"pl-k\">FOREIGN KEY</span> (fk) <span class=\"pl-k\">REFERENCES</span> Person(id)\n);\n<span class=\"pl-k\">CREATE</span> <span class=\"pl-k\">TABLE</span> <span class=\"pl-en\">Company</span>(\n  name <span class=\"pl-k\">VARCHAR</span>(<span class=\"pl-c1\">255</span>) <span class=\"pl-k\">NOT NULL</span>,\n  zip <span class=\"pl-k\">INT</span> <span class=\"pl-k\">NOT NULL</span>\n)</pre></div>\n<p dir=\"auto\">This would encode to the following:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Person(id:Int, name:Option[String])\ncase class Address(fk:Option[Int], street:String, zip:Int)\ncase class Company(name:String, zip:Int)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(id<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>, name<span class=\"pl-k\">:</span><span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>])\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Address</span>(fk<span class=\"pl-k\">:</span><span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>], street<span class=\"pl-k\">:</span><span class=\"pl-en\">String</span>, zip<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Company</span>(name<span class=\"pl-k\">:</span><span class=\"pl-en\">String</span>, zip<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>)</pre></div>\n<p dir=\"auto\">Some important notes regarding Optionals and nullable fields.</p>\n<blockquote>\n<p dir=\"auto\">In many cases, Quill tries to rely on the null-fallthrough behavior that is ANSI standard:</p>\n<ul dir=\"auto\">\n<li><code>null == null := false</code></li>\n<li><code>null == [true | false] := false</code></li>\n</ul>\n<p dir=\"auto\">This allows the generated SQL for most optional operations to be simple. For example, the expression\n<code>Option[String].map(v =&gt; v + \"foo\")</code> can be expressed as the SQL <code>v || 'foo'</code> as opposed to\n<code>CASE IF (v is not null) v || 'foo' ELSE null END</code> so long as the concatenation operator <code>||</code>\n\"falls-through\" and returns <code>null</code> when the input is null. This is not true of all databases (e.g. <a href=\"https://community.oracle.com/ideas/19866\" rel=\"nofollow\">Oracle</a>),\nforcing Quill to return the longer expression with explicit null-checking. Also, if there are conditionals inside\nof an Option operation (e.g. <code>o.map(v =&gt; if (v == \"x\") \"y\" else \"z\")</code>) this creates SQL with case statements,\nwhich will never fall-through when the input value is null. This forces Quill to explicitly null-check such statements in every\nSQL dialect.</p>\n</blockquote>\n<p dir=\"auto\">Let's go through the typical operations of optionals.</p>\n<h4 dir=\"auto\"><a id=\"user-content-isdefined--isempty\" class=\"anchor\" aria-hidden=\"true\" href=\"#isdefined--isempty\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>isDefined / isEmpty</h4>\n<p dir=\"auto\">The <code>isDefined</code> method is generally a good way to null-check a nullable field:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Address].filter(a =&gt; a.fk.isDefined)\n}\nctx.run(q)\n// SELECT a.fk, a.street, a.zip FROM Address a WHERE a.fk IS NOT NULL\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Address</span>].filter(a <span class=\"pl-k\">=&gt;</span> a.fk.isDefined)\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT a.fk, a.street, a.zip FROM Address a WHERE a.fk IS NOT NULL</span></pre></div>\n<p dir=\"auto\">The <code>isEmpty</code> method works the same way:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Address].filter(a =&gt; a.fk.isEmpty)\n}\nctx.run(q)\n// SELECT a.fk, a.street, a.zip FROM Address a WHERE a.fk IS NULL\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Address</span>].filter(a <span class=\"pl-k\">=&gt;</span> a.fk.isEmpty)\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT a.fk, a.street, a.zip FROM Address a WHERE a.fk IS NULL</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-exists\" class=\"anchor\" aria-hidden=\"true\" href=\"#exists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>exists</h4>\n<p dir=\"auto\">This method is typically used for inspecting nullable fields inside of boolean conditions, most notably joining!</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].join(query[Address]).on((p, a)=&gt; a.fk.exists(_ == p.id))\n}\nctx.run(q)\n// SELECT p.id, p.name, a.fk, a.street, a.zip FROM Person p INNER JOIN Address a ON a.fk = p.id\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].join(query[<span class=\"pl-en\">Address</span>]).on((p, a)<span class=\"pl-k\">=&gt;</span> a.fk.exists(_ <span class=\"pl-k\">==</span> p.id))\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.fk, a.street, a.zip FROM Person p INNER JOIN Address a ON a.fk = p.id</span></pre></div>\n<p dir=\"auto\">Note that in the example above, the <code>exists</code> method does not cause the generated\nSQL to do an explicit null-check in order to express the <code>False</code> case. This is because Quill relies on the\ntypical database behavior of immediately falsifying a statement that has <code>null</code> on one side of the equation.</p>\n<h4 dir=\"auto\"><a id=\"user-content-forall\" class=\"anchor\" aria-hidden=\"true\" href=\"#forall\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>forall</h4>\n<p dir=\"auto\">Use this method in boolean conditions that should succeed in the null case.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].join(query[Address]).on((p, a) =&gt; a.fk.forall(_ == p.id))\n}\nctx.run(q)\n// SELECT p.id, p.name, a.fk, a.street, a.zip FROM Person p INNER JOIN Address a ON a.fk IS NULL OR a.fk = p.id\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].join(query[<span class=\"pl-en\">Address</span>]).on((p, a) <span class=\"pl-k\">=&gt;</span> a.fk.forall(_ <span class=\"pl-k\">==</span> p.id))\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.fk, a.street, a.zip FROM Person p INNER JOIN Address a ON a.fk IS NULL OR a.fk = p.id</span></pre></div>\n<p dir=\"auto\">Typically this is useful when doing negative conditions, e.g. when a field is <strong>not</strong> some specified value (e.g. <code>\"Joe\"</code>).\nBeing <code>null</code> in this case is typically a matching result.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.name.forall(_ != &quot;Joe&quot;))\n}\n\nctx.run(q)\n// SELECT p.id, p.name FROM Person p WHERE p.name IS NULL OR p.name &lt;&gt; 'Joe'\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name.forall(_ <span class=\"pl-k\">!=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name FROM Person p WHERE p.name IS NULL OR p.name &lt;&gt; 'Joe'</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-filterifdefined\" class=\"anchor\" aria-hidden=\"true\" href=\"#filterifdefined\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>filterIfDefined</h4>\n<p dir=\"auto\">Use this to filter by a optional field that you want to ignore when None.\nThis is useful when you want to filter by a map-key that may or may not exist.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val fieldFilters: Map[String, String] = Map(&quot;name&quot; -&gt; &quot;Joe&quot;, &quot;age&quot; -&gt; &quot;123&quot;)\nval q = quote {\n  query[Person].filter(p =&gt; lift(fieldFilters.get(&quot;name)).filterIfDefined(_ == p.name))\n}\n \nctx.run(q)\n// SELECT p.id, p.name, p.title FROM Person p WHERE p.title IS NULL OR p.title = 'The Honorable'\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">fieldFilters</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Map</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>123<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> lift(fieldFilters.get(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name)).filterIfDefined(_ == p.name))</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"> </span>\n<span class=\"pl-s\">ctx.run(q)</span>\n<span class=\"pl-s\">// SELECT p.id, p.name, p.title FROM Person p WHERE p.title IS NULL OR p.title = 'The Honorable'</span></pre></div>\n<p dir=\"auto\">It also works for regular fields.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// case class Person(name: String, age: Int, title: Option[String])\nval q = quote {\n  query[Person].filter(p =&gt; p.title.filterIfDefined(_ == &quot;The Honorable&quot;))\n}\n \nctx.run(q)\n// SELECT p.id, p.name, p.title FROM Person p WHERE p.title IS NULL OR p.title = 'The Honorable'\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> case class Person(name: String, age: Int, title: Option[String])</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.title.filterIfDefined(_ <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The Honorable<span class=\"pl-pds\">\"</span></span>))\n}\n \nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.title FROM Person p WHERE p.title IS NULL OR p.title = 'The Honorable'</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-map-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#map-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>map</h4>\n<p dir=\"auto\">As in regular Scala code, performing any operation on an optional value typically requires using the <code>map</code> function.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n for {\n    p &lt;- query[Person]\n  } yield (p.id, p.name.map(&quot;Dear &quot; + _))\n}\n\nctx.run(q)\n// SELECT p.id, 'Dear ' || p.name FROM Person p\n// * In Dialects where `||` does not fall-through for nulls (e.g. Oracle):\n// * SELECT p.id, CASE WHEN p.name IS NOT NULL THEN 'Dear ' || p.name ELSE null END FROM Person p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n  } <span class=\"pl-k\">yield</span> (p.id, p.name.map(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dear <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> _))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, 'Dear ' || p.name FROM Person p</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> * In Dialects where `||` does not fall-through for nulls (e.g. Oracle):</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> * SELECT p.id, CASE WHEN p.name IS NOT NULL THEN 'Dear ' || p.name ELSE null END FROM Person p</span></pre></div>\n<p dir=\"auto\">Additionally, this method is useful when you want to get a non-optional field out of an outer-joined table\n(i.e. a table wrapped in an <code>Option</code> object).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Company].leftJoin(query[Address])\n    .on((c, a) =&gt; c.zip == a.zip)\n    .map {case(c,a) =&gt;                          // Row type is (Company, Option[Address])\n      (c.name, a.map(_.street), a.map(_.zip))   // Use `Option.map` to get `street` and `zip` fields\n    }\n}\n\nrun(q)\n// SELECT c.name, a.street, a.zip FROM Company c LEFT JOIN Address a ON c.zip = a.zip\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Company</span>].leftJoin(query[<span class=\"pl-en\">Address</span>])\n    .on((c, a) <span class=\"pl-k\">=&gt;</span> c.zip <span class=\"pl-k\">==</span> a.zip)\n    .map {<span class=\"pl-k\">case</span>(c,a) <span class=\"pl-k\">=&gt;</span>                          <span class=\"pl-c\"><span class=\"pl-c\">//</span> Row type is (Company, Option[Address])</span>\n      (c.name, a.map(_.street), a.map(_.zip))   <span class=\"pl-c\"><span class=\"pl-c\">//</span> Use `Option.map` to get `street` and `zip` fields</span>\n    }\n}\n\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT c.name, a.street, a.zip FROM Company c LEFT JOIN Address a ON c.zip = a.zip</span></pre></div>\n<p dir=\"auto\">For more details about this operation (and some caveats), see the 'Optional Tables' section.</p>\n<h4 dir=\"auto\"><a id=\"user-content-flatmap-and-flatten\" class=\"anchor\" aria-hidden=\"true\" href=\"#flatmap-and-flatten\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>flatMap and flatten</h4>\n<p dir=\"auto\">Use these when the <code>Option.map</code> functionality is not sufficient. This typically happens when you need to manipulate\nmultiple nullable fields in a way which would otherwise result in <code>Option[Option[T]]</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  for {\n    a &lt;- query[Person]\n    b &lt;- query[Person] if (a.id &gt; b.id)\n  } yield (\n    // If this was `a.name.map`, resulting record type would be Option[Option[String]]\n    a.name.flatMap(an =&gt;\n      b.name.map(bn =&gt;\n        an+&quot; comes after &quot;+bn)))\n}\n\nctx.run(q) //: List[Option[String]]\n// SELECT (a.name || ' comes after ') || b.name FROM Person a, Person b WHERE a.id &gt; b.id\n// * In Dialects where `||` does not fall-through for nulls (e.g. Oracle):\n// * SELECT CASE WHEN a.name IS NOT NULL AND b.name IS NOT NULL THEN (a.name || ' comes after ') || b.name ELSE null END FROM Person a, Person b WHERE a.id &gt; b.id\n\n// Alternatively, you can use `flatten`\nval q = quote {\n  for {\n    a &lt;- query[Person]\n    b &lt;- query[Person] if (a.id &gt; b.id)\n  } yield (\n    a.name.map(an =&gt;\n      b.name.map(bn =&gt;\n        an + &quot; comes after &quot; + bn)).flatten)\n}\n\nctx.run(q) //: List[Option[String]]\n// SELECT (a.name || ' comes after ') || b.name FROM Person a, Person b WHERE a.id &gt; b.id\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    b <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">if</span> (a.id <span class=\"pl-k\">&gt;</span> b.id)\n  } <span class=\"pl-k\">yield</span> (\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> If this was `a.name.map`, resulting record type would be Option[Option[String]]</span>\n    a.name.flatMap(an <span class=\"pl-k\">=&gt;</span>\n      b.name.map(bn <span class=\"pl-k\">=&gt;</span>\n        an<span class=\"pl-k\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span> comes after <span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">+</span>bn)))\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Option[String]]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT (a.name || ' comes after ') || b.name FROM Person a, Person b WHERE a.id &gt; b.id</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> * In Dialects where `||` does not fall-through for nulls (e.g. Oracle):</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> * SELECT CASE WHEN a.name IS NOT NULL AND b.name IS NOT NULL THEN (a.name || ' comes after ') || b.name ELSE null END FROM Person a, Person b WHERE a.id &gt; b.id</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Alternatively, you can use `flatten`</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>]\n    b <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">if</span> (a.id <span class=\"pl-k\">&gt;</span> b.id)\n  } <span class=\"pl-k\">yield</span> (\n    a.name.map(an <span class=\"pl-k\">=&gt;</span>\n      b.name.map(bn <span class=\"pl-k\">=&gt;</span>\n        an <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> comes after <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> bn)).flatten)\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Option[String]]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT (a.name || ' comes after ') || b.name FROM Person a, Person b WHERE a.id &gt; b.id</span></pre></div>\n<p dir=\"auto\">This is also very useful when selecting from outer-joined tables i.e. where the entire table\nis inside of an <code>Option</code> object. Note how below we get the <code>fk</code> field from <code>Option[Address]</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].leftJoin(query[Address])\n    .on((p, a) =&gt; a.fk.exists(_ == p.id))\n    .map {case (p /*Person*/, a /*Option[Address]*/) =&gt; (p.name, a.flatMap(_.fk))}\n}\n\nctx.run(q) //: List[(Option[String], Option[Int])]\n// SELECT p.name, a.fk FROM Person p LEFT JOIN Address a ON a.fk = p.id\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].leftJoin(query[<span class=\"pl-en\">Address</span>])\n    .on((p, a) <span class=\"pl-k\">=&gt;</span> a.fk.exists(_ <span class=\"pl-k\">==</span> p.id))\n    .map {<span class=\"pl-k\">case</span> (p <span class=\"pl-c\"><span class=\"pl-c\">/*</span>Person<span class=\"pl-c\">*/</span></span>, a <span class=\"pl-c\"><span class=\"pl-c\">/*</span>Option[Address]<span class=\"pl-c\">*/</span></span>) <span class=\"pl-k\">=&gt;</span> (p.name, a.flatMap(_.fk))}\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Option[String], Option[Int])]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, a.fk FROM Person p LEFT JOIN Address a ON a.fk = p.id</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-ornull--getornull\" class=\"anchor\" aria-hidden=\"true\" href=\"#ornull--getornull\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>orNull / getOrNull</h4>\n<p dir=\"auto\">The <code>orNull</code> method can be used to convert an Option-enclosed row back into a regular row.\nSince <code>Option[T].orNull</code> does not work for primitive types (e.g. <code>Int</code>, <code>Double</code>, etc...),\nyou can use the <code>getOrNull</code> method inside of quoted blocks to do the same thing.</p>\n<blockquote>\n<p dir=\"auto\">Note that since the presence of null columns can cause queries to break in some data sources (e.g. Spark), so use this operation very carefully.</p>\n</blockquote>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].join(query[Address])\n    .on((p, a) =&gt; a.fk.exists(_ == p.id))\n    .filter {case (p /*Person*/, a /*Option[Address]*/) =&gt;\n      a.fk.getOrNull != 123 } // Exclude a particular value from the query.\n                              // Since we already did an inner-join on this value, we know it is not null.\n}\n\nctx.run(q) //: List[(Address, Person)]\n// SELECT p.id, p.name, a.fk, a.street, a.zip FROM Person p INNER JOIN Address a ON a.fk IS NOT NULL AND a.fk = p.id WHERE a.fk &lt;&gt; 123\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].join(query[<span class=\"pl-en\">Address</span>])\n    .on((p, a) <span class=\"pl-k\">=&gt;</span> a.fk.exists(_ <span class=\"pl-k\">==</span> p.id))\n    .filter {<span class=\"pl-k\">case</span> (p <span class=\"pl-c\"><span class=\"pl-c\">/*</span>Person<span class=\"pl-c\">*/</span></span>, a <span class=\"pl-c\"><span class=\"pl-c\">/*</span>Option[Address]<span class=\"pl-c\">*/</span></span>) <span class=\"pl-k\">=&gt;</span>\n      a.fk.getOrNull <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">123</span> } <span class=\"pl-c\"><span class=\"pl-c\">//</span> Exclude a particular value from the query.</span>\n                              <span class=\"pl-c\"><span class=\"pl-c\">//</span> Since we already did an inner-join on this value, we know it is not null.</span>\n}\n\nctx.run(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[(Address, Person)]</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, a.fk, a.street, a.zip FROM Person p INNER JOIN Address a ON a.fk IS NOT NULL AND a.fk = p.id WHERE a.fk &lt;&gt; 123</span></pre></div>\n<p dir=\"auto\">In certain situations, you may wish to pretend that a nullable-field is not actually nullable and perform regular operations\n(e.g. arithmetic, concatenation, etc...) on the field. You can use a combination of <code>Option.apply</code> and <code>orNull</code> (or <code>getOrNull</code> where needed)\nin order to do this.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].map(p =&gt; Option(p.name.orNull + &quot; suffix&quot;))\n}\n\nctx.run(q)\n// SELECT p.name || ' suffix' FROM Person p\n// i.e. same as the previous behavior\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Option</span>(p.name.orNull <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> suffix<span class=\"pl-pds\">\"</span></span>))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name || ' suffix' FROM Person p</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> i.e. same as the previous behavior</span></pre></div>\n<p dir=\"auto\">In all other situations, since Quill strictly checks nullable values, and <code>case.. if</code> conditionals will work correctly in all Optional constructs.\nHowever, since they may introduce behavior changes in your codebase, the following warning has been introduced:</p>\n<blockquote>\n<p dir=\"auto\">Conditionals inside of Option.[map | flatMap | exists | forall] will create a <code>CASE</code> statement in order to properly null-check the sub-query (...)</p>\n</blockquote>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].map(p =&gt; p.name.map(n =&gt; if (n == &quot;Joe&quot;) &quot;foo&quot; else &quot;bar&quot;).getOrElse(&quot;baz&quot;))\n}\n// Information:(16, 15) Conditionals inside of Option.map will create a `CASE` statement in order to properly null-check the sub-query: `p.name.map((n) =&gt; if(n == &quot;Joe&quot;) &quot;foo&quot; else &quot;bar&quot;)`.\n// Expressions like Option(if (v == &quot;foo&quot;) else &quot;bar&quot;).getOrElse(&quot;baz&quot;) will now work correctly, but expressions that relied on the broken behavior (where &quot;bar&quot; would be returned instead) need to be modified  (see the &quot;orNull / getOrNull&quot; section of the documentation of more detail).\n\nctx.run(a)\n// Used to be this:\n// SELECT CASE WHEN CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END IS NOT NULL THEN CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END ELSE 'baz' END FROM Person p\n// Now is this:\n// SELECT CASE WHEN p.name IS NOT NULL AND CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END IS NOT NULL THEN CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END ELSE 'baz' END FROM Person p\"><pre class=\"notranslate\"><code>val q = quote {\n  query[Person].map(p =&gt; p.name.map(n =&gt; if (n == \"Joe\") \"foo\" else \"bar\").getOrElse(\"baz\"))\n}\n// Information:(16, 15) Conditionals inside of Option.map will create a `CASE` statement in order to properly null-check the sub-query: `p.name.map((n) =&gt; if(n == \"Joe\") \"foo\" else \"bar\")`.\n// Expressions like Option(if (v == \"foo\") else \"bar\").getOrElse(\"baz\") will now work correctly, but expressions that relied on the broken behavior (where \"bar\" would be returned instead) need to be modified  (see the \"orNull / getOrNull\" section of the documentation of more detail).\n\nctx.run(a)\n// Used to be this:\n// SELECT CASE WHEN CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END IS NOT NULL THEN CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END ELSE 'baz' END FROM Person p\n// Now is this:\n// SELECT CASE WHEN p.name IS NOT NULL AND CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END IS NOT NULL THEN CASE WHEN p.name = 'Joe' THEN 'foo' ELSE 'bar' END ELSE 'baz' END FROM Person p\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-equals\" class=\"anchor\" aria-hidden=\"true\" href=\"#equals\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>equals</h3>\n<p dir=\"auto\">The <code>==</code>, <code>!=</code>, and <code>.equals</code> methods can be used to compare regular types as well Option types in a scala-idiomatic way.\nThat is to say, either <code>T == T</code> or <code>Option[T] == Option[T]</code> is supported and the following \"truth-table\" is observed:</p>\n<table>\n<thead>\n<tr>\n<th>Left</th>\n<th>Right</th>\n<th>Equality</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>a</code></td>\n<td><code>b</code></td>\n<td><code>==</code></td>\n<td><code>a == b</code></td>\n</tr>\n<tr>\n<td><code>Some[T](a)</code></td>\n<td><code>Some[T](b)</code></td>\n<td><code>==</code></td>\n<td><code>a == b</code></td>\n</tr>\n<tr>\n<td><code>Some[T](a)</code></td>\n<td><code>None</code></td>\n<td><code>==</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>None      </code></td>\n<td><code>Some[T](b)</code></td>\n<td><code>==</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>None      </code></td>\n<td><code>None</code></td>\n<td><code>==</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>Some[T]   </code></td>\n<td><code>Some[R]   </code></td>\n<td><code>==</code></td>\n<td>Exception thrown.</td>\n</tr>\n<tr>\n<td><code>a</code></td>\n<td><code>b</code></td>\n<td><code>!=</code></td>\n<td><code>a != b</code></td>\n</tr>\n<tr>\n<td><code>Some[T](a)</code></td>\n<td><code>Some[T](b)</code></td>\n<td><code>!=</code></td>\n<td><code>a != b</code></td>\n</tr>\n<tr>\n<td><code>Some[T](a)</code></td>\n<td><code>None</code></td>\n<td><code>!=</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>None      </code></td>\n<td><code>Some[T](b)</code></td>\n<td><code>!=</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>Some[T]   </code></td>\n<td><code>Some[R]   </code></td>\n<td><code>!=</code></td>\n<td>Exception thrown.</td>\n</tr>\n<tr>\n<td><code>None      </code></td>\n<td><code>None</code></td>\n<td><code>!=</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Node(id:Int, status:Option[String], otherStatus:Option[String])\n\nval q = quote { query[Node].filter(n =&gt; n.id == 123) }\nctx.run(q)\n// SELECT n.id, n.status, n.otherStatus FROM Node n WHERE p.id = 123\n\nval q = quote { query[Node].filter(r =&gt; r.status == r.otherStatus) }\nctx.run(q)\n// SELECT r.id, r.status, r.otherStatus FROM Node r WHERE r.status IS NULL AND r.otherStatus IS NULL OR r.status = r.otherStatus\n\nval q = quote { query[Node].filter(n =&gt; n.status == Option(&quot;RUNNING&quot;)) }\nctx.run(q)\n// SELECT n.id, n.status, n.otherStatus FROM node n WHERE n.status IS NOT NULL AND n.status = 'RUNNING'\n\nval q = quote { query[Node].filter(n =&gt; n.status != Option(&quot;RUNNING&quot;)) }\nctx.run(q)\n// SELECT n.id, n.status, n.otherStatus FROM node n WHERE n.status IS NULL OR n.status &lt;&gt; 'RUNNING'\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Node</span>(id<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>, status<span class=\"pl-k\">:</span><span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>], otherStatus<span class=\"pl-k\">:</span><span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>])\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote { query[<span class=\"pl-en\">Node</span>].filter(n <span class=\"pl-k\">=&gt;</span> n.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">123</span>) }\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT n.id, n.status, n.otherStatus FROM Node n WHERE p.id = 123</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote { query[<span class=\"pl-en\">Node</span>].filter(r <span class=\"pl-k\">=&gt;</span> r.status <span class=\"pl-k\">==</span> r.otherStatus) }\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT r.id, r.status, r.otherStatus FROM Node r WHERE r.status IS NULL AND r.otherStatus IS NULL OR r.status = r.otherStatus</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote { query[<span class=\"pl-en\">Node</span>].filter(n <span class=\"pl-k\">=&gt;</span> n.status <span class=\"pl-k\">==</span> <span class=\"pl-en\">Option</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RUNNING<span class=\"pl-pds\">\"</span></span>)) }\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT n.id, n.status, n.otherStatus FROM node n WHERE n.status IS NOT NULL AND n.status = 'RUNNING'</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote { query[<span class=\"pl-en\">Node</span>].filter(n <span class=\"pl-k\">=&gt;</span> n.status <span class=\"pl-k\">!=</span> <span class=\"pl-en\">Option</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RUNNING<span class=\"pl-pds\">\"</span></span>)) }\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT n.id, n.status, n.otherStatus FROM node n WHERE n.status IS NULL OR n.status &lt;&gt; 'RUNNING'</span></pre></div>\n<p dir=\"auto\">If you would like to use an equality operator that follows that ansi-idiomatic approach, failing\nthe comparison if either side is null as well as the principle that <code>null = null := false</code>, you can import <code>===</code> (and <code>=!=</code>)\nfrom <code>Context.extras</code>. These operators work across <code>T</code> and <code>Option[T]</code> allowing comparisons like <code>T === Option[T]</code>,\n<code>Option[T] == T</code> etc... to be made. You can use also <code>===</code>\ndirectly in Scala code and it will have the same behavior, returning <code>false</code> when other the left-hand\nor right-hand side is <code>None</code>. This is particularity useful in paradigms like Spark where\nyou will typically transition inside and outside of Quill code.</p>\n<blockquote>\n<p dir=\"auto\">When using <code>a === b</code> or <code>a =!= b</code> sometimes you will see the extra <code>a IS NOT NULL AND b IS NOT NULL</code> comparisons\nand sometimes you will not. This depends on <code>equalityBehavior</code> in <code>SqlIdiom</code> which determines whether the given SQL\ndialect already does ansi-idiomatic comparison to <code>a</code>, and <code>b</code> when an <code>=</code> operator is used,\nthis allows us to omit the extra <code>a IS NOT NULL AND b IS NOT NULL</code>.</p>\n</blockquote>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import ctx.extras._\n\n// === works the same way inside of a quotation\nval q = run( query[Node].filter(n =&gt; n.status === &quot;RUNNING&quot;) )\n// SELECT n.id, n.status FROM node n WHERE n.status IS NOT NULL AND n.status = 'RUNNING'\n\n// as well as outside\n(nodes:List[Node]).filter(n =&gt; n.status === &quot;RUNNING&quot;)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">extras</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> === works the same way inside of a quotation</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> run( query[<span class=\"pl-en\">Node</span>].filter(n <span class=\"pl-k\">=&gt;</span> n.status <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RUNNING<span class=\"pl-pds\">\"</span></span>) )\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT n.id, n.status FROM node n WHERE n.status IS NOT NULL AND n.status = 'RUNNING'</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> as well as outside</span>\n(nodes<span class=\"pl-k\">:</span><span class=\"pl-en\">List</span>[<span class=\"pl-en\">Node</span>]).filter(n <span class=\"pl-k\">=&gt;</span> n.status <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RUNNING<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-optional-tables\" class=\"anchor\" aria-hidden=\"true\" href=\"#optional-tables\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Optional Tables</h4>\n<p dir=\"auto\">As we have seen in the examples above, only the <code>map</code> and <code>flatMap</code> methods are available on outer-joined tables\n(i.e. tables wrapped in an <code>Option</code> object).</p>\n<p dir=\"auto\">Since you cannot use <code>Option[Table].isDefined</code>, if you want to null-check a whole table\n(e.g. if a left-join was not matched), you have to <code>map</code> to a specific field on which you can do the null-check.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Company].leftJoin(query[Address])\n    .on((c, a) =&gt; c.zip == a.zip)         // Row type is (Company, Option[Address])\n    .filter({case(c,a) =&gt; a.isDefined})   // You cannot null-check a whole table!\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Company</span>].leftJoin(query[<span class=\"pl-en\">Address</span>])\n    .on((c, a) <span class=\"pl-k\">=&gt;</span> c.zip <span class=\"pl-k\">==</span> a.zip)         <span class=\"pl-c\"><span class=\"pl-c\">//</span> Row type is (Company, Option[Address])</span>\n    .filter({<span class=\"pl-k\">case</span>(c,a) <span class=\"pl-k\">=&gt;</span> a.isDefined})   <span class=\"pl-c\"><span class=\"pl-c\">//</span> You cannot null-check a whole table!</span>\n}</pre></div>\n<p dir=\"auto\">Instead, map the row-variable to a specific field and then check that field.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Company].leftJoin(query[Address])\n    .on((c, a) =&gt; c.zip == a.zip)                     // Row type is (Company, Option[Address])\n    .filter({case(c,a) =&gt; a.map(_.street).isDefined}) // Null-check a non-nullable field instead\n}\nctx.run(q)\n// SELECT c.name, c.zip, a.fk, a.street, a.zip\n// FROM Company c\n// LEFT JOIN Address a ON c.zip = a.zip\n// WHERE a.street IS NOT NULL\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Company</span>].leftJoin(query[<span class=\"pl-en\">Address</span>])\n    .on((c, a) <span class=\"pl-k\">=&gt;</span> c.zip <span class=\"pl-k\">==</span> a.zip)                     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Row type is (Company, Option[Address])</span>\n    .filter({<span class=\"pl-k\">case</span>(c,a) <span class=\"pl-k\">=&gt;</span> a.map(_.street).isDefined}) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Null-check a non-nullable field instead</span>\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT c.name, c.zip, a.fk, a.street, a.zip</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Company c</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> LEFT JOIN Address a ON c.zip = a.zip</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> WHERE a.street IS NOT NULL</span></pre></div>\n<p dir=\"auto\">Finally, it is worth noting that a whole table can be wrapped into an <code>Option</code> object. This is particularly\nuseful when doing a union on table-sets that are both right-joined and left-joined together.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val aCompanies = quote {\n  for {\n    c &lt;- query[Company] if (c.name like &quot;A%&quot;)\n    a &lt;- query[Address].join(_.zip == c.zip)\n  } yield (c, Option(a))  // change (Company, Address) to (Company, Option[Address])\n}\nval bCompanies = quote {\n  for {\n    c &lt;- query[Company] if (c.name like &quot;A%&quot;)\n    a &lt;- query[Address].leftJoin(_.zip == c.zip)\n  } yield (c, a) // (Company, Option[Address])\n}\nval union = quote {\n  aCompanies union bCompanies\n}\nctx.run(union)\n// SELECT x.name, x.zip, x.fk, x.street, x.zip FROM (\n// (SELECT c.name name, c.zip zip, x1.zip zip, x1.fk fk, x1.street street\n// FROM Company c INNER JOIN Address x1 ON x1.zip = c.zip WHERE c.name like 'A%')\n// UNION\n// (SELECT c1.name name, c1.zip zip, x2.zip zip, x2.fk fk, x2.street street\n// FROM Company c1 LEFT JOIN Address x2 ON x2.zip = c1.zip WHERE c1.name like 'A%')\n// ) x\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">aCompanies</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Company</span>] <span class=\"pl-k\">if</span> (c.name like <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A%<span class=\"pl-pds\">\"</span></span>)\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>].join(_.zip <span class=\"pl-k\">==</span> c.zip)\n  } <span class=\"pl-k\">yield</span> (c, <span class=\"pl-en\">Option</span>(a))  <span class=\"pl-c\"><span class=\"pl-c\">//</span> change (Company, Address) to (Company, Option[Address])</span>\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">bCompanies</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Company</span>] <span class=\"pl-k\">if</span> (c.name like <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A%<span class=\"pl-pds\">\"</span></span>)\n    a <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Address</span>].leftJoin(_.zip <span class=\"pl-k\">==</span> c.zip)\n  } <span class=\"pl-k\">yield</span> (c, a) <span class=\"pl-c\"><span class=\"pl-c\">//</span> (Company, Option[Address])</span>\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">union</span> <span class=\"pl-k\">=</span> quote {\n  aCompanies union bCompanies\n}\nctx.run(union)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.name, x.zip, x.fk, x.street, x.zip FROM (</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (SELECT c.name name, c.zip zip, x1.zip zip, x1.fk fk, x1.street street</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Company c INNER JOIN Address x1 ON x1.zip = c.zip WHERE c.name like 'A%')</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UNION</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (SELECT c1.name name, c1.zip zip, x2.zip zip, x2.fk fk, x2.street street</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> FROM Company c1 LEFT JOIN Address x2 ON x2.zip = c1.zip WHERE c1.name like 'A%')</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ) x</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-ad-hoc-case-classes\" class=\"anchor\" aria-hidden=\"true\" href=\"#ad-hoc-case-classes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Ad-Hoc Case Classes</h3>\n<p dir=\"auto\">Case Classes can also be used inside quotations as output values:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Person(id: Int, name: String, age: Int)\ncase class Contact(personId: Int, phone: String)\ncase class ReachablePerson(name:String, phone: String)\n\nval q = quote {\n  for {\n    p &lt;- query[Person] if(p.id == 999)\n    c &lt;- query[Contact] if(c.personId == p.id)\n  } yield {\n    ReachablePerson(p.name, c.phone)\n  }\n}\n\nctx.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Contact</span>(<span class=\"pl-v\">personId</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">phone</span>: <span class=\"pl-en\">String</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">ReachablePerson</span>(name<span class=\"pl-k\">:</span><span class=\"pl-en\">String</span>, <span class=\"pl-v\">phone</span>: <span class=\"pl-en\">String</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">if</span>(p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">999</span>)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Contact</span>] <span class=\"pl-k\">if</span>(c.personId <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> {\n    <span class=\"pl-en\">ReachablePerson</span>(p.name, c.phone)\n  }\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></pre></div>\n<p dir=\"auto\">As well as in general:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class IdFilter(id:Int)\n\nval q = quote {\n  val idFilter = new IdFilter(999)\n  for {\n    p &lt;- query[Person] if(p.id == idFilter.id)\n    c &lt;- query[Contact] if(c.personId == p.id)\n  } yield {\n    ReachablePerson(p.name, c.phone)\n  }\n}\n\nctx.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IdFilter</span>(id<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">idFilter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">IdFilter</span>(<span class=\"pl-c1\">999</span>)\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">if</span>(p.id <span class=\"pl-k\">==</span> idFilter.id)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">Contact</span>] <span class=\"pl-k\">if</span>(c.personId <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> {\n    <span class=\"pl-en\">ReachablePerson</span>(p.name, c.phone)\n  }\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></pre></div>\n<p dir=\"auto\"><em><strong>Note</strong></em> however that this functionality has the following restrictions:</p>\n<ol dir=\"auto\">\n<li>The Ad-Hoc Case Class can only have one constructor with one set of parameters.</li>\n<li>The Ad-Hoc Case Class must be constructed inside the quotation using one of the following methods:\n<ol dir=\"auto\">\n<li>Using the <code>new</code> keyword: <code>new Person(\"Joe\", \"Bloggs\")</code></li>\n<li>Using a companion object's apply method:  <code>Person(\"Joe\", \"Bloggs\")</code></li>\n<li>Using a companion object's apply method explicitly: <code>Person.apply(\"Joe\", \"Bloggs\")</code></li>\n</ol>\n</li>\n<li>Any custom logic in a constructor/apply-method of an Ad-Hoc case class will not be invoked when it is 'constructed' inside a quotation. To construct an Ad-Hoc case class with custom logic inside a quotation, you can use a quoted method.</li>\n</ol>\n<h2 dir=\"auto\"><a id=\"user-content-query-probing\" class=\"anchor\" aria-hidden=\"true\" href=\"#query-probing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Query probing</h2>\n<p dir=\"auto\">Query probing validates queries against the database at compile time, failing the compilation if it is not valid. The query validation does not alter the database state.</p>\n<p dir=\"auto\">This feature is disabled by default. To enable it, mix the <code>QueryProbing</code> trait to the database configuration:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object myContext extends YourContextType with QueryProbing\"><pre class=\"notranslate\"><code>object myContext extends YourContextType with QueryProbing\n</code></pre></div>\n<p dir=\"auto\">The context must be created in a separate compilation unit in order to be loaded at compile time. Please use <a href=\"http://www.scala-sbt.org/0.13/docs/Macro-Projects.html\" rel=\"nofollow\">this guide</a> that explains how to create a separate compilation unit for macros, that also serves to the purpose of defining a query-probing-capable context. <code>context</code> could be used instead of <code>macros</code> as the name of the separate compilation unit.</p>\n<p dir=\"auto\">The configurations correspondent to the config key must be available at compile time. You can achieve it by adding this line to your project settings:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"unmanagedClasspath in Compile += baseDirectory.value / &quot;src&quot; / &quot;main&quot; / &quot;resources&quot;\"><pre class=\"notranslate\"><code>unmanagedClasspath in Compile += baseDirectory.value / \"src\" / \"main\" / \"resources\"\n</code></pre></div>\n<p dir=\"auto\">If your project doesn't have a standard layout, e.g. a play project, you should configure the path to point to the folder that contains your config file.</p>\n<h2 dir=\"auto\"><a id=\"user-content-actions\" class=\"anchor\" aria-hidden=\"true\" href=\"#actions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Actions</h2>\n<p dir=\"auto\">Database actions are defined using quotations as well. These actions don't have a collection-like API but rather a custom DSL to express inserts, deletes, and updates.</p>\n<h3 dir=\"auto\"><a id=\"user-content-insertvalue--insert\" class=\"anchor\" aria-hidden=\"true\" href=\"#insertvalue--insert\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>insertValue / insert</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote(query[Contact].insertValue(lift(Contact(999, &quot;+1510488988&quot;))))\n\nctx.run(a) // = 1 if the row was inserted 0 otherwise\n// INSERT INTO Contact (personId,phone) VALUES (?, ?)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote(query[<span class=\"pl-en\">Contact</span>].insertValue(lift(<span class=\"pl-en\">Contact</span>(<span class=\"pl-c1\">999</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>+1510488988<span class=\"pl-pds\">\"</span></span>))))\n\nctx.run(a) <span class=\"pl-c\"><span class=\"pl-c\">//</span> = 1 if the row was inserted 0 otherwise</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Contact (personId,phone) VALUES (?, ?)</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-it-is-also-possible-to-insert-specific-columns-via-insert\" class=\"anchor\" aria-hidden=\"true\" href=\"#it-is-also-possible-to-insert-specific-columns-via-insert\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>It is also possible to insert specific columns (via insert):</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Contact].insert(_.personId -&gt; lift(999), _.phone -&gt; lift(&quot;+1510488988&quot;))\n}\n\nctx.run(a)\n// INSERT INTO Contact (personId,phone) VALUES (?, ?)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Contact</span>].insert(_.personId <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> lift(<span class=\"pl-c1\">999</span>), _.phone <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> lift(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>+1510488988<span class=\"pl-pds\">\"</span></span>))\n}\n\nctx.run(a)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Contact (personId,phone) VALUES (?, ?)</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-batch-insert\" class=\"anchor\" aria-hidden=\"true\" href=\"#batch-insert\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>batch insert</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  liftQuery(List(Person(0, &quot;John&quot;, 31),Person(2, &quot;name2&quot;, 32))).foreach(e =&gt; query[Person].insertValue(e))\n}\n\nctx.run(a) //: List[Long] size = 2. Contains 1 @ positions, where row was inserted E.g List(1,1)\n// INSERT INTO Person (id,name,age) VALUES (?, ?, ?)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">31</span>),<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">32</span>))).foreach(e <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insertValue(e))\n}\n\nctx.run(a) <span class=\"pl-c\"><span class=\"pl-c\">//</span>: List[Long] size = 2. Contains 1 @ positions, where row was inserted E.g List(1,1)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (id,name,age) VALUES (?, ?, ?)</span></pre></div>\n<blockquote>\n<p dir=\"auto\">In addition to regular JDBC batching, Quill can optimize batch queries by using multiple VALUES-clauses e.g:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.run(a, 2)\n// INSERT INTO Person (id,name,age) VALUES (?, ?, ?), (?, ?, ?) // Note, the extract (?, ?, ?) will not be visible in the compiler output. \"><pre>ctx.run(a, <span class=\"pl-c1\">2</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (id,name,age) VALUES (?, ?, ?), (?, ?, ?) // Note, the extract (?, ?, ?) will not be visible in the compiler output. </span></pre></div>\n<p dir=\"auto\">In situations with high network latency this can improve performance by 20-40x! See the <a href=\"#batch-optimization\">Batch Optimization</a> below for more info.</p>\n</blockquote>\n<p dir=\"auto\">Just as in regular queries use the extended insert/update syntaxes to achieve finer-grained control of the data being created/modified modified.\nFor example, if the ID is a generated value you can skip ID insertion like this:\n(This can also be accomplied with an insert-meta).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// case class Person(id: Int, name: String, age: Int)\nval a = quote {\n  liftQuery(List(Person(0, &quot;John&quot;, 31),Person(0, &quot;name2&quot;, 32))).foreach(e =&gt; query[Person].insert(_.name -&gt; p.name, _.age -&gt; p.age))\n}\n\nctx.run(a)\n// INSERT INTO Person (name,age) VALUES (?, ?)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> case class Person(id: Int, name: String, age: Int)</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">31</span>),<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">32</span>))).foreach(e <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insert(_.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> p.name, _.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> p.age))\n}\n\nctx.run(a)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (name,age) VALUES (?, ?)</span></pre></div>\n<p dir=\"auto\">Batch queries can also have a returning/returningGenerated clause:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// case class Person(id: Int, name: String, age: Int)\nval a = quote {\n  liftQuery(List(Person(0, &quot;John&quot;, 31),Person(0, &quot;name2&quot;, 32))).foreach(e =&gt; query[Person].insert(_.name -&gt; p.name, _.age -&gt; p.age)).returning(_.id)\n}\n\nctx.run(a)\n// INSERT INTO Person (name,age) VALUES (?, ?) RETURNING id\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> case class Person(id: Int, name: String, age: Int)</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">31</span>),<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">32</span>))).foreach(e <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insert(_.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> p.name, _.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> p.age)).returning(_.id)\n}\n\nctx.run(a)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (name,age) VALUES (?, ?) RETURNING id</span></pre></div>\n<p dir=\"auto\">Note that the <code>liftQuery[Something]</code> and the query[Something]` values do not necessarily need to be the same object-type.\n(In fact the liftQuery value can even be a constant!)\nFor example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// case class Person(name: String, age: Int)\n// case class Vip(first: String, last: String, age: Int)\n// val vips: List[Vip] = ...\nval q = quote {\n  liftQuery(vips).foreach(v =&gt; query[Person].insertValue(Person(v.first + v.last, v.age)))\n}\n\nctx.run(q)\n// INSERT INTO Person (name,age) VALUES ((? || ?), ?)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> case class Person(name: String, age: Int)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> case class Vip(first: String, last: String, age: Int)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> val vips: List[Vip] = ...</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(vips).foreach(v <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insertValue(<span class=\"pl-en\">Person</span>(v.first <span class=\"pl-k\">+</span> v.last, v.age)))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (name,age) VALUES ((? || ?), ?)</span></pre></div>\n<p dir=\"auto\">Note that UPDATE queries can also be done in batches (as well as DELETE queries).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  liftQuery(vips).foreach(v =&gt; query[Person].filter(p =&gt; p.age &gt; 22).updateValue(Person(v.first + v.last, v.age)))\n}\n\nctx.run(q)\n// UPDATE Person SET name = (? || ?), age = ? WHERE age &gt; 22\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(vips).foreach(v <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">22</span>).updateValue(<span class=\"pl-en\">Person</span>(v.first <span class=\"pl-k\">+</span> v.last, v.age)))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET name = (? || ?), age = ? WHERE age &gt; 22</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-updatevalue--update\" class=\"anchor\" aria-hidden=\"true\" href=\"#updatevalue--update\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>updateValue / update</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Person].filter(_.id == 999).updateValue(lift(Person(999, &quot;John&quot;, 22)))\n}\n\nctx.run(a) // = Long number of rows updated\n// UPDATE Person SET id = ?, name = ?, age = ? WHERE id = 999\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(_.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">999</span>).updateValue(lift(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">999</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">22</span>)))\n}\n\nctx.run(a) <span class=\"pl-c\"><span class=\"pl-c\">//</span> = Long number of rows updated</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET id = ?, name = ?, age = ? WHERE id = 999</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-using-specific-columns-via-update\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-specific-columns-via-update\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using specific columns (via update):</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Person].filter(p =&gt; p.id == lift(999)).update(_.age -&gt; lift(18))\n}\n\nctx.run(a)\n// UPDATE Person SET age = ? WHERE id = ?\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> lift(<span class=\"pl-c1\">999</span>)).update(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> lift(<span class=\"pl-c1\">18</span>))\n}\n\nctx.run(a)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET age = ? WHERE id = ?</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-using-columns-as-part-of-the-update\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-columns-as-part-of-the-update\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using columns as part of the update:</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Person].filter(p =&gt; p.id == lift(999)).update(p =&gt; p.age -&gt; (p.age + 1))\n}\n\nctx.run(a)\n// UPDATE Person SET age = (age + 1) WHERE id = ?\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> lift(<span class=\"pl-c1\">999</span>)).update(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (p.age <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>))\n}\n\nctx.run(a)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET age = (age + 1) WHERE id = ?</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-batch-update\" class=\"anchor\" aria-hidden=\"true\" href=\"#batch-update\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>batch update</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  liftQuery(List(Person(1, &quot;name&quot;, 31),Person(2, &quot;name2&quot;, 32))).foreach { person =&gt;\n     query[Person].filter(_.id == person.id).update(_.name -&gt; person.name, _.age -&gt; person.age)\n  }\n}\n\nctx.run(a) // : List[Long] size = 2. Contains 1 @ positions, where row was inserted E.g List(1,0)\n// UPDATE Person SET name = ?, age = ? WHERE id = ?\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">31</span>),<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">32</span>))).foreach { person <span class=\"pl-k\">=&gt;</span>\n     query[<span class=\"pl-en\">Person</span>].filter(_.id <span class=\"pl-k\">==</span> person.id).update(_.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> person.name, _.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> person.age)\n  }\n}\n\nctx.run(a) <span class=\"pl-c\"><span class=\"pl-c\">//</span> : List[Long] size = 2. Contains 1 @ positions, where row was inserted E.g List(1,0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET name = ?, age = ? WHERE id = ?</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-delete\" class=\"anchor\" aria-hidden=\"true\" href=\"#delete\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>delete</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Person].filter(p =&gt; p.name == &quot;&quot;).delete\n}\n\nctx.run(a) // = Long the number of rows deleted\n// DELETE FROM Person WHERE name = ''\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>).delete\n}\n\nctx.run(a) <span class=\"pl-c\"><span class=\"pl-c\">//</span> = Long the number of rows deleted</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Person WHERE name = ''</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-insert-or-update-upsert-conflict\" class=\"anchor\" aria-hidden=\"true\" href=\"#insert-or-update-upsert-conflict\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>insert or update (upsert, conflict)</h3>\n<p dir=\"auto\">Upsert is supported by Postgres, SQLite, MySQL and H2 <code>onConflictIgnore</code> only (since v1.4.200 in PostgreSQL compatibility mode)</p>\n<h4 dir=\"auto\"><a id=\"user-content-postgres-and-sqlite\" class=\"anchor\" aria-hidden=\"true\" href=\"#postgres-and-sqlite\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Postgres and SQLite</h4>\n<h5 dir=\"auto\"><a id=\"user-content-ignore-conflict\" class=\"anchor\" aria-hidden=\"true\" href=\"#ignore-conflict\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Ignore conflict</h5>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product].insert(_.id -&gt; 1, _.sku -&gt; 10).onConflictIgnore\n}\n\n// INSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT DO NOTHING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).onConflictIgnore\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT DO NOTHING</span></pre></div>\n<p dir=\"auto\">Ignore conflict by explicitly setting conflict target</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product].insert(_.id -&gt; 1, _.sku -&gt; 10).onConflictIgnore(_.id)\n}\n\n// INSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT (id) DO NOTHING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).onConflictIgnore(_.id)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT (id) DO NOTHING</span></pre></div>\n<p dir=\"auto\">Multiple properties can be used as well.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product].insert(_.id -&gt; 1, _.sku -&gt; 10).onConflictIgnore(_.id, _.description)\n}\n\n// INSERT INTO Product (id,sku) VALUES (1, 10) ON CONFLICT (id,description) DO NOTHING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).onConflictIgnore(_.id, _.description)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (id,sku) VALUES (1, 10) ON CONFLICT (id,description) DO NOTHING</span></pre></div>\n<h5 dir=\"auto\"><a id=\"user-content-update-on-conflict\" class=\"anchor\" aria-hidden=\"true\" href=\"#update-on-conflict\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Update on Conflict</h5>\n<p dir=\"auto\">Resolve conflict by updating existing row if needed. In <code>onConflictUpdate(target)((t, e) =&gt; assignment)</code>: <code>target</code> refers to\nconflict target, <code>t</code> - to existing row and <code>e</code> - to excluded, e.g. row proposed for insert.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product]\n    .insert(_.id -&gt; 1, _.sku -&gt; 10)\n    .onConflictUpdate(_.id)((t, e) =&gt; t.sku -&gt; (t.sku + e.sku))\n}\n\n// INSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT (id) DO UPDATE SET sku = (t.sku + EXCLUDED.sku)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>]\n    .insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n    .onConflictUpdate(_.id)((t, e) <span class=\"pl-k\">=&gt;</span> t.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (t.sku <span class=\"pl-k\">+</span> e.sku))\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT (id) DO UPDATE SET sku = (t.sku + EXCLUDED.sku)</span></pre></div>\n<p dir=\"auto\">Multiple properties can be used with <code>onConflictUpdate</code> as well.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product]\n    .insert(_.id -&gt; 1, _.sku -&gt; 10)\n    .onConflictUpdate(_.id, _.description)((t, e) =&gt; t.sku -&gt; (t.sku + e.sku))\n}\n\nINSERT INTO Product AS t (id,sku) VALUES (1, 10) ON CONFLICT (id,description) DO UPDATE SET sku = (t.sku + EXCLUDED.sku)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>]\n    .insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n    .onConflictUpdate(_.id, _.description)((t, e) <span class=\"pl-k\">=&gt;</span> t.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (t.sku <span class=\"pl-k\">+</span> e.sku))\n}\n\n<span class=\"pl-en\">INSERT</span> <span class=\"pl-en\">INTO</span> <span class=\"pl-en\">Product</span> <span class=\"pl-en\">AS</span> t (id,sku) <span class=\"pl-en\">VALUES</span> (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>) <span class=\"pl-en\">ON</span> <span class=\"pl-en\">CONFLICT</span> (id,description) <span class=\"pl-en\">DO</span> <span class=\"pl-en\">UPDATE</span> <span class=\"pl-en\">SET</span> sku <span class=\"pl-k\">=</span> (t.sku <span class=\"pl-k\">+</span> <span class=\"pl-en\">EXCLUDED</span>.sku)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-mysql\" class=\"anchor\" aria-hidden=\"true\" href=\"#mysql\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MySQL</h4>\n<p dir=\"auto\">Ignore any conflict, e.g. <code>insert ignore</code></p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product].insert(_.id -&gt; 1, _.sku -&gt; 10).onConflictIgnore\n}\n\n// INSERT IGNORE INTO Product (id,sku) VALUES (1, 10)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).onConflictIgnore\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT IGNORE INTO Product (id,sku) VALUES (1, 10)</span></pre></div>\n<p dir=\"auto\">Ignore duplicate key conflict by explicitly setting it</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product].insert(_.id -&gt; 1, _.sku -&gt; 10).onConflictIgnore(_.id)\n}\n\n// INSERT INTO Product (id,sku) VALUES (1, 10) ON DUPLICATE KEY UPDATE id=id\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).onConflictIgnore(_.id)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (id,sku) VALUES (1, 10) ON DUPLICATE KEY UPDATE id=id</span></pre></div>\n<p dir=\"auto\">Resolve duplicate key by updating existing row if needed. In <code>onConflictUpdate((t, e) =&gt; assignment)</code>: <code>t</code> refers to\nexisting row and <code>e</code> - to values, e.g. values proposed for insert.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a = quote {\n  query[Product]\n    .insert(_.id -&gt; 1, _.sku -&gt; 10)\n    .onConflictUpdate((t, e) =&gt; t.sku -&gt; (t.sku + e.sku))\n}\n\n// INSERT INTO Product (id,sku) VALUES (1, 10) ON DUPLICATE KEY UPDATE sku = (sku + VALUES(sku))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>]\n    .insert(_.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, _.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n    .onConflictUpdate((t, e) <span class=\"pl-k\">=&gt;</span> t.sku <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (t.sku <span class=\"pl-k\">+</span> e.sku))\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (id,sku) VALUES (1, 10) ON DUPLICATE KEY UPDATE sku = (sku + VALUES(sku))</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-batch-optimization\" class=\"anchor\" aria-hidden=\"true\" href=\"#batch-optimization\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Batch Optimization</h2>\n<p dir=\"auto\">When doing batch INSERT queries (as well as UPDATE, and DELETE), Quill mostly delegates the functionality to standard JDBC batching.\nThis functionality works roughtly in the following way.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ps: PreparedStatement = connection.prepareStatement(&quot;INSERT ... VALUES ...&quot;)\n// 1. Iterate over the rows\nfor (row &lt;- rowsToInsert) {\n  // 2. For each row, add the columns to the prepared statement\n  for ((column, columnIndex) &lt;- row)\n    row.setColumn(column, columnIndex)\n  // 3. Add the row to the list of things being added in the batch\n  ps.addBatch()\n}\n// 4. Write everything in the batch to the Database\nps.executeBatch()\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ps</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">PreparedStatement</span> <span class=\"pl-k\">=</span> connection.prepareStatement(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>INSERT ... VALUES ...<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 1. Iterate over the rows</span>\n<span class=\"pl-k\">for</span> (row <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> rowsToInsert) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 2. For each row, add the columns to the prepared statement</span>\n  <span class=\"pl-k\">for</span> ((column, columnIndex) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> row)\n    row.setColumn(column, columnIndex)\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 3. Add the row to the list of things being added in the batch</span>\n  ps.addBatch()\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 4. Write everything in the batch to the Database</span>\nps.executeBatch()</pre></div>\n<p dir=\"auto\">Reasonably speaking, we would expect each call in Stage #3 to locally stage the value of the row and then submit\nall of the rows to the database in Stage #4 but that basically every database that is not what happens. In Stage #3,\na network call is actually made to the Database to remotely stage the row. Practically this means that the performance of\naddBatch/executeBatch degrades per-row, per-millisecond-network-latency. Even at 50 milliseconds of network latency\nthe impact of this is highly significant:</p>\n<table>\n<thead>\n<tr>\n<th>Network Latency</th>\n<th>Rows Inserted</th>\n<th>Total Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0ms</td>\n<td>10k rows</td>\n<td>0.486</td>\n</tr>\n<tr>\n<td>50ms</td>\n<td>10k rows</td>\n<td>3.226</td>\n</tr>\n<tr>\n<td>100ms</td>\n<td>10k rows</td>\n<td>5.266</td>\n</tr>\n<tr>\n<td>0ms</td>\n<td>100k rows</td>\n<td>1.416</td>\n</tr>\n<tr>\n<td>50ms</td>\n<td>100k rows</td>\n<td>23.248</td>\n</tr>\n<tr>\n<td>100ms</td>\n<td>100k rows</td>\n<td>43.077</td>\n</tr>\n<tr>\n<td>0ms</td>\n<td>1m rows</td>\n<td>13.616</td>\n</tr>\n<tr>\n<td>50ms</td>\n<td>1m rows</td>\n<td>234.452</td>\n</tr>\n<tr>\n<td>100ms</td>\n<td>1m rows</td>\n<td>406.101</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">In order to alleviate this problem Quill can take advantage of the ability of most database dialects to use multiple\nVALUES-clauses to batch-insert rows. Conceptually, this works in the following way:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Person(name: String, age: Int)\nval people = List(Person(&quot;Joe&quot;, 22), Person(&quot;Jack&quot;, 33), Person(&quot;Jill&quot;, 44))\nval q = quote { liftQuery(people).foreach(p =&gt; query[Person].insertValue(p)) }\nrun(q, 2) // i.e. insert rows from the `people` list in batches of 2\n//\n// Query1) INSERT INTO Person (name, age) VALUES ([Joe] , [22]), ([Jack], [33])\n//         INSERT INTO Person (name, age) VALUES (  ?   ,  ?  ), (   ?  ,  ?  ) &lt;- actual query\n// Query2) INSERT INTO Person (name, age) VALUES ([Jill], [44])\n//         INSERT INTO Person (name, age) VALUES (  ?   ,  ?  )                 &lt;- actual query\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">people</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">22</span>), <span class=\"pl-en\">Person</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Jack<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">33</span>), <span class=\"pl-en\">Person</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Jill<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">44</span>))\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote { liftQuery(people).foreach(p <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insertValue(p)) }\nrun(q, <span class=\"pl-c1\">2</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> i.e. insert rows from the `people` list in batches of 2</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Query1) INSERT INTO Person (name, age) VALUES ([Joe] , [22]), ([Jack], [33])</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         INSERT INTO Person (name, age) VALUES (  ?   ,  ?  ), (   ?  ,  ?  ) &lt;- actual query</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Query2) INSERT INTO Person (name, age) VALUES ([Jill], [44])</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         INSERT INTO Person (name, age) VALUES (  ?   ,  ?  )                 &lt;- actual query</span></pre></div>\n<blockquote>\n<p dir=\"auto\">Note that only <code>INSERT INTO Person (name, age) VALUES (?, ?)</code> will appear in the compiler-output for this query!</p>\n</blockquote>\n<p dir=\"auto\">Using a batch-count of about 1000-5000 rows (i.e. <code>run(q, 1000)</code>) can significantly improve query performance:</p>\n<table>\n<thead>\n<tr>\n<th>Network Latency</th>\n<th>Rows Inserted</th>\n<th>Total Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0ms</td>\n<td>10k rows</td>\n<td>3.772</td>\n</tr>\n<tr>\n<td>50ms</td>\n<td>10k rows</td>\n<td>3.899</td>\n</tr>\n<tr>\n<td>100ms</td>\n<td>10k rows</td>\n<td>4.63</td>\n</tr>\n<tr>\n<td>0ms</td>\n<td>100k rows</td>\n<td>2.902</td>\n</tr>\n<tr>\n<td>50ms</td>\n<td>100k rows</td>\n<td>3.225</td>\n</tr>\n<tr>\n<td>100ms</td>\n<td>100k rows</td>\n<td>3.554</td>\n</tr>\n<tr>\n<td>0ms</td>\n<td>1m rows</td>\n<td>9.923</td>\n</tr>\n<tr>\n<td>50ms</td>\n<td>1m rows</td>\n<td>10.035</td>\n</tr>\n<tr>\n<td>100ms</td>\n<td>1m rows</td>\n<td>10.328</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">One thing to take note of is that each one of the <code>?</code> placeholders above is a prepared-statement variable. This means\nthat in batch-sizes of 1000, there will be 1000 <code>?</code> variables in each query. In many databases this has a strict limit.\nFor example, in Postgres this is restricted to 32767. This means that when using batches of 1000 rows, each row can have\nup to 32 columns or the following error will occur:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"IOException: Tried to send an out-of-range integer as a 2-byte value\"><pre class=\"notranslate\"><code>IOException: Tried to send an out-of-range integer as a 2-byte value\n</code></pre></div>\n<p dir=\"auto\">In other database e.g. SQL Server, unfortunately this limit is much smaller. For example in SQL Server it is just 2100 variables\nor the following error will occur.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"The server supports a maximum of 2100 parameters. Reduce the number of parameters and resend the request\"><pre class=\"notranslate\"><code>The server supports a maximum of 2100 parameters. Reduce the number of parameters and resend the request\n</code></pre></div>\n<p dir=\"auto\">This means that in SQL Server, for a batch-size of 100, you can only insert into a table of up to 21 columns.</p>\n<p dir=\"auto\">In the future, we hope to alleviate this issue by directly substituting variables into <code>?</code> variables before the query is executed\nhowever such functionality could potentially come at the risk of SQL-injection vunerabilities.</p>\n<h2 dir=\"auto\"><a id=\"user-content-printing-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#printing-queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Printing Queries</h2>\n<p dir=\"auto\">The <code>translate</code> method is used to convert a Quill query into a string which can then be printed.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val str = ctx.translate(query[Person])\nprintln(str)\n// SELECT x.id, x.name, x.age FROM Person x\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">str</span> <span class=\"pl-k\">=</span> ctx.translate(query[<span class=\"pl-en\">Person</span>])\nprintln(str)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.name, x.age FROM Person x</span></pre></div>\n<p dir=\"auto\">Insert queries can also be printed:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val str = ctx.translate(query[Person].insertValue(lift(Person(0, &quot;Joe&quot;, 45))))\nprintln(str)\n// INSERT INTO Person (id,name,age) VALUES (0, 'Joe', 45)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">str</span> <span class=\"pl-k\">=</span> ctx.translate(query[<span class=\"pl-en\">Person</span>].insertValue(lift(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">45</span>))))\nprintln(str)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (id,name,age) VALUES (0, 'Joe', 45)</span></pre></div>\n<p dir=\"auto\">As well as batch insertions:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  liftQuery(List(Person(0, &quot;Joe&quot;,44), Person(1, &quot;Jack&quot;,45)))\n    .foreach(e =&gt; query[Person].insertValue(e))\n}\nval strs: List[String] = ctx.translate(q)\nstrs.map(println)\n// INSERT INTO Person (id, name,age) VALUES (0, 'Joe', 44)\n// INSERT INTO Person (id, name,age) VALUES (1, 'Jack', 45)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-c1\">44</span>), <span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Jack<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-c1\">45</span>)))\n    .foreach(e <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insertValue(e))\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">strs</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> ctx.translate(q)\nstrs.map(println)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (id, name,age) VALUES (0, 'Joe', 44)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (id, name,age) VALUES (1, 'Jack', 45)</span></pre></div>\n<p dir=\"auto\">The <code>translate</code> method is available in every Quill context as well as the Cassandra and OrientDB contexts,\nthe latter two, however, do not support Insert and Batch Insert query printing.</p>\n<h2 dir=\"auto\"><a id=\"user-content-io-monad\" class=\"anchor\" aria-hidden=\"true\" href=\"#io-monad\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>IO Monad</h2>\n<p dir=\"auto\">Quill provides an IO monad that allows the user to express multiple computations and execute them separately. This mechanism is also known as a free monad, which provides a way of expressing computations as referentially-transparent values and isolates the unsafe IO operations into a single operation. For instance:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// this code using Future\n\ncase class Person(id: Int, name: String, age: Int)\n\nval p = Person(0, &quot;John&quot;, 22)\nctx.run(query[Person].insertValue(lift(p))).flatMap { _ =&gt;\n  ctx.run(query[Person])\n}\n\n// isn't referentially transparent because if you refactor the second database\n// interaction into a value, the result will be different:\n\nval allPeople = ctx.run(query[Person])\nctx.run(query[Person].insertValue(lift(p))).flatMap { _ =&gt;\n  allPeople\n}\n\n// this happens because `ctx.run` executes the side-effect (database IO) immediately\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> this code using Future</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">22</span>)\nctx.run(query[<span class=\"pl-en\">Person</span>].insertValue(lift(p))).flatMap { _ <span class=\"pl-k\">=&gt;</span>\n  ctx.run(query[<span class=\"pl-en\">Person</span>])\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> isn't referentially transparent because if you refactor the second database</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> interaction into a value, the result will be different:</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">allPeople</span> <span class=\"pl-k\">=</span> ctx.run(query[<span class=\"pl-en\">Person</span>])\nctx.run(query[<span class=\"pl-en\">Person</span>].insertValue(lift(p))).flatMap { _ <span class=\"pl-k\">=&gt;</span>\n  allPeople\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> this happens because `ctx.run` executes the side-effect (database IO) immediately</span></pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// The IO monad doesn't perform IO immediately, so both computations:\n\nval p = Person(0, &quot;John&quot;, 22)\n\nval a =\n  ctx.runIO(query[Person].insertValue(lift(p))).flatMap { _ =&gt;\n    ctx.runIO(query[Person])\n  }\n\n\nval allPeople = ctx.runIO(query[Person])\n\nval b =\n  ctx.runIO(query[Person].insertValue(lift(p))).flatMap { _ =&gt;\n    allPeople\n  }\n\n// produce the same result when executed\n\nperformIO(a) == performIO(b)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> The IO monad doesn't perform IO immediately, so both computations:</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">22</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span>\n  ctx.runIO(query[<span class=\"pl-en\">Person</span>].insertValue(lift(p))).flatMap { _ <span class=\"pl-k\">=&gt;</span>\n    ctx.runIO(query[<span class=\"pl-en\">Person</span>])\n  }\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">allPeople</span> <span class=\"pl-k\">=</span> ctx.runIO(query[<span class=\"pl-en\">Person</span>])\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">b</span> <span class=\"pl-k\">=</span>\n  ctx.runIO(query[<span class=\"pl-en\">Person</span>].insertValue(lift(p))).flatMap { _ <span class=\"pl-k\">=&gt;</span>\n    allPeople\n  }\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> produce the same result when executed</span>\n\nperformIO(a) <span class=\"pl-k\">==</span> performIO(b)</pre></div>\n<p dir=\"auto\">The IO monad has an interface similar to <code>Future</code>; please refer to <a href=\"https://github.com/getquill/quill/blob/master/quill-core/src/main/scala/io/getquill/monad/IOMonad.scala#L39\">the class</a> for more information regarding the available operations.</p>\n<p dir=\"auto\">The return type of <code>performIO</code> varies according to the context. For instance, async contexts return <code>Future</code>s while JDBC returns values synchronously.</p>\n<p dir=\"auto\"><em><strong>NOTE</strong></em>: Avoid using the variable name <code>io</code> since it conflicts with Quill's package <code>io.getquill</code>, otherwise you will get the following error.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"recursive value io needs type\"><pre class=\"notranslate\"><code>recursive value io needs type\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-io-monad-and-transactions\" class=\"anchor\" aria-hidden=\"true\" href=\"#io-monad-and-transactions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>IO Monad and transactions</h3>\n<p dir=\"auto\"><code>IO</code> also provides the <code>transactional</code> method that delimits a transaction:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a =\n  ctx.runIO(query[Person].insertValue(lift(p))).flatMap { _ =&gt;\n    ctx.runIO(query[Person])\n  }\n\nperformIO(a.transactional) // note: transactional can be used outside of `performIO`\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span>\n  ctx.runIO(query[<span class=\"pl-en\">Person</span>].insertValue(lift(p))).flatMap { _ <span class=\"pl-k\">=&gt;</span>\n    ctx.runIO(query[<span class=\"pl-en\">Person</span>])\n  }\n\nperformIO(a.transactional) <span class=\"pl-c\"><span class=\"pl-c\">//</span> note: transactional can be used outside of `performIO`</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-getting-a-resultset\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-a-resultset\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Getting a ResultSet</h3>\n<p dir=\"auto\">Quill JDBC Contexts allow you to use <code>prepare</code> in order to get a low-level <code>ResultSet</code> that is useful\nfor interacting with legacy APIs. This function  returns a <code>f: (Connection) =&gt; (PreparedStatement)</code>\nclosure as opposed to a <code>PreparedStatement</code> in order to guarantee that JDBC Exceptions are not\nthrown until you can wrap them into the appropriate Exception-handling mechanism (e.g.\n<code>try</code>/<code>catch</code>, <code>Try</code> etc...).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].filter(_.id == 1)\n}\nval preparer: (Connection) =&gt; (PreparedStatement)  = ctx.prepare(q)\n// SELECT x1.id, x1.description, x1.sku FROM Product x1 WHERE x1.id = 1\n\n// Use ugly stateful code, bracketed effects, or try-with-resources here:\nvar preparedStatement: PreparedStatement = _\nvar resultSet: ResultSet = _\n\ntry {\n  preparedStatement = preparer(myCustomDataSource.getConnection)\n  resultSet = preparedStatement.executeQuery()\n} catch {\n  case e: Exception =&gt;\n    // Close the preparedStatement and catch possible exceptions\n    // Close the resultSet and catch possible exceptions\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].filter(_.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>)\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">preparer</span><span class=\"pl-k\">:</span> (<span class=\"pl-en\">Connection</span>) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-en\">PreparedStatement</span>)  <span class=\"pl-k\">=</span> ctx.prepare(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x1.id, x1.description, x1.sku FROM Product x1 WHERE x1.id = 1</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Use ugly stateful code, bracketed effects, or try-with-resources here:</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-smi\">preparedStatement</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">PreparedStatement</span> <span class=\"pl-k\">=</span> _\n<span class=\"pl-k\">var</span> <span class=\"pl-smi\">resultSet</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ResultSet</span> <span class=\"pl-k\">=</span> _\n\n<span class=\"pl-k\">try</span> {\n  preparedStatement <span class=\"pl-k\">=</span> preparer(myCustomDataSource.getConnection)\n  resultSet <span class=\"pl-k\">=</span> preparedStatement.executeQuery()\n} <span class=\"pl-k\">catch</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-v\">e</span>: <span class=\"pl-en\">Exception</span> <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Close the preparedStatement and catch possible exceptions</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Close the resultSet and catch possible exceptions</span>\n}</pre></div>\n<p dir=\"auto\">The <code>prepare</code> function can also be used with <code>insertValue</code>, and <code>updateValue</code> actions.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Product].insertValue(lift(Product(1, &quot;Desc&quot;, 123))\n}\nval preparer: (Connection) =&gt; (PreparedStatement)  = ctx.prepare(q)\n// INSERT INTO Product (id,description,sku) VALUES (?, ?, ?)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Product</span>].insertValue(lift(<span class=\"pl-en\">Product</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Desc<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">123</span>))\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">preparer</span><span class=\"pl-k\">:</span> (<span class=\"pl-en\">Connection</span>) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-en\">PreparedStatement</span>)  <span class=\"pl-k\">=</span> ctx.prepare(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Product (id,description,sku) VALUES (?, ?, ?)</span></pre></div>\n<p dir=\"auto\">As well as with batch queries.</p>\n<blockquote>\n<p dir=\"auto\">Make sure to first quote your batch query and then pass the result into the <code>prepare</code> function\n(as is done in the example below) or the Scala compiler may not type the output correctly\n<a href=\"https://github.com/getquill/quill/issues/1518\" data-hovercard-type=\"issue\" data-hovercard-url=\"/zio/zio-quill/issues/1518/hovercard\">#1518</a>.</p>\n</blockquote>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  liftQuery(products).foreach(e =&gt; query[Product].insertValue(e))\n}\nval preparers: Connection =&gt; List[PreparedStatement] = ctx.prepare(q)\nval preparedStatement: List[PreparedStatement] = preparers(jdbcConf.dataSource.getConnection)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(products).foreach(e <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Product</span>].insertValue(e))\n}\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">preparers</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Connection</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">PreparedStatement</span>] <span class=\"pl-k\">=</span> ctx.prepare(q)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">preparedStatement</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">PreparedStatement</span>] <span class=\"pl-k\">=</span> preparers(jdbcConf.dataSource.getConnection)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-effect-tracking\" class=\"anchor\" aria-hidden=\"true\" href=\"#effect-tracking\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Effect tracking</h3>\n<p dir=\"auto\">The IO monad tracks the effects that a computation performs in its second type parameter:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val a: IO[ctx.RunQueryResult[Person], Effect.Write with Effect.Read] =\n  ctx.runIO(query[Person].insertValue(lift(p))).flatMap { _ =&gt;\n    ctx.runIO(query[Person])\n  }\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">IO</span>[ctx.<span class=\"pl-en\">RunQueryResult</span>[<span class=\"pl-en\">Person</span>], <span class=\"pl-en\">Effect</span>.<span class=\"pl-en\">Write</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">Effect</span>.<span class=\"pl-en\">Read</span>] <span class=\"pl-k\">=</span>\n  ctx.runIO(query[<span class=\"pl-en\">Person</span>].insertValue(lift(p))).flatMap { _ <span class=\"pl-k\">=&gt;</span>\n    ctx.runIO(query[<span class=\"pl-en\">Person</span>])\n  }</pre></div>\n<p dir=\"auto\">This mechanism is useful to limit the kind of operations that can be performed. See this <a href=\"http://danielwestheide.com/blog/2015/06/28/put-your-writes-where-your-master-is-compile-time-restriction-of-slick-effect-types.html\" rel=\"nofollow\">blog post</a> as an example.</p>\n<h2 dir=\"auto\"><a id=\"user-content-implicit-query\" class=\"anchor\" aria-hidden=\"true\" href=\"#implicit-query\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Implicit query</h2>\n<p dir=\"auto\">Quill provides implicit conversions from case class companion objects to <code>query[T]</code> through an additional trait:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new SqlMirrorContext(MirrorSqlDialect, Literal) with ImplicitQuery\n\nimport ctx._\n\nval q = quote {\n  for {\n    p &lt;- Person if(p.id == 999)\n    c &lt;- Contact if(c.personId == p.id)\n  } yield {\n    (p.name, c.phone)\n  }\n}\n\nctx.run(q)\n// SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlMirrorContext</span>(<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>) <span class=\"pl-k\">with</span> <span class=\"pl-e\">ImplicitQuery</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    p <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Person</span> <span class=\"pl-k\">if</span>(p.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">999</span>)\n    c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Contact</span> <span class=\"pl-k\">if</span>(c.personId <span class=\"pl-k\">==</span> p.id)\n  } <span class=\"pl-k\">yield</span> {\n    (p.name, c.phone)\n  }\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, c.phone FROM Person p, Contact c WHERE (p.id = 999) AND (c.personId = p.id)</span></pre></div>\n<p dir=\"auto\">Note the usage of <code>Person</code> and <code>Contact</code> instead of <code>query[Person]</code> and <code>query[Contact]</code>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-sql-specific-operations\" class=\"anchor\" aria-hidden=\"true\" href=\"#sql-specific-operations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SQL-specific operations</h2>\n<p dir=\"auto\">Some operations are SQL-specific and not provided with the generic quotation mechanism. The SQL contexts provide implicit classes for this kind of operation:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new SqlMirrorContext(MirrorSqlDialect, Literal)\nimport ctx._\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlMirrorContext</span>(<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>)\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-like\" class=\"anchor\" aria-hidden=\"true\" href=\"#like\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>like</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.name like &quot;%John%&quot;)\n}\nctx.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.name like '%John%'\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name like <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%John%<span class=\"pl-pds\">\"</span></span>)\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.name like '%John%'</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-forupdate\" class=\"anchor\" aria-hidden=\"true\" href=\"#forupdate\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>forUpdate</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.name == &quot;Mary&quot;).forUpdate()\n}\nctx.run(q)\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.name = 'Mary' FOR UPDATE\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mary<span class=\"pl-pds\">\"</span></span>).forUpdate()\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.name = 'Mary' FOR UPDATE</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-sql-specific-encoding\" class=\"anchor\" aria-hidden=\"true\" href=\"#sql-specific-encoding\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SQL-specific encoding</h2>\n<h3 dir=\"auto\"><a id=\"user-content-arrays\" class=\"anchor\" aria-hidden=\"true\" href=\"#arrays\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Arrays</h3>\n<p dir=\"auto\">Quill provides SQL Arrays support. In Scala we represent them as any collection that implements <code>Seq</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.util.Date\n\ncase class Book(id: Int, notes: List[String], pages: Vector[Int], history: Seq[Date])\n\nctx.run(query[Book])\n// SELECT x.id, x.notes, x.pages, x.history FROM Book x\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">util</span>.<span class=\"pl-en\">Date</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Book</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">notes</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">String</span>], <span class=\"pl-v\">pages</span>: <span class=\"pl-en\">Vector</span>[<span class=\"pl-en\">Int</span>], <span class=\"pl-v\">history</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">Date</span>])\n\nctx.run(query[<span class=\"pl-en\">Book</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.id, x.notes, x.pages, x.history FROM Book x</span></pre></div>\n<p dir=\"auto\">Note that not all drivers/databases provides such feature hence only <code>PostgresJdbcContext</code> and\n<code>PostgresAsyncContext</code> support SQL Arrays.</p>\n<h2 dir=\"auto\"><a id=\"user-content-cassandra-specific-encoding\" class=\"anchor\" aria-hidden=\"true\" href=\"#cassandra-specific-encoding\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Cassandra-specific encoding</h2>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new CassandraMirrorContext(Literal)\nimport ctx._\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">CassandraMirrorContext</span>(<span class=\"pl-en\">Literal</span>)\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-collections\" class=\"anchor\" aria-hidden=\"true\" href=\"#collections\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Collections</h3>\n<p dir=\"auto\">The Cassandra context provides List, Set, and Map encoding:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\ncase class Book(id: Int, notes: Set[String], pages: List[Int], history: Map[Int, Boolean])\n\nctx.run(query[Book])\n// SELECT id, notes, pages, history FROM Book\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Book</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">notes</span>: <span class=\"pl-en\">Set</span>[<span class=\"pl-en\">String</span>], <span class=\"pl-v\">pages</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>], <span class=\"pl-v\">history</span>: <span class=\"pl-en\">Map</span>[<span class=\"pl-en\">Int</span>, <span class=\"pl-en\">Boolean</span>])\n\nctx.run(query[<span class=\"pl-en\">Book</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT id, notes, pages, history FROM Book</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-user-defined-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#user-defined-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>User-Defined Types</h3>\n<p dir=\"auto\">The cassandra context provides encoding of UDT (user-defined types).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\ncase class Name(firstName: String, lastName: String) extends Udt\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Name</span>(<span class=\"pl-v\">firstName</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">lastName</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Udt</span></pre></div>\n<p dir=\"auto\">To encode the UDT and bind it into the query (insert/update queries), the context needs to retrieve UDT metadata from\nthe cluster object. By default, the context looks for UDT metadata within the currently logged keyspace, but it's also possible to specify a\nconcrete keyspace with <code>udtMeta</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val nameMeta = udtMeta[Name](&quot;keyspace2.my_name&quot;)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">nameMeta</span> <span class=\"pl-k\">=</span> udtMeta[<span class=\"pl-en\">Name</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>keyspace2.my_name<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">When a keyspace is not set in <code>udtMeta</code> then the currently logged one is used.</p>\n<p dir=\"auto\">Since it's possible to create a context without\nspecifying a keyspace, (e.g. the keyspace parameter is null and the session is not bound to any keyspace), the UDT metadata will be\nresolved throughout the entire cluster.</p>\n<p dir=\"auto\">It is also possible to rename UDT columns with <code>udtMeta</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val nameMeta = udtMeta[Name](&quot;name&quot;, _.firstName -&gt; &quot;first&quot;, _.lastName -&gt; &quot;last&quot;)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">nameMeta</span> <span class=\"pl-k\">=</span> udtMeta[<span class=\"pl-en\">Name</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, _.firstName <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first<span class=\"pl-pds\">\"</span></span>, _.lastName <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>last<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-cassandra-specific-operations\" class=\"anchor\" aria-hidden=\"true\" href=\"#cassandra-specific-operations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Cassandra-specific operations</h2>\n<p dir=\"auto\">The cassandra context also provides a few additional operations:</p>\n<h3 dir=\"auto\"><a id=\"user-content-allowfiltering\" class=\"anchor\" aria-hidden=\"true\" href=\"#allowfiltering\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>allowFiltering</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.age &gt; 10).allowFiltering\n}\nctx.run(q)\n// SELECT id, name, age FROM Person WHERE age &gt; 10 ALLOW FILTERING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).allowFiltering\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT id, name, age FROM Person WHERE age &gt; 10 ALLOW FILTERING</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-ifnotexists\" class=\"anchor\" aria-hidden=\"true\" href=\"#ifnotexists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>ifNotExists</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].insert(_.age -&gt; 10, _.name -&gt; &quot;John&quot;).ifNotExists\n}\nctx.run(q)\n// INSERT INTO Person (age,name) VALUES (10, 'John') IF NOT EXISTS\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].insert(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>, _.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).ifNotExists\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (age,name) VALUES (10, 'John') IF NOT EXISTS</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-ifexists\" class=\"anchor\" aria-hidden=\"true\" href=\"#ifexists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>ifExists</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].filter(p =&gt; p.name == &quot;John&quot;).delete.ifExists\n}\nctx.run(q)\n// DELETE FROM Person WHERE name = 'John' IF EXISTS\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).delete.ifExists\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Person WHERE name = 'John' IF EXISTS</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-usingtimestamp\" class=\"anchor\" aria-hidden=\"true\" href=\"#usingtimestamp\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>usingTimestamp</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q1 = quote {\n  query[Person].insert(_.age -&gt; 10, _.name -&gt; &quot;John&quot;).usingTimestamp(99)\n}\nctx.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99\n\nval q2 = quote {\n  query[Person].usingTimestamp(99).update(_.age -&gt; 10)\n}\nctx.run(q2)\n// UPDATE Person USING TIMESTAMP 99 SET age = 10\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].insert(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>, _.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).usingTimestamp(<span class=\"pl-c1\">99</span>)\n}\nctx.run(q1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].usingTimestamp(<span class=\"pl-c1\">99</span>).update(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n}\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person USING TIMESTAMP 99 SET age = 10</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-usingttl\" class=\"anchor\" aria-hidden=\"true\" href=\"#usingttl\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>usingTtl</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q1 = quote {\n  query[Person].insert(_.age -&gt; 10, _.name -&gt; &quot;John&quot;).usingTtl(11)\n}\nctx.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TTL 11\n\nval q2 = quote {\n  query[Person].usingTtl(11).update(_.age -&gt; 10)\n}\nctx.run(q2)\n// UPDATE Person USING TTL 11 SET age = 10\n\nval q3 = quote {\n  query[Person].usingTtl(11).filter(_.name == &quot;John&quot;).delete\n}\nctx.run(q3)\n// DELETE FROM Person USING TTL 11 WHERE name = 'John'\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].insert(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>, _.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).usingTtl(<span class=\"pl-c1\">11</span>)\n}\nctx.run(q1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (age,name) VALUES (10, 'John') USING TTL 11</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].usingTtl(<span class=\"pl-c1\">11</span>).update(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n}\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person USING TTL 11 SET age = 10</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q3</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].usingTtl(<span class=\"pl-c1\">11</span>).filter(_.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).delete\n}\nctx.run(q3)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Person USING TTL 11 WHERE name = 'John'</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-using\" class=\"anchor\" aria-hidden=\"true\" href=\"#using\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>using</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q1 = quote {\n  query[Person].insert(_.age -&gt; 10, _.name -&gt; &quot;John&quot;).using(ts = 99, ttl = 11)\n}\nctx.run(q1)\n// INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99 AND TTL 11\n\nval q2 = quote {\n  query[Person].using(ts = 99, ttl = 11).update(_.age -&gt; 10)\n}\nctx.run(q2)\n// UPDATE Person USING TIMESTAMP 99 AND TTL 11 SET age = 10\n\nval q3 = quote {\n  query[Person].using(ts = 99, ttl = 11).filter(_.name == &quot;John&quot;).delete\n}\nctx.run(q3)\n// DELETE FROM Person USING TIMESTAMP 99 AND TTL 11 WHERE name = 'John'\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].insert(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>, _.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).using(ts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">99</span>, ttl <span class=\"pl-k\">=</span> <span class=\"pl-c1\">11</span>)\n}\nctx.run(q1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (age,name) VALUES (10, 'John') USING TIMESTAMP 99 AND TTL 11</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].using(ts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">99</span>, ttl <span class=\"pl-k\">=</span> <span class=\"pl-c1\">11</span>).update(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>)\n}\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person USING TIMESTAMP 99 AND TTL 11 SET age = 10</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q3</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].using(ts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">99</span>, ttl <span class=\"pl-k\">=</span> <span class=\"pl-c1\">11</span>).filter(_.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).delete\n}\nctx.run(q3)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Person USING TIMESTAMP 99 AND TTL 11 WHERE name = 'John'</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-ifcond\" class=\"anchor\" aria-hidden=\"true\" href=\"#ifcond\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>ifCond</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q1 = quote {\n  query[Person].update(_.age -&gt; 10).ifCond(_.name == &quot;John&quot;)\n}\nctx.run(q1)\n// UPDATE Person SET age = 10 IF name = 'John'\n\nval q2 = quote {\n  query[Person].filter(_.name == &quot;John&quot;).delete.ifCond(_.age == 10)\n}\nctx.run(q2)\n// DELETE FROM Person WHERE name = 'John' IF age = 10\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].update(_.age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>).ifCond(_.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>)\n}\nctx.run(q1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET age = 10 IF name = 'John'</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q2</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(_.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>).delete.ifCond(_.age <span class=\"pl-k\">==</span> <span class=\"pl-c1\">10</span>)\n}\nctx.run(q2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE FROM Person WHERE name = 'John' IF age = 10</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-delete-column\" class=\"anchor\" aria-hidden=\"true\" href=\"#delete-column\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>delete column</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person].map(p =&gt; p.age).delete\n}\nctx.run(q)\n// DELETE p.age FROM Person\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> p.age).delete\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> DELETE p.age FROM Person</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-listcontains--setcontains\" class=\"anchor\" aria-hidden=\"true\" href=\"#listcontains--setcontains\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>list.contains / set.contains</h3>\n<p dir=\"auto\">requires <code>allowFiltering</code></p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Book].filter(p =&gt; p.pages.contains(25)).allowFiltering\n}\nctx.run(q)\n// SELECT id, notes, pages, history FROM Book WHERE pages CONTAINS 25 ALLOW FILTERING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Book</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.pages.contains(<span class=\"pl-c1\">25</span>)).allowFiltering\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT id, notes, pages, history FROM Book WHERE pages CONTAINS 25 ALLOW FILTERING</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-mapcontains\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapcontains\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>map.contains</h3>\n<p dir=\"auto\">requires <code>allowFiltering</code></p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Book].filter(p =&gt; p.history.contains(12)).allowFiltering\n}\nctx.run(q)\n// SELECT id, notes, pages, history FROM book WHERE history CONTAINS 12 ALLOW FILTERING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Book</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.history.contains(<span class=\"pl-c1\">12</span>)).allowFiltering\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT id, notes, pages, history FROM book WHERE history CONTAINS 12 ALLOW FILTERING</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-mapcontainsvalue\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapcontainsvalue\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>map.containsValue</h3>\n<p dir=\"auto\">requires <code>allowFiltering</code></p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Book].filter(p =&gt; p.history.containsValue(true)).allowFiltering\n}\nctx.run(q)\n// SELECT id, notes, pages, history FROM book WHERE history CONTAINS true ALLOW FILTERING\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Book</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.history.containsValue(<span class=\"pl-c1\">true</span>)).allowFiltering\n}\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT id, notes, pages, history FROM book WHERE history CONTAINS true ALLOW FILTERING</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-dynamic-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#dynamic-queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dynamic queries</h2>\n<p dir=\"auto\">Quill's default operation mode is compile-time, but there are queries that have their structure defined only at runtime. Quill automatically falls back to runtime normalization and query generation if the query's structure is not static. Example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new SqlMirrorContext(MirrorSqlDialect, Literal)\n\nimport ctx._\n\nsealed trait QueryType\ncase object Minor extends QueryType\ncase object Senior extends QueryType\n\ndef people(t: QueryType): Quoted[Query[Person]] =\n  t match {\n    case Minor =&gt; quote {\n      query[Person].filter(p =&gt; p.age &lt; 18)\n    }\n    case Senior =&gt; quote {\n      query[Person].filter(p =&gt; p.age &gt; 65)\n    }\n  }\n\nctx.run(people(Minor))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &lt; 18\n\nctx.run(people(Senior))\n// SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 65\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlMirrorContext</span>(<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>)\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">QueryType</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Minor</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">QueryType</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">Senior</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">QueryType</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">people</span>(<span class=\"pl-v\">t</span>: <span class=\"pl-en\">QueryType</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Quoted</span>[<span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]] <span class=\"pl-k\">=</span>\n  t <span class=\"pl-k\">match</span> {\n    <span class=\"pl-k\">case</span> <span class=\"pl-en\">Minor</span> <span class=\"pl-k\">=&gt;</span> quote {\n      query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">18</span>)\n    }\n    <span class=\"pl-k\">case</span> <span class=\"pl-en\">Senior</span> <span class=\"pl-k\">=&gt;</span> quote {\n      query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">65</span>)\n    }\n  }\n\nctx.run(people(<span class=\"pl-en\">Minor</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.age &lt; 18</span>\n\nctx.run(people(<span class=\"pl-en\">Senior</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.id, p.name, p.age FROM Person p WHERE p.age &gt; 65</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-dynamic-query-api\" class=\"anchor\" aria-hidden=\"true\" href=\"#dynamic-query-api\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dynamic query API</h3>\n<p dir=\"auto\">Additionally, Quill provides a separate query API to facilitate the creation of dynamic queries. This API allows users to easily manipulate quoted values instead of working only with quoted transformations.</p>\n<p dir=\"auto\"><strong>Important</strong>: A few of the dynamic query methods accept runtime string values. It's important to keep in mind that these methods could be a vector for SQL injection.</p>\n<p dir=\"auto\">Let's use the <code>filter</code> transformation as an example. In the regular API, this method has no implementation since it's an abstract member of a trait:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def filter(f: T =&gt; Boolean): EntityQuery[T]\"><pre class=\"notranslate\"><code>def filter(f: T =&gt; Boolean): EntityQuery[T]\n</code></pre></div>\n<p dir=\"auto\">In the dynamic API, <code>filter</code> is has a different signature and a body that is executed at runtime:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def filter(f: Quoted[T] =&gt; Quoted[Boolean]): DynamicQuery[T] =\n  transform(f, Filter)\"><pre class=\"notranslate\"><code>def filter(f: Quoted[T] =&gt; Quoted[Boolean]): DynamicQuery[T] =\n  transform(f, Filter)\n</code></pre></div>\n<p dir=\"auto\">It takes a <code>Quoted[T]</code> as input and produces a <code>Quoted[Boolean]</code>. The user is free to use regular scala code within the transformation:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def people(onlyMinors: Boolean) =\n  dynamicQuery[Person].filter(p =&gt; if(onlyMinors) quote(p.age &lt; 18) else quote(true))\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">people</span>(<span class=\"pl-v\">onlyMinors</span>: <span class=\"pl-en\">Boolean</span>) <span class=\"pl-k\">=</span>\n  dynamicQuery[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">if</span>(onlyMinors) quote(p.age <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">18</span>) <span class=\"pl-k\">else</span> quote(<span class=\"pl-c1\">true</span>))</pre></div>\n<p dir=\"auto\">In order to create a dynamic query, use one of the following methods:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"dynamicQuery[Person]\ndynamicQuerySchema[Person](&quot;people&quot;, alias(_.name, &quot;pname&quot;))\"><pre>dynamicQuery[<span class=\"pl-en\">Person</span>]\ndynamicQuerySchema[<span class=\"pl-en\">Person</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>people<span class=\"pl-pds\">\"</span></span>, alias(_.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pname<span class=\"pl-pds\">\"</span></span>))</pre></div>\n<p dir=\"auto\">It's also possible to transform a <code>Quoted</code> into a dynamic query:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Person]\n}\nq.dynamic.filter(p =&gt; quote(p.name == &quot;John&quot;))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>]\n}\nq.dynamic.filter(p <span class=\"pl-k\">=&gt;</span> quote(p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>))</pre></div>\n<p dir=\"auto\">The dynamic query API is very similar to the regular API but has a few differences:</p>\n<p dir=\"auto\"><strong>Queries</strong></p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// schema queries use `alias` instead of tuples\ndynamicQuerySchema[Person](&quot;people&quot;, alias(_.name, &quot;pname&quot;))\n\n// this allows users to use a dynamic list of aliases\nval aliases = List(alias[Person](_.name, &quot;pname&quot;), alias[Person](_.age, &quot;page&quot;))\ndynamicQuerySchema[Person](&quot;people&quot;, aliases:_*)\n\n// a few methods have an overload with the `Opt` suffix,\n// which apply the transformation only if the option is defined:\n\ndef people(minAge: Option[Int]) =\n  dynamicQuery[Person].filterOpt(minAge)((person, minAge) =&gt; quote(person.age &gt;= minAge))\n\ndef people(maxRecords: Option[Int]) =\n  dynamicQuery[Person].takeOpt(maxRecords)\n\ndef people(dropFirst: Option[Int]) =\n  dynamicQuery[Person].dropOpt(dropFirst)\n\n// method with `If` suffix, for better chaining\ndef people(userIds: Seq[Int]) =\n  dynamicQuery[Person].filterIf(userIds.nonEmpty)(person =&gt; quote(liftQuery(userIds).contains(person.id)))\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> schema queries use `alias` instead of tuples</span>\ndynamicQuerySchema[<span class=\"pl-en\">Person</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>people<span class=\"pl-pds\">\"</span></span>, alias(_.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pname<span class=\"pl-pds\">\"</span></span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> this allows users to use a dynamic list of aliases</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">aliases</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(alias[<span class=\"pl-en\">Person</span>](_.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pname<span class=\"pl-pds\">\"</span></span>), alias[<span class=\"pl-en\">Person</span>](_.age, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>page<span class=\"pl-pds\">\"</span></span>))\ndynamicQuerySchema[<span class=\"pl-en\">Person</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>people<span class=\"pl-pds\">\"</span></span>, aliases<span class=\"pl-k\">:</span>_<span class=\"pl-k\">*</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> a few methods have an overload with the `Opt` suffix,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> which apply the transformation only if the option is defined:</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">people</span>(<span class=\"pl-v\">minAge</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span>\n  dynamicQuery[<span class=\"pl-en\">Person</span>].filterOpt(minAge)((person, minAge) <span class=\"pl-k\">=&gt;</span> quote(person.age <span class=\"pl-k\">&gt;=</span> minAge))\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">people</span>(<span class=\"pl-v\">maxRecords</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span>\n  dynamicQuery[<span class=\"pl-en\">Person</span>].takeOpt(maxRecords)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">people</span>(<span class=\"pl-v\">dropFirst</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span>\n  dynamicQuery[<span class=\"pl-en\">Person</span>].dropOpt(dropFirst)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> method with `If` suffix, for better chaining</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">people</span>(<span class=\"pl-v\">userIds</span>: <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">Int</span>]) <span class=\"pl-k\">=</span>\n  dynamicQuery[<span class=\"pl-en\">Person</span>].filterIf(userIds.nonEmpty)(person <span class=\"pl-k\">=&gt;</span> quote(liftQuery(userIds).contains(person.id)))</pre></div>\n<p dir=\"auto\"><strong>Actions</strong></p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// actions use `set`\ndynamicQuery[Person].filter(_.id == 1).update(set(_.name, quote(&quot;John&quot;)))\n\n// or `setValue` if the value is not quoted\ndynamicQuery[Person].insert(setValue(_.name, &quot;John&quot;))\n\n// or `setOpt` that will be applied only the option is defined\ndynamicQuery[Person].insert(setOpt(_.name, Some(&quot;John&quot;)))\n\n// it's also possible to use a runtime string value as the column name\ndynamicQuery[Person].filter(_.id == 1).update(set(&quot;name&quot;, quote(&quot;John&quot;)))\n\n// to insert or update a case class instance, use `insertValue`/`updateValue`\nval p = Person(0, &quot;John&quot;, 21)\ndynamicQuery[Person].insertValue(p)\ndynamicQuery[Person].filter(_.id == 1).updateValue(p)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> actions use `set`</span>\ndynamicQuery[<span class=\"pl-en\">Person</span>].filter(_.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>).update(set(_.name, quote(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>)))\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or `setValue` if the value is not quoted</span>\ndynamicQuery[<span class=\"pl-en\">Person</span>].insert(setValue(_.name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or `setOpt` that will be applied only the option is defined</span>\ndynamicQuery[<span class=\"pl-en\">Person</span>].insert(setOpt(_.name, <span class=\"pl-en\">Some</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>)))\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> it's also possible to use a runtime string value as the column name</span>\ndynamicQuery[<span class=\"pl-en\">Person</span>].filter(_.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>).update(set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, quote(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>)))\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> to insert or update a case class instance, use `insertValue`/`updateValue`</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">p</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">21</span>)\ndynamicQuery[<span class=\"pl-en\">Person</span>].insertValue(p)\ndynamicQuery[<span class=\"pl-en\">Person</span>].filter(_.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>).updateValue(p)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-dynamic-query-normalization-cache\" class=\"anchor\" aria-hidden=\"true\" href=\"#dynamic-query-normalization-cache\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dynamic query normalization cache</h3>\n<p dir=\"auto\">Quill is super fast for static queries (almost zero runtime overhead compared to directly sql executing).</p>\n<p dir=\"auto\">But there is significant impact for dynamic queries.</p>\n<p dir=\"auto\">Normalization caching was introduced to improve the situation, which will speedup dynamic queries significantly. It is enabled by default.</p>\n<p dir=\"auto\">To disable dynamic normalization caching, pass following property to sbt during compile time</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dquill.query.cacheDaynamic=false\"><pre class=\"notranslate\"><code>sbt -Dquill.query.cacheDaynamic=false\n</code></pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-extending-quill\" class=\"anchor\" aria-hidden=\"true\" href=\"#extending-quill\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Extending quill</h1>\n<h2 dir=\"auto\"><a id=\"user-content-infix\" class=\"anchor\" aria-hidden=\"true\" href=\"#infix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Infix</h2>\n<p dir=\"auto\">Infix is a very flexible mechanism to use non-supported features without having to use plain queries in the target language. It allows the insertion of arbitrary strings within quotations.</p>\n<p dir=\"auto\">For instance, quill doesn't support the <code>FOR UPDATE</code> SQL feature. It can still be used through infix and implicit classes:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit class ForUpdate[T](q: Query[T]) {\n  def forUpdate = quote(sql&quot;$q FOR UPDATE&quot;.as[Query[T]])\n}\n\nval a = quote {\n  query[Person].filter(p =&gt; p.age &lt; 18).forUpdate\n}\n\nctx.run(a)\n// SELECT p.name, p.age FROM person p WHERE p.age &lt; 18 FOR UPDATE\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">ForUpdate</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">T</span>]) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">forUpdate</span> <span class=\"pl-k\">=</span> quote(<span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span>$q<span class=\"pl-s\"> FOR UPDATE</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Query</span>[<span class=\"pl-en\">T</span>]])\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">18</span>).forUpdate\n}\n\nctx.run(a)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM person p WHERE p.age &lt; 18 FOR UPDATE</span></pre></div>\n<p dir=\"auto\">The <code>forUpdate</code> quotation can be reused for multiple queries.</p>\n<p dir=\"auto\">Queries that contain <code>infix</code> will generally not be flattened since it is not assumed that the contents\nof the infix are a pure function.</p>\n<blockquote>\n<p dir=\"auto\">Since SQL is typically less performant when there are many nested queries,\nbe careful with the use of <code>infix</code> in queries that have multiple <code>map</code>+<code>filter</code> clauses.</p>\n</blockquote>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Data(id: Int)\ncase class DataAndRandom(id: Int, value: Int)\n\n// This should be alright:\nval q = quote {\n  query[Data].map(e =&gt; DataAndRandom(e.id, sql&quot;RAND()&quot;.as[Int])).filter(r =&gt; r.value &lt;= 10)\n}\nrun(q)\n// SELECT e.id, e.value FROM (SELECT RAND() AS value, e.id AS id FROM Data e) AS e WHERE e.value &lt;= 10\n\n// This might not be:\nval q = quote {\n  query[Data]\n    .map(e =&gt; DataAndRandom(e.id, sql&quot;SOME_UDF(${e.id})&quot;.as[Int]))\n    .filter(r =&gt; r.value &lt;= 10)\n    .map(e =&gt; DataAndRandom(e.id, sql&quot;SOME_OTHER_UDF(${e.value})&quot;.as[Int]))\n    .filter(r =&gt; r.value &lt;= 100)\n}\n// Produces too many layers of nesting!\nrun(q)\n// SELECT e.id, e.value FROM (\n//   SELECT SOME_OTHER_UDF(e.value) AS value, e.id AS id FROM (\n//     SELECT SOME_UDF(e.id) AS value, e.id AS id FROM Data e\n//   ) AS e WHERE e.value &lt;= 10\n// ) AS e WHERE e.value &lt;= 100\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Data</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">DataAndRandom</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">value</span>: <span class=\"pl-en\">Int</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> This should be alright:</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Data</span>].map(e <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">DataAndRandom</span>(e.id, <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">RAND()</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Int</span>])).filter(r <span class=\"pl-k\">=&gt;</span> r.value <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">10</span>)\n}\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT e.id, e.value FROM (SELECT RAND() AS value, e.id AS id FROM Data e) AS e WHERE e.value &lt;= 10</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> This might not be:</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Data</span>]\n    .map(e <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">DataAndRandom</span>(e.id, <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">SOME_UDF(</span>${e.id}<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Int</span>]))\n    .filter(r <span class=\"pl-k\">=&gt;</span> r.value <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">10</span>)\n    .map(e <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">DataAndRandom</span>(e.id, <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">SOME_OTHER_UDF(</span>${e.value}<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Int</span>]))\n    .filter(r <span class=\"pl-k\">=&gt;</span> r.value <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">100</span>)\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Produces too many layers of nesting!</span>\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT e.id, e.value FROM (</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   SELECT SOME_OTHER_UDF(e.value) AS value, e.id AS id FROM (</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     SELECT SOME_UDF(e.id) AS value, e.id AS id FROM Data e</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   ) AS e WHERE e.value &lt;= 10</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ) AS e WHERE e.value &lt;= 100</span></pre></div>\n<p dir=\"auto\">If you are sure that the the content of your infix is a pure function, you canse use the <code>pure</code> method\nin order to indicate to Quill that the infix clause can be copied in the query. This gives Quill much\nmore leeway to flatten your query, possibly improving performance.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q = quote {\n  query[Data]\n    .map(e =&gt; DataAndRandom(e.id, sql&quot;SOME_UDF(${e.id})&quot;.pure.as[Int]))\n    .filter(r =&gt; r.value &lt;= 10)\n    .map(e =&gt; DataAndRandom(e.id, sql&quot;SOME_OTHER_UDF(${e.value})&quot;.pure.as[Int]))\n    .filter(r =&gt; r.value &lt;= 100)\n}\n// Copying SOME_UDF and SOME_OTHER_UDF allows the query to be completely flattened.\nrun(q)\n// SELECT e.id, SOME_OTHER_UDF(SOME_UDF(e.id)) FROM Data e\n// WHERE SOME_UDF(e.id) &lt;= 10 AND SOME_OTHER_UDF(SOME_UDF(e.id)) &lt;= 100\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Data</span>]\n    .map(e <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">DataAndRandom</span>(e.id, <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">SOME_UDF(</span>${e.id}<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.pure.as[<span class=\"pl-en\">Int</span>]))\n    .filter(r <span class=\"pl-k\">=&gt;</span> r.value <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">10</span>)\n    .map(e <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">DataAndRandom</span>(e.id, <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">SOME_OTHER_UDF(</span>${e.value}<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.pure.as[<span class=\"pl-en\">Int</span>]))\n    .filter(r <span class=\"pl-k\">=&gt;</span> r.value <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">100</span>)\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Copying SOME_UDF and SOME_OTHER_UDF allows the query to be completely flattened.</span>\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT e.id, SOME_OTHER_UDF(SOME_UDF(e.id)) FROM Data e</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> WHERE SOME_UDF(e.id) &lt;= 10 AND SOME_OTHER_UDF(SOME_UDF(e.id)) &lt;= 100</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-infixes-with-conditions\" class=\"anchor\" aria-hidden=\"true\" href=\"#infixes-with-conditions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Infixes With Conditions</h3>\n<h4 dir=\"auto\"><a id=\"user-content-summary\" class=\"anchor\" aria-hidden=\"true\" href=\"#summary\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Summary</h4>\n<p dir=\"auto\">Use <code>sql\"...\".asCondition</code> to express an infix that represents a conditional expression.</p>\n<h4 dir=\"auto\"><a id=\"user-content-explination\" class=\"anchor\" aria-hidden=\"true\" href=\"#explination\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Explination</h4>\n<p dir=\"auto\">When synthesizing queries for databases which do not have proper boolean-type support (e.g. SQL Server,\nOracle etc...) boolean infix clauses inside projections must become values.\nTypically this requires a <code>CASE WHERE ... END</code>.</p>\n<p dir=\"auto\">Take the following example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Node(name: String, isUp: Boolean, uptime:Long)\ncase class Status(name: String, allowed: Boolean)\nval allowedStatus:Boolean = getState\n\nquote {\n  query[Node].map(n =&gt; Status(n.name, n.isUp == lift(allowedStatus)))\n}\nrun(q)\n// This is invalid in most databases:\n//   SELECT n.name, n.isUp = ?, uptime FROM Node n\n// It will be converted to this:\n//   SELECT n.name, CASE WHEN (n.isUp = ?) THEN 1 ELSE 0, uptime FROM Node n\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Node</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">isUp</span>: <span class=\"pl-en\">Boolean</span>, uptime<span class=\"pl-k\">:</span><span class=\"pl-en\">Long</span>)\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Status</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">allowed</span>: <span class=\"pl-en\">Boolean</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">allowedStatus</span><span class=\"pl-k\">:</span><span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> getState\n\nquote {\n  query[<span class=\"pl-en\">Node</span>].map(n <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Status</span>(n.name, n.isUp <span class=\"pl-k\">==</span> lift(allowedStatus)))\n}\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> This is invalid in most databases:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   SELECT n.name, n.isUp = ?, uptime FROM Node n</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> It will be converted to this:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   SELECT n.name, CASE WHEN (n.isUp = ?) THEN 1 ELSE 0, uptime FROM Node n</span></pre></div>\n<p dir=\"auto\">However, in certain cases, infix clauses that express conditionals should actually represent\nboolean expressions for example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Node(name: String, isUp: Boolean)\nval maxUptime:Boolean = getState\n\nquote {\n  query[Node].filter(n =&gt; sql&quot;${n.uptime} &gt; ${lift(maxUptime)}&quot;.as[Boolean])\n}\nrun(q)\n// Should be this:\n//  SELECT n.name, n.isUp, n.uptime WHERE n.uptime &gt; ?\n// However since sql&quot;...&quot;.as[Boolean] is treated as a Boolean Value (as opposed to an expression) it will be converted to this:\n//  SELECT n.name, n.isUp, n.uptime WHERE 1 == n.uptime &gt; ?\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Node</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">isUp</span>: <span class=\"pl-en\">Boolean</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">maxUptime</span><span class=\"pl-k\">:</span><span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> getState\n\nquote {\n  query[<span class=\"pl-en\">Node</span>].filter(n <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span>${n.uptime}<span class=\"pl-s\"> &gt; </span>${lift(maxUptime)}<span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Boolean</span>])\n}\nrun(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Should be this:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>  SELECT n.name, n.isUp, n.uptime WHERE n.uptime &gt; ?</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> However since sql\"...\".as[Boolean] is treated as a Boolean Value (as opposed to an expression) it will be converted to this:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>  SELECT n.name, n.isUp, n.uptime WHERE 1 == n.uptime &gt; ?</span></pre></div>\n<p dir=\"auto\">In order to avoid this problem, use sql\"...\".asCondition so that Quill understands that the boolean is an expression:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"quote {\n  query[Node].filter(n =&gt; sql&quot;${n.uptime} &gt; ${lift(maxUptime)}&quot;.asCondition)\n}\nrun(q) // SELECT n.name, n.isUp, n.uptime WHERE n.uptime &gt; ?\"><pre>quote {\n  query[<span class=\"pl-en\">Node</span>].filter(n <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span>${n.uptime}<span class=\"pl-s\"> &gt; </span>${lift(maxUptime)}<span class=\"pl-s\">\"</span>.asCondition)\n}\nrun(q) <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT n.name, n.isUp, n.uptime WHERE n.uptime &gt; ?</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-dynamic-infix\" class=\"anchor\" aria-hidden=\"true\" href=\"#dynamic-infix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dynamic infix</h3>\n<p dir=\"auto\">Infix supports runtime string values through the <code>#$</code> prefix. Example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def test(functionName: String) =\n  ctx.run(query[Person].map(p =&gt; sql&quot;#$functionName(${p.name})&quot;.as[Int]))\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">test</span>(<span class=\"pl-v\">functionName</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span>\n  ctx.run(query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">#</span>$functionName<span class=\"pl-s\">(</span>${p.name}<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Int</span>]))</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-implicit-extensions\" class=\"anchor\" aria-hidden=\"true\" href=\"#implicit-extensions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Implicit Extensions</h3>\n<p dir=\"auto\">You can use implicit extensions in quill in several ways.</p>\n<blockquote>\n<p dir=\"auto\">NOTE. In ProtoQuill extensions must be written using the Scala 3 <code>extension</code> syntax and implicit class extensions are not supported. Please see <a href=\"#extensions-in-protoquillscala3\">Extensions in ProtoQuill/Scala3</a> below for more info.</p>\n</blockquote>\n<h5 dir=\"auto\"><a id=\"user-content-standard-quoted-extension\" class=\"anchor\" aria-hidden=\"true\" href=\"#standard-quoted-extension\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Standard quoted extension:</h5>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit class Ext(q: Query[Person]) {\n  def olderThan(age: Int) = quote {\n    query[Person].filter(p =&gt; p.age &gt; lift(age))\n  }\n}\nrun(query[Person].olderThan(44))\n// SELECT p.name, p.age FROM Person p WHERE p.age &gt; ?\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Ext</span>(<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">olderThan</span>(<span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=</span> quote {\n    query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> lift(age))\n  }\n}\nrun(query[<span class=\"pl-en\">Person</span>].olderThan(<span class=\"pl-c1\">44</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM Person p WHERE p.age &gt; ?</span></pre></div>\n<h5 dir=\"auto\"><a id=\"user-content-higher-order-quoted-extension\" class=\"anchor\" aria-hidden=\"true\" href=\"#higher-order-quoted-extension\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Higher-order quoted extension:</h5>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit class Ext(q: Query[Person]) {\n  def olderThan = quote {\n    (age: Int) =&gt;\n      query[Person].filter(p =&gt; p.age &gt; lift(age))\n  }\n}\nrun(query[Person].olderThan(44))\n// SELECT p.name, p.age FROM Person p WHERE p.age &gt; 44\n\nrun(query[Person].olderThan(lift(44)))\n// SELECT p.name, p.age FROM Person p WHERE p.age &gt; ?\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Ext</span>(<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">olderThan</span> <span class=\"pl-k\">=</span> quote {\n    (<span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=&gt;</span>\n      query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> lift(age))\n  }\n}\nrun(query[<span class=\"pl-en\">Person</span>].olderThan(<span class=\"pl-c1\">44</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM Person p WHERE p.age &gt; 44</span>\n\nrun(query[<span class=\"pl-en\">Person</span>].olderThan(lift(<span class=\"pl-c1\">44</span>)))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM Person p WHERE p.age &gt; ?</span></pre></div>\n<p dir=\"auto\">The advantage of this approach is that you can choose to either lift or use a constant.</p>\n<h5 dir=\"auto\"><a id=\"user-content-scalar-quoted-extension\" class=\"anchor\" aria-hidden=\"true\" href=\"#scalar-quoted-extension\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scalar quoted extension:</h5>\n<p dir=\"auto\">Just as <code>Query</code> can be extended, scalar values can be similarly extended.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit class Ext(i: Int) {\n  def between = quote {\n    (a: Int, b:Int) =&gt;\n      i &gt; a &amp;&amp; i &lt; b\n  }\n}\nrun(query[Person].filter(p =&gt; p.age.between(33, 44)))\n// SELECT p.name, p.age FROM Person p WHERE p.age &gt; 33 AND p.age &lt; 44\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Ext</span>(<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Int</span>) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">between</span> <span class=\"pl-k\">=</span> quote {\n    (<span class=\"pl-v\">a</span>: <span class=\"pl-en\">Int</span>, b<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=&gt;</span>\n      i <span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">&amp;&amp;</span> i <span class=\"pl-k\">&lt;</span> b\n  }\n}\nrun(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age.between(<span class=\"pl-c1\">33</span>, <span class=\"pl-c1\">44</span>)))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM Person p WHERE p.age &gt; 33 AND p.age &lt; 44</span></pre></div>\n<h5 dir=\"auto\"><a id=\"user-content-extensions-in-protoquillscala3\" class=\"anchor\" aria-hidden=\"true\" href=\"#extensions-in-protoquillscala3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Extensions in ProtoQuill/Scala3:</h5>\n<p dir=\"auto\">In ProtoQuill, the implicit class pattern for extensions is not supported. Please switch to using Scala 3 extension methods combined with inline definitions to achieve the same functionality.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"extension (q: Query[Person]) {\n  inline def olderThan(inline age: Int) = quote {\n    query[Person].filter(p =&gt; p.age &gt; lift(age))\n  }\n}\nrun(query[Person].olderThan(44))\n// SELECT p.name, p.age FROM Person p WHERE p.age &gt; ?\"><pre><span class=\"pl-k\">extension</span> (<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]) {\n  <span class=\"pl-k\">inline</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">olderThan</span>(<span class=\"pl-k\">inline</span> <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=</span> quote {\n    query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> lift(age))\n  }\n}\nrun(query[<span class=\"pl-en\">Person</span>].olderThan(<span class=\"pl-c1\">44</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT p.name, p.age FROM Person p WHERE p.age &gt; ?</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-raw-sql-queries\" class=\"anchor\" aria-hidden=\"true\" href=\"#raw-sql-queries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Raw SQL queries</h3>\n<p dir=\"auto\">You can also use infix to port raw SQL queries to Quill and map it to regular Scala tuples.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val rawQuery = quote {\n  (id: Int) =&gt; sql&quot;&quot;&quot;SELECT id, name FROM my_entity WHERE id = $id&quot;&quot;&quot;.as[Query[(Int, String)]]\n}\nctx.run(rawQuery(1))\n//SELECT x._1, x._2 FROM (SELECT id AS &quot;_1&quot;, name AS &quot;_2&quot; FROM my_entity WHERE id = 1) x\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">rawQuery</span> <span class=\"pl-k\">=</span> quote {\n  (<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"\"\"</span><span class=\"pl-s\">SELECT id, name FROM my_entity WHERE id = </span>$id<span class=\"pl-s\">\"\"\"</span>.as[<span class=\"pl-en\">Query</span>[(<span class=\"pl-en\">Int</span>, <span class=\"pl-en\">String</span>)]]\n}\nctx.run(rawQuery(<span class=\"pl-c1\">1</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>SELECT x._1, x._2 FROM (SELECT id AS \"_1\", name AS \"_2\" FROM my_entity WHERE id = 1) x</span></pre></div>\n<p dir=\"auto\">Note that in this case the result query is nested.\nIt's required since Quill is not aware of a query tree and cannot safely unnest it.\nThis is different from the example above because infix starts with the query <code>sql\"$q...</code> where its tree is already compiled</p>\n<h3 dir=\"auto\"><a id=\"user-content-database-functions\" class=\"anchor\" aria-hidden=\"true\" href=\"#database-functions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Database functions</h3>\n<p dir=\"auto\">A custom database function can also be used through infix:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val myFunction = quote {\n  (i: Int) =&gt; sql&quot;MY_FUNCTION($i)&quot;.as[Int]\n}\n\nval q = quote {\n  query[Person].map(p =&gt; myFunction(p.age))\n}\n\nctx.run(q)\n// SELECT MY_FUNCTION(p.age) FROM Person p\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">myFunction</span> <span class=\"pl-k\">=</span> quote {\n  (<span class=\"pl-v\">i</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">MY_FUNCTION(</span>$i<span class=\"pl-s\">)</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Int</span>]\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Person</span>].map(p <span class=\"pl-k\">=&gt;</span> myFunction(p.age))\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT MY_FUNCTION(p.age) FROM Person p</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-comparison-operators\" class=\"anchor\" aria-hidden=\"true\" href=\"#comparison-operators\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Comparison operators</h3>\n<p dir=\"auto\">You can implement comparison operators by defining implicit conversion and using infix.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.util.Date\n\nimplicit class DateQuotes(left: Date) {\n  def &gt;(right: Date) = quote(sql&quot;$left &gt; $right&quot;.as[Boolean])\n\n  def &lt;(right: Date) = quote(sql&quot;$left &lt; $right&quot;.as[Boolean])\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">util</span>.<span class=\"pl-en\">Date</span>\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">DateQuotes</span>(<span class=\"pl-v\">left</span>: <span class=\"pl-en\">Date</span>) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">&gt;</span>(<span class=\"pl-v\">right</span>: <span class=\"pl-en\">Date</span>) <span class=\"pl-k\">=</span> quote(<span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span>$left<span class=\"pl-s\"> &gt; </span>$right<span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Boolean</span>])\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">&lt;</span>(<span class=\"pl-v\">right</span>: <span class=\"pl-en\">Date</span>) <span class=\"pl-k\">=</span> quote(<span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span>$left<span class=\"pl-s\"> &lt; </span>$right<span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Boolean</span>])\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-batch-with-infix\" class=\"anchor\" aria-hidden=\"true\" href=\"#batch-with-infix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>batch with infix</h3>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit class OnDuplicateKeyIgnore[T](q: Insert[T]) {\n  def ignoreDuplicate = quote(sql&quot;$q ON DUPLICATE KEY UPDATE id=id&quot;.as[Insert[T]])\n}\n\nctx.run(\n  liftQuery(List(\n    Person(1, &quot;Test1&quot;, 30),\n    Person(2, &quot;Test2&quot;, 31)\n  )).foreach(row =&gt; query[Person].insertValue(row).ignoreDuplicate)\n)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">OnDuplicateKeyIgnore</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Insert</span>[<span class=\"pl-en\">T</span>]) {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">ignoreDuplicate</span> <span class=\"pl-k\">=</span> quote(<span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span>$q<span class=\"pl-s\"> ON DUPLICATE KEY UPDATE id=id</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">Insert</span>[<span class=\"pl-en\">T</span>]])\n}\n\nctx.run(\n  liftQuery(<span class=\"pl-en\">List</span>(\n    <span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Test1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">30</span>),\n    <span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Test2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">31</span>)\n  )).foreach(row <span class=\"pl-k\">=&gt;</span> query[<span class=\"pl-en\">Person</span>].insertValue(row).ignoreDuplicate)\n)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-custom-encoding\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-encoding\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Custom encoding</h2>\n<p dir=\"auto\">Quill uses <code>Encoder</code>s to encode query inputs and <code>Decoder</code>s to read values returned by queries. The library provides a few built-in encodings and two mechanisms to define custom encodings: mapped encoding and raw encoding.</p>\n<h3 dir=\"auto\"><a id=\"user-content-mapped-encoding\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapped-encoding\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mapped Encoding</h3>\n<p dir=\"auto\">If the correspondent database type is already supported, use <code>MappedEncoding</code>. In this example, <code>String</code> is already supported by Quill and the <code>UUID</code> encoding from/to <code>String</code> is defined through mapped encoding:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import ctx._\nimport java.util.UUID\n\nimplicit val encodeUUID = MappedEncoding[UUID, String](_.toString)\nimplicit val decodeUUID = MappedEncoding[String, UUID](UUID.fromString(_))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">util</span>.<span class=\"pl-en\">UUID</span>\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">encodeUUID</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MappedEncoding</span>[<span class=\"pl-en\">UUID</span>, <span class=\"pl-en\">String</span>](_.toString)\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">decodeUUID</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MappedEncoding</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">UUID</span>](<span class=\"pl-en\">UUID</span>.fromString(_))</pre></div>\n<p dir=\"auto\">A mapped encoding also can be defined without a context instance by importing <code>io.getquill.MappedEncoding</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.getquill.MappedEncoding\nimport java.util.UUID\n\nimplicit val encodeUUID = MappedEncoding[UUID, String](_.toString)\nimplicit val decodeUUID = MappedEncoding[String, UUID](UUID.fromString(_))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">MappedEncoding</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">util</span>.<span class=\"pl-en\">UUID</span>\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">encodeUUID</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MappedEncoding</span>[<span class=\"pl-en\">UUID</span>, <span class=\"pl-en\">String</span>](_.toString)\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">decodeUUID</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MappedEncoding</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">UUID</span>](<span class=\"pl-en\">UUID</span>.fromString(_))</pre></div>\n<p dir=\"auto\">Note that can it be also used to provide mapping for element types of collection (SQL Arrays or Cassandra Collections).</p>\n<h3 dir=\"auto\"><a id=\"user-content-raw-encoding\" class=\"anchor\" aria-hidden=\"true\" href=\"#raw-encoding\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Raw Encoding</h3>\n<p dir=\"auto\">If the database type is not supported by Quill, it is possible to provide \"raw\" encoders and decoders:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait UUIDEncodingExample {\n  val jdbcContext: PostgresJdbcContext[Literal] // your context should go here\n\n  import jdbcContext._\n\n  implicit val uuidDecoder: Decoder[UUID] =\n    decoder((index, row) =&gt;\n      UUID.fromString(row.getObject(index).toString)) // database-specific implementation\n\n  implicit val uuidEncoder: Encoder[UUID] =\n    encoder(java.sql.Types.OTHER, (index, value, row) =&gt;\n        row.setObject(index, value, java.sql.Types.OTHER)) // database-specific implementation\n\n  // Only for postgres\n  implicit def arrayUUIDEncoder[Col &lt;: Seq[UUID]]: Encoder[Col] = arrayRawEncoder[UUID, Col](&quot;uuid&quot;)\n  implicit def arrayUUIDDecoder[Col &lt;: Seq[UUID]](implicit bf: CBF[UUID, Col]): Decoder[Col] =\n    arrayRawDecoder[UUID, Col]\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">UUIDEncodingExample</span> {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">jdbcContext</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">PostgresJdbcContext</span>[<span class=\"pl-en\">Literal</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> your context should go here</span>\n\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">jdbcContext</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">uuidDecoder</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Decoder</span>[<span class=\"pl-en\">UUID</span>] <span class=\"pl-k\">=</span>\n    decoder((index, row) <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-en\">UUID</span>.fromString(row.getObject(index).toString)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> database-specific implementation</span>\n\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">uuidEncoder</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">UUID</span>] <span class=\"pl-k\">=</span>\n    encoder(java.sql.<span class=\"pl-en\">Types</span>.<span class=\"pl-en\">OTHER</span>, (index, value, row) <span class=\"pl-k\">=&gt;</span>\n        row.setObject(index, value, java.sql.<span class=\"pl-en\">Types</span>.<span class=\"pl-en\">OTHER</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> database-specific implementation</span>\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Only for postgres</span>\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">arrayUUIDEncoder</span>[<span class=\"pl-en\">Col</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">UUID</span>]]<span class=\"pl-k\">:</span> <span class=\"pl-en\">Encoder</span>[<span class=\"pl-en\">Col</span>] <span class=\"pl-k\">=</span> arrayRawEncoder[<span class=\"pl-en\">UUID</span>, <span class=\"pl-en\">Col</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>uuid<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">arrayUUIDDecoder</span>[<span class=\"pl-en\">Col</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Seq</span>[<span class=\"pl-en\">UUID</span>]](<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">bf</span>: <span class=\"pl-en\">CBF</span>[<span class=\"pl-en\">UUID</span>, <span class=\"pl-en\">Col</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Decoder</span>[<span class=\"pl-en\">Col</span>] <span class=\"pl-k\">=</span>\n    arrayRawDecoder[<span class=\"pl-en\">UUID</span>, <span class=\"pl-en\">Col</span>]\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-anyval\" class=\"anchor\" aria-hidden=\"true\" href=\"#anyval\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><code>AnyVal</code></h2>\n<p dir=\"auto\">Quill automatically encodes <code>AnyVal</code>s (value classes):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class UserId(value: Int) extends AnyVal\ncase class User(id: UserId, name: String)\n\nval q = quote {\n  for {\n    u &lt;- query[User] if u.id == lift(UserId(1))\n  } yield u\n}\n\nctx.run(q)\n// SELECT u.id, u.name FROM User u WHERE (u.id = 1)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">UserId</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyVal</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">User</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">UserId</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">q</span> <span class=\"pl-k\">=</span> quote {\n  <span class=\"pl-k\">for</span> {\n    u <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> query[<span class=\"pl-en\">User</span>] <span class=\"pl-k\">if</span> u.id <span class=\"pl-k\">==</span> lift(<span class=\"pl-en\">UserId</span>(<span class=\"pl-c1\">1</span>))\n  } <span class=\"pl-k\">yield</span> u\n}\n\nctx.run(q)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT u.id, u.name FROM User u WHERE (u.id = 1)</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-tablecolumn-customizations\" class=\"anchor\" aria-hidden=\"true\" href=\"#tablecolumn-customizations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table/Column Customizations</h2>\n<p dir=\"auto\">The meta DSL allows the user to customize how Quill handles column/table naming and behavior.</p>\n<h3 dir=\"auto\"><a id=\"user-content-changing-table-and-column-names\" class=\"anchor\" aria-hidden=\"true\" href=\"#changing-table-and-column-names\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Changing Table and Column Names</h3>\n<p dir=\"auto\">You can change how Quill queries handle table and column names for a record case class.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def example = {\n  implicit val personSchemaMeta = schemaMeta[Person](&quot;people&quot;, _.id -&gt; &quot;person_id&quot;)\n\n  ctx.run(query[Person])\n  // SELECT x.person_id, x.name, x.age FROM people x\n}\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">example</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">personSchemaMeta</span> <span class=\"pl-k\">=</span> schemaMeta[<span class=\"pl-en\">Person</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>people<span class=\"pl-pds\">\"</span></span>, _.id <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person_id<span class=\"pl-pds\">\"</span></span>)\n\n  ctx.run(query[<span class=\"pl-en\">Person</span>])\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x.person_id, x.name, x.age FROM people x</span>\n}</pre></div>\n<p dir=\"auto\">By default, quill expands <code>query[Person]</code> to <code>querySchema[Person](\"Person\")</code>. It's possible to customize this behavior using an implicit instance of <code>SchemaMeta</code>:</p>\n<h3 dir=\"auto\"><a id=\"user-content-excluding-columns-from-insert\" class=\"anchor\" aria-hidden=\"true\" href=\"#excluding-columns-from-insert\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Excluding Columns from Insert</h3>\n<p dir=\"auto\">You can exclude columns (e.g. Auto-Generated ones) from insertion in <code>q.insertValue(...)</code> by using an <code>InsertMeta</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val personInsertMeta = insertMeta[Person](_.id)\n\nctx.run(query[Person].insertValue(lift(Person(-1, &quot;John&quot;, 22))))\n// INSERT INTO Person (name,age) VALUES (?, ?)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">personInsertMeta</span> <span class=\"pl-k\">=</span> insertMeta[<span class=\"pl-en\">Person</span>](_.id)\n\nctx.run(query[<span class=\"pl-en\">Person</span>].insertValue(lift(<span class=\"pl-en\">Person</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">22</span>))))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> INSERT INTO Person (name,age) VALUES (?, ?)</span></pre></div>\n<p dir=\"auto\">Note that the parameter of <code>insertMeta</code> is called <code>exclude</code>, but it isn't possible to use named parameters for macro invocations.</p>\n<h3 dir=\"auto\"><a id=\"user-content-excluding-columns-from-update\" class=\"anchor\" aria-hidden=\"true\" href=\"#excluding-columns-from-update\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Excluding Columns from Update</h3>\n<p dir=\"auto\">You can exclude columns (e.g. Auto-Generated ones) from updates in <code>q.insertValue(...)</code> by using an <code>UpdateMeta</code>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val personUpdateMeta = updateMeta[Person](_.id)\n\nctx.run(query[Person].filter(_.id == 1).updateValue(lift(Person(1, &quot;John&quot;, 22))))\n// UPDATE Person SET name = ?, age = ? WHERE id = 1\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">personUpdateMeta</span> <span class=\"pl-k\">=</span> updateMeta[<span class=\"pl-en\">Person</span>](_.id)\n\nctx.run(query[<span class=\"pl-en\">Person</span>].filter(_.id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>).updateValue(lift(<span class=\"pl-en\">Person</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>John<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">22</span>))))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> UPDATE Person SET name = ?, age = ? WHERE id = 1</span></pre></div>\n<p dir=\"auto\">Note that the parameter of <code>updateMeta</code> is called <code>exclude</code>, but it isn't possible to use named parameters for macro invocations.</p>\n<h2 dir=\"auto\"><a id=\"user-content-mapped-records\" class=\"anchor\" aria-hidden=\"true\" href=\"#mapped-records\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mapped Records</h2>\n<p dir=\"auto\">The QueryMeta customizes the expansion of query types and extraction of the final value. For instance, it's possible to use this feature to normalize values before reading them from the database:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val personQueryMeta =\n  queryMeta(\n    (q: Query[Person]) =&gt;\n      q.map(p =&gt; (p.id, sql&quot;CONVERT(${p.name} USING utf8)&quot;.as[String], p.age))\n  ) {\n    case (id, name, age) =&gt;\n      Person(id, name, age)\n  }\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">personQueryMeta</span> <span class=\"pl-k\">=</span>\n  queryMeta(\n    (<span class=\"pl-v\">q</span>: <span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]) <span class=\"pl-k\">=&gt;</span>\n      q.map(p <span class=\"pl-k\">=&gt;</span> (p.id, <span class=\"pl-k\">sql</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">CONVERT(</span>${p.name}<span class=\"pl-s\"> USING utf8)</span><span class=\"pl-s\">\"</span>.as[<span class=\"pl-en\">String</span>], p.age))\n  ) {\n    <span class=\"pl-k\">case</span> (id, name, age) <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-en\">Person</span>(id, name, age)\n  }</pre></div>\n<p dir=\"auto\">The query meta definition is open and allows the user to even join values from other tables before reading the final value. This kind of usage is not encouraged.</p>\n<h1 dir=\"auto\"><a id=\"user-content-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contexts</h1>\n<p dir=\"auto\">Contexts represent the database and provide an execution interface for queries.</p>\n<h2 dir=\"auto\"><a id=\"user-content-mirror-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#mirror-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mirror context</h2>\n<p dir=\"auto\">Quill provides a mirror context for testing purposes. Instead of running the query, the mirror context returns a structure with the information that would be used to run the query. There are three mirror context instances:</p>\n<ul dir=\"auto\">\n<li><code>io.getquill.MirrorContext</code>: Mirrors the quotation AST</li>\n<li><code>io.getquill.SqlMirrorContext</code>: Mirrors the SQL query</li>\n<li><code>io.getquill.CassandraMirrorContext</code>: Mirrors the CQL query</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-dependent-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#dependent-contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dependent contexts</h2>\n<p dir=\"auto\">The context instance provides all methods and types to interact with quotations and the database.\nContexts can be imported and passed around normally in constructors and function arguments.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyContext extends SqlMirrorContext(MirrorSqlDialect, Literal)\ncase class MySchema(c: MyContext) {\n  import c._\n  val people = quote {\n    querySchema[Person](&quot;people&quot;)\n  }\n}\ncase class MyDao(c: MyContext, schema: MySchema) {\n  def allPeople = c.run(schema.people)\n}\"><pre class=\"notranslate\"><code>class MyContext extends SqlMirrorContext(MirrorSqlDialect, Literal)\ncase class MySchema(c: MyContext) {\n  import c._\n  val people = quote {\n    querySchema[Person](\"people\")\n  }\n}\ncase class MyDao(c: MyContext, schema: MySchema) {\n  def allPeople = c.run(schema.people)\n}\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-context-traits\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-traits\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Context Traits</h3>\n<p dir=\"auto\">One way to compose applications with this kind of context is to use traits with an abstract context variable:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyContext extends SqlMirrorContext(MirrorSqlDialect, Literal)\n\ntrait MySchema {\n\n  val c: MyContext\n  import c._\n\n  val people = quote {\n    querySchema[Person](&quot;people&quot;)\n  }\n}\n\ncase class MyDao(c: MyContext) extends MySchema {\n  import c._\n\n  def allPeople =\n    c.run(people)\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">SqlMirrorContext</span>(<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>)\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">MySchema</span> {\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">c</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MyContext</span>\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">c</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">people</span> <span class=\"pl-k\">=</span> quote {\n    querySchema[<span class=\"pl-en\">Person</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>people<span class=\"pl-pds\">\"</span></span>)\n  }\n}\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyDao</span>(<span class=\"pl-v\">c</span>: <span class=\"pl-en\">MyContext</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">MySchema</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">c</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">allPeople</span> <span class=\"pl-k\">=</span>\n    c.run(people)\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-modular-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#modular-contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Modular Contexts</h3>\n<p dir=\"auto\">Another simple way to modularize Quill code is by extending <code>Context</code> as a self-type and applying mixins. Using this strategy,\nit is possible to create functionality that is fully portable across databases and even different types of databases\n(e.g. creating common queries for both Postgres and Spark).</p>\n<p dir=\"auto\">For example, create the following abstract context:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait ModularContext[I &lt;: Idiom, N &lt;: NamingStrategy] { this: Context[I, N] =&gt;\n  def peopleOlderThan = quote {\n    (age:Int, q:Query[Person]) =&gt; q.filter(p =&gt; p.age &gt; age)\n  }\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">ModularContext</span>[<span class=\"pl-en\">I</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Idiom</span>, <span class=\"pl-en\">N</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">NamingStrategy</span>] { <span class=\"pl-c1\">this</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Context</span>[<span class=\"pl-en\">I</span>, <span class=\"pl-en\">N</span>] <span class=\"pl-k\">=&gt;</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">peopleOlderThan</span> <span class=\"pl-k\">=</span> quote {\n    (age<span class=\"pl-k\">:</span><span class=\"pl-en\">Int</span>, q<span class=\"pl-k\">:</span><span class=\"pl-en\">Query</span>[<span class=\"pl-en\">Person</span>]) <span class=\"pl-k\">=&gt;</span> q.filter(p <span class=\"pl-k\">=&gt;</span> p.age <span class=\"pl-k\">&gt;</span> age)\n  }\n}</pre></div>\n<p dir=\"auto\">Let's see how this can be used across different kinds of databases and Quill contexts.</p>\n<h4 dir=\"auto\"><a id=\"user-content-use-modularcontext-in-a-mirror-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-modularcontext-in-a-mirror-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Use <code>ModularContext</code> in a mirror context:</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Note: In some cases need to explicitly specify [MirrorSqlDialect, Literal].\nval ctx =\n  new SqlMirrorContext[MirrorSqlDialect, Literal](MirrorSqlDialect, Literal)\n    with ModularContext[MirrorSqlDialect, Literal]\n\nimport ctx._\nprintln( run(peopleOlderThan(22, query[Person])).string )\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Note: In some cases need to explicitly specify [MirrorSqlDialect, Literal].</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlMirrorContext</span>[<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>](<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>)\n    <span class=\"pl-k\">with</span> <span class=\"pl-e\">ModularContext</span>[<span class=\"pl-en\">MirrorSqlDialect</span>, <span class=\"pl-en\">Literal</span>]\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span>\nprintln( run(peopleOlderThan(<span class=\"pl-c1\">22</span>, query[<span class=\"pl-en\">Person</span>])).string )</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-use-modularcontext-to-query-a-postgres-database\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-modularcontext-to-query-a-postgres-database\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Use <code>ModularContext</code> to query a Postgres Database</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx =\n  new PostgresJdbcContext[Literal](Literal, ds)\n    with ModularContext[PostgresDialect, Literal]\n\nimport ctx._\nval results = run(peopleOlderThan(22, query[Person]))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresJdbcContext</span>[<span class=\"pl-en\">Literal</span>](<span class=\"pl-en\">Literal</span>, ds)\n    <span class=\"pl-k\">with</span> <span class=\"pl-e\">ModularContext</span>[<span class=\"pl-en\">PostgresDialect</span>, <span class=\"pl-en\">Literal</span>]\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">ctx</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">results</span> <span class=\"pl-k\">=</span> run(peopleOlderThan(<span class=\"pl-c1\">22</span>, query[<span class=\"pl-en\">Person</span>]))</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-use-modularcontext-to-query-a-spark-dataset\" class=\"anchor\" aria-hidden=\"true\" href=\"#use-modularcontext-to-query-a-spark-dataset\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Use <code>ModularContext</code> to query a Spark Dataset</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object CustomQuillSparkContext extends QuillSparkContext\n  with ModularContext[SparkDialect, Literal]\n\nval results = run(peopleOlderThan(22, liftQuery(dataset)))\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">CustomQuillSparkContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">QuillSparkContext</span>\n  <span class=\"pl-k\">with</span> <span class=\"pl-e\">ModularContext</span>[<span class=\"pl-en\">SparkDialect</span>, <span class=\"pl-en\">Literal</span>]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">results</span> <span class=\"pl-k\">=</span> run(peopleOlderThan(<span class=\"pl-c1\">22</span>, liftQuery(dataset)))</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-spark-integration\" class=\"anchor\" aria-hidden=\"true\" href=\"#spark-integration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Spark Integration</h2>\n<p dir=\"auto\">Quill provides a fully type-safe way to use Spark's highly-optimized SQL engine. It's an alternative to <code>Dataset</code>'s weakly-typed API.</p>\n<h3 dir=\"auto\"><a id=\"user-content-importing-quill-spark\" class=\"anchor\" aria-hidden=\"true\" href=\"#importing-quill-spark\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Importing Quill Spark</h3>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-spark&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-spark\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h3>\n<p dir=\"auto\">Unlike the other modules, the Spark context is a companion object. Also, it does not depend on a spark session. To use it, add the following import:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.apache.spark.sql.SparkSession\n\n// Create your Spark Context\nval session =\n  SparkSession.builder()\n    .master(&quot;local&quot;)\n    .appName(&quot;spark test&quot;)\n    .getOrCreate()\n\n// The Spark SQL Context must be provided by the user through an implicit value:\nimplicit val sqlContext = session.sqlContext\nimport sqlContext.implicits._      // Also needed...\n\n// Import the Quill Spark Context\nimport io.getquill.QuillSparkContext._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">apache</span>.<span class=\"pl-en\">spark</span>.<span class=\"pl-en\">sql</span>.<span class=\"pl-en\">SparkSession</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Create your Spark Context</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">session</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-en\">SparkSession</span>.builder()\n    .master(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>local<span class=\"pl-pds\">\"</span></span>)\n    .appName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark test<span class=\"pl-pds\">\"</span></span>)\n    .getOrCreate()\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> The Spark SQL Context must be provided by the user through an implicit value:</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">sqlContext</span> <span class=\"pl-k\">=</span> session.sqlContext\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">sqlContext</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span>      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Also needed...</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Import the Quill Spark Context</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">QuillSparkContext</span>.<span class=\"pl-en\">_</span></pre></div>\n<blockquote>\n<p dir=\"auto\">Note Unlike the other modules, the Spark context is a companion object. Also, it does not depend on a spark session.</p>\n</blockquote>\n<blockquote>\n<p dir=\"auto\">Also Note: Quill decoders and meta instances are not used by the quill-spark module, Spark's <code>Encoder</code>s are used instead.</p>\n</blockquote>\n<h3 dir=\"auto\"><a id=\"user-content-using-quill-spark\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-quill-spark\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using Quill-Spark</h3>\n<p dir=\"auto\">The <code>run</code> method returns a <code>Dataset</code> transformed by the Quill query using the SQL engine.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Typically you start with some type dataset.\nval peopleDS: Dataset[Person] = spark.read.parquet(&quot;path/to/people&quot;).as[Person]\nval addressesDS: Dataset[Address] = spark.read.parquet(&quot;path/to/addresses&quot;).as[Address]\n\n// The liftQuery method converts Datasets to Quill queries:\nval people = quote { liftQuery(peopleDS) }\nval addresses = quote { liftQuery(addressesDS) }\n\nval peopleAndAddresses = quote {\n  (people join addresses).on((p, a) =&gt; p.id == a.ownerFk)\n}\n\nval peopleAndAddressesDS: Dataset[(Person, Address)] = run(peopleAndAddresses)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Typically you start with some type dataset.</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">peopleDS</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">=</span> spark.read.parquet(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path/to/people<span class=\"pl-pds\">\"</span></span>).as[<span class=\"pl-en\">Person</span>]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">addressesDS</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Address</span>] <span class=\"pl-k\">=</span> spark.read.parquet(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path/to/addresses<span class=\"pl-pds\">\"</span></span>).as[<span class=\"pl-en\">Address</span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> The liftQuery method converts Datasets to Quill queries:</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">people</span> <span class=\"pl-k\">=</span> quote { liftQuery(peopleDS) }\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">addresses</span> <span class=\"pl-k\">=</span> quote { liftQuery(addressesDS) }\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">peopleAndAddresses</span> <span class=\"pl-k\">=</span> quote {\n  (people join addresses).on((p, a) <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> a.ownerFk)\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">peopleAndAddressesDS</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[(<span class=\"pl-en\">Person</span>, <span class=\"pl-en\">Address</span>)] <span class=\"pl-k\">=</span> run(peopleAndAddresses)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-simplify-it\" class=\"anchor\" aria-hidden=\"true\" href=\"#simplify-it\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Simplify it</h4>\n<p dir=\"auto\">Since the <code>run</code> method allows for Quill queries to be specified directly, and <code>liftQuery</code> can be used inside\nof any Quoted block, you can shorten various steps of the above workflow:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val peopleDS: Dataset[Person] = spark.read.parquet(&quot;path/to/people&quot;)\nval addressesDS: Dataset[Address] = spark.read.parquet(&quot;path/to/addresses&quot;)\n\nval peopleAndAddressesDS: Dataset[(Person, Address)] = run {\n  liftQuery(peopleDS)\n    .join(liftQuery(addressesDS))\n    .on((p, a) =&gt; p.id == a.ownerFk)\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">peopleDS</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Person</span>] <span class=\"pl-k\">=</span> spark.read.parquet(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path/to/people<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">addressesDS</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Address</span>] <span class=\"pl-k\">=</span> spark.read.parquet(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path/to/addresses<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">peopleAndAddressesDS</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[(<span class=\"pl-en\">Person</span>, <span class=\"pl-en\">Address</span>)] <span class=\"pl-k\">=</span> run {\n  liftQuery(peopleDS)\n    .join(liftQuery(addressesDS))\n    .on((p, a) <span class=\"pl-k\">=&gt;</span> p.id <span class=\"pl-k\">==</span> a.ownerFk)\n}</pre></div>\n<p dir=\"auto\">Here is an example of a Dataset being converted into Quill, filtered, and then written back out.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.apache.spark.sql.Dataset\n\ndef filter(myDataset: Dataset[Person], name: String): Dataset[Int] =\n  run {\n    liftQuery(myDataset).filter(_.name == lift(name)).map(_.age)\n  }\n// SELECT x1.age _1 FROM (?) x1 WHERE x1.name = ?\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">apache</span>.<span class=\"pl-en\">spark</span>.<span class=\"pl-en\">sql</span>.<span class=\"pl-en\">Dataset</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">filter</span>(<span class=\"pl-v\">myDataset</span>: <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Person</span>], <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span>\n  run {\n    liftQuery(myDataset).filter(_.name <span class=\"pl-k\">==</span> lift(name)).map(_.age)\n  }\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x1.age _1 FROM (?) x1 WHERE x1.name = ?</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-workflow\" class=\"anchor\" aria-hidden=\"true\" href=\"#workflow\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Workflow</h4>\n<p dir=\"auto\">Due to the design of Quill-Spark, it can be used interchangeably throughout your Spark workflow:</p>\n<ul dir=\"auto\">\n<li>Lift a Dataset to Query to do some filtering and sub-selecting\n(with <a href=\"https://jaceklaskowski.gitbooks.io/mastering-spark-sql/spark-sql-Optimizer-PushDownPredicate.html\" rel=\"nofollow\">Predicate and Filter Pushdown!</a>).</li>\n<li>Then covert it back to a Dataset to do Spark-Specific operations.</li>\n<li>Then convert it back to a Query to use Quills great Join DSL...</li>\n<li>Then convert it back to a Dataset to write it to a file or do something else with it...</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-custom-functions\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-functions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Custom Functions</h3>\n<p dir=\"auto\">TODO UDFs and UDAFs</p>\n<h3 dir=\"auto\"><a id=\"user-content-restrictions\" class=\"anchor\" aria-hidden=\"true\" href=\"#restrictions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Restrictions</h3>\n<h4 dir=\"auto\"><a id=\"user-content-top-level-classes\" class=\"anchor\" aria-hidden=\"true\" href=\"#top-level-classes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Top Level Classes</h4>\n<p dir=\"auto\">Spark only supports using top-level classes as record types. That means that\nwhen using <code>quill-spark</code> you can only use a top-level case class for <code>T</code> in <code>Query[T]</code>.</p>\n<p dir=\"auto\">TODO Get the specific error</p>\n<h4 dir=\"auto\"><a id=\"user-content-lifted-variable-interpolation\" class=\"anchor\" aria-hidden=\"true\" href=\"#lifted-variable-interpolation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Lifted Variable Interpolation</h4>\n<p dir=\"auto\">The queries printed from <code>run(myQuery)</code> during compile time escape question marks via a backslash them in order to\nbe able to substitute liftings properly. They are then returned back to their original form before running.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.apache.spark.sql.Dataset\n\ndef filter(myDataset: Dataset[Person]): Dataset[Int] =\n  run {\n    liftQuery(myDataset).filter(_.name == &quot;?&quot;).map(_.age)\n  }\n// This is generated during compile time:\n// SELECT x1.age _1 FROM (?) x1 WHERE x1.name = '\\?'\n// It is reverted upon run-time:\n// SELECT x1.age _1 FROM (ds1) x1 WHERE x1.name = '?'\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">apache</span>.<span class=\"pl-en\">spark</span>.<span class=\"pl-en\">sql</span>.<span class=\"pl-en\">Dataset</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">filter</span>(<span class=\"pl-v\">myDataset</span>: <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Person</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Dataset</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span>\n  run {\n    liftQuery(myDataset).filter(_.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>?<span class=\"pl-pds\">\"</span></span>).map(_.age)\n  }\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> This is generated during compile time:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x1.age _1 FROM (?) x1 WHERE x1.name = '\\?'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> It is reverted upon run-time:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> SELECT x1.age _1 FROM (ds1) x1 WHERE x1.name = '?'</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-sql-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#sql-contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SQL Contexts</h2>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new MysqlJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-dialect\" class=\"anchor\" aria-hidden=\"true\" href=\"#dialect\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dialect</h3>\n<p dir=\"auto\">The SQL dialect parameter defines the specific database dialect to be used. Some context types are specific to a database and thus not require it.</p>\n<p dir=\"auto\">Quill has five built-in dialects:</p>\n<ul dir=\"auto\">\n<li><code>io.getquill.H2Dialect</code></li>\n<li><code>io.getquill.MySQLDialect</code></li>\n<li><code>io.getquill.PostgresDialect</code></li>\n<li><code>io.getquill.SqliteDialect</code></li>\n<li><code>io.getquill.SQLServerDialect</code></li>\n<li><code>io.getquill.OracleDialect</code></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-naming-strategy\" class=\"anchor\" aria-hidden=\"true\" href=\"#naming-strategy\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Naming strategy</h3>\n<p dir=\"auto\">The naming strategy parameter defines the behavior when translating identifiers (table and column names) to SQL.</p>\n<table>\n<thead>\n<tr>\n<th>strategy</th>\n<th>example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>io.getquill.naming.Literal</code></td>\n<td>some_ident  -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.Escape</code></td>\n<td>some_ident  -&gt; \"some_ident\"</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.UpperCase</code></td>\n<td>some_ident  -&gt; SOME_IDENT</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.LowerCase</code></td>\n<td>SOME_IDENT  -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.SnakeCase</code></td>\n<td>someIdent   -&gt; some_ident</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.CamelCase</code></td>\n<td>some_ident  -&gt; someIdent</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.MysqlEscape</code></td>\n<td>some_ident  -&gt; `some_ident`</td>\n</tr>\n<tr>\n<td><code>io.getquill.naming.PostgresEscape</code></td>\n<td>$some_ident -&gt; $some_ident</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">Multiple transformations can be defined using <code>NamingStrategy()</code>. For instance, the naming strategy</p>\n<p dir=\"auto\"><code>NamingStrategy(SnakeCase, UpperCase)</code></p>\n<p dir=\"auto\">produces the following transformation:</p>\n<p dir=\"auto\"><code>someIdent -&gt; SOME_IDENT</code></p>\n<p dir=\"auto\">The transformations are applied from left to right.</p>\n<h3 dir=\"auto\"><a id=\"user-content-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Configuration</h3>\n<p dir=\"auto\">The string passed to the context is used as the key in order to obtain configurations using the <a href=\"http://github.com/typesafehub/config\">typesafe config</a> library.</p>\n<p dir=\"auto\">Additionally, the contexts provide multiple constructors. For instance, with <code>JdbcContext</code> it's possible to specify a <code>DataSource</code> directly, without using the configuration:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def createDataSource: javax.sql.DataSource with java.io.Closeable = ???\n\nlazy val ctx = new MysqlJdbcContext(SnakeCase, createDataSource)\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">createDataSource</span><span class=\"pl-k\">:</span> javax.sql.<span class=\"pl-en\">DataSource</span> <span class=\"pl-k\">with</span> java.io.<span class=\"pl-en\">Closeable</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">???</span>\n\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, createDataSource)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jdbc</h2>\n<p dir=\"auto\">The <code>quill-jdbc</code> module provides a simple blocking JDBC context for standard use-cases. For transactions, the JDBC connection is kept in a thread-local variable.</p>\n<p dir=\"auto\">Quill uses <a href=\"https://github.com/brettwooldridge/HikariCP\">HikariCP</a> for connection pooling. Please refer to HikariCP's <a href=\"https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby\">documentation</a> for a detailed explanation of the available configurations.</p>\n<p dir=\"auto\">Note that there are <code>dataSource</code> configurations, that go under <code>dataSource</code>, like <code>user</code> and <code>password</code>, but some pool settings may go under the root config, like <code>connectionTimeout</code>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-transactions\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The <code>JdbcContext</code> provides thread-local transaction support:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\"><pre class=\"notranslate\"><code>ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\n</code></pre></div>\n<p dir=\"auto\">The body of <code>transaction</code> can contain calls to other methods and multiple <code>run</code> calls since the transaction is propagated through a thread-local.</p>\n<h3 dir=\"auto\"><a id=\"user-content-mysql-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#mysql-quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MySQL (quill-jdbc)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;8.0.17&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"8.0.17\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new MysqlJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource\nctx.dataSource.url=jdbc:mysql://host/database\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.cachePrepStmts=true\nctx.dataSource.prepStmtCacheSize=250\nctx.dataSource.prepStmtCacheSqlLimit=2048\nctx.connectionTimeout=30000\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource\nctx.dataSource.url=jdbc:mysql://host/database\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.cachePrepStmts=true\nctx.dataSource.prepStmtCacheSize=250\nctx.dataSource.prepStmtCacheSqlLimit=2048\nctx.connectionTimeout=30000\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-postgres-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#postgres-quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Postgres (quill-jdbc)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.postgresql&quot; % &quot;postgresql&quot; % &quot;42.2.8&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"org.postgresql\" % \"postgresql\" % \"42.2.8\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new PostgresJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=5432\nctx.dataSource.serverName=host\nctx.connectionTimeout=30000\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=5432\nctx.dataSource.serverName=host\nctx.connectionTimeout=30000\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sqlite-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#sqlite-quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Sqlite (quill-jdbc)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.xerial&quot; % &quot;sqlite-jdbc&quot; % &quot;3.28.0&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"org.xerial\" % \"sqlite-jdbc\" % \"3.28.0\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new SqliteJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqliteJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.driverClassName=org.sqlite.JDBC\nctx.jdbcUrl=jdbc:sqlite:/path/to/db/file.db\"><pre class=\"notranslate\"><code>ctx.driverClassName=org.sqlite.JDBC\nctx.jdbcUrl=jdbc:sqlite:/path/to/db/file.db\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-h2-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#h2-quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>H2 (quill-jdbc)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.h2database&quot; % &quot;h2&quot; % &quot;1.4.199&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.h2database\" % \"h2\" % \"1.4.199\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new H2JdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">H2JdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\nctx.dataSource.url=jdbc:h2:mem:yourdbname\nctx.dataSource.user=sa\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\nctx.dataSource.url=jdbc:h2:mem:yourdbname\nctx.dataSource.user=sa\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sql-server-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#sql-server-quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SQL Server (quill-jdbc)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.microsoft.sqlserver&quot; % &quot;mssql-jdbc&quot; % &quot;7.4.1.jre8&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.microsoft.sqlserver\" % \"mssql-jdbc\" % \"7.4.1.jre8\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new SqlServerJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlServerJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-oracle-quill-jdbc\" class=\"anchor\" aria-hidden=\"true\" href=\"#oracle-quill-jdbc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Oracle (quill-jdbc)</h3>\n<p dir=\"auto\">Quill supports Oracle version 12c and up although due to licensing restrictions, version 18c XE is used for testing.</p>\n<p dir=\"auto\">Note that the latest Oracle JDBC drivers are not publicly available. In order to get them,\nyou will need to connect to Oracle's private maven repository as instructed <a href=\"https://docs.oracle.com/middleware/1213/core/MAVEN/config_maven_repo.htm#MAVEN9012\" rel=\"nofollow\">here</a>.\nUnfortunately, this procedure currently does not work for SBT. There are various workarounds\navailable for this situation <a href=\"https://stackoverflow.com/questions/1074869/find-oracle-jdbc-driver-in-maven-repository?rq=1\" rel=\"nofollow\">here</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.oracle.jdbc&quot; % &quot;ojdbc8&quot; % &quot;18.3.0.0.0&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.oracle.jdbc\" % \"ojdbc8\" % \"18.3.0.0.0\",\n  \"io.getquill\" %% \"quill-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new OracleJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">OracleJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=com.microsoft.sqlserver.jdbc.SQLServerDataSource\nctx.dataSource.user=user\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=1433\nctx.dataSource.serverName=host\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=com.microsoft.sqlserver.jdbc.SQLServerDataSource\nctx.dataSource.user=user\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=1433\nctx.dataSource.serverName=host\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-zio-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#zio-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>ZIO (quill-jdbc-zio)</h2>\n<p dir=\"auto\">Quill context that executes JDBC queries inside of ZIO. Unlike most other contexts\nthat require passing in a <code>java.sql.DataSource</code> when the context is created, this context's\nrun methods return a ZIO that has a DataSource resource dependency.\nNaturally, this should be provided later on in your application\n(see <code>ZioJdbc</code> for helper methods that assist in doing this).</p>\n<p dir=\"auto\">Since resource dependency is <code>Has[DataSource]</code> the result of a <code>run</code> call is <code>ZIO[Has[DataSource], SQLException, T]</code>.\nThis means that if you have a <code>DataSource</code> object, you can just provide it!</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def ds: DataSource = _\nrun(people).provide(Has(ds))\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">ds</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">DataSource</span> <span class=\"pl-k\">=</span> _\nrun(people).provide(<span class=\"pl-en\">Has</span>(ds))</pre></div>\n<blockquote>\n<p dir=\"auto\">Since most quill-zio methods return <code>ZIO[Has[DataSource], SQLException, T]</code>\nthe type <code>QIO[T]</code> i.e. Quill-IO has been defined as an alias.</p>\n<p dir=\"auto\">For underlying-contexts (see below) that depend on <code>Has[Connection]</code>,\nthe alias <code>QCIO[T]</code> (i.e. Quill-Connection-IO) has been defined\nfor <code>ZIO[Has[Connection], SQLException, T]</code>.</p>\n</blockquote>\n<p dir=\"auto\">Since in most JDBC use-cases, a connection-pool datasource (e.g. Hikari) is used,\nconstructor-methods <code>fromPrefix</code>, <code>fromConfig</code>, <code>fromJdbcConfig</code> are available on\n<code>DataSourceLayer</code> to construct instances of a <code>ZLayer[Any, SQLException, Has[DataSource]]</code>\nwhich can be easily used to provide a DataSource dependency.\nYou can use them like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import ZioJdbc._\nval zioDs = DataSourceLayer.fromPrefix(&quot;testPostgresDB&quot;)\nMyZioContext.run(query[Person]).provideCustomLayer(zioDS)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">ZioJdbc</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">zioDs</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DataSourceLayer</span>.fromPrefix(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testPostgresDB<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-en\">MyZioContext</span>.run(query[<span class=\"pl-en\">Person</span>]).provideCustomLayer(zioDS)</pre></div>\n<p dir=\"auto\">If in some rare cases, you wish to provide a <code>java.sql.Connection</code> to a <code>run</code> method directly, you can delegate\nto the underlying-context. This is a more low-level context whose <code>run</code> methods have a <code>Has[Connection]</code> resource.\nHere is an example of how this can be done.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def conn: Connection = _ // If you are starting with a connection object\n\nimport io.getquill.context.ZioJdbc._\n// Import encoders/decoders of the underlying context. Do not import quote/run/prepare methods to avoid conflicts.\nimport MyZioContext.underlying.{ quote =&gt; _, run =&gt; _, prepare =&gt; _,  _ }\n\nMyZioContext.underlying.run(people).provide(Has(conn))\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">conn</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Connection</span> <span class=\"pl-k\">=</span> _ <span class=\"pl-c\"><span class=\"pl-c\">//</span> If you are starting with a connection object</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">context</span>.<span class=\"pl-en\">ZioJdbc</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Import encoders/decoders of the underlying context. Do not import quote/run/prepare methods to avoid conflicts.</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">MyZioContext</span>.<span class=\"pl-en\">underlying</span>.{ <span class=\"pl-en\">quote</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">_</span>, <span class=\"pl-en\">run</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">_</span>, <span class=\"pl-en\">prepare</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">_</span>,  <span class=\"pl-en\">_</span> }\n\n<span class=\"pl-en\">MyZioContext</span>.underlying.run(people).provide(<span class=\"pl-en\">Has</span>(conn))</pre></div>\n<p dir=\"auto\">If you are working with an underlying-context and want to provide a DataSource instead of a connection,\nyou can use the <code>onDataSource</code> method. Note however that this is <em>only</em> needed when working with an underlying-context.\nWhen working with a normal context, <code>onDataSource</code> is not available or necessary\n(since for a  normal contexts <code>R</code> will be <code>Has[DataSource]</code>).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ds: DataSource = _\n\nimport io.getquill.context.ZioJdbc._\n// Import encoders/decoders of the underlying context. Do not import quote/run/prepare methods to avoid conflicts.\nimport MyZioContext.underlying.{ quote =&gt; _, run =&gt; _, prepare =&gt; _,  _ }\n\nMyZioContext.underlying.run(people).onDataSource.provide(Has(ds))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ds</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">DataSource</span> <span class=\"pl-k\">=</span> _\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">context</span>.<span class=\"pl-en\">ZioJdbc</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Import encoders/decoders of the underlying context. Do not import quote/run/prepare methods to avoid conflicts.</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">MyZioContext</span>.<span class=\"pl-en\">underlying</span>.{ <span class=\"pl-en\">quote</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">_</span>, <span class=\"pl-en\">run</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">_</span>, <span class=\"pl-en\">prepare</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">_</span>,  <span class=\"pl-en\">_</span> }\n\n<span class=\"pl-en\">MyZioContext</span>.underlying.run(people).onDataSource.provide(<span class=\"pl-en\">Has</span>(ds))</pre></div>\n<blockquote>\n<p dir=\"auto\">Also note that if you are using a Plain Scala app however, you will need to manually run it i.e. using zio.Runtime</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Runtime.default.unsafeRun(MyZioContext.run(query[Person]).provideLayer(zioDS))\"><pre><span class=\"pl-en\">Runtime</span>.default.unsafeRun(<span class=\"pl-en\">MyZioContext</span>.run(query[<span class=\"pl-en\">Person</span>]).provideLayer(zioDS))</pre></div>\n</blockquote>\n<h4 dir=\"auto\"><a id=\"user-content-dao-helper\" class=\"anchor\" aria-hidden=\"true\" href=\"#dao-helper\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>DAO helper</h4>\n<p dir=\"auto\">One additional useful pattern is to use <code>import io.getquill.context.qzio.ImplicitSyntax.Implicit</code> to provide\nan implicit DataSource to one or multiple <code>run(qry)</code> calls in a context. This is very useful when creating\nDAO patterns that will reuse a DataSource many times:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class MyQueryService(ds: DataSource with Closeable) { // I.e. our DAO\n import Ctx._\n implicit val env = Implicit(Has(ds)) // This will be looked up in each `.implicitDS` call\n\n val joes = Ctx.run(query[Person].filter(p =&gt; p.name == &quot;Joe&quot;)).implicitDS\n val jills = Ctx.run(query[Person].filter(p =&gt; p.name == &quot;Jill&quot;)).implicitDS\n val alexes = Ctx.run(query[Person].filter(p =&gt; p.name == &quot;Alex&quot;)).implicitDS\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyQueryService</span>(<span class=\"pl-v\">ds</span>: <span class=\"pl-en\">DataSource</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">Closeable</span>) { <span class=\"pl-c\"><span class=\"pl-c\">//</span> I.e. our DAO</span>\n <span class=\"pl-k\">import</span> <span class=\"pl-en\">Ctx</span>.<span class=\"pl-en\">_</span>\n <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">env</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Implicit</span>(<span class=\"pl-en\">Has</span>(ds)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> This will be looked up in each `.implicitDS` call</span>\n\n <span class=\"pl-k\">val</span> <span class=\"pl-smi\">joes</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Ctx</span>.run(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>)).implicitDS\n <span class=\"pl-k\">val</span> <span class=\"pl-smi\">jills</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Ctx</span>.run(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Jill<span class=\"pl-pds\">\"</span></span>)).implicitDS\n <span class=\"pl-k\">val</span> <span class=\"pl-smi\">alexes</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Ctx</span>.run(query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Alex<span class=\"pl-pds\">\"</span></span>)).implicitDS\n}</pre></div>\n<p dir=\"auto\">More examples of a Quill-JDBC-ZIO app <a href=\"https://github.com/getquill/quill/tree/master/quill-jdbc-zio/src/test/scala/io/getquill/examples\">quill-jdbc-zio/src/test/scala/io/getquill/examples</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-streaming\" class=\"anchor\" aria-hidden=\"true\" href=\"#streaming\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>streaming</h4>\n<p dir=\"auto\">The <code>ZioJdbcContext</code> can stream using zio.ZStream:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.stream(query[Person])             // returns: ZStream[Has[Connection], Throwable, Person]\n  .run(Sink.collectAll).map(_.toList) // returns: ZIO[Has[Connection], Throwable, List[T]]\"><pre class=\"notranslate\"><code>ctx.stream(query[Person])             // returns: ZStream[Has[Connection], Throwable, Person]\n  .run(Sink.collectAll).map(_.toList) // returns: ZIO[Has[Connection], Throwable, List[T]]\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The <code>ZioJdbcContext</code>s provide support for transactions without needing thread-local storage or similar\nbecause they propagate the resource dependency in the ZIO effect itself (i.e. the <code>Has[Connection]</code> in <code>Zio[Has[Connection], _, _]</code>).\nAs with the other contexts, if an exception is thrown anywhere inside a task or sub-task within a <code>transaction</code> block, the entire block\nwill be rolled back by the database.</p>\n<p dir=\"auto\">Basic syntax:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val trans =\n  ctx.transaction {\n    for {\n      _ &lt;- ctx.run(query[Person].delete)\n      _ &lt;- ctx.run(query[Person].insertValue(Person(&quot;Joe&quot;, 123)))\n      p &lt;- ctx.run(query[Person])\n    } yield p\n  } //returns: ZIO[Has[Connection], Throwable, List[Person]]\n\nval result = Runtime.default.unsafeRun(trans.onDataSource.provide(ds)) //returns: List[Person]\"><pre class=\"notranslate\"><code>val trans =\n  ctx.transaction {\n    for {\n      _ &lt;- ctx.run(query[Person].delete)\n      _ &lt;- ctx.run(query[Person].insertValue(Person(\"Joe\", 123)))\n      p &lt;- ctx.run(query[Person])\n    } yield p\n  } //returns: ZIO[Has[Connection], Throwable, List[Person]]\n\nval result = Runtime.default.unsafeRun(trans.onDataSource.provide(ds)) //returns: List[Person]\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-mysql-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#mysql-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MySQL (quill-jdbc-zio)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;8.0.17&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"8.0.17\",\n  \"io.getquill\" %% \"quill-jdbc-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new MysqlZioJdbcContext(SnakeCase)\n// Also can be static:\nobject MyContext extends MysqlZioJdbcContext(SnakeCase)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">MysqlZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource\nctx.dataSource.url=jdbc:mysql://host/database\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.cachePrepStmts=true\nctx.dataSource.prepStmtCacheSize=250\nctx.dataSource.prepStmtCacheSqlLimit=2048\nctx.connectionTimeout=30000\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource\nctx.dataSource.url=jdbc:mysql://host/database\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.cachePrepStmts=true\nctx.dataSource.prepStmtCacheSize=250\nctx.dataSource.prepStmtCacheSqlLimit=2048\nctx.connectionTimeout=30000\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-postgres-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#postgres-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Postgres (quill-jdbc-zio)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.postgresql&quot; % &quot;postgresql&quot; % &quot;42.2.8&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"org.postgresql\" % \"postgresql\" % \"42.2.8\",\n  \"io.getquill\" %% \"quill-jdbc-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new PostgresZioJdbcContext(SnakeCase)\n// Also can be static:\nobject MyContext extends PostgresZioJdbcContext(SnakeCase)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">PostgresZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=5432\nctx.dataSource.serverName=host\nctx.connectionTimeout=30000\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=5432\nctx.dataSource.serverName=host\nctx.connectionTimeout=30000\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sqlite-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#sqlite-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Sqlite (quill-jdbc-zio)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.xerial&quot; % &quot;sqlite-jdbc&quot; % &quot;3.28.0&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"org.xerial\" % \"sqlite-jdbc\" % \"3.28.0\",\n  \"io.getquill\" %% \"quill-jdbc-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new SqlitezioJdbcContext(SnakeCase)\n// Also can be static:\nobject MyContext extends SqlitezioJdbcContext(SnakeCase)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlitezioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">SqlitezioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.driverClassName=org.sqlite.JDBC\nctx.jdbcUrl=jdbc:sqlite:/path/to/db/file.db\"><pre class=\"notranslate\"><code>ctx.driverClassName=org.sqlite.JDBC\nctx.jdbcUrl=jdbc:sqlite:/path/to/db/file.db\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-h2-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#h2-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>H2 (quill-jdbc-zio)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.h2database&quot; % &quot;h2&quot; % &quot;1.4.199&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.h2database\" % \"h2\" % \"1.4.199\",\n  \"io.getquill\" %% \"quill-jdbc-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new H2ZioJdbcContext(SnakeCase)\n// Also can be static:\nobject MyContext extends H2ZioJdbcContext(SnakeCase)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">H2ZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">H2ZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\nctx.dataSource.url=jdbc:h2:mem:yourdbname\nctx.dataSource.user=sa\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\nctx.dataSource.url=jdbc:h2:mem:yourdbname\nctx.dataSource.user=sa\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sql-server-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#sql-server-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SQL Server (quill-jdbc-zio)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.microsoft.sqlserver&quot; % &quot;mssql-jdbc&quot; % &quot;7.4.1.jre8&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.microsoft.sqlserver\" % \"mssql-jdbc\" % \"7.4.1.jre8\",\n  \"io.getquill\" %% \"quill-jdbc-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new SqlServerZioJdbcContext(SnakeCase)\n// Also can be static:\nobject MyContext extends SqlServerZioJdbcContext(SnakeCase)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlServerZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">SqlServerZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=com.microsoft.sqlserver.jdbc.SQLServerDataSource\nctx.dataSource.user=user\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=1433\nctx.dataSource.serverName=host\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=com.microsoft.sqlserver.jdbc.SQLServerDataSource\nctx.dataSource.user=user\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=1433\nctx.dataSource.serverName=host\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-oracle-quill-jdbc-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#oracle-quill-jdbc-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Oracle (quill-jdbc-zio)</h3>\n<p dir=\"auto\">Quill supports Oracle version 12c and up although due to licensing restrictions, version 18c XE is used for testing.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.oracle.jdbc&quot; % &quot;ojdbc8&quot; % &quot;18.3.0.0.0&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.oracle.jdbc\" % \"ojdbc8\" % \"18.3.0.0.0\",\n  \"io.getquill\" %% \"quill-jdbc-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val ctx = new OracleZioJdbcContext(SnakeCase)\n// Also can be static:\nobject MyContext extends OracleZioJdbcContext(SnakeCase)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">OracleZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">OracleZioJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=oracle.jdbc.xa.client.OracleXADataSource\nctx.dataSource.databaseName=xe\nctx.dataSource.user=database\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.driverType=thin\nctx.dataSource.portNumber=1521\nctx.dataSource.serverName=host\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=oracle.jdbc.xa.client.OracleXADataSource\nctx.dataSource.databaseName=xe\nctx.dataSource.user=database\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.driverType=thin\nctx.dataSource.portNumber=1521\nctx.dataSource.serverName=host\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jdbc-monix</h2>\n<p dir=\"auto\">The <code>quill-jdbc-monix</code> module integrates the Monix asynchronous programming framework with Quill,\nsupporting all of the database vendors of the <code>quill-jdbc</code> module.\nThe Quill Monix contexts encapsulate JDBC Queries and Actions into Monix <code>Task</code>s\nand also include support for streaming queries via <code>Observable</code>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-streaming-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#streaming-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>streaming</h4>\n<p dir=\"auto\">The <code>MonixJdbcContext</code> can stream using Monix Observables:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.stream(query[Person]) // returns: Observable[Person]\n  .foreachL(println(_))\n  .runSyncUnsafe()\"><pre class=\"notranslate\"><code>ctx.stream(query[Person]) // returns: Observable[Person]\n  .foreachL(println(_))\n  .runSyncUnsafe()\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The <code>MonixJdbcContext</code> provides support for transactions by storing the connection into a Monix <code>Local</code>.\nThis process is designed to be completely transparent to the user. As with the other contexts,\nif an exception is thrown anywhere inside a task or sub-task within a <code>transaction</code> block, the entire block\nwill be rolled back by the database.</p>\n<p dir=\"auto\">Basic syntax:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val trans =\n  ctx.transaction {\n    for {\n      _ &lt;- ctx.run(query[Person].delete)\n      _ &lt;- ctx.run(query[Person].insertValue(Person(&quot;Joe&quot;, 123)))\n      p &lt;- ctx.run(query[Person])\n    } yield p\n  } //returns: Task[List[Person]]\n\nval result = trans.runSyncUnsafe() //returns: List[Person]\"><pre class=\"notranslate\"><code>val trans =\n  ctx.transaction {\n    for {\n      _ &lt;- ctx.run(query[Person].delete)\n      _ &lt;- ctx.run(query[Person].insertValue(Person(\"Joe\", 123)))\n      p &lt;- ctx.run(query[Person])\n    } yield p\n  } //returns: Task[List[Person]]\n\nval result = trans.runSyncUnsafe() //returns: List[Person]\n</code></pre></div>\n<p dir=\"auto\">Streaming can also be done inside of <code>transaction</code> block so long as the result is converted to a task beforehand.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val trans =\n  ctx.transaction {\n    for {\n      _   &lt;- ctx.run(query[Person].insertValue(Person(&quot;Joe&quot;, 123)))\n      ppl &lt;- ctx\n              .stream(query[Person])                               // Observable[Person]\n              .foldLeftL(List[Person]())({case (l, p) =&gt; p +: l})  // ... becomes Task[List[Person]]\n    } yield ppl\n  } //returns: Task[List[Person]]\n\nval result = trans.runSyncUnsafe() //returns: List[Person]\"><pre class=\"notranslate\"><code>val trans =\n  ctx.transaction {\n    for {\n      _   &lt;- ctx.run(query[Person].insertValue(Person(\"Joe\", 123)))\n      ppl &lt;- ctx\n              .stream(query[Person])                               // Observable[Person]\n              .foldLeftL(List[Person]())({case (l, p) =&gt; p +: l})  // ... becomes Task[List[Person]]\n    } yield ppl\n  } //returns: Task[List[Person]]\n\nval result = trans.runSyncUnsafe() //returns: List[Person]\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-runners\" class=\"anchor\" aria-hidden=\"true\" href=\"#runners\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>runners</h4>\n<p dir=\"auto\">Use a <code>Runner</code> object to create the different <code>MonixJdbcContext</code>s.\nThe Runner does the actual wrapping of JDBC calls into Monix Tasks.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\nimport monix.execution.Scheduler\nimport io.getquill.context.monix.Runner\n\n// You can use the default Runner when constructing a Monix jdbc contexts.\n// The resulting tasks will be wrapped with whatever Scheduler is\n// defined when you do task.syncRunUnsafe(), typically a global implicit.\nlazy val ctx = new MysqlMonixJdbcContext(SnakeCase, &quot;ctx&quot;, EffectWrapper.default)\n\n// However...\n// Monix strongly suggests that you use a separate thread pool for database IO\n// operations. `Runner` provides a convenience method in order to do this.\nlazy val ctx = new MysqlMonixJdbcContext(SnakeCase, &quot;ctx&quot;, Runner.using(Scheduler.io()))\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">monix</span>.<span class=\"pl-en\">execution</span>.<span class=\"pl-en\">Scheduler</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">context</span>.<span class=\"pl-en\">monix</span>.<span class=\"pl-en\">Runner</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> You can use the default Runner when constructing a Monix jdbc contexts.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> The resulting tasks will be wrapped with whatever Scheduler is</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> defined when you do task.syncRunUnsafe(), typically a global implicit.</span>\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlMonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">EffectWrapper</span>.default)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> However...</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Monix strongly suggests that you use a separate thread pool for database IO</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> operations. `Runner` provides a convenience method in order to do this.</span>\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlMonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">Runner</span>.using(<span class=\"pl-en\">Scheduler</span>.io()))</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-mysql-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#mysql-quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MySQL (quill-jdbc-monix)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;8.0.17&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"mysql\" % \"mysql-connector-java\" % \"8.0.17\",\n  \"io.getquill\" %% \"quill-jdbc-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new MysqlMonixJdbcContext(SnakeCase, &quot;ctx&quot;, EffectWrapper.default)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlMonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">EffectWrapper</span>.default)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource\nctx.dataSource.url=jdbc:mysql://host/database\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.cachePrepStmts=true\nctx.dataSource.prepStmtCacheSize=250\nctx.dataSource.prepStmtCacheSqlLimit=2048\nctx.connectionTimeout=30000\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=com.mysql.cj.jdbc.MysqlDataSource\nctx.dataSource.url=jdbc:mysql://host/database\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.cachePrepStmts=true\nctx.dataSource.prepStmtCacheSize=250\nctx.dataSource.prepStmtCacheSqlLimit=2048\nctx.connectionTimeout=30000\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-postgres-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#postgres-quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Postgres (quill-jdbc-monix)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-13\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-13\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.postgresql&quot; % &quot;postgresql&quot; % &quot;42.2.8&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"org.postgresql\" % \"postgresql\" % \"42.2.8\",\n  \"io.getquill\" %% \"quill-jdbc-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-13\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-13\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new PostgresMonixJdbcContext(SnakeCase, &quot;ctx&quot;, EffectWrapper.default)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresMonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">EffectWrapper</span>.default)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=5432\nctx.dataSource.serverName=host\nctx.connectionTimeout=30000\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource\nctx.dataSource.user=root\nctx.dataSource.password=root\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=5432\nctx.dataSource.serverName=host\nctx.connectionTimeout=30000\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sqlite-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#sqlite-quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Sqlite (quill-jdbc-monix)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-14\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-14\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;org.xerial&quot; % &quot;sqlite-jdbc&quot; % &quot;3.28.0&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"org.xerial\" % \"sqlite-jdbc\" % \"3.28.0\",\n  \"io.getquill\" %% \"quill-jdbc-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-14\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-14\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new SqliteMonixJdbcContext(SnakeCase, &quot;ctx&quot;, EffectWrapper.default)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqliteMonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">EffectWrapper</span>.default)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-13\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-13\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.driverClassName=org.sqlite.JDBC\nctx.jdbcUrl=jdbc:sqlite:/path/to/db/file.db\"><pre class=\"notranslate\"><code>ctx.driverClassName=org.sqlite.JDBC\nctx.jdbcUrl=jdbc:sqlite:/path/to/db/file.db\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-h2-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#h2-quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>H2 (quill-jdbc-monix)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-15\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-15\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.h2database&quot; % &quot;h2&quot; % &quot;1.4.199&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.h2database\" % \"h2\" % \"1.4.199\",\n  \"io.getquill\" %% \"quill-jdbc-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-15\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-15\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new H2MonixJdbcContext(SnakeCase, &quot;ctx&quot;, EffectWrapper.default)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">H2MonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">EffectWrapper</span>.default)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-14\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-14\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\nctx.dataSource.url=jdbc:h2:mem:yourdbname\nctx.dataSource.user=sa\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\nctx.dataSource.url=jdbc:h2:mem:yourdbname\nctx.dataSource.user=sa\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sql-server-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#sql-server-quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SQL Server (quill-jdbc-monix)</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-16\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-16\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.microsoft.sqlserver&quot; % &quot;mssql-jdbc&quot; % &quot;7.4.1.jre8&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.microsoft.sqlserver\" % \"mssql-jdbc\" % \"7.4.1.jre8\",\n  \"io.getquill\" %% \"quill-jdbc-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-16\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-16\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new SqlServerMonixJdbcContext(SnakeCase, &quot;ctx&quot;, EffectWrapper.default)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SqlServerMonixJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">EffectWrapper</span>.default)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-15\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-15\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=com.microsoft.sqlserver.jdbc.SQLServerDataSource\nctx.dataSource.user=user\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=1433\nctx.dataSource.serverName=host\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=com.microsoft.sqlserver.jdbc.SQLServerDataSource\nctx.dataSource.user=user\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.databaseName=database\nctx.dataSource.portNumber=1433\nctx.dataSource.serverName=host\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-oracle-quill-jdbc-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#oracle-quill-jdbc-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Oracle (quill-jdbc-monix)</h3>\n<p dir=\"auto\">Quill supports Oracle version 12c and up although due to licensing restrictions, version 18c XE is used for testing.</p>\n<p dir=\"auto\">Note that the latest Oracle JDBC drivers are not publicly available. In order to get them,\nyou will need to connect to Oracle's private maven repository as instructed <a href=\"https://docs.oracle.com/middleware/1213/core/MAVEN/config_maven_repo.htm#MAVEN9012\" rel=\"nofollow\">here</a>.\nUnfortunately, this procedure currently does not work for SBT. There are various workarounds\navailable for this situation <a href=\"https://stackoverflow.com/questions/1074869/find-oracle-jdbc-driver-in-maven-repository?rq=1\" rel=\"nofollow\">here</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-17\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-17\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.oracle.jdbc&quot; % &quot;ojdbc8&quot; % &quot;18.3.0.0.0&quot;,\n  &quot;io.getquill&quot; %% &quot;quill-jdbc-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"com.oracle.jdbc\" % \"ojdbc8\" % \"18.3.0.0.0\",\n  \"io.getquill\" %% \"quill-jdbc-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-17\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-17\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new OracleJdbcContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">OracleJdbcContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-16\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-16\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dataSourceClassName=oracle.jdbc.xa.client.OracleXADataSource\nctx.dataSource.databaseName=xe\nctx.dataSource.user=database\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.driverType=thin\nctx.dataSource.portNumber=1521\nctx.dataSource.serverName=host\"><pre class=\"notranslate\"><code>ctx.dataSourceClassName=oracle.jdbc.xa.client.OracleXADataSource\nctx.dataSource.databaseName=xe\nctx.dataSource.user=database\nctx.dataSource.password=YourStrongPassword\nctx.dataSource.driverType=thin\nctx.dataSource.portNumber=1521\nctx.dataSource.serverName=host\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-ndbc-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#ndbc-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>NDBC Context</h2>\n<p dir=\"auto\">Async support via <a href=\"https://ndbc.io/\" rel=\"nofollow\">NDBC driver</a> is available with Postgres database.</p>\n<h3 dir=\"auto\"><a id=\"user-content-quill-ndbc-postgres\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-ndbc-postgres\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-ndbc-postgres</h3>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">Transaction support is provided out of the box by NDBC:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\"><pre>ctx.transaction {\n  ctx.run(query[<span class=\"pl-en\">Person</span>].delete)\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> other transactional code</span>\n}</pre></div>\n<p dir=\"auto\">The body of transaction can contain calls to other methods and multiple run calls since the transaction is automatically handled.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-18\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-18\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-ndbc-postgres&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-ndbc-postgres\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-18\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-18\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new NdbcPostgresContext(Literal, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">NdbcPostgresContext</span>(<span class=\"pl-en\">Literal</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-17\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-17\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.ndbc.dataSourceSupplierClass=io.trane.ndbc.postgres.netty4.DataSourceSupplier\nctx.ndbc.host=host\nctx.ndbc.port=1234\nctx.ndbc.user=root\nctx.ndbc.password=root\nctx.ndbc.database=database\"><pre class=\"notranslate\"><code>ctx.ndbc.dataSourceSupplierClass=io.trane.ndbc.postgres.netty4.DataSourceSupplier\nctx.ndbc.host=host\nctx.ndbc.port=1234\nctx.ndbc.user=root\nctx.ndbc.password=root\nctx.ndbc.database=database\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-async\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-async\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-async</h2>\n<p dir=\"auto\">The <code>quill-async</code> module provides simple async support for MySQL and Postgres databases.</p>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The async module provides transaction support based on a custom implicit execution context:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.transaction { implicit ec =&gt;\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\"><pre class=\"notranslate\"><code>ctx.transaction { implicit ec =&gt;\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\n</code></pre></div>\n<p dir=\"auto\">The body of <code>transaction</code> can contain calls to other methods and multiple <code>run</code> calls, but the transactional code must be done using the provided implicit execution context. For instance:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(&quot;John&quot;)\n}\"><pre class=\"notranslate\"><code>def deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(\"John\")\n}\n</code></pre></div>\n<p dir=\"auto\">Depending on how the main execution context is imported, it is possible to produce an ambiguous implicit resolution. A way to solve this problem is shadowing the multiple implicits by using the same name:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.concurrent.ExecutionContext.Implicits.{ global =&gt; ec }\n\ndef deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(&quot;John&quot;)\n}\"><pre class=\"notranslate\"><code>import scala.concurrent.ExecutionContext.Implicits.{ global =&gt; ec }\n\ndef deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(\"John\")\n}\n</code></pre></div>\n<p dir=\"auto\">Note that the global execution context is renamed to ec.</p>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-18\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-18\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<h5 dir=\"auto\"><a id=\"user-content-connection-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#connection-configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>connection configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.host=host\nctx.port=1234\nctx.user=root\nctx.password=root\nctx.database=database\"><pre class=\"notranslate\"><code>ctx.host=host\nctx.port=1234\nctx.user=root\nctx.password=root\nctx.database=database\n</code></pre></div>\n<p dir=\"auto\">or use connection URL with database-specific scheme (see below):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=scheme://host:5432/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=scheme://host:5432/database?user=root&amp;password=root\n</code></pre></div>\n<h5 dir=\"auto\"><a id=\"user-content-connection-pool-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#connection-pool-configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>connection pool configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.poolMaxQueueSize=4\nctx.poolMaxObjects=4\nctx.poolMaxIdle=999999999\nctx.poolValidationInterval=10000\"><pre class=\"notranslate\"><code>ctx.poolMaxQueueSize=4\nctx.poolMaxObjects=4\nctx.poolMaxIdle=999999999\nctx.poolValidationInterval=10000\n</code></pre></div>\n<p dir=\"auto\">Also see <a href=\"https://github.com/mauricio/postgresql-async/blob/master/db-async-common/src/main/scala/com/github/mauricio/async/db/pool/PoolConfiguration.scala\"><code>PoolConfiguration</code> documentation</a>.</p>\n<h5 dir=\"auto\"><a id=\"user-content-ssl-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#ssl-configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SSL configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.sslmode=disable # optional, one of [disable|prefer|require|verify-ca|verify-full]\nctx.sslrootcert=./path/to/cert/file # optional, required for sslmode=verify-ca or verify-full\"><pre class=\"notranslate\"><code>ctx.sslmode=disable # optional, one of [disable|prefer|require|verify-ca|verify-full]\nctx.sslrootcert=./path/to/cert/file # optional, required for sslmode=verify-ca or verify-full\n</code></pre></div>\n<h5 dir=\"auto\"><a id=\"user-content-other\" class=\"anchor\" aria-hidden=\"true\" href=\"#other\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>other</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.charset=UTF-8\nctx.maximumMessageSize=16777216\nctx.connectTimeout=5s\nctx.testTimeout=5s\nctx.queryTimeout=10m\"><pre class=\"notranslate\"><code>ctx.charset=UTF-8\nctx.maximumMessageSize=16777216\nctx.connectTimeout=5s\nctx.testTimeout=5s\nctx.queryTimeout=10m\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quill-async-mysql\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-async-mysql\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-async-mysql</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-19\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-19\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-async-mysql&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-async-mysql\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-19\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-19\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new MysqlAsyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlAsyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-19\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-19\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<p dir=\"auto\">See <a href=\"#applicationproperties-5\">above</a></p>\n<p dir=\"auto\">For <code>url</code> property use <code>mysql</code> scheme:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=mysql://host:3306/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=mysql://host:3306/database?user=root&amp;password=root\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quill-async-postgres\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-async-postgres\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-async-postgres</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-20\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-20\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-async-postgres&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-async-postgres\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-20\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-20\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new PostgresAsyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresAsyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-20\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-20\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<p dir=\"auto\">See <a href=\"#applicationproperties-5\">common properties</a></p>\n<p dir=\"auto\">For <code>url</code> property use <code>postgresql</code> scheme:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=postgresql://host:5432/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=postgresql://host:5432/database?user=root&amp;password=root\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-jasync\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jasync\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jasync</h2>\n<p dir=\"auto\">The <code>quill-jasync</code> module provides simple async support for Postgres databases.</p>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The async module provides transaction support based on a custom implicit execution context:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.transaction { implicit ec =&gt;\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\"><pre class=\"notranslate\"><code>ctx.transaction { implicit ec =&gt;\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\n</code></pre></div>\n<p dir=\"auto\">The body of <code>transaction</code> can contain calls to other methods and multiple <code>run</code> calls, but the transactional code must be done using the provided implicit execution context. For instance:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(&quot;John&quot;)\n}\"><pre class=\"notranslate\"><code>def deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(\"John\")\n}\n</code></pre></div>\n<p dir=\"auto\">Depending on how the main execution context is imported, it is possible to produce an ambiguous implicit resolution. A way to solve this problem is shadowing the multiple implicits by using the same name:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.concurrent.ExecutionContext.Implicits.{ global =&gt; ec }\n\ndef deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(&quot;John&quot;)\n}\"><pre class=\"notranslate\"><code>import scala.concurrent.ExecutionContext.Implicits.{ global =&gt; ec }\n\ndef deletePerson(name: String)(implicit ec: ExecutionContext) =\n  ctx.run(query[Person].filter(_.name == lift(name)).delete)\n\nctx.transaction { implicit ec =&gt;\n  deletePerson(\"John\")\n}\n</code></pre></div>\n<p dir=\"auto\">Note that the global execution context is renamed to ec.</p>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-21\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-21\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<h5 dir=\"auto\"><a id=\"user-content-connection-configuration-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#connection-configuration-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>connection configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.host=host\nctx.port=1234\nctx.username=root\nctx.password=root\nctx.database=database\"><pre class=\"notranslate\"><code>ctx.host=host\nctx.port=1234\nctx.username=root\nctx.password=root\nctx.database=database\n</code></pre></div>\n<p dir=\"auto\">or use connection URL with database-specific scheme (see below):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=scheme://host:5432/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=scheme://host:5432/database?user=root&amp;password=root\n</code></pre></div>\n<p dir=\"auto\">Also see full settings <code>ConnectionPoolConfiguration</code> <a href=\"https://github.com/jasync-sql/jasync-sql/blob/master/db-async-common/src/main/java/com/github/jasync/sql/db/ConnectionPoolConfiguration.kt\">documentation</a>.</p>\n<h5 dir=\"auto\"><a id=\"user-content-ssl-configuration-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#ssl-configuration-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SSL configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.sslmode=disable # optional, one of [disable|prefer|require|verify-ca|verify-full]\nctx.sslrootcert=./path/to/cert/file # optional, required for sslmode=verify-ca or verify-full\"><pre class=\"notranslate\"><code>ctx.sslmode=disable # optional, one of [disable|prefer|require|verify-ca|verify-full]\nctx.sslrootcert=./path/to/cert/file # optional, required for sslmode=verify-ca or verify-full\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quill-jasync-mysql\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jasync-mysql\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jasync-mysql</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-21\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-21\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-jasync-mysql&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-jasync-mysql\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-21\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-21\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new MysqlJAsyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlJAsyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-22\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-22\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<p dir=\"auto\">See <a href=\"#applicationproperties-5\">above</a></p>\n<p dir=\"auto\">For <code>url</code> property use <code>mysql</code> scheme:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=mysql://host:3306/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=mysql://host:3306/database?user=root&amp;password=root\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quill-jasync-postgres\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jasync-postgres\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jasync-postgres</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-22\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-22\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-jasync-postgres&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-jasync-postgres\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-22\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-22\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new PostgresJAsyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresJAsyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-23\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-23\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<p dir=\"auto\">See <a href=\"#applicationproperties-5\">common properties</a></p>\n<p dir=\"auto\">For <code>url</code> property use <code>postgresql</code> scheme:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=postgresql://host:5432/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=postgresql://host:5432/database?user=root&amp;password=root\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-jasync-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jasync-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jasync-zio</h2>\n<p dir=\"auto\">The <code>quill-jasync-zio</code> module provides ZIO async support for Postgres databases.</p>\n<h5 dir=\"auto\"><a id=\"user-content-connection-configuration-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#connection-configuration-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>connection configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.host=host\nctx.port=1234\nctx.username=root\nctx.password=root\nctx.database=database\"><pre class=\"notranslate\"><code>ctx.host=host\nctx.port=1234\nctx.username=root\nctx.password=root\nctx.database=database\n</code></pre></div>\n<p dir=\"auto\">or use connection URL with database-specific scheme (see below):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=scheme://host:5432/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=scheme://host:5432/database?user=root&amp;password=root\n</code></pre></div>\n<p dir=\"auto\">Also see full settings <code>ConnectionPoolConfiguration</code> <a href=\"https://github.com/jasync-sql/jasync-sql/blob/master/db-async-common/src/main/java/com/github/jasync/sql/db/ConnectionPoolConfiguration.kt\">documentation</a>.</p>\n<h5 dir=\"auto\"><a id=\"user-content-ssl-configuration-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#ssl-configuration-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SSL configuration</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.sslmode=disable # optional, one of [disable|prefer|require|verify-ca|verify-full]\nctx.sslrootcert=./path/to/cert/file # optional, required for sslmode=verify-ca or verify-full\nctx.sslcert=./path/to/cert/file # optional, required to only allow connections from trusted clients\nctx.sslkey=./path/to/key/file # optional, required to only allow connections from trusted clients\"><pre class=\"notranslate\"><code>ctx.sslmode=disable # optional, one of [disable|prefer|require|verify-ca|verify-full]\nctx.sslrootcert=./path/to/cert/file # optional, required for sslmode=verify-ca or verify-full\nctx.sslcert=./path/to/cert/file # optional, required to only allow connections from trusted clients\nctx.sslkey=./path/to/key/file # optional, required to only allow connections from trusted clients\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quill-jasync-zio-postgres\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-jasync-zio-postgres\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-jasync-zio-postgres</h3>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-23\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-23\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-jasync-zio-postgres&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-jasync-zio-postgres\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-23\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-23\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new PostgresZioJAsyncContext(SnakeCase)\n// Also can be static:\nobject MyContext extends PostgresZioJAsyncContext(Literal)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">PostgresZioJAsyncContext</span>(<span class=\"pl-en\">SnakeCase</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also can be static:</span>\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">PostgresZioJAsyncContext</span>(<span class=\"pl-en\">Literal</span>)</pre></div>\n<p dir=\"auto\">In order to run operation in this context we need to provide <code>ZioJAsyncConnection</code> instance.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object MyApp extends zio.App {\n  object DBContext extends PostgresZioJAsyncContext(Literal)\n  import DBContext._\n\n  val dependencies =\n    PostgresJAsyncContextConfig.loadConfig(&quot;testPostgresDB&quot;) &gt;&gt;&gt;\n    ZioJAsyncConnection.live[PostgreSQLConnection]\n\n  val program = run(query[Person])\n\n  def run(args: List[String]) = program.provideLayer(dependencies).exitCode\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">MyApp</span> <span class=\"pl-k\">extends</span> zio.<span class=\"pl-en\">App</span> {\n  <span class=\"pl-k\">object</span> <span class=\"pl-en\">DBContext</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">PostgresZioJAsyncContext</span>(<span class=\"pl-en\">Literal</span>)\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">DBContext</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">dependencies</span> <span class=\"pl-k\">=</span>\n    <span class=\"pl-en\">PostgresJAsyncContextConfig</span>.loadConfig(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testPostgresDB<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">&gt;&gt;&gt;</span>\n    <span class=\"pl-en\">ZioJAsyncConnection</span>.live[<span class=\"pl-en\">PostgreSQLConnection</span>]\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">program</span> <span class=\"pl-k\">=</span> run(query[<span class=\"pl-en\">Person</span>])\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">String</span>]) <span class=\"pl-k\">=</span> program.provideLayer(dependencies).exitCode\n}</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-24\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-24\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<p dir=\"auto\">See <a href=\"#applicationproperties-5\">common properties</a></p>\n<p dir=\"auto\">For <code>url</code> property use <code>postgresql</code> scheme:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.url=postgresql://host:5432/database?user=root&amp;password=root\"><pre class=\"notranslate\"><code>ctx.url=postgresql://host:5432/database?user=root&amp;password=root\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-doobie\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-doobie\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-doobie</h2>\n<p dir=\"auto\">Quill 3.16.5 and above supports Doobie starting 1.0.0-RC1. You can use quill quotes to construct <code>ConnectionIO</code> programs.\nQuill provides statement construction and type mapping, and doobie takes care of statement execution.</p>\n<blockquote>\n<p dir=\"auto\">Note that if you are migrating from the original <code>doobie-quill</code> integration (e.g. <a href=\"https://search.maven.org/search?q=a:doobie-quill_2.12\" rel=\"nofollow\">here</a>)\njust add the below dependency and replace the <code>doobie.quill</code> package with <code>io.getquill.doobie</code>.\n(If you are using the package provided by kubukoz (i.e. <a href=\"https://github.com/polyvariant/doobie-quill\">here</a>), then replace <code>org.polyvariant</code> with <code>io.getquill.doobie</code>.)</p>\n</blockquote>\n<p dir=\"auto\">In order to use this feature, add the following dependency.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;io.getquill&quot; %% &quot;quill-doobie&quot; % &quot;4.3.1-SNAPSHOT&quot;\"><pre class=\"notranslate\"><code>libraryDependencies += \"io.getquill\" %% \"quill-doobie\" % \"4.3.1-SNAPSHOT\"\n</code></pre></div>\n<p dir=\"auto\">The examples below require the following imports.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.getquill.{ idiom =&gt; _, _ }\nimport io.getquill.DoobieContext\"><pre class=\"notranslate\"><code>import io.getquill.{ idiom =&gt; _, _ }\nimport io.getquill.DoobieContext\n</code></pre></div>\n<p dir=\"auto\">We can now construct a <code>DoobieContext</code> for our back-end database and import its members, as we would with a traditional Quill context. The options are <code>H2</code>, <code>MySQL</code>, <code>Oracle</code>, <code>Postgres</code>, <code>SQLite</code>, and <code>SQLServer</code>.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val dc = new DoobieContext.Postgres(Literal) // Literal naming scheme\nimport dc.{ SqlInfixInterpolator =&gt; _, _ }   // Quill's `sql` interpolator conflicts with doobie so don't import it\nimport dc.compat._                           // Import the qsql interpolator instead\"><pre class=\"notranslate\"><code>val dc = new DoobieContext.Postgres(Literal) // Literal naming scheme\nimport dc.{ SqlInfixInterpolator =&gt; _, _ }   // Quill's `sql` interpolator conflicts with doobie so don't import it\nimport dc.compat._                           // Import the qsql interpolator instead\n</code></pre></div>\n<blockquote>\n<p dir=\"auto\">Instead of using Quill's <code>sql\"MyUDF(${something})\"</code> interpolator, use <code>qsql\"MyUDF(${something})\"</code> since we have excluded it.</p>\n</blockquote>\n<p dir=\"auto\">We will be using the <code>country</code> table from our test database, so we need a data type of that name, with fields whose names and types line up with the table definition.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Country(code: String, name: String, population: Int)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Country</span>(<span class=\"pl-v\">code</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">population</span>: <span class=\"pl-en\">Int</span>)</pre></div>\n<p dir=\"auto\">We're now ready to construct doobie programs using Quill quotes. Note the return types from <code>run</code>, which are normal doobie types. You can freely mix Quill quotes into existing doobie programs.</p>\n<h4 dir=\"auto\"><a id=\"user-content-running-and-streaming\" class=\"anchor\" aria-hidden=\"true\" href=\"#running-and-streaming\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>running and streaming</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val q1 = quote { query[Country].filter(_.code == &quot;GBR&quot;) }\n\n// Select all at once\nrun(q1)\n\n// Stream in chunks of 16\nstream(q1, 16)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">q1</span> <span class=\"pl-k\">=</span> quote { query[<span class=\"pl-en\">Country</span>].filter(_.code <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>GBR<span class=\"pl-pds\">\"</span></span>) }\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Select all at once</span>\nrun(q1)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Stream in chunks of 16</span>\nstream(q1, <span class=\"pl-c1\">16</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-actions-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#actions-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>actions</h4>\n<p dir=\"auto\">A simple update.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val u1 = quote { query[Country].filter(_.name like &quot;U%&quot;).update(_.name -&gt; &quot;foo&quot;) }\n\n// Update yielding count of affected rows\nrun(u1)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">u1</span> <span class=\"pl-k\">=</span> quote { query[<span class=\"pl-en\">Country</span>].filter(_.name like <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>U%<span class=\"pl-pds\">\"</span></span>).update(_.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>) }\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Update yielding count of affected rows</span>\nrun(u1)</pre></div>\n<p dir=\"auto\">A batch update.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val u2 = quote {\n  liftQuery(List(&quot;U%&quot;, &quot;A%&quot;)).foreach { pat =&gt;\n    query[Country].filter(_.name like pat).update(_.name -&gt; &quot;foo&quot;)\n  }\n}\n\n// Update yielding list of counts of affected rows\nrun(u2)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">u2</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>U%<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A%<span class=\"pl-pds\">\"</span></span>)).foreach { pat <span class=\"pl-k\">=&gt;</span>\n    query[<span class=\"pl-en\">Country</span>].filter(_.name like pat).update(_.name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)\n  }\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Update yielding list of counts of affected rows</span>\nrun(u2)</pre></div>\n<p dir=\"auto\">Now we will look at batch updates with generated keys. For this we will create a new table.</p>\n<div class=\"highlight highlight-source-sql notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"CREATE TABLE Foo (\n  id    SERIAL,\n  value VARCHAR(42)\n)\"><pre><span class=\"pl-k\">CREATE</span> <span class=\"pl-k\">TABLE</span> <span class=\"pl-en\">Foo</span> (\n  id    <span class=\"pl-k\">SERIAL</span>,\n  value <span class=\"pl-k\">VARCHAR</span>(<span class=\"pl-c1\">42</span>)\n)</pre></div>\n<p dir=\"auto\">And a related data type.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Foo(id: Int, value: String)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">value</span>: <span class=\"pl-en\">String</span>)</pre></div>\n<p dir=\"auto\">We can now write an update returning generated keys.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val u3 = quote {\n  query[Foo].insert(lift(Foo(0, &quot;Joe&quot;))).returning(_.id)\n}\n\n// Update yielding a single id\nrun(u3)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">u3</span> <span class=\"pl-k\">=</span> quote {\n  query[<span class=\"pl-en\">Foo</span>].insert(lift(<span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>))).returning(_.id)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Update yielding a single id</span>\nrun(u3)</pre></div>\n<p dir=\"auto\">And a batch update returning generated keys.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val u4 = quote {\n  liftQuery(List(Foo(0, &quot;Joe&quot;), Foo(0, &quot;Bob&quot;))).foreach { a =&gt;\n    query[Foo].insert(a).returning(_.id)\n  }\n}\n\n// Update yielding a list of ids\nrun(u4)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">u4</span> <span class=\"pl-k\">=</span> quote {\n  liftQuery(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-en\">Foo</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bob<span class=\"pl-pds\">\"</span></span>))).foreach { a <span class=\"pl-k\">=&gt;</span>\n    query[<span class=\"pl-en\">Foo</span>].insert(a).returning(_.id)\n  }\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Update yielding a list of ids</span>\nrun(u4)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-finagle-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#finagle-contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Finagle Contexts</h2>\n<p dir=\"auto\">Support for the Twitter Finagle library is available with MySQL and Postgres databases.</p>\n<h3 dir=\"auto\"><a id=\"user-content-quill-finagle-mysql\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-finagle-mysql\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-finagle-mysql</h3>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The finagle context provides transaction support through a <code>Local</code> value. See twitter util's <a href=\"https://github.com/twitter/util/blob/ee8d3140ba0ecc16b54591bd9d8961c11b999c0d/util-core/src/main/scala/com/twitter/util/Local.scala#L96\">scaladoc</a> for more details.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\"><pre class=\"notranslate\"><code>ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-streaming-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#streaming-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>streaming</h4>\n<p dir=\"auto\">The finagle context allows streaming a query response, returning an <code>AsyncStream</code> value.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.stream(query[Person]) // returns: Future[AsyncStream[Person]]\n  .flatMap(_.toSeq())\"><pre class=\"notranslate\"><code>ctx.stream(query[Person]) // returns: Future[AsyncStream[Person]]\n  .flatMap(_.toSeq())\n</code></pre></div>\n<p dir=\"auto\">The body of <code>transaction</code> can contain calls to other methods and multiple <code>run</code> calls since the transaction is automatically propagated through the <code>Local</code> value.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-24\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-24\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-finagle-mysql&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-finagle-mysql\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-24\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-24\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new FinagleMysqlContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">FinagleMysqlContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-25\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-25\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dest=localhost:3306\nctx.user=root\nctx.password=root\nctx.database=database\nctx.pool.watermark.low=0\nctx.pool.watermark.high=10\nctx.pool.idleTime=5 # seconds\nctx.pool.bufferSize=0\nctx.pool.maxWaiters=2147483647\"><pre class=\"notranslate\"><code>ctx.dest=localhost:3306\nctx.user=root\nctx.password=root\nctx.database=database\nctx.pool.watermark.low=0\nctx.pool.watermark.high=10\nctx.pool.idleTime=5 # seconds\nctx.pool.bufferSize=0\nctx.pool.maxWaiters=2147483647\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-quill-finagle-postgres\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-finagle-postgres\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-finagle-postgres</h3>\n<h4 dir=\"auto\"><a id=\"user-content-transactions-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#transactions-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>transactions</h4>\n<p dir=\"auto\">The finagle context provides transaction support through a <code>Local</code> value. See twitter util's <a href=\"https://github.com/twitter/util/blob/ee8d3140ba0ecc16b54591bd9d8961c11b999c0d/util-core/src/main/scala/com/twitter/util/Local.scala#L96\">scaladoc</a> for more details.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\"><pre class=\"notranslate\"><code>ctx.transaction {\n  ctx.run(query[Person].delete)\n  // other transactional code\n}\n</code></pre></div>\n<p dir=\"auto\">The body of <code>transaction</code> can contain calls to other methods and multiple <code>run</code> calls since the transaction is automatically propagated through the <code>Local</code> value.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-25\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-25\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-finagle-postgres&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-finagle-postgres\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-context-definition-25\" class=\"anchor\" aria-hidden=\"true\" href=\"#context-definition-25\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context definition</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new FinaglePostgresContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">FinaglePostgresContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-26\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-26\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.host=localhost:3306\nctx.user=root\nctx.password=root\nctx.database=database\nctx.useSsl=false\nctx.hostConnectionLimit=1\nctx.numRetries=4\nctx.binaryResults=false\nctx.binaryParams=false\"><pre class=\"notranslate\"><code>ctx.host=localhost:3306\nctx.user=root\nctx.password=root\nctx.database=database\nctx.useSsl=false\nctx.hostConnectionLimit=1\nctx.numRetries=4\nctx.binaryResults=false\nctx.binaryParams=false\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-cassandra\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-cassandra\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-cassandra</h2>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-26\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-26\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-cassandra&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-cassandra\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-synchronous-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#synchronous-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>synchronous context</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new CassandraSyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">CassandraSyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-asynchronous-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#asynchronous-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>asynchronous context</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new CassandraAsyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">CassandraAsyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">The configurations are set using runtime reflection on the <a href=\"https://docs.datastax.com/en/drivers/java/2.1/com/datastax/driver/core/Cluster.Builder.html\" rel=\"nofollow\"><code>Cluster.builder</code></a> instance. It is possible to set nested structures like <code>queryOptions.consistencyLevel</code>, use enum values like <code>LOCAL_QUORUM</code>, and set multiple parameters like in <code>credentials</code>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-27\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-27\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.keyspace=quill_test\nctx.preparedStatementCacheSize=1000\nctx.session.contactPoint=127.0.0.1\nctx.session.withPort=9042\nctx.session.queryOptions.consistencyLevel=LOCAL_QUORUM\nctx.session.withoutMetrics=true\nctx.session.withoutJMXReporting=false\nctx.session.credentials.0=root\nctx.session.credentials.1=pass\nctx.session.maxSchemaAgreementWaitSeconds=1\nctx.session.addressTranslator=com.datastax.driver.core.policies.IdentityTranslator\"><pre class=\"notranslate\"><code>ctx.keyspace=quill_test\nctx.preparedStatementCacheSize=1000\nctx.session.contactPoint=127.0.0.1\nctx.session.withPort=9042\nctx.session.queryOptions.consistencyLevel=LOCAL_QUORUM\nctx.session.withoutMetrics=true\nctx.session.withoutJMXReporting=false\nctx.session.credentials.0=root\nctx.session.credentials.1=pass\nctx.session.maxSchemaAgreementWaitSeconds=1\nctx.session.addressTranslator=com.datastax.driver.core.policies.IdentityTranslator\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-cassandra-zio\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-cassandra-zio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-cassandra-zio</h2>\n<p dir=\"auto\">Quill context that executes Cassandra queries inside of ZIO. Unlike most other contexts\nthat require passing in a Data Source, this context takes in a <code>CassandraZioSession</code>\nas a resource dependency which can be provided later (see the <code>CassandraZioSession</code> object for helper methods\nthat assist in doing this).</p>\n<p dir=\"auto\">The resource dependency itself is just a <code>Has[CassandraZioSession]</code> hence <code>run(qry)</code> and other methods in this context will return\n<code>ZIO[Has[CassandraZioSession], Throwable, T]</code>.  The type <code>CIO[T]</code> i.e. Cassandra-IO is an alias for this.\nProviding a <code>CassandraZioSession</code> dependency is now very simple:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val session: CassandraZioSession = _\nrun(people)\n  .provide(Has(session))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">session</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">CassandraZioSession</span> <span class=\"pl-k\">=</span> _\nrun(people)\n  .provide(<span class=\"pl-en\">Has</span>(session))</pre></div>\n<p dir=\"auto\">Various methods in the <code>io.getquill.CassandraZioSession</code> can assist in simplifying it's creation, for example, you can\nprovide a <code>Config</code> object instead of a <code>CassandraZioSession</code> like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" val zioSessionLayer: ZLayer[Any, Throwable, Has[CassandraZioSession]] =\n   CassandraZioSession.fromPrefix(&quot;testStreamDB&quot;)\nrun(query[Person])\n  .provideCustomLayer(zioSessionLayer)\"><pre> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">zioSessionLayer</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ZLayer</span>[<span class=\"pl-en\">Any</span>, <span class=\"pl-en\">Throwable</span>, <span class=\"pl-en\">Has</span>[<span class=\"pl-en\">CassandraZioSession</span>]] <span class=\"pl-k\">=</span>\n   <span class=\"pl-en\">CassandraZioSession</span>.fromPrefix(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testStreamDB<span class=\"pl-pds\">\"</span></span>)\nrun(query[<span class=\"pl-en\">Person</span>])\n  .provideCustomLayer(zioSessionLayer)</pre></div>\n<blockquote>\n<p dir=\"auto\">(Note that the resulting CassandraZioSession has a closing bracket)</p>\n</blockquote>\n<p dir=\"auto\">If you are using a Plain Scala app, you will need to manually run it e.g. using zio.Runtime</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" Runtime.default.unsafeRun(MyZioContext.run(query[Person]).provideCustomLayer(zioSessionLayer))\"><pre> <span class=\"pl-en\">Runtime</span>.default.unsafeRun(<span class=\"pl-en\">MyZioContext</span>.run(query[<span class=\"pl-en\">Person</span>]).provideCustomLayer(zioSessionLayer))</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-dao-helper-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#dao-helper-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>DAO helper</h4>\n<p dir=\"auto\">One additional useful pattern is to use <code>import io.getquill.context.qzio.ImplicitSyntax.Implicit</code> to provide\nan implicit CassandraZioSession to one or multiple <code>run(qry)</code> calls in a context. This is very useful when creating\nDAO patterns that will reuse a CassandraZioSession many times:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class MyQueryService(cs: CassandraZioSession) {\n  import Ctx._\n  implicit val env = Implicit(Has(cs))\n\n  def joes = Ctx.run { query[Person].filter(p =&gt; p.name == &quot;Joe&quot;) }.implicitly\n  def jills = Ctx.run { query[Person].filter(p =&gt; p.name == &quot;Jill&quot;) }.implicitly\n  def alexes = Ctx.run { query[Person].filter(p =&gt; p.name == &quot;Alex&quot;) }.implicitly\n}\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">MyQueryService</span>(<span class=\"pl-v\">cs</span>: <span class=\"pl-en\">CassandraZioSession</span>) {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">Ctx</span>.<span class=\"pl-en\">_</span>\n  <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">env</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Implicit</span>(<span class=\"pl-en\">Has</span>(cs))\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">joes</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Ctx</span>.run { query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>) }.implicitly\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">jills</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Ctx</span>.run { query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Jill<span class=\"pl-pds\">\"</span></span>) }.implicitly\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">alexes</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Ctx</span>.run { query[<span class=\"pl-en\">Person</span>].filter(p <span class=\"pl-k\">=&gt;</span> p.name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Alex<span class=\"pl-pds\">\"</span></span>) }.implicitly\n}</pre></div>\n<p dir=\"auto\">More examples of a Quill-Cassandra-ZIO app <a href=\"https://github.com/getquill/quill/tree/master/quill-cassandra-zio/src/test/scala/io/getquill/context/cassandra/zio/examples\">quill-cassandra-zio/src/test/scala/io/getquill/context/cassandra/zio/examples</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-27\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-27\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-cassandra-zio&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-cassandra-zio\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-cassandra-monix\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-cassandra-monix\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-cassandra-monix</h2>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-28\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-28\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-cassandra-monix&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-cassandra-monix\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-monix-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#monix-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>monix context</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new CassandraMonixContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">CassandraMonixContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-stream-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#stream-context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>stream context</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new CassandraStreamContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">CassandraStreamContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-quill-cassandra-alpakka\" class=\"anchor\" aria-hidden=\"true\" href=\"#quill-cassandra-alpakka\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>quill-cassandra-alpakka</h2>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-29\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-29\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-cassandra-alpakka&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-cassandra-alpakka\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<p dir=\"auto\">See <a href=\"https://doc.akka.io/docs/alpakka/current/cassandra.html\" rel=\"nofollow\">Alpakka Cassandra</a> documentation page for more information.</p>\n<h4 dir=\"auto\"><a id=\"user-content-context\" class=\"anchor\" aria-hidden=\"true\" href=\"#context\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>context</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import akka.actor.ActorSystem\nimport akka.stream.alpakka.cassandra.CassandraSessionSettings\nimport akka.stream.alpakka.cassandra.scaladsl.{CassandraSession, CassandraSessionRegistry}\nimport io.getquill.CassandraAlpakkaContext\n\nval system: ActorSystem = ???\nval alpakkaSessionSettings = CassandraSessionSettings(&quot;quill-test.alpakka.cassandra&quot;)\nval alpakkaSession: CassandraSession = CassandraSessionRegistry.get(system).sessionFor(alpakkaSessionSettings)\n\nlazy val ctx = new CassandraAlpakkaContext(SnakeCase, alpakkaSession, preparedStatementCacheSize = 100)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">akka</span>.<span class=\"pl-en\">actor</span>.<span class=\"pl-en\">ActorSystem</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">akka</span>.<span class=\"pl-en\">stream</span>.<span class=\"pl-en\">alpakka</span>.<span class=\"pl-en\">cassandra</span>.<span class=\"pl-en\">CassandraSessionSettings</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">akka</span>.<span class=\"pl-en\">stream</span>.<span class=\"pl-en\">alpakka</span>.<span class=\"pl-en\">cassandra</span>.<span class=\"pl-en\">scaladsl</span>.{<span class=\"pl-en\">CassandraSession</span>, <span class=\"pl-en\">CassandraSessionRegistry</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">getquill</span>.<span class=\"pl-en\">CassandraAlpakkaContext</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">system</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ActorSystem</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">???</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">alpakkaSessionSettings</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">CassandraSessionSettings</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>quill-test.alpakka.cassandra<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">alpakkaSession</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">CassandraSession</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">CassandraSessionRegistry</span>.get(system).sessionFor(alpakkaSessionSettings)\n\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">CassandraAlpakkaContext</span>(<span class=\"pl-en\">SnakeCase</span>, alpakkaSession, preparedStatementCacheSize <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-28\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-28\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// alpakka cassandra session with keyspace\nquill-test.alpakka.cassandra: ${alpakka.cassandra} { // inheritance of alpakka.cassandra session configuration\n  // custom datastax driver setup\n  datastax-java-driver-config = quill-test-datastax-java-driver\n}\n\nquill-test-datastax-java-driver {\n  basic {\n    // keyspace at datastax driver setup, as there is not different option now\n    session-keyspace = &quot;quill_test&quot;\n  }\n}\"><pre class=\"notranslate\"><code>// alpakka cassandra session with keyspace\nquill-test.alpakka.cassandra: ${alpakka.cassandra} { // inheritance of alpakka.cassandra session configuration\n  // custom datastax driver setup\n  datastax-java-driver-config = quill-test-datastax-java-driver\n}\n\nquill-test-datastax-java-driver {\n  basic {\n    // keyspace at datastax driver setup, as there is not different option now\n    session-keyspace = \"quill_test\"\n  }\n}\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-orientdb-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#orientdb-contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>OrientDB Contexts</h2>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-30\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-30\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-orientdb&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-orientdb\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-synchronous-context-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#synchronous-context-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>synchronous context</h4>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val ctx = new OrientDBSyncContext(SnakeCase, &quot;ctx&quot;)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">OrientDBSyncContext</span>(<span class=\"pl-en\">SnakeCase</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ctx<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">The configurations are set using <a href=\"http://orientdb.com/javadoc/latest/com/orientechnologies/orient/core/db/OPartitionedDatabasePool.html\" rel=\"nofollow\"><code>OPartitionedDatabasePool</code></a> which creates a pool of DB connections from which an instance of connection can be acquired. It is possible to set DB credentials using the parameter called <code>username</code> and <code>password</code>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-applicationproperties-29\" class=\"anchor\" aria-hidden=\"true\" href=\"#applicationproperties-29\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>application.properties</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ctx.dbUrl=remote:127.0.0.1:2424/GratefulDeadConcerts\nctx.username=root\nctx.password=root\"><pre class=\"notranslate\"><code>ctx.dbUrl=remote:127.0.0.1:2424/GratefulDeadConcerts\nctx.username=root\nctx.password=root\n</code></pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-code-generation\" class=\"anchor\" aria-hidden=\"true\" href=\"#code-generation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Code Generation</h1>\n<p dir=\"auto\">Quill now has a highly customizable code generator. Currently, it only supports JDBC but it will soon\nbe extended to other contexts. With a minimal amount of configuration, the code generator takes schemas like this:</p>\n<div class=\"highlight highlight-source-sql notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-- Using schema 'public'\n\ncreate table public.Person (\n  id int primary key auto_increment,\n  first_name varchar(255),\n  last_name varchar(255),\n  age int not null\n);\n\ncreate table public.Address (\n  person_fk int not null,\n  street varchar(255),\n  zip int\n);\"><pre><span class=\"pl-c\"><span class=\"pl-c\">--</span> Using schema 'public'</span>\n\n<span class=\"pl-k\">create</span> <span class=\"pl-k\">table</span> <span class=\"pl-en\">public</span>.Person (\n  id <span class=\"pl-k\">int</span> <span class=\"pl-k\">primary key</span> auto_increment,\n  first_name <span class=\"pl-k\">varchar</span>(<span class=\"pl-c1\">255</span>),\n  last_name <span class=\"pl-k\">varchar</span>(<span class=\"pl-c1\">255</span>),\n  age <span class=\"pl-k\">int</span> <span class=\"pl-k\">not null</span>\n);\n\n<span class=\"pl-k\">create</span> <span class=\"pl-k\">table</span> <span class=\"pl-en\">public</span>.Address (\n  person_fk <span class=\"pl-k\">int</span> <span class=\"pl-k\">not null</span>,\n  street <span class=\"pl-k\">varchar</span>(<span class=\"pl-c1\">255</span>),\n  zip <span class=\"pl-k\">int</span>\n);</pre></div>\n<p dir=\"auto\">Producing objects like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// src/main/scala/com/my/project/public/Person.scala\npackage com.my.project.public\n\ncase class Person(id: Int, firstName: Option[String], lastName: Option[String], age: Int)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> src/main/scala/com/my/project/public/Person.scala</span>\n<span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">my</span>.<span class=\"pl-en\">project</span>.<span class=\"pl-en\">public</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">firstName</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>], <span class=\"pl-v\">lastName</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>], <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>)</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// src/main/scala/com/my/project/public/Address.scala\npackage com.my.project.public\n\ncase class Address(personFk: Int, street: Option[String], zip: Option[Int])\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> src/main/scala/com/my/project/public/Address.scala</span>\n<span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">my</span>.<span class=\"pl-en\">project</span>.<span class=\"pl-en\">public</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Address</span>(<span class=\"pl-v\">personFk</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">street</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>], <span class=\"pl-v\">zip</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>])</pre></div>\n<p dir=\"auto\">Have a look at the <a href=\"https://github.com/getquill/quill/blob/master/CODEGEN.md\">CODEGEN.md</a> manual page for more details.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-dependencies-31\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-dependencies-31\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>sbt dependencies</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;io.getquill&quot; %% &quot;quill-codegen-jdbc&quot; % &quot;4.3.1-SNAPSHOT&quot;\n)\"><pre class=\"notranslate\"><code>libraryDependencies ++= Seq(\n  \"io.getquill\" %% \"quill-codegen-jdbc\" % \"4.3.1-SNAPSHOT\"\n)\n</code></pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-logging\" class=\"anchor\" aria-hidden=\"true\" href=\"#logging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Logging</h1>\n<h2 dir=\"auto\"><a id=\"user-content-logging-to-a-file-at-compile-time\" class=\"anchor\" aria-hidden=\"true\" href=\"#logging-to-a-file-at-compile-time\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Logging to a File at Compile-Time</h2>\n<p dir=\"auto\">To write compile-time queries to a log, use the <code>-Dquill.log.file=queries.sql</code> and specify\nthe file to be written (e.g. <code>queries.sql</code>). The path is based on the build root (i.e. the current-working-directory of the Java build).</p>\n<p dir=\"auto\">When using SBT, this parameter can be set either in your SBT_OPTS, the project-specific .sbtopts file or directly passed to the SBT command.\nIn Intellij this can be set under settings -&gt; sbt -&gt; VM Parameters.</p>\n<p dir=\"auto\">(Also make sure that <code>use for: \"Builds\"</code> is selected otherwise Intellij will not use SBT for the build in the first place.)</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1369480/163513653-b5266cd6-1bff-4792-b0d2-936d24b7e0f1.png\"><img src=\"https://user-images.githubusercontent.com/1369480/163513653-b5266cd6-1bff-4792-b0d2-936d24b7e0f1.png\" alt=\"Screenshot from 2022-04-14 23-28-47\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Also note that the <code>-Dquill.macro.log.pretty=true</code> parameter works together with <code>-Dquill.log.file</code> and will output pretty-printed\nqueries to the specified file.</p>\n<p dir=\"auto\">For a file that looks like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Example.scala\npackage io.getquill\n\nobject Example {\n  case class Person(id: Int, name: String, age: Int)\n  case class Address(owner:Int, street: String)\n  val ctx = new SqlMirrorContext(PostgresDialect, Literal)\n  import ctx._\n\n  val people = run(query[Person])\n  val addresses = run(query[Person])\n}\"><pre class=\"notranslate\"><code>// Example.scala\npackage io.getquill\n\nobject Example {\n  case class Person(id: Int, name: String, age: Int)\n  case class Address(owner:Int, street: String)\n  val ctx = new SqlMirrorContext(PostgresDialect, Literal)\n  import ctx._\n\n  val people = run(query[Person])\n  val addresses = run(query[Person])\n}\n</code></pre></div>\n<p dir=\"auto\">The following log will be produced:</p>\n<div class=\"highlight highlight-source-sql notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n-- file: /home/me/quill-example/src/main/scala/io/getquill/Example.scala:9:19\n-- time: 2022-04-14T23:18:19.533\n\n SELECT\n   x.id,\n   x.name,\n   x.age\n FROM\n   Person x\n\n;\n\n\n-- file: /home/me/quill-example/src/main/scala/io/getquill/Example.scala:10:22\n-- time: 2022-04-14T23:18:19.9\n\n SELECT\n   x.id,\n   x.name,\n   x.age\n FROM\n   Person x\n\n;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">--</span> file: /home/me/quill-example/src/main/scala/io/getquill/Example.scala:9:19</span>\n<span class=\"pl-c\"><span class=\"pl-c\">--</span> time: 2022-04-14T23:18:19.533</span>\n\n <span class=\"pl-k\">SELECT</span>\n   <span class=\"pl-c1\">x</span>.<span class=\"pl-c1\">id</span>,\n   <span class=\"pl-c1\">x</span>.<span class=\"pl-c1\">name</span>,\n   <span class=\"pl-c1\">x</span>.<span class=\"pl-c1\">age</span>\n <span class=\"pl-k\">FROM</span>\n   Person x\n\n;\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">--</span> file: /home/me/quill-example/src/main/scala/io/getquill/Example.scala:10:22</span>\n<span class=\"pl-c\"><span class=\"pl-c\">--</span> time: 2022-04-14T23:18:19.9</span>\n\n <span class=\"pl-k\">SELECT</span>\n   <span class=\"pl-c1\">x</span>.<span class=\"pl-c1\">id</span>,\n   <span class=\"pl-c1\">x</span>.<span class=\"pl-c1\">name</span>,\n   <span class=\"pl-c1\">x</span>.<span class=\"pl-c1\">age</span>\n <span class=\"pl-k\">FROM</span>\n   Person x\n\n;</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-disable-compile-time-console-logging\" class=\"anchor\" aria-hidden=\"true\" href=\"#disable-compile-time-console-logging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Disable Compile-Time Console Logging</h2>\n<p dir=\"auto\">To disable the console logging of queries during compilation use <code>quill.macro.log</code> option:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dquill.macro.log=false\"><pre class=\"notranslate\"><code>sbt -Dquill.macro.log=false\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-runtime\" class=\"anchor\" aria-hidden=\"true\" href=\"#runtime\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Runtime</h2>\n<p dir=\"auto\">Quill uses SLF4J for logging. Each context logs queries which are currently executed.\nIt also logs the list of parameters that are bound into a prepared statement if any.\nTo enable that use <code>quill.binds.log</code> option:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java -Dquill.binds.log=true -jar myapp.jar\"><pre class=\"notranslate\"><code>java -Dquill.binds.log=true -jar myapp.jar\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-pretty-printing\" class=\"anchor\" aria-hidden=\"true\" href=\"#pretty-printing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Pretty Printing</h2>\n<p dir=\"auto\">Quill can pretty print compile-time produced queries by leveraging a great library\nproduced by <a href=\"https://github.com/vertical-blank\">@vertical-blank</a> which is compatible\nwith both Scala and ScalaJS. To enable this feature use the <code>quill.macro.log.pretty</code> option:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dquill.macro.log.pretty=true\"><pre class=\"notranslate\"><code>sbt -Dquill.macro.log.pretty=true\n</code></pre></div>\n<p dir=\"auto\">Before:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[info] /home/me/project/src/main/scala/io/getquill/MySqlTestPerson.scala:20:18: SELECT p.id, p.name, p.age, a.ownerFk, a.street, a.state, a.zip FROM Person p INNER JOIN Address a ON a.ownerFk = p.id\"><pre class=\"notranslate\"><code>[info] /home/me/project/src/main/scala/io/getquill/MySqlTestPerson.scala:20:18: SELECT p.id, p.name, p.age, a.ownerFk, a.street, a.state, a.zip FROM Person p INNER JOIN Address a ON a.ownerFk = p.id\n</code></pre></div>\n<p dir=\"auto\">After:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[info] /home/me/project/src/main/scala/io/getquill/MySqlTestPerson.scala:20:18:\n[info]   | SELECT\n[info]   |   p.id,\n[info]   |   p.name,\n[info]   |   p.age,\n[info]   |   a.ownerFk,\n[info]   |   a.street,\n[info]   |   a.state,\n[info]   |   a.zip\n[info]   | FROM\n[info]   |   Person p\n[info]   |   INNER JOIN Address a ON a.ownerFk = p.id\"><pre class=\"notranslate\"><code>[info] /home/me/project/src/main/scala/io/getquill/MySqlTestPerson.scala:20:18:\n[info]   | SELECT\n[info]   |   p.id,\n[info]   |   p.name,\n[info]   |   p.age,\n[info]   |   a.ownerFk,\n[info]   |   a.street,\n[info]   |   a.state,\n[info]   |   a.zip\n[info]   | FROM\n[info]   |   Person p\n[info]   |   INNER JOIN Address a ON a.ownerFk = p.id\n</code></pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-additional-resources\" class=\"anchor\" aria-hidden=\"true\" href=\"#additional-resources\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Additional resources</h1>\n<h2 dir=\"auto\"><a id=\"user-content-templates\" class=\"anchor\" aria-hidden=\"true\" href=\"#templates\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Templates</h2>\n<p dir=\"auto\">In order to quickly start with Quill, we have setup some template projects:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/getquill/play-quill-jdbc\">Play Framework with Quill JDBC</a></li>\n<li><a href=\"https://github.com/jeffmath/play-quill-async-postgres-example\">Play Framework with Quill async-postgres</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-slick-comparison\" class=\"anchor\" aria-hidden=\"true\" href=\"#slick-comparison\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Slick comparison</h2>\n<p dir=\"auto\">Please refer to <a href=\"https://github.com/getquill/quill/blob/master/SLICK.md\">SLICK.md</a> for a detailed comparison between Quill and Slick.</p>\n<h2 dir=\"auto\"><a id=\"user-content-cassandra-libraries-comparison\" class=\"anchor\" aria-hidden=\"true\" href=\"#cassandra-libraries-comparison\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Cassandra libraries comparison</h2>\n<p dir=\"auto\">Please refer to <a href=\"https://github.com/getquill/quill/blob/master/CASSANDRA.md\">CASSANDRA.md</a> for a detailed comparison between Quill and other main alternatives for interaction with Cassandra in Scala.</p>\n<h2 dir=\"auto\"><a id=\"user-content-related-projects\" class=\"anchor\" aria-hidden=\"true\" href=\"#related-projects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Related Projects</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/ajozwik/quill-generic\">quill-generic</a> - Generic DAO Support for Quill.</li>\n<li><a href=\"https://github.com/olafurpg/scala-db-codegen\">scala-db-codegen</a> - Code/boilerplate generator from db schema</li>\n<li><a href=\"https://github.com/mslinn/quill-cache/\">quill-cache</a> - Caching layer for Quill</li>\n<li><a href=\"https://github.com/mslinn/quill-gen/\">quill-gen</a> - a DAO generator for <code>quill-cache</code></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-external-content\" class=\"anchor\" aria-hidden=\"true\" href=\"#external-content\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>External content</h2>\n<h3 dir=\"auto\"><a id=\"user-content-talks\" class=\"anchor\" aria-hidden=\"true\" href=\"#talks\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Talks</h3>\n<ul dir=\"auto\">\n<li><strong>[Dotty/Scala 3]</strong> Functional Scala 2020 - <a href=\"https://www.youtube.com/watch?v=SmBpGkIsJIU\" rel=\"nofollow\">Quill, Dotty, And The Awesome Power of 'Inline'</a></li>\n<li><strong>[Intro]</strong> ScalaDays Berlin 2016 - <a href=\"https://www.youtube.com/watch?v=nqSYccoSeio\" rel=\"nofollow\">Scylla, Charybdis, and the mystery of Quill</a></li>\n<li><strong>[Intro]</strong> Postgres Philly 2019 - <a href=\"https://www.youtube.com/watch?v=RVs-T5iFdQI\" rel=\"nofollow\">Introduction to Quill</a></li>\n<li>ScalaUA 2020 - <a href=\"https://www.youtube.com/watch?v=aY8DrjE9lIY\" rel=\"nofollow\">Manipulating Abstract Syntax Trees (ASTs) to generate safe SQL Queries with Quill</a></li>\n<li>BeeScala 2019 - <a href=\"https://www.youtube.com/watch?v=EXISmUXBXu8\" rel=\"nofollow\">Quill + Spark = Better Together</a></li>\n<li>Scale By the Bay 2019 - <a href=\"https://www.youtube.com/watch?v=1WVjkP_G2cA\" rel=\"nofollow\">Quill + Doobie = Better Together</a></li>\n<li>ScQuilL, Porting Quill to Dotty (Ongoing) - <a href=\"https://www.youtube.com/playlist?list=PLqky8QybCVQYNZY_MNJpkjFKT-dAdHQDX\" rel=\"nofollow\">Quill, Dotty, and Macros</a></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-blog-posts\" class=\"anchor\" aria-hidden=\"true\" href=\"#blog-posts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Blog posts</h3>\n<ul dir=\"auto\">\n<li><strong>[Intro]</strong> Haoyi's Programming Blog - <a href=\"http://www.lihaoyi.com/post/WorkingwithDatabasesusingScalaandQuill.html\" rel=\"nofollow\">Working with Databases using Scala and Quill</a></li>\n<li>Juliano Alves's Blog - <a href=\"https://juliano-alves.com/2020/06/15/streaming-all-the-way-zio-doobie-quill-http4s-fs2/\" rel=\"nofollow\">Streaming all the way with ZIO, Doobie, Quill, http4s and fs2</a></li>\n<li>Juliano Alves's Blog - <a href=\"https://juliano-alves.com/2020/09/14/quill-translating-boolean-literals/\" rel=\"nofollow\">Quill: Translating Boolean Literals</a></li>\n<li>Juliano Alves's Blog - <a href=\"https://juliano-alves.com/2019/11/29/quill-ndbc-postgres-a-new-async-module/\" rel=\"nofollow\">Quill NDBC Postgres: A New Async Module</a></li>\n<li>Juliano Alves's Blog - <a href=\"https://juliano-alves.com/2019/11/18/contributing-to-quill-a-pairing-session/\" rel=\"nofollow\">Contributing to Quill, a Pairing Session</a></li>\n<li>Medium @ Fwbrasil - <a href=\"https://medium.com/@fwbrasil/quill-spark-a-type-safe-scala-api-for-spark-sql-2672e8582b0d\" rel=\"nofollow\">quill-spark: A type-safe Scala API for Spark SQL</a></li>\n<li>Scalac.io blog - <a href=\"http://blog.scalac.io/2016/07/21/compile-time-queries-with-quill.html\" rel=\"nofollow\">Compile-time Queries with Quill</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-code-of-conduct\" class=\"anchor\" aria-hidden=\"true\" href=\"#code-of-conduct\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Code of Conduct</h2>\n<p dir=\"auto\">Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See <a href=\"https://github.com/getquill/quill/blob/master/CODE_OF_CONDUCT.md\">CODE_OF_CONDUCT.md</a> for details.</p>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\">See the <a href=\"https://github.com/getquill/quill/blob/master/LICENSE.txt\">LICENSE</a> file for details.</p>\n<h1 dir=\"auto\"><a id=\"user-content-maintainers\" class=\"anchor\" aria-hidden=\"true\" href=\"#maintainers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Maintainers</h1>\n<ul dir=\"auto\">\n<li>@deusaquilus (lead maintainer)</li>\n<li>@fwbrasil (creator)</li>\n<li>@jilen</li>\n<li>@juliano</li>\n<li>@mentegy</li>\n<li>@mdedetrich</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-former-maintainers\" class=\"anchor\" aria-hidden=\"true\" href=\"#former-maintainers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Former maintainers:</h2>\n<ul dir=\"auto\">\n<li>@gustavoamigo</li>\n<li>@godenji</li>\n<li>@lvicentesanchez</li>\n<li>@mxl</li>\n</ul>\n<p dir=\"auto\">You can notify all current maintainers using the handle <code>@getquill/maintainers</code>.</p>\n<h1 dir=\"auto\"><a id=\"user-content-acknowledgments\" class=\"anchor\" aria-hidden=\"true\" href=\"#acknowledgments\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Acknowledgments</h1>\n<p dir=\"auto\">The project was created having Philip Wadler's talk <a href=\"http://www.infoq.com/presentations/theory-language-integrated-query\" rel=\"nofollow\">\"A practical theory of language-integrated query\"</a> as its initial inspiration. The development was heavily influenced by the following papers:</p>\n<ul dir=\"auto\">\n<li><a href=\"http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf\" rel=\"nofollow\">A Practical Theory of Language-Integrated Query</a></li>\n<li><a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/qdsl/qdsl.pdf\" rel=\"nofollow\">Everything old is new again: Quoted Domain Specific Languages</a></li>\n<li><a href=\"http://db.inf.uni-tuebingen.de/staticfiles/publications/the-flatter-the-better.pdf\" rel=\"nofollow\">The Flatter, the Better</a></li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "fwbrasil",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/831175?v=4",
        "url" : "https://github.com/fwbrasil",
        "contributions" : 1170
      },
      {
        "login" : "deusaquilus",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1369480?v=4",
        "url" : "https://github.com/deusaquilus",
        "contributions" : 681
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 291
      },
      {
        "login" : "juliano",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/35762?v=4",
        "url" : "https://github.com/juliano",
        "contributions" : 236
      },
      {
        "login" : "mentegy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/50805527?v=4",
        "url" : "https://github.com/mentegy",
        "contributions" : 141
      },
      {
        "login" : "jilen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/546573?v=4",
        "url" : "https://github.com/jilen",
        "contributions" : 72
      },
      {
        "login" : "gustavoamigo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4032109?v=4",
        "url" : "https://github.com/gustavoamigo",
        "contributions" : 46
      },
      {
        "login" : "lvicentesanchez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3955797?v=4",
        "url" : "https://github.com/lvicentesanchez",
        "contributions" : 45
      },
      {
        "login" : "mdedetrich",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2337269?v=4",
        "url" : "https://github.com/mdedetrich",
        "contributions" : 36
      },
      {
        "login" : "godenji",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/238557?v=4",
        "url" : "https://github.com/godenji",
        "contributions" : 33
      },
      {
        "login" : "mxl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1078685?v=4",
        "url" : "https://github.com/mxl",
        "contributions" : 32
      },
      {
        "login" : "golem131",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2429587?v=4",
        "url" : "https://github.com/golem131",
        "contributions" : 23
      },
      {
        "login" : "a14e",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/17896303?v=4",
        "url" : "https://github.com/a14e",
        "contributions" : 6
      },
      {
        "login" : "ajozwik",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/909625?v=4",
        "url" : "https://github.com/ajozwik",
        "contributions" : 5
      },
      {
        "login" : "3tty0n",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8289812?v=4",
        "url" : "https://github.com/3tty0n",
        "contributions" : 5
      },
      {
        "login" : "matsu-chara",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1635885?v=4",
        "url" : "https://github.com/matsu-chara",
        "contributions" : 5
      },
      {
        "login" : "zaneli",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/379820?v=4",
        "url" : "https://github.com/zaneli",
        "contributions" : 5
      },
      {
        "login" : "aoprisan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/99908?v=4",
        "url" : "https://github.com/aoprisan",
        "contributions" : 4
      },
      {
        "login" : "benpence",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/736903?v=4",
        "url" : "https://github.com/benpence",
        "contributions" : 4
      },
      {
        "login" : "laysakura",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/498788?v=4",
        "url" : "https://github.com/laysakura",
        "contributions" : 4
      },
      {
        "login" : "nafg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/98384?v=4",
        "url" : "https://github.com/nafg",
        "contributions" : 4
      },
      {
        "login" : "krrrr38",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/915731?v=4",
        "url" : "https://github.com/krrrr38",
        "contributions" : 4
      },
      {
        "login" : "justcoon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5932736?v=4",
        "url" : "https://github.com/justcoon",
        "contributions" : 4
      },
      {
        "login" : "leakingtapan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5259480?v=4",
        "url" : "https://github.com/leakingtapan",
        "contributions" : 3
      },
      {
        "login" : "cambridgemike",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/163429?v=4",
        "url" : "https://github.com/cambridgemike",
        "contributions" : 3
      },
      {
        "login" : "onilton",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/725676?v=4",
        "url" : "https://github.com/onilton",
        "contributions" : 3
      },
      {
        "login" : "rfranco",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/399203?v=4",
        "url" : "https://github.com/rfranco",
        "contributions" : 3
      },
      {
        "login" : "tdrozdowski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1784034?v=4",
        "url" : "https://github.com/tdrozdowski",
        "contributions" : 3
      },
      {
        "login" : "WayneWang12",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6812513?v=4",
        "url" : "https://github.com/WayneWang12",
        "contributions" : 3
      },
      {
        "login" : "bneil",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/198162?v=4",
        "url" : "https://github.com/bneil",
        "contributions" : 3
      },
      {
        "login" : "chriseteka",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/42969611?v=4",
        "url" : "https://github.com/chriseteka",
        "contributions" : 3
      },
      {
        "login" : "letalvoj",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5262321?v=4",
        "url" : "https://github.com/letalvoj",
        "contributions" : 3
      },
      {
        "login" : "schmitch",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1641401?v=4",
        "url" : "https://github.com/schmitch",
        "contributions" : 2
      },
      {
        "login" : "jcranky",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/772886?v=4",
        "url" : "https://github.com/jcranky",
        "contributions" : 2
      },
      {
        "login" : "janheise",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1190735?v=4",
        "url" : "https://github.com/janheise",
        "contributions" : 2
      },
      {
        "login" : "janghwan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1624056?v=4",
        "url" : "https://github.com/janghwan",
        "contributions" : 2
      },
      {
        "login" : "mamdouhweb",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1148114?v=4",
        "url" : "https://github.com/mamdouhweb",
        "contributions" : 2
      },
      {
        "login" : "martinhanes",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13551360?v=4",
        "url" : "https://github.com/martinhanes",
        "contributions" : 2
      },
      {
        "login" : "mslinn",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/485818?v=4",
        "url" : "https://github.com/mslinn",
        "contributions" : 2
      },
      {
        "login" : "zifeo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9053709?v=4",
        "url" : "https://github.com/zifeo",
        "contributions" : 2
      },
      {
        "login" : "jokester",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/802130?v=4",
        "url" : "https://github.com/jokester",
        "contributions" : 2
      },
      {
        "login" : "liorhar",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/821044?v=4",
        "url" : "https://github.com/liorhar",
        "contributions" : 2
      },
      {
        "login" : "sullis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30938?v=4",
        "url" : "https://github.com/sullis",
        "contributions" : 2
      },
      {
        "login" : "olafurpg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1408093?v=4",
        "url" : "https://github.com/olafurpg",
        "contributions" : 2
      },
      {
        "login" : "Yomanz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5119107?v=4",
        "url" : "https://github.com/Yomanz",
        "contributions" : 2
      },
      {
        "login" : "danslapman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1708325?v=4",
        "url" : "https://github.com/danslapman",
        "contributions" : 2
      },
      {
        "login" : "alexbalonperin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12490090?v=4",
        "url" : "https://github.com/alexbalonperin",
        "contributions" : 1
      },
      {
        "login" : "tekacs",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/63247?v=4",
        "url" : "https://github.com/tekacs",
        "contributions" : 1
      },
      {
        "login" : "gzoom13",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10446989?v=4",
        "url" : "https://github.com/gzoom13",
        "contributions" : 1
      },
      {
        "login" : "alyas77",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1764350?v=4",
        "url" : "https://github.com/alyas77",
        "contributions" : 1
      },
      {
        "login" : "andrzejjozwik",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/83062362?v=4",
        "url" : "https://github.com/andrzejjozwik",
        "contributions" : 1
      },
      {
        "login" : "dieu",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/47102?v=4",
        "url" : "https://github.com/dieu",
        "contributions" : 1
      },
      {
        "login" : "arturaz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12931?v=4",
        "url" : "https://github.com/arturaz",
        "contributions" : 1
      },
      {
        "login" : "ayushworks",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19631148?v=4",
        "url" : "https://github.com/ayushworks",
        "contributions" : 1
      },
      {
        "login" : "dangerousben",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/42071?v=4",
        "url" : "https://github.com/dangerousben",
        "contributions" : 1
      },
      {
        "login" : "berntan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/416795?v=4",
        "url" : "https://github.com/berntan",
        "contributions" : 1
      },
      {
        "login" : "catalin-ursachi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11335549?v=4",
        "url" : "https://github.com/catalin-ursachi",
        "contributions" : 1
      },
      {
        "login" : "choppythelumberjack",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/35316016?v=4",
        "url" : "https://github.com/choppythelumberjack",
        "contributions" : 1
      },
      {
        "login" : "c-bowden",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/42655330?v=4",
        "url" : "https://github.com/c-bowden",
        "contributions" : 1
      },
      {
        "login" : "ChrisRegado",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1444732?v=4",
        "url" : "https://github.com/ChrisRegado",
        "contributions" : 1
      },
      {
        "login" : "virusdave",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6148271?v=4",
        "url" : "https://github.com/virusdave",
        "contributions" : 1
      },
      {
        "login" : "dizzy7",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1052472?v=4",
        "url" : "https://github.com/dizzy7",
        "contributions" : 1
      },
      {
        "login" : "fabianhjr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/303897?v=4",
        "url" : "https://github.com/fabianhjr",
        "contributions" : 1
      },
      {
        "login" : "darri89",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2693392?v=4",
        "url" : "https://github.com/darri89",
        "contributions" : 1
      },
      {
        "login" : "yoohaemin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22650536?v=4",
        "url" : "https://github.com/yoohaemin",
        "contributions" : 1
      },
      {
        "login" : "hmemcpy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/601206?v=4",
        "url" : "https://github.com/hmemcpy",
        "contributions" : 1
      },
      {
        "login" : "aij",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4732885?v=4",
        "url" : "https://github.com/aij",
        "contributions" : 1
      },
      {
        "login" : "jeffmath",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13284314?v=4",
        "url" : "https://github.com/jeffmath",
        "contributions" : 1
      },
      {
        "login" : "jonathan-ostrander",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5961416?v=4",
        "url" : "https://github.com/jonathan-ostrander",
        "contributions" : 1
      },
      {
        "login" : "vejeta",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/940731?v=4",
        "url" : "https://github.com/vejeta",
        "contributions" : 1
      },
      {
        "login" : "guizmaii",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1193670?v=4",
        "url" : "https://github.com/guizmaii",
        "contributions" : 1
      },
      {
        "login" : "kitlangton",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7587245?v=4",
        "url" : "https://github.com/kitlangton",
        "contributions" : 1
      },
      {
        "login" : "komsit37",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7501978?v=4",
        "url" : "https://github.com/komsit37",
        "contributions" : 1
      },
      {
        "login" : "ShapelessCat",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/45252210?v=4",
        "url" : "https://github.com/ShapelessCat",
        "contributions" : 1
      },
      {
        "login" : "leonmaia",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/925667?v=4",
        "url" : "https://github.com/leonmaia",
        "contributions" : 1
      },
      {
        "login" : "ikhoon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1866157?v=4",
        "url" : "https://github.com/ikhoon",
        "contributions" : 1
      },
      {
        "login" : "lloydmeta",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/914805?v=4",
        "url" : "https://github.com/lloydmeta",
        "contributions" : 1
      },
      {
        "login" : "lclementi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1001110?v=4",
        "url" : "https://github.com/lclementi",
        "contributions" : 1
      },
      {
        "login" : "malliina",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1752865?v=4",
        "url" : "https://github.com/malliina",
        "contributions" : 1
      },
      {
        "login" : "wolfendale",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4563722?v=4",
        "url" : "https://github.com/wolfendale",
        "contributions" : 1
      },
      {
        "login" : "majk-p",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7260594?v=4",
        "url" : "https://github.com/majk-p",
        "contributions" : 1
      },
      {
        "login" : "MThomassen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15786761?v=4",
        "url" : "https://github.com/MThomassen",
        "contributions" : 1
      },
      {
        "login" : "mclaudt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8770359?v=4",
        "url" : "https://github.com/mclaudt",
        "contributions" : 1
      },
      {
        "login" : "puneetkhanduri",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1631032?v=4",
        "url" : "https://github.com/puneetkhanduri",
        "contributions" : 1
      },
      {
        "login" : "Kemichal",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4427054?v=4",
        "url" : "https://github.com/Kemichal",
        "contributions" : 1
      },
      {
        "login" : "rf-",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/345106?v=4",
        "url" : "https://github.com/rf-",
        "contributions" : 1
      },
      {
        "login" : "sammyrulez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/107209?v=4",
        "url" : "https://github.com/sammyrulez",
        "contributions" : 1
      },
      {
        "login" : "senia-psm",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1751325?v=4",
        "url" : "https://github.com/senia-psm",
        "contributions" : 1
      },
      {
        "login" : "sbcd90",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/617607?v=4",
        "url" : "https://github.com/sbcd90",
        "contributions" : 1
      },
      {
        "login" : "tschuchortdev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7273344?v=4",
        "url" : "https://github.com/tschuchortdev",
        "contributions" : 1
      },
      {
        "login" : "vladimirkl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/72238?v=4",
        "url" : "https://github.com/vladimirkl",
        "contributions" : 1
      },
      {
        "login" : "Assassin4791",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15830308?v=4",
        "url" : "https://github.com/Assassin4791",
        "contributions" : 1
      },
      {
        "login" : "b-gyula",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/27079815?v=4",
        "url" : "https://github.com/b-gyula",
        "contributions" : 1
      },
      {
        "login" : "counter2015",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13608862?v=4",
        "url" : "https://github.com/counter2015",
        "contributions" : 1
      },
      {
        "login" : "deterdw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/618912?v=4",
        "url" : "https://github.com/deterdw",
        "contributions" : 1
      },
      {
        "login" : "kraita-folio",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/38425698?v=4",
        "url" : "https://github.com/kraita-folio",
        "contributions" : 1
      },
      {
        "login" : "ksilin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1485569?v=4",
        "url" : "https://github.com/ksilin",
        "contributions" : 1
      },
      {
        "login" : "marcin992",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6900655?v=4",
        "url" : "https://github.com/marcin992",
        "contributions" : 1
      },
      {
        "login" : "mikejlong60",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3719354?v=4",
        "url" : "https://github.com/mikejlong60",
        "contributions" : 1
      },
      {
        "login" : "pshemass",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3524653?v=4",
        "url" : "https://github.com/pshemass",
        "contributions" : 1
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://github.com/xuwei-k",
        "contributions" : 1
      },
      {
        "login" : "vertical-blank",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9880727?v=4",
        "url" : "https://github.com/vertical-blank",
        "contributions" : 1
      },
      {
        "login" : "zhrebicek",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10925068?v=4",
        "url" : "https://github.com/zhrebicek",
        "contributions" : 1
      },
      {
        "login" : "code-d",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6970719?v=4",
        "url" : "https://github.com/code-d",
        "contributions" : 1
      }
    ],
    "commits" : 2969,
    "topics" : [
      "jdbc",
      "cassandra",
      "sparksql",
      "spark",
      "scala",
      "mysql",
      "database",
      "linq",
      "postgres",
      "scalajs"
    ],
    "contributingGuide" : "https://github.com/zio/zio-quill/blob/master/CONTRIBUTING.md",
    "codeOfConduct" : "https://github.com/zio/zio-quill/blob/master/CODE_OF_CONDUCT.md",
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 2564,
        "title" : "polymorphic expression error when using doing run(BatchAction) without first quoting",
        "url" : "https://github.com/zio/zio-quill/issues/2564"
      },
      {
        "number" : 2556,
        "title" : "DistinctOn column uses wrong name",
        "url" : "https://github.com/zio/zio-quill/issues/2556"
      },
      {
        "number" : 2544,
        "title" : "quill-jdbc-zio transaction error type should be narrowed to `SQLException`",
        "url" : "https://github.com/zio/zio-quill/issues/2544"
      },
      {
        "number" : 2542,
        "title" : "Invalid generated query where using columns as part of the update",
        "url" : "https://github.com/zio/zio-quill/issues/2542"
      },
      {
        "number" : 2533,
        "title" : "Like operator generating wrong sql with SqlDialect",
        "url" : "https://github.com/zio/zio-quill/issues/2533"
      },
      {
        "number" : 2513,
        "title" : "Include an link from examples/ZIOApp.scala at top of documentation",
        "url" : "https://github.com/zio/zio-quill/issues/2513"
      },
      {
        "number" : 2508,
        "title" : "Need to Pass SqlQuery Columns List into Decoders",
        "url" : "https://github.com/zio/zio-quill/issues/2508"
      },
      {
        "number" : 2497,
        "title" : "Using ad-hoc case classes with certain field names can result in invalid queries",
        "url" : "https://github.com/zio/zio-quill/issues/2497"
      },
      {
        "number" : 2494,
        "title" : "NullPointerException when lifting datetime fields in implicit query extensions",
        "url" : "https://github.com/zio/zio-quill/issues/2494"
      },
      {
        "number" : 2492,
        "title" : "Listen/Notify support in postgres",
        "url" : "https://github.com/zio/zio-quill/issues/2492"
      },
      {
        "number" : 2490,
        "title" : "Add Frequently used Date Operations",
        "url" : "https://github.com/zio/zio-quill/issues/2490"
      },
      {
        "number" : 2484,
        "title" : "NormalizeCaching cache grows without bound",
        "url" : "https://github.com/zio/zio-quill/issues/2484"
      },
      {
        "number" : 2482,
        "title" : "Postgres Session Variables",
        "url" : "https://github.com/zio/zio-quill/issues/2482"
      },
      {
        "number" : 2481,
        "title" : "Execute cassandra query in zio.blocking incurs cause a lot of extra latency.",
        "url" : "https://github.com/zio/zio-quill/issues/2481"
      },
      {
        "number" : 2453,
        "title" : "Encoder/decoder needed for java.sql.Timestamp",
        "url" : "https://github.com/zio/zio-quill/issues/2453"
      },
      {
        "number" : 2449,
        "title" : "[hosekeeping] sbteclipse-plugin is not maintained for more than 3 years",
        "url" : "https://github.com/zio/zio-quill/issues/2449"
      },
      {
        "number" : 2443,
        "title" : "Can't compile def ex(q:EntityQuery[Person]):List[Person] = ctx.run(q)",
        "url" : "https://github.com/zio/zio-quill/issues/2443"
      },
      {
        "number" : 2441,
        "title" : "executeAction API change when upgrading",
        "url" : "https://github.com/zio/zio-quill/issues/2441"
      },
      {
        "number" : 2440,
        "title" : "Count row 10 times slower than raw sql because generate inefficient sql .",
        "url" : "https://github.com/zio/zio-quill/issues/2440"
      },
      {
        "number" : 2437,
        "title" : "quill-spark: AnalysisException when performing `sum` and `avg` operations on integers",
        "url" : "https://github.com/zio/zio-quill/issues/2437"
      },
      {
        "number" : 2436,
        "title" : "exists isn't supported",
        "url" : "https://github.com/zio/zio-quill/issues/2436"
      },
      {
        "number" : 2418,
        "title" : "Array encoding does not respect empty values or values with double quotes for PostgresJAsyncContext",
        "url" : "https://github.com/zio/zio-quill/issues/2418"
      },
      {
        "number" : 2417,
        "title" : "Version 3.16.0 has breaking changes",
        "url" : "https://github.com/zio/zio-quill/issues/2417"
      },
      {
        "number" : 2395,
        "title" : "Feature Request: Allow specification (via jvm properties?) of trait to use for `Embedded`",
        "url" : "https://github.com/zio/zio-quill/issues/2395"
      },
      {
        "number" : 2371,
        "title" : "Cassandra UDTs and auto-derivation issues",
        "url" : "https://github.com/zio/zio-quill/issues/2371"
      },
      {
        "number" : 2366,
        "title" : "Switch from finagle-postgres to finagle-postgresql (twitter version)",
        "url" : "https://github.com/zio/zio-quill/issues/2366"
      },
      {
        "number" : 2340,
        "title" : "Column aliases don't use NamingStrategy",
        "url" : "https://github.com/zio/zio-quill/issues/2340"
      },
      {
        "number" : 2333,
        "title" : "ZIO logging finalizer runs in incompatible classpath",
        "url" : "https://github.com/zio/zio-quill/issues/2333"
      },
      {
        "number" : 2331,
        "title" : "Quill hangs after multiple batch inserts into mysql",
        "url" : "https://github.com/zio/zio-quill/issues/2331"
      },
      {
        "number" : 2325,
        "title" : "NoClassDefFoundError: zio/ZIO$Fail",
        "url" : "https://github.com/zio/zio-quill/issues/2325"
      },
      {
        "number" : 2277,
        "title" : "Translate method fails to translate SQL correctly when using a value containing a question mark on insert actions",
        "url" : "https://github.com/zio/zio-quill/issues/2277"
      },
      {
        "number" : 2275,
        "title" : "Calling querySchema on a CassandraContext stack overflows the typechecker",
        "url" : "https://github.com/zio/zio-quill/issues/2275"
      },
      {
        "number" : 2261,
        "title" : "Unable to manually close the cursor in finagle based streaming",
        "url" : "https://github.com/zio/zio-quill/issues/2261"
      },
      {
        "number" : 2259,
        "title" : "Support for DataStax Astra / Apollo Cloud db",
        "url" : "https://github.com/zio/zio-quill/issues/2259"
      },
      {
        "number" : 2254,
        "title" : "Jdbc context run action returning result is type as single value instead of list",
        "url" : "https://github.com/zio/zio-quill/issues/2254"
      },
      {
        "number" : 2249,
        "title" : "Exception during macro expansion with JDK 16 + onConflictUpdate",
        "url" : "https://github.com/zio/zio-quill/issues/2249"
      },
      {
        "number" : 2243,
        "title" : "`java.sql.SQLException: Connection is closed` after running multiple queries in parallel inside a transaction with Monix 3.1+",
        "url" : "https://github.com/zio/zio-quill/issues/2243"
      },
      {
        "number" : 2242,
        "title" : "Compilation error with SBT 1.5.x and Akka 2.6.16",
        "url" : "https://github.com/zio/zio-quill/issues/2242"
      },
      {
        "number" : 2229,
        "title" : "Table aliases aren't escaped if they're keywords",
        "url" : "https://github.com/zio/zio-quill/issues/2229"
      },
      {
        "number" : 2215,
        "title" : "Invalid query generation with nested classes",
        "url" : "https://github.com/zio/zio-quill/issues/2215"
      },
      {
        "number" : 2214,
        "title" : "CassandraSyncContext UDT doesn't support Option[List[String]]",
        "url" : "https://github.com/zio/zio-quill/issues/2214"
      },
      {
        "number" : 2212,
        "title" : "Mirror context missing in quill-cassandra-zio",
        "url" : "https://github.com/zio/zio-quill/issues/2212"
      },
      {
        "number" : 2210,
        "title" : "Creating a transaction in zio-jdbc-postgres drops the error type",
        "url" : "https://github.com/zio/zio-quill/issues/2210"
      },
      {
        "number" : 2206,
        "title" : "Cannot form nested join query, incorrect error rendered",
        "url" : "https://github.com/zio/zio-quill/issues/2206"
      },
      {
        "number" : 2204,
        "title" : "Generate Invalid query when try access to udt in Cassandra",
        "url" : "https://github.com/zio/zio-quill/issues/2204"
      },
      {
        "number" : 2195,
        "title" : "Quill Streaming for inserting data (i.e. COPY stdin with Postgres)?",
        "url" : "https://github.com/zio/zio-quill/issues/2195"
      },
      {
        "number" : 2189,
        "title" : "Replace homepage demonstration gif with example using VSCode + Metals",
        "url" : "https://github.com/zio/zio-quill/issues/2189"
      },
      {
        "number" : 2188,
        "title" : "Using scalafmt instead of scalariform?",
        "url" : "https://github.com/zio/zio-quill/issues/2188"
      },
      {
        "number" : 2181,
        "title" : "netty leak detected",
        "url" : "https://github.com/zio/zio-quill/issues/2181"
      },
      {
        "number" : 2180,
        "title" : "quill-cassandra-zio isn't published in maven repository",
        "url" : "https://github.com/zio/zio-quill/issues/2180"
      },
      {
        "number" : 2178,
        "title" : "InsertMeta makes quill-jdbc-zio generate invalid SQL",
        "url" : "https://github.com/zio/zio-quill/issues/2178"
      },
      {
        "number" : 2176,
        "title" : "Calling .getOrElse(0) on a .sum of a Long field in an embedded class fails",
        "url" : "https://github.com/zio/zio-quill/issues/2176"
      },
      {
        "number" : 2175,
        "title" : "Cross compile quill-sql module to support Scala 2.13/Scala.js v1.1.0+",
        "url" : "https://github.com/zio/zio-quill/issues/2175"
      },
      {
        "number" : 2157,
        "title" : "Missing aliases when combining groupby, nested, max and exists",
        "url" : "https://github.com/zio/zio-quill/issues/2157"
      },
      {
        "number" : 2152,
        "title" : "Conditional sorting direction",
        "url" : "https://github.com/zio/zio-quill/issues/2152"
      },
      {
        "number" : 2148,
        "title" : "doc has typo in code extra closing parens",
        "url" : "https://github.com/zio/zio-quill/issues/2148"
      },
      {
        "number" : 2124,
        "title" : "Invalid syntax",
        "url" : "https://github.com/zio/zio-quill/issues/2124"
      },
      {
        "number" : 2111,
        "title" : "scala.collection.immutable.$colon$colon cannot be cast to java.lang.Long",
        "url" : "https://github.com/zio/zio-quill/issues/2111"
      },
      {
        "number" : 2082,
        "title" : "Support for copy on case class",
        "url" : "https://github.com/zio/zio-quill/issues/2082"
      },
      {
        "number" : 2081,
        "title" : "Case class type Quoted[Seq[String]]{def quoted: io.getquill.ast.Infix; def ast: io.getquill.ast.Infix; def id1238208260(): Unit; val liftings: Object} has no values",
        "url" : "https://github.com/zio/zio-quill/issues/2081"
      },
      {
        "number" : 2067,
        "title" : "Changing case class apply method named parameters order breaks compilation",
        "url" : "https://github.com/zio/zio-quill/issues/2067"
      },
      {
        "number" : 2064,
        "title" : "LocalDateTime codecs flip Before Christ dates to the future",
        "url" : "https://github.com/zio/zio-quill/issues/2064"
      },
      {
        "number" : 2062,
        "title" : "macro expansion issue with 3.6.0",
        "url" : "https://github.com/zio/zio-quill/issues/2062"
      },
      {
        "number" : 2061,
        "title" : "Code generation in subquery does not translate table name correctly",
        "url" : "https://github.com/zio/zio-quill/issues/2061"
      },
      {
        "number" : 2060,
        "title" : "OracleDialect + NamingScheme does not work with subqueries",
        "url" : "https://github.com/zio/zio-quill/issues/2060"
      },
      {
        "number" : 2052,
        "title" : "Need to reverse order of null check and equality check when using == with Options",
        "url" : "https://github.com/zio/zio-quill/issues/2052"
      },
      {
        "number" : 2043,
        "title" : "Start using semantic versioning",
        "url" : "https://github.com/zio/zio-quill/issues/2043"
      },
      {
        "number" : 2042,
        "title" : "Unexpected compilation error when grouping by an infix function",
        "url" : "https://github.com/zio/zio-quill/issues/2042"
      },
      {
        "number" : 2036,
        "title" : "Using a type alias for naming strategy fails silently (but deadly)",
        "url" : "https://github.com/zio/zio-quill/issues/2036"
      },
      {
        "number" : 2033,
        "title" : "Feature Request: Google Cloud Spanner jdbc driver support",
        "url" : "https://github.com/zio/zio-quill/issues/2033"
      },
      {
        "number" : 2017,
        "title" : "Wront table aliases in onConflictUpdate",
        "url" : "https://github.com/zio/zio-quill/issues/2017"
      },
      {
        "number" : 2003,
        "title" : "Document quill.quat.tooManyFields and quat.quat.kryoPool",
        "url" : "https://github.com/zio/zio-quill/issues/2003"
      },
      {
        "number" : 1979,
        "title" : "Infix-based queries do not work with schema-meta",
        "url" : "https://github.com/zio/zio-quill/issues/1979"
      },
      {
        "number" : 1951,
        "title" : "Calling `size` on a query generated with infix causes stack overflow",
        "url" : "https://github.com/zio/zio-quill/issues/1951"
      },
      {
        "number" : 1947,
        "title" : "Client to provide type safe queries for scylla db using quill.",
        "url" : "https://github.com/zio/zio-quill/issues/1947"
      },
      {
        "number" : 1933,
        "title" : "Error on creating aggregate queries with more than one aggreagte",
        "url" : "https://github.com/zio/zio-quill/issues/1933"
      },
      {
        "number" : 1925,
        "title" : "NamingStrategy$ cannot be cast to NamingStrategy ",
        "url" : "https://github.com/zio/zio-quill/issues/1925"
      },
      {
        "number" : 1922,
        "title" : "`List[Int]` is returned when `List[Long]` should be decoded",
        "url" : "https://github.com/zio/zio-quill/issues/1922"
      },
      {
        "number" : 1907,
        "title" : "Embedded case classes don't correctly sqlize in onConflictUpdate",
        "url" : "https://github.com/zio/zio-quill/issues/1907"
      },
      {
        "number" : 1905,
        "title" : "Join + group by do not go well together",
        "url" : "https://github.com/zio/zio-quill/issues/1905"
      },
      {
        "number" : 1904,
        "title" : "Configuration key 'keyspace' is set to null but expected STRING",
        "url" : "https://github.com/zio/zio-quill/issues/1904"
      },
      {
        "number" : 1901,
        "title" : "jasync encapsulates exceptions with CompletionException",
        "url" : "https://github.com/zio/zio-quill/issues/1901"
      },
      {
        "number" : 1898,
        "title" : "`infix` as `Seq` broken in Finagle context",
        "url" : "https://github.com/zio/zio-quill/issues/1898"
      },
      {
        "number" : 1880,
        "title" : "Excessive casting required when using Quill with runtime dependency injection",
        "url" : "https://github.com/zio/zio-quill/issues/1880"
      },
      {
        "number" : 1869,
        "title" : "for comprehension with joins followed by a groupBy generates a subquery in SQL",
        "url" : "https://github.com/zio/zio-quill/issues/1869"
      },
      {
        "number" : 1862,
        "title" : "#42000 - Can't create more than max_prepared_stmt_count statements",
        "url" : "https://github.com/zio/zio-quill/issues/1862"
      },
      {
        "number" : 1861,
        "title" : "Cassandra ifCond doesn't work with Option columns",
        "url" : "https://github.com/zio/zio-quill/issues/1861"
      },
      {
        "number" : 1859,
        "title" : "Use pure Scala version of SQL formatter",
        "url" : "https://github.com/zio/zio-quill/issues/1859"
      },
      {
        "number" : 1857,
        "title" : "PostgreSQL syntax error reported",
        "url" : "https://github.com/zio/zio-quill/issues/1857"
      },
      {
        "number" : 1846,
        "title" : "Incorrect SQL created when a table joins multiple self-joined relation tables",
        "url" : "https://github.com/zio/zio-quill/issues/1846"
      },
      {
        "number" : 1843,
        "title" : "Incorrect SQL Expansion of Joined Query With Impure Infix",
        "url" : "https://github.com/zio/zio-quill/issues/1843"
      },
      {
        "number" : 1836,
        "title" : "Context missing createTable method",
        "url" : "https://github.com/zio/zio-quill/issues/1836"
      },
      {
        "number" : 1829,
        "title" : "Type ascription on dynamic inserts causes queries to fail in quill-cassandra",
        "url" : "https://github.com/zio/zio-quill/issues/1829"
      },
      {
        "number" : 1814,
        "title" : "Non obvious error message when return type doesn't match",
        "url" : "https://github.com/zio/zio-quill/issues/1814"
      },
      {
        "number" : 1792,
        "title" : "Contains (IN) doesn't work in a subquery",
        "url" : "https://github.com/zio/zio-quill/issues/1792"
      },
      {
        "number" : 1790,
        "title" : "for comprehension + groupBy + join generates wrong SQL ",
        "url" : "https://github.com/zio/zio-quill/issues/1790"
      },
      {
        "number" : 1789,
        "title" : "Quill generates incorrect sort orders when sorted on more than one column dynamically",
        "url" : "https://github.com/zio/zio-quill/issues/1789"
      },
      {
        "number" : 1785,
        "title" : "Quill Multi column sorting with different tables joined does not work",
        "url" : "https://github.com/zio/zio-quill/issues/1785"
      },
      {
        "number" : 1772,
        "title" : "Can't find implicit `Decoder[java.time.LocalTime]` ?",
        "url" : "https://github.com/zio/zio-quill/issues/1772"
      },
      {
        "number" : 1766,
        "title" : "Order by in Quill SQL produces Subquery",
        "url" : "https://github.com/zio/zio-quill/issues/1766"
      },
      {
        "number" : 1755,
        "title" : "Wrong query generated when filter contains a subquery",
        "url" : "https://github.com/zio/zio-quill/issues/1755"
      },
      {
        "number" : 1751,
        "title" : "ClassCastException casting ExecutionContext to Executor",
        "url" : "https://github.com/zio/zio-quill/issues/1751"
      },
      {
        "number" : 1744,
        "title" : "Object methods shall not be treated as fields in result definition",
        "url" : "https://github.com/zio/zio-quill/issues/1744"
      },
      {
        "number" : 1742,
        "title" : "UDT doesn't support Optional Collection Fields",
        "url" : "https://github.com/zio/zio-quill/issues/1742"
      },
      {
        "number" : 1736,
        "title" : "rightJoin(on: A => Boolean) declares the wrong side `Option`al",
        "url" : "https://github.com/zio/zio-quill/issues/1736"
      },
      {
        "number" : 1729,
        "title" : "CassandraSyncContext prevents app from exit",
        "url" : "https://github.com/zio/zio-quill/issues/1729"
      },
      {
        "number" : 1728,
        "title" : "Please publish codegen artifacts for Scala 2.13",
        "url" : "https://github.com/zio/zio-quill/issues/1728"
      },
      {
        "number" : 1727,
        "title" : "Please publish ndbc artifacts for Scala 2.13",
        "url" : "https://github.com/zio/zio-quill/issues/1727"
      },
      {
        "number" : 1722,
        "title" : "Not clear error message for left join",
        "url" : "https://github.com/zio/zio-quill/issues/1722"
      },
      {
        "number" : 1719,
        "title" : "Incorrect parsing when two level Option Embedded class",
        "url" : "https://github.com/zio/zio-quill/issues/1719"
      },
      {
        "number" : 1716,
        "title" : "Feature Request: make dynamic queries opt-in",
        "url" : "https://github.com/zio/zio-quill/issues/1716"
      },
      {
        "number" : 1710,
        "title" : "Reserved words like \"to\" should be aliased for PostrgeSQL ",
        "url" : "https://github.com/zio/zio-quill/issues/1710"
      },
      {
        "number" : 1705,
        "title" : "Monadic For-Comprehension Variable Shadowing Issue",
        "url" : "https://github.com/zio/zio-quill/issues/1705"
      },
      {
        "number" : 1694,
        "title" : "Add Named Placeholders for Query Printout",
        "url" : "https://github.com/zio/zio-quill/issues/1694"
      },
      {
        "number" : 1692,
        "title" : "Beta-Reduce Trivial Conditionals",
        "url" : "https://github.com/zio/zio-quill/issues/1692"
      },
      {
        "number" : 1691,
        "title" : "Support Option.orElse",
        "url" : "https://github.com/zio/zio-quill/issues/1691"
      },
      {
        "number" : 1690,
        "title" : "Consecutive Left Joins - The monad composition can't be expressed using applicative joins.",
        "url" : "https://github.com/zio/zio-quill/issues/1690"
      },
      {
        "number" : 1688,
        "title" : "Need Better Sematics for Encoders/Decoders",
        "url" : "https://github.com/zio/zio-quill/issues/1688"
      },
      {
        "number" : 1687,
        "title" : "Implement andThen for better function composition",
        "url" : "https://github.com/zio/zio-quill/issues/1687"
      },
      {
        "number" : 1686,
        "title" : "Invliad Reduction for Optional Booleans",
        "url" : "https://github.com/zio/zio-quill/issues/1686"
      },
      {
        "number" : 1684,
        "title" : "Use optional StringEnumEntry field in case class with Quill in Scala",
        "url" : "https://github.com/zio/zio-quill/issues/1684"
      },
      {
        "number" : 1680,
        "title" : "Is onConflictUpdate supports many properties updated one time?",
        "url" : "https://github.com/zio/zio-quill/issues/1680"
      },
      {
        "number" : 1678,
        "title" : "DynamicQueryDSL setOpt to support string property",
        "url" : "https://github.com/zio/zio-quill/issues/1678"
      },
      {
        "number" : 1674,
        "title" : "Need Better Error when Mapping to Spark non-toplevel class",
        "url" : "https://github.com/zio/zio-quill/issues/1674"
      },
      {
        "number" : 1665,
        "title" : "Including a BigDecimal field in a Udt can result in an IllegalArgumentException (Cassandra)",
        "url" : "https://github.com/zio/zio-quill/issues/1665"
      },
      {
        "number" : 1663,
        "title" : "Know whether it was an insert or update",
        "url" : "https://github.com/zio/zio-quill/issues/1663"
      },
      {
        "number" : 1661,
        "title" : "join + distinct + take causes compiler crash",
        "url" : "https://github.com/zio/zio-quill/issues/1661"
      },
      {
        "number" : 1656,
        "title" : "Invalid SQL in join when Nested after Query and Embedded is Used",
        "url" : "https://github.com/zio/zio-quill/issues/1656"
      },
      {
        "number" : 1655,
        "title" : "Query not properly normalized",
        "url" : "https://github.com/zio/zio-quill/issues/1655"
      },
      {
        "number" : 1645,
        "title" : "Travis Ivy Cache Crashes Release Build",
        "url" : "https://github.com/zio/zio-quill/issues/1645"
      },
      {
        "number" : 1640,
        "title" : "How to skip rows that failed to decode?  ",
        "url" : "https://github.com/zio/zio-quill/issues/1640"
      },
      {
        "number" : 1626,
        "title" : "Clarify Embedded-Object behavior with schemaMeta in Documentation",
        "url" : "https://github.com/zio/zio-quill/issues/1626"
      },
      {
        "number" : 1625,
        "title" : "Need to Warn about Embedded Entities do not Propogate Across Infixes",
        "url" : "https://github.com/zio/zio-quill/issues/1625"
      },
      {
        "number" : 1594,
        "title" : "offsetdatetime encoding decoding support",
        "url" : "https://github.com/zio/zio-quill/issues/1594"
      },
      {
        "number" : 1587,
        "title" : "Using returningGenerated with H2 and MysqlEscape fails at runtime",
        "url" : "https://github.com/zio/zio-quill/issues/1587"
      },
      {
        "number" : 1585,
        "title" : "Filtering on aggregation function in postgres",
        "url" : "https://github.com/zio/zio-quill/issues/1585"
      },
      {
        "number" : 1584,
        "title" : "Drop scala 2.11 support",
        "url" : "https://github.com/zio/zio-quill/issues/1584"
      },
      {
        "number" : 1575,
        "title" : "Document Dynamic Schema Pattern",
        "url" : "https://github.com/zio/zio-quill/issues/1575"
      },
      {
        "number" : 1574,
        "title" : "Document Doobie-Quill APIs",
        "url" : "https://github.com/zio/zio-quill/issues/1574"
      },
      {
        "number" : 1563,
        "title" : "NamingStategy column method should take a Table Name",
        "url" : "https://github.com/zio/zio-quill/issues/1563"
      },
      {
        "number" : 1561,
        "title" : "Naming Strategy Should not be used for Aliases",
        "url" : "https://github.com/zio/zio-quill/issues/1561"
      },
      {
        "number" : 1557,
        "title" : "if (liftQuery(set).isEmpty) doesn't work",
        "url" : "https://github.com/zio/zio-quill/issues/1557"
      },
      {
        "number" : 1554,
        "title" : "Concatonated Properties Should Look Nicer",
        "url" : "https://github.com/zio/zio-quill/issues/1554"
      },
      {
        "number" : 1551,
        "title" : "A `groupBy` clause must be followed by `map`",
        "url" : "https://github.com/zio/zio-quill/issues/1551"
      },
      {
        "number" : 1549,
        "title" : "Ast: '?'",
        "url" : "https://github.com/zio/zio-quill/issues/1549"
      },
      {
        "number" : 1547,
        "title" : "Infix Query Columns need to match object or error occurs",
        "url" : "https://github.com/zio/zio-quill/issues/1547"
      },
      {
        "number" : 1540,
        "title" : "Semantics for Distinct On",
        "url" : "https://github.com/zio/zio-quill/issues/1540"
      },
      {
        "number" : 1539,
        "title" : "Flat Join DSL in inconvenient for tuple destructuring",
        "url" : "https://github.com/zio/zio-quill/issues/1539"
      },
      {
        "number" : 1538,
        "title" : "Mixing Explicit and Implicit Flat Joins in Different Queries Yields ON-Clause Error",
        "url" : "https://github.com/zio/zio-quill/issues/1538"
      },
      {
        "number" : 1535,
        "title" : "lift in infix quote does not result in compilation error",
        "url" : "https://github.com/zio/zio-quill/issues/1535"
      },
      {
        "number" : 1529,
        "title" : "Optimize Outer Unions",
        "url" : "https://github.com/zio/zio-quill/issues/1529"
      },
      {
        "number" : 1522,
        "title" : "Document 'prepare' APIs in Cassandra Lagom Context",
        "url" : "https://github.com/zio/zio-quill/issues/1522"
      },
      {
        "number" : 1519,
        "title" : "Implement Query Preparation for Cassandra Lagom",
        "url" : "https://github.com/zio/zio-quill/issues/1519"
      },
      {
        "number" : 1518,
        "title" : "Return argument of  prepare with batch action does not type correctly ",
        "url" : "https://github.com/zio/zio-quill/issues/1518"
      },
      {
        "number" : 1516,
        "title" : "Document that insert and update metas can take multiple parameters",
        "url" : "https://github.com/zio/zio-quill/issues/1516"
      },
      {
        "number" : 1515,
        "title" : "Compile Failure when specifying insert meta with all the columns of an entity",
        "url" : "https://github.com/zio/zio-quill/issues/1515"
      },
      {
        "number" : 1498,
        "title" : "Add support for insertPartial",
        "url" : "https://github.com/zio/zio-quill/issues/1498"
      },
      {
        "number" : 1496,
        "title" : "Update H2 Returning to Support Multiple fields when next version of H2 is Released",
        "url" : "https://github.com/zio/zio-quill/issues/1496"
      },
      {
        "number" : 1488,
        "title" : "returning requires explicit parameter when in non quoted-blocks",
        "url" : "https://github.com/zio/zio-quill/issues/1488"
      },
      {
        "number" : 1458,
        "title" : "Support for basic joins when doing a batch update",
        "url" : "https://github.com/zio/zio-quill/issues/1458"
      },
      {
        "number" : 1429,
        "title" : "Cassandra infix query returning multiple values does not compile.",
        "url" : "https://github.com/zio/zio-quill/issues/1429"
      },
      {
        "number" : 1422,
        "title" : "NPE during macro expansion in runIO without ExecutionContext in scope",
        "url" : "https://github.com/zio/zio-quill/issues/1422"
      },
      {
        "number" : 1420,
        "title" : "PostgresAsyncContext doesn't handle nested transactions correctly",
        "url" : "https://github.com/zio/zio-quill/issues/1420"
      },
      {
        "number" : 1415,
        "title" : "Document Quill Athena/Presto",
        "url" : "https://github.com/zio/zio-quill/issues/1415"
      },
      {
        "number" : 1406,
        "title" : "Type Annotation in Implicit class breaks the Query",
        "url" : "https://github.com/zio/zio-quill/issues/1406"
      },
      {
        "number" : 1403,
        "title" : "H2 DB Exception on returning insert ID: Expected a single result but got List()",
        "url" : "https://github.com/zio/zio-quill/issues/1403"
      },
      {
        "number" : 1353,
        "title" : "Dynamic query using a runtime parameter fails after compilation with \"The monad composition can't be expressed using applicative joins\"",
        "url" : "https://github.com/zio/zio-quill/issues/1353"
      },
      {
        "number" : 1351,
        "title" : "Enhancement idea: Typeprovider, code-generation on-the-fly",
        "url" : "https://github.com/zio/zio-quill/issues/1351"
      },
      {
        "number" : 1337,
        "title" : "Can not add support for Cassandra functions ttl(), writetime() using infix",
        "url" : "https://github.com/zio/zio-quill/issues/1337"
      },
      {
        "number" : 1335,
        "title" : "Generated query not following case sentitive properties",
        "url" : "https://github.com/zio/zio-quill/issues/1335"
      },
      {
        "number" : 1323,
        "title" : "Invalid cassandra query",
        "url" : "https://github.com/zio/zio-quill/issues/1323"
      },
      {
        "number" : 1319,
        "title" : "Document a better Extensions/Multi-DB Pattern",
        "url" : "https://github.com/zio/zio-quill/issues/1319"
      },
      {
        "number" : 1308,
        "title" : "Type ascription to schemaMeta causes \"Batch actions must be static quotations.\"",
        "url" : "https://github.com/zio/zio-quill/issues/1308"
      },
      {
        "number" : 1301,
        "title" : "GetOrElse on Optional Tables works and returns ridiculous result",
        "url" : "https://github.com/zio/zio-quill/issues/1301"
      },
      {
        "number" : 1296,
        "title" : "Using Dynamic Query, Processing Quoted Blocks in a List should work",
        "url" : "https://github.com/zio/zio-quill/issues/1296"
      },
      {
        "number" : 1290,
        "title" : "Error when using `json` field type with mysql",
        "url" : "https://github.com/zio/zio-quill/issues/1290"
      },
      {
        "number" : 1288,
        "title" : "infix doesn't works when want concatenate a String to query",
        "url" : "https://github.com/zio/zio-quill/issues/1288"
      },
      {
        "number" : 1283,
        "title" : "value in scope named io breaks the compilation",
        "url" : "https://github.com/zio/zio-quill/issues/1283"
      },
      {
        "number" : 1277,
        "title" : "Some list equal assertions in test case are not stable",
        "url" : "https://github.com/zio/zio-quill/issues/1277"
      },
      {
        "number" : 1276,
        "title" : "Review documentation approach",
        "url" : "https://github.com/zio/zio-quill/issues/1276"
      },
      {
        "number" : 1272,
        "title" : "Support a Generic JDBC Context",
        "url" : "https://github.com/zio/zio-quill/issues/1272"
      },
      {
        "number" : 1271,
        "title" : "Change Default String Concatonation to CONCAT",
        "url" : "https://github.com/zio/zio-quill/issues/1271"
      },
      {
        "number" : 1269,
        "title" : "Batch Return Does not work with SQL Server",
        "url" : "https://github.com/zio/zio-quill/issues/1269"
      },
      {
        "number" : 1267,
        "title" : "Unclear \"Can't find an implicit `InsertMeta`\" error",
        "url" : "https://github.com/zio/zio-quill/issues/1267"
      },
      {
        "number" : 1255,
        "title" : "Provide ability to log compile time queries to a file instead of STDOUT",
        "url" : "https://github.com/zio/zio-quill/issues/1255"
      },
      {
        "number" : 1251,
        "title" : "Batch insert using finagle-postgres is not working properly",
        "url" : "https://github.com/zio/zio-quill/issues/1251"
      },
      {
        "number" : 1217,
        "title" : "Querying the same table multiple times breaks dealising and causes absurd query",
        "url" : "https://github.com/zio/zio-quill/issues/1217"
      },
      {
        "number" : 1194,
        "title" : "Automatic Conversions for Numeric Types are propogated Appear to Queries",
        "url" : "https://github.com/zio/zio-quill/issues/1194"
      },
      {
        "number" : 1180,
        "title" : "Embedded databases",
        "url" : "https://github.com/zio/zio-quill/issues/1180"
      },
      {
        "number" : 1178,
        "title" : "Drop support for mauricio/postgreasync",
        "url" : "https://github.com/zio/zio-quill/issues/1178"
      },
      {
        "number" : 1153,
        "title" : "Alias conflict in for-comp with sortBy",
        "url" : "https://github.com/zio/zio-quill/issues/1153"
      },
      {
        "number" : 1147,
        "title" : "Support for fold in join",
        "url" : "https://github.com/zio/zio-quill/issues/1147"
      },
      {
        "number" : 1145,
        "title" : "Compilation error for `contains` + `leftJoin`",
        "url" : "https://github.com/zio/zio-quill/issues/1145"
      },
      {
        "number" : 1139,
        "title" : "No convenient way to roll back a transaction?",
        "url" : "https://github.com/zio/zio-quill/issues/1139"
      },
      {
        "number" : 1137,
        "title" : "Quill nested transactions in SQLite aren't properly nested",
        "url" : "https://github.com/zio/zio-quill/issues/1137"
      },
      {
        "number" : 1130,
        "title" : "`querySchema` is not invariant under renaming",
        "url" : "https://github.com/zio/zio-quill/issues/1130"
      },
      {
        "number" : 1123,
        "title" : "Add array support for FinaglePostgresContext",
        "url" : "https://github.com/zio/zio-quill/issues/1123"
      },
      {
        "number" : 1120,
        "title" : "Add compilation error when defining partial insert outside of quote",
        "url" : "https://github.com/zio/zio-quill/issues/1120"
      },
      {
        "number" : 1109,
        "title" : "Joining a query with inner join + groupBy results in error",
        "url" : "https://github.com/zio/zio-quill/issues/1109"
      },
      {
        "number" : 1108,
        "title" : "Add note to docs to not specify returning type of infix queries in implicit classes",
        "url" : "https://github.com/zio/zio-quill/issues/1108"
      },
      {
        "number" : 1105,
        "title" : "Add error message when type of `insertMeta` is explicitly set",
        "url" : "https://github.com/zio/zio-quill/issues/1105"
      },
      {
        "number" : 1095,
        "title" : "Impossible to implement postgresql operators which contain `?`",
        "url" : "https://github.com/zio/zio-quill/issues/1095"
      },
      {
        "number" : 1092,
        "title" : "Emdedded object in GROUP BY produces wrong query",
        "url" : "https://github.com/zio/zio-quill/issues/1092"
      },
      {
        "number" : 1090,
        "title" : "Add support of multiple aggregating functions in single query",
        "url" : "https://github.com/zio/zio-quill/issues/1090"
      },
      {
        "number" : 1085,
        "title" : "No Support for Insert from Query",
        "url" : "https://github.com/zio/zio-quill/issues/1085"
      },
      {
        "number" : 1052,
        "title" : "add string constructor to SqliteJdbcContext",
        "url" : "https://github.com/zio/zio-quill/issues/1052"
      },
      {
        "number" : 1040,
        "title" : "PluralizedTableNames doesn't follow English pluralization rules",
        "url" : "https://github.com/zio/zio-quill/issues/1040"
      },
      {
        "number" : 1036,
        "title" : "groupBy fails to aggregate Options",
        "url" : "https://github.com/zio/zio-quill/issues/1036"
      },
      {
        "number" : 1031,
        "title" : "Decouple identifier escaping from NamingStrategy",
        "url" : "https://github.com/zio/zio-quill/issues/1031"
      },
      {
        "number" : 1028,
        "title" : "Problem with encoders auto-derivation",
        "url" : "https://github.com/zio/zio-quill/issues/1028"
      },
      {
        "number" : 1027,
        "title" : "Type of missing decoder of UDT filed is not specified in error message",
        "url" : "https://github.com/zio/zio-quill/issues/1027"
      },
      {
        "number" : 1017,
        "title" : "Document `exectue*` methods on contexts",
        "url" : "https://github.com/zio/zio-quill/issues/1017"
      },
      {
        "number" : 1012,
        "title" : "Cryptic \"monad composition\" error when calling \"contains()\" on a joined query",
        "url" : "https://github.com/zio/zio-quill/issues/1012"
      },
      {
        "number" : 1006,
        "title" : "Custom group by",
        "url" : "https://github.com/zio/zio-quill/issues/1006"
      },
      {
        "number" : 991,
        "title" : "Not obvious error message when lifting runtime values within function",
        "url" : "https://github.com/zio/zio-quill/issues/991"
      },
      {
        "number" : 990,
        "title" : "Quill should label Option#get Query error as Quill",
        "url" : "https://github.com/zio/zio-quill/issues/990"
      },
      {
        "number" : 989,
        "title" : "Lifting a Value that Should Not be Lifted Should Produce a Reasonable Error",
        "url" : "https://github.com/zio/zio-quill/issues/989"
      },
      {
        "number" : 988,
        "title" : "quill-cassandra: inserts with options create tombstones",
        "url" : "https://github.com/zio/zio-quill/issues/988"
      },
      {
        "number" : 974,
        "title" : "if/else statement inside quote is compiled to invalid query",
        "url" : "https://github.com/zio/zio-quill/issues/974"
      },
      {
        "number" : 971,
        "title" : "Support for querying multiple databases via Idiom tracking",
        "url" : "https://github.com/zio/zio-quill/issues/971"
      },
      {
        "number" : 970,
        "title" : "Embed scastie on the website",
        "url" : "https://github.com/zio/zio-quill/issues/970"
      },
      {
        "number" : 966,
        "title" : "Support for recursive queries",
        "url" : "https://github.com/zio/zio-quill/issues/966"
      },
      {
        "number" : 960,
        "title" : "[quill-spark] reintroduce SQL verification",
        "url" : "https://github.com/zio/zio-quill/issues/960"
      },
      {
        "number" : 935,
        "title" : "Cannot automatically unquote quotations inside map",
        "url" : "https://github.com/zio/zio-quill/issues/935"
      },
      {
        "number" : 901,
        "title" : "Union on liftQuery not properly normalized",
        "url" : "https://github.com/zio/zio-quill/issues/901"
      },
      {
        "number" : 870,
        "title" : "Enhance error message of failed decoders/encoders",
        "url" : "https://github.com/zio/zio-quill/issues/870"
      },
      {
        "number" : 868,
        "title" : "Query compilation tests using Cosette",
        "url" : "https://github.com/zio/zio-quill/issues/868"
      },
      {
        "number" : 857,
        "title" : "Couldn't compile insert query for cassandra when simultaneously `usingTtl` and `ifNotExists` options are specified. ",
        "url" : "https://github.com/zio/zio-quill/issues/857"
      },
      {
        "number" : 843,
        "title" : "Parse HOCON time values in configuration",
        "url" : "https://github.com/zio/zio-quill/issues/843"
      },
      {
        "number" : 802,
        "title" : "Replace MappedEncoding examples in readme",
        "url" : "https://github.com/zio/zio-quill/issues/802"
      },
      {
        "number" : 790,
        "title" : "Calling procedure using infix not working.",
        "url" : "https://github.com/zio/zio-quill/issues/790"
      },
      {
        "number" : 774,
        "title" : "Support Cassandra operations on collections",
        "url" : "https://github.com/zio/zio-quill/issues/774"
      },
      {
        "number" : 762,
        "title" : "Code that compiles with SBT should also pass the Presentation Compiler.",
        "url" : "https://github.com/zio/zio-quill/issues/762"
      },
      {
        "number" : 747,
        "title" : "quill-finagle-mysql: wrong batch insert action behaviour",
        "url" : "https://github.com/zio/zio-quill/issues/747"
      },
      {
        "number" : 742,
        "title" : "Don't publish aggregator project",
        "url" : "https://github.com/zio/zio-quill/issues/742"
      },
      {
        "number" : 687,
        "title" : "How can I use mysql's \"replace into\"",
        "url" : "https://github.com/zio/zio-quill/issues/687"
      },
      {
        "number" : 686,
        "title" : "Failed conditional updates in Cassandra should return the conflicting value",
        "url" : "https://github.com/zio/zio-quill/issues/686"
      },
      {
        "number" : 677,
        "title" : "Provide comparison operators for supported data types",
        "url" : "https://github.com/zio/zio-quill/issues/677"
      },
      {
        "number" : 673,
        "title" : "Alias infix to avoid duplication.",
        "url" : "https://github.com/zio/zio-quill/issues/673"
      },
      {
        "number" : 664,
        "title" : "Missing tests for java.time.LocalDateTime encoders and decoders",
        "url" : "https://github.com/zio/zio-quill/issues/664"
      },
      {
        "number" : 651,
        "title" : "Filter with check against list of tuples",
        "url" : "https://github.com/zio/zio-quill/issues/651"
      },
      {
        "number" : 645,
        "title" : "Execution time logging",
        "url" : "https://github.com/zio/zio-quill/issues/645"
      },
      {
        "number" : 602,
        "title" : "JOIN query nesting on DISTINCT clause",
        "url" : "https://github.com/zio/zio-quill/issues/602"
      },
      {
        "number" : 593,
        "title" : "Meta allow updates for case classes that are different than the query case class",
        "url" : "https://github.com/zio/zio-quill/issues/593"
      },
      {
        "number" : 564,
        "title" : "Add a \"currently using\" section to README",
        "url" : "https://github.com/zio/zio-quill/issues/564"
      },
      {
        "number" : 559,
        "title" : "Failing db decoder should list column name that can't be decoded",
        "url" : "https://github.com/zio/zio-quill/issues/559"
      },
      {
        "number" : 535,
        "title" : "Decoders for custom types can potentially throw NPE",
        "url" : "https://github.com/zio/zio-quill/issues/535"
      },
      {
        "number" : 514,
        "title" : "Pattern matching of Option is not supported inside quotation",
        "url" : "https://github.com/zio/zio-quill/issues/514"
      },
      {
        "number" : 484,
        "title" : "Support enums",
        "url" : "https://github.com/zio/zio-quill/issues/484"
      },
      {
        "number" : 478,
        "title" : "Better error message for lift in parameterized query",
        "url" : "https://github.com/zio/zio-quill/issues/478"
      },
      {
        "number" : 471,
        "title" : "Simplify `Liftables` and `Unliftables`",
        "url" : "https://github.com/zio/zio-quill/issues/471"
      },
      {
        "number" : 462,
        "title" : "Blog",
        "url" : "https://github.com/zio/zio-quill/issues/462"
      },
      {
        "number" : 456,
        "title" : "new `quill-nodejs` module",
        "url" : "https://github.com/zio/zio-quill/issues/456"
      },
      {
        "number" : 379,
        "title" : "multi-target sources",
        "url" : "https://github.com/zio/zio-quill/issues/379"
      },
      {
        "number" : 377,
        "title" : "JDBC Types.OTHER should be easier to use",
        "url" : "https://github.com/zio/zio-quill/issues/377"
      },
      {
        "number" : 368,
        "title" : "Test compilation time",
        "url" : "https://github.com/zio/zio-quill/issues/368"
      },
      {
        "number" : 313,
        "title" : "quill-cassandra: allow BatchStatement for (selected) batch executions",
        "url" : "https://github.com/zio/zio-quill/issues/313"
      },
      {
        "number" : 312,
        "title" : "quill: domain field constructed from multiple column values",
        "url" : "https://github.com/zio/zio-quill/issues/312"
      },
      {
        "number" : 310,
        "title" : "quill-cassandra - support pagination based on paging state",
        "url" : "https://github.com/zio/zio-quill/issues/310"
      },
      {
        "number" : 265,
        "title" : "Code generator to generate classes from db schema",
        "url" : "https://github.com/zio/zio-quill/issues/265"
      },
      {
        "number" : 245,
        "title" : "Create DSL for schema and database/keyspace creation",
        "url" : "https://github.com/zio/zio-quill/issues/245"
      },
      {
        "number" : 235,
        "title" : "document Quill's internals",
        "url" : "https://github.com/zio/zio-quill/issues/235"
      },
      {
        "number" : 224,
        "title" : "Intellij Plugin to add Quill support",
        "url" : "https://github.com/zio/zio-quill/issues/224"
      },
      {
        "number" : 191,
        "title" : "Add unit testing covering Unliftables",
        "url" : "https://github.com/zio/zio-quill/issues/191"
      },
      {
        "number" : 178,
        "title" : "Feature: Return Scala Records if querying partial results",
        "url" : "https://github.com/zio/zio-quill/issues/178"
      },
      {
        "number" : 133,
        "title" : "quill-cassandra: easily switch between source types",
        "url" : "https://github.com/zio/zio-quill/issues/133"
      },
      {
        "number" : 132,
        "title" : "quill-cassandra: custom per-query consistency level",
        "url" : "https://github.com/zio/zio-quill/issues/132"
      },
      {
        "number" : 130,
        "title" : "Neo4j/Cypher Integration",
        "url" : "https://github.com/zio/zio-quill/issues/130"
      },
      {
        "number" : 108,
        "title" : "quill-play",
        "url" : "https://github.com/zio/zio-quill/issues/108"
      },
      {
        "number" : 79,
        "title" : "support GROUP BY HAVING",
        "url" : "https://github.com/zio/zio-quill/issues/79"
      },
      {
        "number" : 76,
        "title" : "Enable customizable quotation of common methods like String#startsWith",
        "url" : "https://github.com/zio/zio-quill/issues/76"
      },
      {
        "number" : 42,
        "title" : "Comprehensive and actionable error messages",
        "url" : "https://github.com/zio/zio-quill/issues/42"
      },
      {
        "number" : 41,
        "title" : "Microbenchmark ",
        "url" : "https://github.com/zio/zio-quill/issues/41"
      },
      {
        "number" : 39,
        "title" : "TPC-H benchmark",
        "url" : "https://github.com/zio/zio-quill/issues/39"
      },
      {
        "number" : 36,
        "title" : "Hsql dialect",
        "url" : "https://github.com/zio/zio-quill/issues/36"
      },
      {
        "number" : 30,
        "title" : "Easy CRUD",
        "url" : "https://github.com/zio/zio-quill/issues/30"
      },
      {
        "number" : 29,
        "title" : "Transaction isolations for sql modules",
        "url" : "https://github.com/zio/zio-quill/issues/29"
      },
      {
        "number" : 27,
        "title" : "In-memory collections support",
        "url" : "https://github.com/zio/zio-quill/issues/27"
      },
      {
        "number" : 26,
        "title" : "Migrations",
        "url" : "https://github.com/zio/zio-quill/issues/26"
      },
      {
        "number" : 20,
        "title" : "Additional random-generated query tests",
        "url" : "https://github.com/zio/zio-quill/issues/20"
      },
      {
        "number" : 19,
        "title" : "GraphQL support",
        "url" : "https://github.com/zio/zio-quill/issues/19"
      },
      {
        "number" : 17,
        "title" : "sql probing warnings",
        "url" : "https://github.com/zio/zio-quill/issues/17"
      },
      {
        "number" : 7,
        "title" : "MongoDB integration",
        "url" : "https://github.com/zio/zio-quill/issues/7"
      }
    ],
    "scalaPercentage" : 99,
    "license" : "Apache-2.0",
    "commitActivity" : [
      {
        "total" : 1,
        "week" : 1629590400000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1630195200000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          2,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1630800000000,
        "days" : [
          1,
          0,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632009600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1632614400000,
        "days" : [
          0,
          0,
          0,
          0,
          3,
          0,
          0
        ]
      },
      {
        "total" : 8,
        "week" : 1633219200000,
        "days" : [
          1,
          0,
          0,
          2,
          2,
          3,
          0
        ]
      },
      {
        "total" : 13,
        "week" : 1633824000000,
        "days" : [
          3,
          6,
          0,
          4,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1634428800000,
        "days" : [
          0,
          0,
          0,
          3,
          0,
          0,
          3
        ]
      },
      {
        "total" : 1,
        "week" : 1635033600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 6,
        "week" : 1635638400000,
        "days" : [
          5,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1636243200000,
        "days" : [
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 11,
        "week" : 1636848000000,
        "days" : [
          0,
          4,
          0,
          3,
          1,
          3,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1637452800000,
        "days" : [
          3,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1638662400000,
        "days" : [
          1,
          5,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1639872000000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1640476800000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1641081600000,
        "days" : [
          3,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 8,
        "week" : 1641686400000,
        "days" : [
          0,
          1,
          0,
          0,
          5,
          2,
          0
        ]
      },
      {
        "total" : 15,
        "week" : 1642291200000,
        "days" : [
          1,
          0,
          1,
          8,
          0,
          2,
          3
        ]
      },
      {
        "total" : 19,
        "week" : 1642896000000,
        "days" : [
          1,
          2,
          8,
          4,
          0,
          4,
          0
        ]
      },
      {
        "total" : 7,
        "week" : 1643500800000,
        "days" : [
          1,
          0,
          0,
          0,
          2,
          3,
          1
        ]
      },
      {
        "total" : 9,
        "week" : 1644105600000,
        "days" : [
          3,
          1,
          1,
          1,
          3,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 9,
        "week" : 1645315200000,
        "days" : [
          5,
          3,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1645920000000,
        "days" : [
          0,
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1646524800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1647734400000,
        "days" : [
          0,
          0,
          6,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648339200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1648944000000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1649548800000,
        "days" : [
          2,
          0,
          0,
          0,
          2,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650758400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 8,
        "week" : 1651363200000,
        "days" : [
          4,
          1,
          3,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 11,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          4,
          6,
          1,
          0
        ]
      },
      {
        "total" : 5,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          1,
          2,
          2,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654387200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1654992000000,
        "days" : [
          1,
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1655596800000,
        "days" : [
          0,
          0,
          4,
          2,
          0,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1656201600000,
        "days" : [
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1656806400000,
        "days" : [
          0,
          0,
          1,
          0,
          4,
          1,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1657411200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1658016000000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 12,
        "week" : 1658620800000,
        "days" : [
          1,
          1,
          0,
          4,
          2,
          4,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1659225600000,
        "days" : [
          0,
          1,
          1,
          0,
          3,
          1,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1659830400000,
        "days" : [
          0,
          1,
          0,
          5,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1660435200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : false,
    "defaultArtifact" : "quill",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : true,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "databases",
    "beginnerIssuesLabel" : "easy"
  }
}