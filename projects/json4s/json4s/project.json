{
  "organization" : "json4s",
  "repository" : "json4s",
  "creationDate" : 1356824032000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660791140687
    }
  },
  "githubInfo" : {
    "homepage" : "http://json4s.org",
    "description" : "JSON library",
    "logo" : "https://avatars.githubusercontent.com/u/2207799?v=4",
    "stars" : 1423,
    "forks" : 346,
    "watchers" : 67,
    "issues" : 146,
    "creationDate" : 1345763926000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-json4s-\" class=\"anchor\" aria-hidden=\"true\" href=\"#json4s-\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>JSON4S <a href=\"https://search.maven.org/search?q=g:org.json4s%20AND%20a:json4s-core_2.12\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/f685300b169156094b0b92e7984461928b12a9f3414aebd77e482547c0972f80/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f6f72672e6a736f6e34732f6a736f6e34732d636f72655f322e31322e7376673f6c6162656c3d4d6176656e25323043656e7472616c\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/org.json4s/json4s-core_2.12.svg?label=Maven%20Central\" style=\"max-width: 100%;\"></a></h1>\n<p dir=\"auto\"><a href=\"https://gitter.im/json4s/json4s?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/json4s/json4s\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">At this moment there are at least 6 json libraries for scala, not counting the java json libraries.\nAll these libraries have a very similar AST. This project aims to provide a single AST to be used by other scala\njson libraries.</p>\n<p dir=\"auto\">At this moment the approach taken to working with the AST has been taken from lift-json and the native package\nis in fact lift-json but outside of the lift project.</p>\n<h2 dir=\"auto\"><a id=\"user-content-lift-json\" class=\"anchor\" aria-hidden=\"true\" href=\"#lift-json\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Lift JSON</h2>\n<p dir=\"auto\">This project also attempts to set lift-json free from the release schedule imposed by the lift framework.\nThe Lift framework carries many dependencies and as such it's typically a blocker for many other scala projects when\na new version of scala is released.</p>\n<p dir=\"auto\">So the native package in this library is in fact verbatim lift-json in a different package name; this means that\nyour import statements will change if you use this library.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.json4s._\nimport org.json4s.native.JsonMethods._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">After that everything works exactly the same as it would with lift-json</p>\n<h2 dir=\"auto\"><a id=\"user-content-jackson\" class=\"anchor\" aria-hidden=\"true\" href=\"#jackson\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Jackson</h2>\n<p dir=\"auto\">In addition to the native parser there is also an implementation that uses jackson for parsing to the AST.\nThe jackson module includes most of the jackson-module-scala functionality and the ability to use it with the\nlift-json AST.</p>\n<p dir=\"auto\">To use jackson instead of the native parser:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.json4s._\nimport org.json4s.jackson.JsonMethods._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Be aware that the default behavior of the jackson integration is to close the stream when it's done.\nIf you want to change that:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.databind.SerializationFeature\norg.json4s.jackson.JsonMethods.mapper.configure(SerializationFeature.CLOSE_CLOSEABLE, false)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">fasterxml</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">databind</span>.<span class=\"pl-en\">SerializationFeature</span>\norg.json4s.jackson.<span class=\"pl-en\">JsonMethods</span>.mapper.configure(<span class=\"pl-en\">SerializationFeature</span>.<span class=\"pl-en\">CLOSE_CLOSEABLE</span>, <span class=\"pl-c1\">false</span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-guide\" class=\"anchor\" aria-hidden=\"true\" href=\"#guide\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Guide</h2>\n<p dir=\"auto\">Parsing and formatting utilities for JSON.</p>\n<p dir=\"auto\">A central concept in lift-json library is Json AST which models the structure of\na JSON document as a syntax tree.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed abstract class JValue\ncase object JNothing extends JValue // 'zero' for JValue\ncase object JNull extends JValue\ncase class JString(s: String) extends JValue\ncase class JDouble(num: Double) extends JValue\ncase class JDecimal(num: BigDecimal) extends JValue\ncase class JInt(num: BigInt) extends JValue\ncase class JLong(num: Long) extends JValue\ncase class JBool(value: Boolean) extends JValue\ncase class JObject(obj: List[JField]) extends JValue\ncase class JArray(arr: List[JValue]) extends JValue\n\ntype JField = (String, JValue)\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">JNothing</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'zero' for JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">object</span> <span class=\"pl-en\">JNull</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JString</span>(<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JDouble</span>(<span class=\"pl-v\">num</span>: <span class=\"pl-en\">Double</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JDecimal</span>(<span class=\"pl-v\">num</span>: <span class=\"pl-en\">BigDecimal</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JInt</span>(<span class=\"pl-v\">num</span>: <span class=\"pl-en\">BigInt</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JLong</span>(<span class=\"pl-v\">num</span>: <span class=\"pl-en\">Long</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JBool</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Boolean</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-v\">obj</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">JField</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">JArray</span>(<span class=\"pl-v\">arr</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">JValue</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">JValue</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">JField</span> <span class=\"pl-k\">=</span> (<span class=\"pl-en\">String</span>, <span class=\"pl-en\">JValue</span>)</pre></div>\n<p dir=\"auto\">All features are implemented in terms of the above AST. Functions are used to transform\nthe AST itself, or to transform the AST between different formats. Common transformations\nare summarized in a following picture.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/b260eb0ead22fa472393c55f2c486893841988cff397fafe082eaf507eceb0ea/68747470733a2f2f7261772e6769746875622e636f6d2f6a736f6e34732f6a736f6e34732f6d61737465722f636f72652f6a736f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/b260eb0ead22fa472393c55f2c486893841988cff397fafe082eaf507eceb0ea/68747470733a2f2f7261772e6769746875622e636f6d2f6a736f6e34732f6a736f6e34732f6d61737465722f636f72652f6a736f6e2e706e67\" alt=\"Json AST\" data-canonical-src=\"https://raw.github.com/json4s/json4s/master/core/json.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Summary of the features:</p>\n<ul dir=\"auto\">\n<li>Fast JSON parser</li>\n<li>LINQ-style queries</li>\n<li>Case classes can be used to extract values from parsed JSON</li>\n<li>Diff &amp; merge</li>\n<li>DSL to produce valid JSON</li>\n<li>XPath-like expressions and HOFs to manipulate JSON</li>\n<li>Pretty and compact printing</li>\n<li>XML conversions</li>\n<li>Serialization</li>\n<li>Low-level pull parser API</li>\n</ul>\n<h1 dir=\"auto\"><a id=\"user-content-installation\" class=\"anchor\" aria-hidden=\"true\" href=\"#installation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Installation</h1>\n<p dir=\"auto\">You can add the json4s as a dependency in following ways. Note, replace {latestVersion} with correct Json4s version.</p>\n<p dir=\"auto\">You can find available versions here:</p>\n<p dir=\"auto\"><a href=\"https://search.maven.org/search?q=org.json4s\" rel=\"nofollow\">https://search.maven.org/search?q=org.json4s</a></p>\n<h3 dir=\"auto\"><a id=\"user-content-sbt-users\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-users\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SBT users</h3>\n<p dir=\"auto\">For the native support add the following dependency to your project description:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val json4sNative = &quot;org.json4s&quot; %% &quot;json4s-native&quot; % &quot;{latestVersion}&quot;\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">json4sNative</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.json4s<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>json4s-native<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{latestVersion}<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">For the Jackson support add the following dependency to your project description:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val json4sJackson = &quot;org.json4s&quot; %% &quot;json4s-jackson&quot; % &quot;{latestVersion}&quot;\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">json4sJackson</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.json4s<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>json4s-jackson<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{latestVersion}<span class=\"pl-pds\">\"</span></span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-maven-users\" class=\"anchor\" aria-hidden=\"true\" href=\"#maven-users\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Maven users</h3>\n<p dir=\"auto\">For the native support add the following dependency to your pom:</p>\n<div class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;dependency&gt;\n  &lt;groupId&gt;org.json4s&lt;/groupId&gt;\n  &lt;artifactId&gt;json4s-native_${scala.version}&lt;/artifactId&gt;\n  &lt;version&gt;{latestVersion}&lt;/version&gt;\n&lt;/dependency&gt;\"><pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n  &lt;<span class=\"pl-ent\">groupId</span>&gt;org.json4s&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n  &lt;<span class=\"pl-ent\">artifactId</span>&gt;json4s-native_${scala.version}&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n  &lt;<span class=\"pl-ent\">version</span>&gt;{latestVersion}&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\">For the jackson support add the following dependency to your pom:</p>\n<div class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;dependency&gt;\n  &lt;groupId&gt;org.json4s&lt;/groupId&gt;\n  &lt;artifactId&gt;json4s-jackson_${scala.version}&lt;/artifactId&gt;\n  &lt;version&gt;{latestVersion}&lt;/version&gt;\n&lt;/dependency&gt;\"><pre>&lt;<span class=\"pl-ent\">dependency</span>&gt;\n  &lt;<span class=\"pl-ent\">groupId</span>&gt;org.json4s&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n  &lt;<span class=\"pl-ent\">artifactId</span>&gt;json4s-jackson_${scala.version}&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n  &lt;<span class=\"pl-ent\">version</span>&gt;{latestVersion}&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-extras\" class=\"anchor\" aria-hidden=\"true\" href=\"#extras\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Extras</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/json4s/json4s/tree/master/ext\">ext</a></li>\n</ul>\n<p dir=\"auto\">Support for Enum, Joda-Time, Java 8 Date &amp; Time...</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/json4s/json4s/tree/master/scalaz\">scalaz</a></li>\n</ul>\n<p dir=\"auto\">Applicative style parsing with Scalaz</p>\n<h1 dir=\"auto\"><a id=\"user-content-parsing-json\" class=\"anchor\" aria-hidden=\"true\" href=\"#parsing-json\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Parsing JSON</h1>\n<p dir=\"auto\">Any valid json can be parsed into internal AST format.\nFor native support:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.native.JsonMethods._\n\nscala&gt; parse(&quot;&quot;&quot; { &quot;numbers&quot; : [1, 2, 3, 4] } &quot;&quot;&quot;)\nres0: org.json4s.JValue =\n      JObject(List((numbers,JArray(List(JInt(1), JInt(2), JInt(3), JInt(4))))))\n\nscala&gt; parse(&quot;&quot;&quot;{&quot;name&quot;:&quot;Toy&quot;,&quot;price&quot;:35.35}&quot;&quot;&quot;, useBigDecimalForDouble = true)\nres1: org.json4s.JValue =\n      JObject(List((name,JString(Toy)), (price,JDecimal(35.35))))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span> { \"numbers\" : [1, 2, 3, 4] } <span class=\"pl-pds\">\"\"\"</span></span>)\nres0<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span>\n      <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((numbers,<span class=\"pl-en\">JArray</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">1</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">2</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">3</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">4</span>))))))\n\nscala<span class=\"pl-k\">&gt;</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>{\"name\":\"Toy\",\"price\":35.35}<span class=\"pl-pds\">\"\"\"</span></span>, useBigDecimalForDouble <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>)\nres1<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span>\n      <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Toy</span>)), (price,<span class=\"pl-en\">JDecimal</span>(<span class=\"pl-c1\">35.35</span>))))</pre></div>\n<p dir=\"auto\">For jackson support:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.jackson.JsonMethods._\n\nscala&gt; parse(&quot;&quot;&quot; { &quot;numbers&quot; : [1, 2, 3, 4] } &quot;&quot;&quot;)\nres0: org.json4s.JValue =\n      JObject(List((numbers,JArray(List(JInt(1), JInt(2), JInt(3), JInt(4))))))\n\nscala&gt; parse(&quot;&quot;&quot;{&quot;name&quot;:&quot;Toy&quot;,&quot;price&quot;:35.35}&quot;&quot;&quot;, useBigDecimalForDouble = true)\nres1: org.json4s.JValue =\n      JObject(List((name,JString(Toy)), (price,JDecimal(35.35))))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span> { \"numbers\" : [1, 2, 3, 4] } <span class=\"pl-pds\">\"\"\"</span></span>)\nres0<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span>\n      <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((numbers,<span class=\"pl-en\">JArray</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">1</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">2</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">3</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">4</span>))))))\n\nscala<span class=\"pl-k\">&gt;</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>{\"name\":\"Toy\",\"price\":35.35}<span class=\"pl-pds\">\"\"\"</span></span>, useBigDecimalForDouble <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>)\nres1<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span>\n      <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Toy</span>)), (price,<span class=\"pl-en\">JDecimal</span>(<span class=\"pl-c1\">35.35</span>))))</pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-producing-json\" class=\"anchor\" aria-hidden=\"true\" href=\"#producing-json\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Producing JSON</h1>\n<p dir=\"auto\">You can generate json in 2 modes: either in <code>DoubleMode</code> or in <code>BigDecimalMode</code>; the former will map all decimal values\ninto JDoubles, and the latter into JDecimals.</p>\n<p dir=\"auto\">For the double mode dsl use:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.json4s.JsonDSL._\n// or\nimport org.json4s.JsonDSL.WithDouble._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">JsonDSL</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">JsonDSL</span>.<span class=\"pl-en\">WithDouble</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">For the big decimal mode dsl use:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.json4s.JsonDSL.WithBigDecimal._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">JsonDSL</span>.<span class=\"pl-en\">WithBigDecimal</span>.<span class=\"pl-en\">_</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-dsl-rules\" class=\"anchor\" aria-hidden=\"true\" href=\"#dsl-rules\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>DSL rules</h2>\n<ul dir=\"auto\">\n<li>Primitive types map to JSON primitives.</li>\n<li>Any seq produces JSON array.</li>\n</ul>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = List(1, 2, 3)\n\nscala&gt; compact(render(json))\nres0: String = [1,2,3]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>)\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json))\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>]</pre></div>\n<ul dir=\"auto\">\n<li>Tuple2[String, A] produces field.</li>\n</ul>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = (&quot;name&quot; -&gt; &quot;joe&quot;)\n\nscala&gt; compact(render(json))\nres1: String = {&quot;name&quot;:&quot;joe&quot;}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json))\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>}</pre></div>\n<ul dir=\"auto\">\n<li>~ operator produces object by combining fields.</li>\n</ul>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = (&quot;name&quot; -&gt; &quot;joe&quot;) ~ (&quot;age&quot; -&gt; 35)\n\nscala&gt; compact(render(json))\nres2: String = {&quot;name&quot;:&quot;joe&quot;,&quot;age&quot;:35}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">~</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">35</span>)\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json))\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">35</span>}</pre></div>\n<ul dir=\"auto\">\n<li>~~ operator works the same as ~ and is useful in situations where ~ is shadowed, eg. when using Spray or akka-http.</li>\n</ul>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = (&quot;name&quot; -&gt; &quot;joe&quot;) ~~ (&quot;age&quot; -&gt; 35)\n\nscala&gt; compact(render(json))\nres2: String = {&quot;name&quot;:&quot;joe&quot;,&quot;age&quot;:35}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">~~</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">35</span>)\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json))\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">35</span>}</pre></div>\n<ul dir=\"auto\">\n<li>Any value can be optional. The field and value are completely removed when it doesn't have a value.</li>\n</ul>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = (&quot;name&quot; -&gt; &quot;joe&quot;) ~ (&quot;age&quot; -&gt; Some(35))\n\nscala&gt; compact(render(json))\nres3: String = {&quot;name&quot;:&quot;joe&quot;,&quot;age&quot;:35}\n\nscala&gt; val json = (&quot;name&quot; -&gt; &quot;joe&quot;) ~ (&quot;age&quot; -&gt; (None: Option[Int]))\n\nscala&gt; compact(render(json))\nres4: String = {&quot;name&quot;:&quot;joe&quot;}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">~</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">35</span>))\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json))\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">35</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">~</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> (<span class=\"pl-en\">None</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]))\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json))\nres4<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>}</pre></div>\n<ul dir=\"auto\">\n<li>Extending the dsl</li>\n</ul>\n<p dir=\"auto\">To extend the dsl with your own classes you must have an implicit conversion in scope of signature:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type DslConversion = T =&gt; JValue\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">DslConversion</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">T</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">JValue</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example</h2>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.json4s._\nimport org.json4s.JsonDSL._\nimport org.json4s.jackson.JsonMethods._\n\ncase class Winner(id: Long, numbers: List[Int])\ncase class Lotto(id: Long, winningNumbers: List[Int], winners: List[Winner], drawDate: Option[java.util.Date])\n\nobject JsonExample {\n\n  val winners = List(Winner(23, List(2, 45, 34, 23, 3, 5)), Winner(54, List(52, 3, 12, 11, 18, 22)))\n  val lotto = Lotto(5, List(2, 45, 34, 23, 7, 5, 3), winners, None)\n\n  val json =\n    (&quot;lotto&quot; -&gt;\n      (&quot;lotto-id&quot; -&gt; lotto.id) ~\n      (&quot;winning-numbers&quot; -&gt; lotto.winningNumbers) ~\n      (&quot;draw-date&quot; -&gt; lotto.drawDate.map(_.toString)) ~\n      (&quot;winners&quot; -&gt;\n        lotto.winners.map { w =&gt;\n          ((&quot;winner-id&quot; -&gt; w.id) ~\n           (&quot;numbers&quot; -&gt; w.numbers))}))\n\n  def main(args: Array[String]): Unit = {\n    println(compact(render(json)))\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">JsonDSL</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Winner</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">numbers</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>])\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Lotto</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">winningNumbers</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>], <span class=\"pl-v\">winners</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Winner</span>], <span class=\"pl-v\">drawDate</span>: <span class=\"pl-en\">Option</span>[java.util.<span class=\"pl-en\">Date</span>])\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">JsonExample</span> {\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">winners</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">Winner</span>(<span class=\"pl-c1\">23</span>, <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">45</span>, <span class=\"pl-c1\">34</span>, <span class=\"pl-c1\">23</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>)), <span class=\"pl-en\">Winner</span>(<span class=\"pl-c1\">54</span>, <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">52</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">11</span>, <span class=\"pl-c1\">18</span>, <span class=\"pl-c1\">22</span>)))\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">lotto</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Lotto</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">45</span>, <span class=\"pl-c1\">34</span>, <span class=\"pl-c1\">23</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">3</span>), winners, <span class=\"pl-en\">None</span>)\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span>\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n      (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto-id<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> lotto.id) <span class=\"pl-k\">~</span>\n      (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winning-numbers<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> lotto.winningNumbers) <span class=\"pl-k\">~</span>\n      (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>draw-date<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> lotto.drawDate.map(_.toString)) <span class=\"pl-k\">~</span>\n      (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winners<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n        lotto.winners.map { w <span class=\"pl-k\">=&gt;</span>\n          ((<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> w.id) <span class=\"pl-k\">~</span>\n           (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> w.numbers))}))\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">args</span>: <span class=\"pl-en\">Array</span>[<span class=\"pl-en\">String</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    println(compact(render(json)))\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; JsonExample.main(Array.empty[String])\n{&quot;lotto&quot;:{&quot;lotto-id&quot;:5,&quot;winning-numbers&quot;:[2,45,34,23,7,5,3],&quot;winners&quot;:\n[{&quot;winner-id&quot;:23,&quot;numbers&quot;:[2,45,34,23,3,5]},{&quot;winner-id&quot;:54,&quot;numbers&quot;:[52,3,12,11,18,22]}]}}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">JsonExample</span>.main(<span class=\"pl-en\">Array</span>.empty[<span class=\"pl-en\">String</span>])\n{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">5</span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winning-numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">45</span>,<span class=\"pl-c1\">34</span>,<span class=\"pl-c1\">23</span>,<span class=\"pl-c1\">7</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">3</span>],<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winners<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>\n[{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">23</span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">45</span>,<span class=\"pl-c1\">34</span>,<span class=\"pl-c1\">23</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">5</span>]},{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">54</span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">52</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">12</span>,<span class=\"pl-c1\">11</span>,<span class=\"pl-c1\">18</span>,<span class=\"pl-c1\">22</span>]}]}}</pre></div>\n<p dir=\"auto\">The above example produces the following pretty-printed JSON. Notice that draw-date field is not rendered since its value is None:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; pretty(render(JsonExample.json))\n\n{\n  &quot;lotto&quot;:{\n    &quot;lotto-id&quot;:5,\n    &quot;winning-numbers&quot;:[2,45,34,23,7,5,3],\n    &quot;winners&quot;:[{\n      &quot;winner-id&quot;:23,\n      &quot;numbers&quot;:[2,45,34,23,3,5]\n    },{\n      &quot;winner-id&quot;:54,\n      &quot;numbers&quot;:[52,3,12,11,18,22]\n    }]\n  }\n}\"><pre>scala<span class=\"pl-k\">&gt;</span> pretty(render(<span class=\"pl-en\">JsonExample</span>.json))\n\n{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">5</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winning-numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">45</span>,<span class=\"pl-c1\">34</span>,<span class=\"pl-c1\">23</span>,<span class=\"pl-c1\">7</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">3</span>],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winners<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">23</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">45</span>,<span class=\"pl-c1\">34</span>,<span class=\"pl-c1\">23</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">5</span>]\n    },{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">54</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">52</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">12</span>,<span class=\"pl-c1\">11</span>,<span class=\"pl-c1\">18</span>,<span class=\"pl-c1\">22</span>]\n    }]\n  }\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-merging--diffing\" class=\"anchor\" aria-hidden=\"true\" href=\"#merging--diffing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Merging &amp; Diffing</h2>\n<p dir=\"auto\">Two JSONs can be merged and diffed with each other.\nPlease see more examples in <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/MergeExamples.scala\">MergeExamples.scala</a> and <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/DiffExamples.scala\">DiffExamples.scala</a>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.jackson.JsonMethods._\n\nscala&gt; val lotto1 = parse(&quot;&quot;&quot;{\n         &quot;lotto&quot;:{\n           &quot;lotto-id&quot;:5,\n           &quot;winning-numbers&quot;:[2,45,34,23,7,5,3],\n           &quot;winners&quot;:[{\n             &quot;winner-id&quot;:23,\n             &quot;numbers&quot;:[2,45,34,23,3,5]\n           }]\n         }\n       }&quot;&quot;&quot;)\n\nscala&gt; val lotto2 = parse(&quot;&quot;&quot;{\n         &quot;lotto&quot;:{\n           &quot;winners&quot;:[{\n             &quot;winner-id&quot;:54,\n             &quot;numbers&quot;:[52,3,12,11,18,22]\n           }]\n         }\n       }&quot;&quot;&quot;)\n\nscala&gt; val mergedLotto = lotto1 merge lotto2\n\nscala&gt; pretty(render(mergedLotto))\nres0: String =\n{\n  &quot;lotto&quot;:{\n    &quot;lotto-id&quot;:5,\n    &quot;winning-numbers&quot;:[2,45,34,23,7,5,3],\n    &quot;winners&quot;:[{\n      &quot;winner-id&quot;:23,\n      &quot;numbers&quot;:[2,45,34,23,3,5]\n    },{\n      &quot;winner-id&quot;:54,\n      &quot;numbers&quot;:[52,3,12,11,18,22]\n    }]\n  }\n}\n\nscala&gt; val Diff(changed, added, deleted) = mergedLotto diff lotto1\nchanged: org.json4s.JValue = JNothing\nadded: org.json4s.JValue = JNothing\ndeleted: org.json4s.JValue = JObject(List((lotto,JObject(List(JField(winners,\nJArray(List(JObject(List((winner-id,JInt(54)), (numbers,JArray(\nList(JInt(52), JInt(3), JInt(12), JInt(11), JInt(18), JInt(22))))))))))))))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">lotto1</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>{</span>\n<span class=\"pl-s\">         \"lotto\":{</span>\n<span class=\"pl-s\">           \"lotto-id\":5,</span>\n<span class=\"pl-s\">           \"winning-numbers\":[2,45,34,23,7,5,3],</span>\n<span class=\"pl-s\">           \"winners\":[{</span>\n<span class=\"pl-s\">             \"winner-id\":23,</span>\n<span class=\"pl-s\">             \"numbers\":[2,45,34,23,3,5]</span>\n<span class=\"pl-s\">           }]</span>\n<span class=\"pl-s\">         }</span>\n<span class=\"pl-s\">       }<span class=\"pl-pds\">\"\"\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">lotto2</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>{</span>\n<span class=\"pl-s\">         \"lotto\":{</span>\n<span class=\"pl-s\">           \"winners\":[{</span>\n<span class=\"pl-s\">             \"winner-id\":54,</span>\n<span class=\"pl-s\">             \"numbers\":[52,3,12,11,18,22]</span>\n<span class=\"pl-s\">           }]</span>\n<span class=\"pl-s\">         }</span>\n<span class=\"pl-s\">       }<span class=\"pl-pds\">\"\"\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">mergedLotto</span> <span class=\"pl-k\">=</span> lotto1 merge lotto2\n\nscala<span class=\"pl-k\">&gt;</span> pretty(render(mergedLotto))\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span>\n{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lotto-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">5</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winning-numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">45</span>,<span class=\"pl-c1\">34</span>,<span class=\"pl-c1\">23</span>,<span class=\"pl-c1\">7</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">3</span>],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winners<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">23</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">45</span>,<span class=\"pl-c1\">34</span>,<span class=\"pl-c1\">23</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">5</span>]\n    },{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>winner-id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">54</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>numbers<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[<span class=\"pl-c1\">52</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">12</span>,<span class=\"pl-c1\">11</span>,<span class=\"pl-c1\">18</span>,<span class=\"pl-c1\">22</span>]\n    }]\n  }\n}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-en\">Diff</span>(changed, added, deleted) <span class=\"pl-k\">=</span> mergedLotto diff lotto1\nchanged<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JNothing</span>\nadded<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JNothing</span>\ndeleted<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((lotto,<span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">JField</span>(winners,\n<span class=\"pl-en\">JArray</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((winner<span class=\"pl-k\">-</span>id,<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">54</span>)), (numbers,<span class=\"pl-en\">JArray</span>(\n<span class=\"pl-en\">List</span>(<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">52</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">3</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">12</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">11</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">18</span>), <span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">22</span>))))))))))))))</pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-querying-json\" class=\"anchor\" aria-hidden=\"true\" href=\"#querying-json\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Querying JSON</h1>\n<h2 dir=\"auto\"><a id=\"user-content-linq-style\" class=\"anchor\" aria-hidden=\"true\" href=\"#linq-style\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>\"LINQ\" style</h2>\n<p dir=\"auto\">JSON values can be extracted using for-comprehensions.\nPlease see more examples in <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/JsonQueryExamples.scala\">JsonQueryExamples.scala</a>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.native.JsonMethods._\n\nscala&gt; val json = parse(&quot;&quot;&quot;\n         { &quot;name&quot;: &quot;joe&quot;,\n           &quot;children&quot;: [\n             {\n               &quot;name&quot;: &quot;Mary&quot;,\n               &quot;age&quot;: 5\n             },\n             {\n               &quot;name&quot;: &quot;Mazy&quot;,\n               &quot;age&quot;: 3\n             }\n           ]\n         }\n       &quot;&quot;&quot;)\n\nscala&gt; for {\n         JObject(child) &lt;- json\n         JField(&quot;age&quot;, JInt(age))  &lt;- child\n       } yield age\nres0: List[BigInt] = List(5, 3)\n\nscala&gt; for {\n         JObject(child) &lt;- json\n         JField(&quot;name&quot;, JString(name)) &lt;- child\n         JField(&quot;age&quot;, JInt(age)) &lt;- child\n         if age &gt; 4\n       } yield (name, age)\nres1: List[(String, BigInt)] = List((Mary,5))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">         { \"name\": \"joe\",</span>\n<span class=\"pl-s\">           \"children\": [</span>\n<span class=\"pl-s\">             {</span>\n<span class=\"pl-s\">               \"name\": \"Mary\",</span>\n<span class=\"pl-s\">               \"age\": 5</span>\n<span class=\"pl-s\">             },</span>\n<span class=\"pl-s\">             {</span>\n<span class=\"pl-s\">               \"name\": \"Mazy\",</span>\n<span class=\"pl-s\">               \"age\": 3</span>\n<span class=\"pl-s\">             }</span>\n<span class=\"pl-s\">           ]</span>\n<span class=\"pl-s\">         }</span>\n<span class=\"pl-s\">       <span class=\"pl-pds\">\"\"\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">for</span> {\n         <span class=\"pl-en\">JObject</span>(child) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> json\n         <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JInt</span>(age))  <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> child\n       } <span class=\"pl-k\">yield</span> age\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">BigInt</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">3</span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">for</span> {\n         <span class=\"pl-en\">JObject</span>(child) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> json\n         <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JString</span>(name)) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> child\n         <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JInt</span>(age)) <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> child\n         <span class=\"pl-k\">if</span> age <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">4</span>\n       } <span class=\"pl-k\">yield</span> (name, age)\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[(<span class=\"pl-en\">String</span>, <span class=\"pl-en\">BigInt</span>)] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>((<span class=\"pl-en\">Mary</span>,<span class=\"pl-c1\">5</span>))</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-xpath--hofs\" class=\"anchor\" aria-hidden=\"true\" href=\"#xpath--hofs\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>XPath + HOFs</h2>\n<p dir=\"auto\">The json AST can be queried using XPath-like functions. The following REPL session shows the usage of\n'\\', '\\\\', 'find', 'filter', 'transform', 'remove' and 'values' functions.</p>\n<p dir=\"auto\">The example json is:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;person&quot;: {\n    &quot;name&quot;: &quot;Joe&quot;,\n    &quot;age&quot;: 35,\n    &quot;spouse&quot;: {\n      &quot;person&quot;: {\n        &quot;name&quot;: &quot;Marilyn&quot;,\n        &quot;age&quot;: 33\n      }\n    }\n  }\n}\"><pre><span class=\"pl-kos\">{</span>\n  <span class=\"pl-s\">\"person\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"name\"</span>: <span class=\"pl-s\">\"Joe\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"age\"</span>: <span class=\"pl-c1\">35</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"spouse\"</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">\"person\"</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">\"name\"</span>: <span class=\"pl-s\">\"Marilyn\"</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s\">\"age\"</span>: <span class=\"pl-c1\">33</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Translated to DSL syntax:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.native.JsonMethods._\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">or</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s.jackson.JsonMethods._\nscala&gt; import org.json4s.JsonDSL._\n\nscala&gt; val json: JObject =\n  (&quot;person&quot; -&gt;\n    (&quot;name&quot; -&gt; &quot;Joe&quot;) ~\n    (&quot;age&quot; -&gt; 35) ~\n    (&quot;spouse&quot; -&gt;\n      (&quot;person&quot; -&gt;\n        (&quot;name&quot; -&gt; &quot;Marilyn&quot;) ~\n        (&quot;age&quot; -&gt; 33)\n      )\n    )\n  )\n\nscala&gt; json \\\\ &quot;spouse&quot;\nres0: org.json4s.JValue = JObject(List(\n      (person,JObject(List((name,JString(Marilyn)), (age,JInt(33)))))))\n\nscala&gt; compact(render(res0))\nres1: String = {&quot;person&quot;:{&quot;name&quot;:&quot;Marilyn&quot;,&quot;age&quot;:33}}\n\nscala&gt; compact(render(json \\\\ &quot;name&quot;))\nres2: String = {&quot;name&quot;:&quot;Joe&quot;,&quot;name&quot;:&quot;Marilyn&quot;}\n\nscala&gt; compact(render((json removeField { _ == JField(&quot;name&quot;, JString(&quot;Marilyn&quot;)) }) \\\\ &quot;name&quot;))\nres3: String = &quot;Joe&quot;\n\nscala&gt; compact(render(json \\ &quot;person&quot; \\ &quot;name&quot;))\nres4: String = &quot;Joe&quot;\n\nscala&gt; compact(render(json \\ &quot;person&quot; \\ &quot;spouse&quot; \\ &quot;person&quot; \\ &quot;name&quot;))\nres5: String = &quot;Marilyn&quot;\n\nscala&gt; json findField {\n         case JField(&quot;name&quot;, _) =&gt; true\n         case _ =&gt; false\n       }\nres6: Option[org.json4s.JValue] = Some((name,JString(Joe)))\n\nscala&gt; json filterField {\n         case JField(&quot;name&quot;, _) =&gt; true\n         case _ =&gt; false\n       }\nres7: List[org.json4s.JField] = List(JField(name,JString(Joe)), JField(name,JString(Marilyn)))\n\nscala&gt; json transformField {\n         case JField(&quot;name&quot;, JString(s)) =&gt; (&quot;NAME&quot;, JString(s.toUpperCase))\n       }\nres8: org.json4s.JValue = JObject(List((person,JObject(List(\n(NAME,JString(JOE)), (age,JInt(35)), (spouse,JObject(List(\n(person,JObject(List((NAME,JString(MARILYN)), (age,JInt(33)))))))))))))\n\nscala&gt; json.values\nres8: scala.collection.immutable.Map[String,Any] = Map(person -&gt; Map(name -&gt; Joe, age -&gt; 35, spouse -&gt; Map(person -&gt; Map(name -&gt; Marilyn, age -&gt; 33))))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">JsonDSL</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">JObject</span> <span class=\"pl-k\">=</span>\n  (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">~</span>\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">35</span>) <span class=\"pl-k\">~</span>\n    (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spouse<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n      (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n        (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Marilyn<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">~</span>\n        (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">33</span>)\n      )\n    )\n  )\n\nscala<span class=\"pl-k\">&gt;</span> json \\\\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spouse<span class=\"pl-pds\">\"</span></span>\nres0<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>(\n      (person,<span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Marilyn</span>)), (age,<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">33</span>)))))))\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(res0))\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Marilyn<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">33</span>}}\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json \\\\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>))\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Marilyn<span class=\"pl-pds\">\"</span></span>}\n\nscala<span class=\"pl-k\">&gt;</span> compact(render((json removeField { _ <span class=\"pl-k\">==</span> <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JString</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Marilyn<span class=\"pl-pds\">\"</span></span>)) }) \\\\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>))\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person<span class=\"pl-pds\">\"</span></span> \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>))\nres4<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Joe<span class=\"pl-pds\">\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person<span class=\"pl-pds\">\"</span></span> \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spouse<span class=\"pl-pds\">\"</span></span> \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>person<span class=\"pl-pds\">\"</span></span> \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>))\nres5<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Marilyn<span class=\"pl-pds\">\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> json findField {\n         <span class=\"pl-k\">case</span> <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, _) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">true</span>\n         <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">false</span>\n       }\nres6<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[org.json4s.<span class=\"pl-en\">JValue</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Some</span>((name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Joe</span>)))\n\nscala<span class=\"pl-k\">&gt;</span> json filterField {\n         <span class=\"pl-k\">case</span> <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, _) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">true</span>\n         <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">false</span>\n       }\nres7<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[org.json4s.<span class=\"pl-en\">JField</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">JField</span>(name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Joe</span>)), <span class=\"pl-en\">JField</span>(name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Marilyn</span>)))\n\nscala<span class=\"pl-k\">&gt;</span> json transformField {\n         <span class=\"pl-k\">case</span> <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JString</span>(s)) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NAME<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JString</span>(s.toUpperCase))\n       }\nres8<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((person,<span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>(\n(<span class=\"pl-en\">NAME</span>,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">JOE</span>)), (age,<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">35</span>)), (spouse,<span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>(\n(person,<span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((<span class=\"pl-en\">NAME</span>,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">MARILYN</span>)), (age,<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">33</span>)))))))))))))\n\nscala<span class=\"pl-k\">&gt;</span> json.values\nres8<span class=\"pl-k\">:</span> scala.collection.immutable.<span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>,<span class=\"pl-en\">Any</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Map</span>(person <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Map</span>(name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Joe</span>, age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">35</span>, spouse <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Map</span>(person <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Map</span>(name <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Marilyn</span>, age <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">33</span>))))</pre></div>\n<p dir=\"auto\">Indexed path expressions work too and values can be unboxed using type expressions:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = parse(&quot;&quot;&quot;\n         { &quot;name&quot;: &quot;joe&quot;,\n           &quot;children&quot;: [\n             {\n               &quot;name&quot;: &quot;Mary&quot;,\n               &quot;age&quot;: 5\n             },\n             {\n               &quot;name&quot;: &quot;Mazy&quot;,\n               &quot;age&quot;: 3\n             }\n           ]\n         }\n       &quot;&quot;&quot;)\n\nscala&gt; (json \\ &quot;children&quot;)(0)\nres0: org.json4s.JValue = JObject(List((name,JString(Mary)), (age,JInt(5))))\n\nscala&gt; (json \\ &quot;children&quot;)(1) \\ &quot;name&quot;\nres1: org.json4s.JValue = JString(Mazy)\n\nscala&gt; json \\\\ classOf[JInt]\nres2: List[org.json4s.JInt#Values] = List(5, 3)\n\nscala&gt; json \\ &quot;children&quot; \\\\ classOf[JString]\nres3: List[org.json4s.JString#Values] = List(Mary, Mazy)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">         { \"name\": \"joe\",</span>\n<span class=\"pl-s\">           \"children\": [</span>\n<span class=\"pl-s\">             {</span>\n<span class=\"pl-s\">               \"name\": \"Mary\",</span>\n<span class=\"pl-s\">               \"age\": 5</span>\n<span class=\"pl-s\">             },</span>\n<span class=\"pl-s\">             {</span>\n<span class=\"pl-s\">               \"name\": \"Mazy\",</span>\n<span class=\"pl-s\">               \"age\": 3</span>\n<span class=\"pl-s\">             }</span>\n<span class=\"pl-s\">           ]</span>\n<span class=\"pl-s\">         }</span>\n<span class=\"pl-s\">       <span class=\"pl-pds\">\"\"\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> (json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>children<span class=\"pl-pds\">\"</span></span>)(<span class=\"pl-c1\">0</span>)\nres0<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">List</span>((name,<span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Mary</span>)), (age,<span class=\"pl-en\">JInt</span>(<span class=\"pl-c1\">5</span>))))\n\nscala<span class=\"pl-k\">&gt;</span> (json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>children<span class=\"pl-pds\">\"</span></span>)(<span class=\"pl-c1\">1</span>) \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>\nres1<span class=\"pl-k\">:</span> org.json4s.<span class=\"pl-en\">JValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">JString</span>(<span class=\"pl-en\">Mazy</span>)\n\nscala<span class=\"pl-k\">&gt;</span> json \\\\ <span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">JInt</span>]\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[org.json4s.<span class=\"pl-en\">JInt</span>#<span class=\"pl-en\">Values</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">3</span>)\n\nscala<span class=\"pl-k\">&gt;</span> json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>children<span class=\"pl-pds\">\"</span></span> \\\\ <span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">JString</span>]\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[org.json4s.<span class=\"pl-en\">JString</span>#<span class=\"pl-en\">Values</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">Mary</span>, <span class=\"pl-en\">Mazy</span>)</pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-extracting-values\" class=\"anchor\" aria-hidden=\"true\" href=\"#extracting-values\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Extracting values</h1>\n<p dir=\"auto\">Case classes can be used to extract values from parsed JSON. Non-existent values can be extracted into scala.Option and strings can be automatically converted into java.util.Dates.</p>\n<p dir=\"auto\">Please see more examples in <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/ExtractionExamplesSpec.scala\">ExtractionExampleSpec.scala</a>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.jackson.JsonMethods._\n\nscala&gt; implicit val formats: Formats = DefaultFormats // Brings in default date formats etc.\n\nscala&gt; case class Child(name: String, age: Int, birthdate: Option[java.util.Date])\nscala&gt; case class Address(street: String, city: String)\nscala&gt; case class Person(name: String, address: Address, children: List[Child])\n\nscala&gt; val json = parse(&quot;&quot;&quot;\n         { &quot;name&quot;: &quot;joe&quot;,\n           &quot;address&quot;: {\n             &quot;street&quot;: &quot;Bulevard&quot;,\n             &quot;city&quot;: &quot;Helsinki&quot;\n           },\n           &quot;children&quot;: [\n             {\n               &quot;name&quot;: &quot;Mary&quot;,\n               &quot;age&quot;: 5,\n               &quot;birthdate&quot;: &quot;2004-09-04T18:06:22Z&quot;\n             },\n             {\n               &quot;name&quot;: &quot;Mazy&quot;,\n               &quot;age&quot;: 3\n             }\n           ]\n         }\n       &quot;&quot;&quot;)\n\nscala&gt; json.extract[Person]\nres0: Person = Person(joe,Address(Bulevard,Helsinki),List(Child(Mary,5,Some(Sat Sep 04 18:06:22 EEST 2004)), Child(Mazy,3,None)))\n\nscala&gt; val addressJson = json  \\ &quot;address&quot;  // Extract address object\nscala&gt; addressJson.extract[Address]\nres1: Address = Address(Bulevard,Helsinki)\n\nscala&gt; (json \\ &quot;children&quot;).extract[List[Child]]  // Extract list of objects\nres2: List[Child] = List(Child(Mary,5,Some(Sat Sep 04 23:36:22 IST 2004)), Child(Mazy,3,None))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Brings in default date formats etc.</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Child</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">age</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">birthdate</span>: <span class=\"pl-en\">Option</span>[java.util.<span class=\"pl-en\">Date</span>])\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Address</span>(<span class=\"pl-v\">street</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">city</span>: <span class=\"pl-en\">String</span>)\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">address</span>: <span class=\"pl-en\">Address</span>, <span class=\"pl-v\">children</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Child</span>])\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">         { \"name\": \"joe\",</span>\n<span class=\"pl-s\">           \"address\": {</span>\n<span class=\"pl-s\">             \"street\": \"Bulevard\",</span>\n<span class=\"pl-s\">             \"city\": \"Helsinki\"</span>\n<span class=\"pl-s\">           },</span>\n<span class=\"pl-s\">           \"children\": [</span>\n<span class=\"pl-s\">             {</span>\n<span class=\"pl-s\">               \"name\": \"Mary\",</span>\n<span class=\"pl-s\">               \"age\": 5,</span>\n<span class=\"pl-s\">               \"birthdate\": \"2004-09-04T18:06:22Z\"</span>\n<span class=\"pl-s\">             },</span>\n<span class=\"pl-s\">             {</span>\n<span class=\"pl-s\">               \"name\": \"Mazy\",</span>\n<span class=\"pl-s\">               \"age\": 3</span>\n<span class=\"pl-s\">             }</span>\n<span class=\"pl-s\">           ]</span>\n<span class=\"pl-s\">         }</span>\n<span class=\"pl-s\">       <span class=\"pl-pds\">\"\"\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> json.extract[<span class=\"pl-en\">Person</span>]\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Person</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(joe,<span class=\"pl-en\">Address</span>(<span class=\"pl-en\">Bulevard</span>,<span class=\"pl-en\">Helsinki</span>),<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Child</span>(<span class=\"pl-en\">Mary</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-en\">Some</span>(<span class=\"pl-en\">Sat</span> <span class=\"pl-en\">Sep</span> <span class=\"pl-c1\">04</span> <span class=\"pl-c1\">18</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">06</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">22</span> <span class=\"pl-en\">EEST</span> <span class=\"pl-c1\">2004</span>)), <span class=\"pl-en\">Child</span>(<span class=\"pl-en\">Mazy</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-en\">None</span>)))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">addressJson</span> <span class=\"pl-k\">=</span> json  \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>address<span class=\"pl-pds\">\"</span></span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Extract address object</span>\nscala<span class=\"pl-k\">&gt;</span> addressJson.extract[<span class=\"pl-en\">Address</span>]\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Address</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Address</span>(<span class=\"pl-en\">Bulevard</span>,<span class=\"pl-en\">Helsinki</span>)\n\nscala<span class=\"pl-k\">&gt;</span> (json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>children<span class=\"pl-pds\">\"</span></span>).extract[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Child</span>]]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Extract list of objects</span>\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Child</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">List</span>(<span class=\"pl-en\">Child</span>(<span class=\"pl-en\">Mary</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-en\">Some</span>(<span class=\"pl-en\">Sat</span> <span class=\"pl-en\">Sep</span> <span class=\"pl-c1\">04</span> <span class=\"pl-c1\">23</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">36</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">22</span> <span class=\"pl-en\">IST</span> <span class=\"pl-c1\">2004</span>)), <span class=\"pl-en\">Child</span>(<span class=\"pl-en\">Mazy</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-en\">None</span>))</pre></div>\n<p dir=\"auto\">By default the constructor parameter names must match json field names. However, sometimes json field names contain characters which are not allowed characters in Scala identifiers. There are two solutions for this.  (See <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/LottoExample.scala\">LottoExample.scala</a> for a bigger example.)</p>\n<p dir=\"auto\">Use back ticks:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; case class Person(`first-name`: String)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">`first-name`</span>: <span class=\"pl-en\">String</span>)</pre></div>\n<p dir=\"auto\">Use transform function to postprocess AST:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; case class Person(firstname: String)\nscala&gt; json transformField {\n         case (&quot;first-name&quot;, x) =&gt; (&quot;firstname&quot;, x)\n       }\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">firstname</span>: <span class=\"pl-en\">String</span>)\nscala<span class=\"pl-k\">&gt;</span> json transformField {\n         <span class=\"pl-k\">case</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first-name<span class=\"pl-pds\">\"</span></span>, x) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>firstname<span class=\"pl-pds\">\"</span></span>, x)\n       }</pre></div>\n<p dir=\"auto\">If the json field names are snake case (i.e., separated_by_underscores), but the case class uses camel case (i.e., firstLetterLowercaseAndNextWordsCapitalized), you can convert the keys during the extraction using <code>camelizeKeys</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.native.JsonMethods._\nscala&gt; implicit val formats: Formats = DefaultFormats\nscala&gt; val json = parse(&quot;&quot;&quot;{&quot;first_name&quot;:&quot;Mary&quot;}&quot;&quot;&quot;)\nscala&gt; case class Person(firstName: String)\n\nscala&gt; json.camelizeKeys.extract[Person]\nres0: Person = Person(Mary)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">JsonMethods</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>{\"first_name\":\"Mary\"}<span class=\"pl-pds\">\"\"\"</span></span>)\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">firstName</span>: <span class=\"pl-en\">String</span>)\n\nscala<span class=\"pl-k\">&gt;</span> json.camelizeKeys.extract[<span class=\"pl-en\">Person</span>]\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Person</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-en\">Mary</span>)</pre></div>\n<p dir=\"auto\">See the \"Serialization\" section below for details on converting a class with camel-case fields into json with snake case keys.</p>\n<p dir=\"auto\">The extraction function tries to find the best-matching constructor when the case class has auxiliary constructors. For instance, extracting from JSON {\"price\":350} into the following case class will use the auxiliary constructor instead of the primary constructor:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; case class Bike(make: String, price: Int) {\n         def this(price: Int) = this(&quot;Trek&quot;, price)\n       }\nscala&gt; parse(&quot;&quot;&quot; {&quot;price&quot;:350} &quot;&quot;&quot;).extract[Bike]\nres0: Bike = Bike(Trek,350)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Bike</span>(<span class=\"pl-v\">make</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">price</span>: <span class=\"pl-en\">Int</span>) {\n         <span class=\"pl-k\">def</span> <span class=\"pl-en\">this</span>(<span class=\"pl-v\">price</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Trek<span class=\"pl-pds\">\"</span></span>, price)\n       }\nscala<span class=\"pl-k\">&gt;</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span> {\"price\":350} <span class=\"pl-pds\">\"\"\"</span></span>).extract[<span class=\"pl-en\">Bike</span>]\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Bike</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Bike</span>(<span class=\"pl-en\">Trek</span>,<span class=\"pl-c1\">350</span>)</pre></div>\n<p dir=\"auto\">Primitive values can be extracted from JSON primitives or fields:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; (json \\ &quot;name&quot;).extract[String]\nres0: String = &quot;joe&quot;\n\nscala&gt; ((json \\ &quot;children&quot;)(0) \\ &quot;birthdate&quot;).extract[Date]\nres1: java.util.Date = Sat Sep 04 21:06:22 EEST 2004\"><pre>scala<span class=\"pl-k\">&gt;</span> (json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>).extract[<span class=\"pl-en\">String</span>]\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> ((json \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>children<span class=\"pl-pds\">\"</span></span>)(<span class=\"pl-c1\">0</span>) \\ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>birthdate<span class=\"pl-pds\">\"</span></span>).extract[<span class=\"pl-en\">Date</span>]\nres1<span class=\"pl-k\">:</span> java.util.<span class=\"pl-en\">Date</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Sat</span> <span class=\"pl-en\">Sep</span> <span class=\"pl-c1\">04</span> <span class=\"pl-c1\">21</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">06</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">22</span> <span class=\"pl-en\">EEST</span> <span class=\"pl-c1\">2004</span></pre></div>\n<p dir=\"auto\">DateFormat can be changed by overriding 'DefaultFormats' (or by implementing trait 'Formats'):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; implicit val formats: Formats = new DefaultFormats {\n         override def dateFormatter = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSS'Z'&quot;)\n       }\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormats</span> {\n         <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">dateFormatter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SimpleDateFormat</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'<span class=\"pl-pds\">\"</span></span>)\n       }</pre></div>\n<p dir=\"auto\">A JSON object can be extracted to Map[String, _] too. Each field becomes a key value pair\nin result Map:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = parse(&quot;&quot;&quot;\n         {\n           &quot;name&quot;: &quot;joe&quot;,\n           &quot;addresses&quot;: {\n             &quot;address1&quot;: {\n               &quot;street&quot;: &quot;Bulevard&quot;,\n               &quot;city&quot;: &quot;Helsinki&quot;\n             },\n             &quot;address2&quot;: {\n               &quot;street&quot;: &quot;Soho&quot;,\n               &quot;city&quot;: &quot;London&quot;\n             }\n           }\n         }&quot;&quot;&quot;)\n\nscala&gt; case class PersonWithAddresses(name: String, addresses: Map[String, Address])\nscala&gt; json.extract[PersonWithAddresses]\nres0: PersonWithAddresses(&quot;joe&quot;, Map(&quot;address1&quot; -&gt; Address(&quot;Bulevard&quot;, &quot;Helsinki&quot;),\n                                     &quot;address2&quot; -&gt; Address(&quot;Soho&quot;, &quot;London&quot;)))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">         {</span>\n<span class=\"pl-s\">           \"name\": \"joe\",</span>\n<span class=\"pl-s\">           \"addresses\": {</span>\n<span class=\"pl-s\">             \"address1\": {</span>\n<span class=\"pl-s\">               \"street\": \"Bulevard\",</span>\n<span class=\"pl-s\">               \"city\": \"Helsinki\"</span>\n<span class=\"pl-s\">             },</span>\n<span class=\"pl-s\">             \"address2\": {</span>\n<span class=\"pl-s\">               \"street\": \"Soho\",</span>\n<span class=\"pl-s\">               \"city\": \"London\"</span>\n<span class=\"pl-s\">             }</span>\n<span class=\"pl-s\">           }</span>\n<span class=\"pl-s\">         }<span class=\"pl-pds\">\"\"\"</span></span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">PersonWithAddresses</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">addresses</span>: <span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Address</span>])\nscala<span class=\"pl-k\">&gt;</span> json.extract[<span class=\"pl-en\">PersonWithAddresses</span>]\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">PersonWithAddresses</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>joe<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">Map</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>address1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Address</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bulevard<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Helsinki<span class=\"pl-pds\">\"</span></span>),\n                                     <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>address2<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">Address</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Soho<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>London<span class=\"pl-pds\">\"</span></span>)))</pre></div>\n<p dir=\"auto\">Note that when the extraction of an <code>Option[_]</code> fails, the default behavior of <code>extract</code> is to return <code>None</code>.\nYou can make it fail with a [MappingException] by using a custom <code>Formats</code> object:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = DefaultFormats.withStrictOptionParsing\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span>.withStrictOptionParsing</pre></div>\n<p dir=\"auto\">or</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = new DefaultFormats {\n  override val strictOptionParsing: Boolean = true\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormats</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">strictOptionParsing</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n}</pre></div>\n<p dir=\"auto\">Same happens with collections(for example, List and Map...), the default behavior of <code>extract</code>\nis to return an empty instance of the collection.\nYou can make it fail with a [MappingException] by using a custom <code>Formats</code> object:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = DefaultFormats.withStrictArrayExtraction\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span>.withStrictArrayExtraction</pre></div>\n<p dir=\"auto\">or</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = new DefaultFormats {\n  override val strictArrayExtraction: Boolean = true\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormats</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">strictArrayExtraction</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n}</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = DefaultFormats.withStrictMapExtraction\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span>.withStrictMapExtraction</pre></div>\n<p dir=\"auto\">or</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = new DefaultFormats {\n  override val strictMapExtraction: Boolean = true\n}\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormats</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">strictMapExtraction</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n}</pre></div>\n<p dir=\"auto\">These settings (<code>strictOptionParsing</code>, <code>strictArrayExtraction</code> and <code>strictMapExtraction</code>) can be enabled with</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = DefaultFormats.strict\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span>.strict</pre></div>\n<p dir=\"auto\">With Json4s 3.6 and higher, <code>apply</code> functions in companion objects will be evaluated for use during extraction.  If this behavior is not desired, you can disable it using the <code>considerCompanionConstructors</code> on a custom <code>Formats</code> object:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val formats: Formats = new DefaultFormats { override val considerCompanionConstructors = false }\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DefaultFormats</span> { <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">considerCompanionConstructors</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span> }</pre></div>\n<p dir=\"auto\">When this option is disabled, only primary and secondary constructors will be evaluated for use during extraction.</p>\n<h2 dir=\"auto\"><a id=\"user-content-handling-null\" class=\"anchor\" aria-hidden=\"true\" href=\"#handling-null\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Handling <code>null</code></h2>\n<p dir=\"auto\"><code>null</code> values of <code>Option</code>s are always extracted as <code>None</code>. For other types you can control the behaviour by setting the <code>nullExtractionStrategy</code> of the <code>Formats</code> used during extraction. There are three options:</p>\n<ul dir=\"auto\">\n<li><code>Keep</code>: Leaves null values as they are.</li>\n<li><code>Disallow</code>: Fails extraction when a <code>null</code> value is encountered.</li>\n<li><code>TreatAsAbsent</code>: Treats <code>null</code> values as if they were not present at all.</li>\n</ul>\n<h1 dir=\"auto\"><a id=\"user-content-serialization\" class=\"anchor\" aria-hidden=\"true\" href=\"#serialization\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Serialization</h1>\n<p dir=\"auto\">Case classes can be serialized and deserialized. Please see other examples in <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/native/SerializationExamples.scala\">SerializationExamples.scala</a>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.native.Serialization\nscala&gt; import org.json4s.native.Serialization.{read, write}\n\nscala&gt; implicit val formats: Formats = Serialization.formats(NoTypeHints)\n\nscala&gt; val ser = write(Child(&quot;Mary&quot;, 5, None))\n\nscala&gt; read[Child](ser)\nres1: Child = Child(Mary,5,None)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">Serialization</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">native</span>.<span class=\"pl-en\">Serialization</span>.{<span class=\"pl-en\">read</span>, <span class=\"pl-en\">write</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Serialization</span>.formats(<span class=\"pl-en\">NoTypeHints</span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ser</span> <span class=\"pl-k\">=</span> write(<span class=\"pl-en\">Child</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mary<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-en\">None</span>))\n\nscala<span class=\"pl-k\">&gt;</span> read[<span class=\"pl-en\">Child</span>](ser)\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Child</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Child</span>(<span class=\"pl-en\">Mary</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-en\">None</span>)</pre></div>\n<p dir=\"auto\">If you're using jackson instead of the native one:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s._\nscala&gt; import org.json4s.jackson.Serialization\nscala&gt; import org.json4s.jackson.Serialization.{read, write}\n\nscala&gt; implicit val formats: Formats = Serialization.formats(NoTypeHints)\n\nscala&gt; val ser = write(Child(&quot;Mary&quot;, 5, None))\n\nscala&gt; read[Child](ser)\nres1: Child = Child(Mary,5,None)\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">_</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">Serialization</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">jackson</span>.<span class=\"pl-en\">Serialization</span>.{<span class=\"pl-en\">read</span>, <span class=\"pl-en\">write</span>}\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Serialization</span>.formats(<span class=\"pl-en\">NoTypeHints</span>)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ser</span> <span class=\"pl-k\">=</span> write(<span class=\"pl-en\">Child</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mary<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-en\">None</span>))\n\nscala<span class=\"pl-k\">&gt;</span> read[<span class=\"pl-en\">Child</span>](ser)\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Child</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Child</span>(<span class=\"pl-en\">Mary</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-en\">None</span>)</pre></div>\n<p dir=\"auto\">Serialization supports:</p>\n<ul dir=\"auto\">\n<li>Arbitrarily deep case-class graphs</li>\n<li>All primitive types, including BigInt and Symbol</li>\n<li>List, Seq, Array, Set and Map (note, keys of the Map must be strings: Map[String, _])</li>\n<li>scala.Option</li>\n<li>java.util.Date</li>\n<li>Polymorphic Lists (see below)</li>\n<li>Recursive types</li>\n<li>Serialization of fields of a class (see below)</li>\n<li>Custom serializer functions for types that are not supported (see below)</li>\n</ul>\n<p dir=\"auto\">If the class contains camel-case fields (i.e: firstLetterLowercaseAndNextWordsCapitalized) but you want to produce a json string with snake casing (i.e., separated_by_underscores), you can use the <code>snakizeKeys</code> method:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val ser = write(Person(&quot;Mary&quot;))\nser: String = {&quot;firstName&quot;:&quot;Mary&quot;}\n\nscala&gt; compact(render(parse(ser).snakizeKeys))\nres0: String = {&quot;first_name&quot;:&quot;Mary&quot;}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ser</span> <span class=\"pl-k\">=</span> write(<span class=\"pl-en\">Person</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mary<span class=\"pl-pds\">\"</span></span>))\nser<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>firstName<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mary<span class=\"pl-pds\">\"</span></span>}\n\nscala<span class=\"pl-k\">&gt;</span> compact(render(parse(ser).snakizeKeys))\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first_name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mary<span class=\"pl-pds\">\"</span></span>}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-serializing-polymorphic-lists\" class=\"anchor\" aria-hidden=\"true\" href=\"#serializing-polymorphic-lists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Serializing polymorphic Lists</h2>\n<p dir=\"auto\">Type hints are required when serializing polymorphic (or heterogeneous) Lists. Serialized JSON objects\nwill get an extra field named 'jsonClass' (the name can be changed by overriding 'typeHintFieldName' from Formats).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; trait Animal\nscala&gt; case class Dog(name: String) extends Animal\nscala&gt; case class Fish(weight: Double) extends Animal\nscala&gt; case class Animals(animals: List[Animal])\n\nscala&gt; implicit val formats: Formats = Serialization.formats(ShortTypeHints(List(classOf[Dog], classOf[Fish])))\n\nscala&gt; val ser = write(Animals(Dog(&quot;pluto&quot;) :: Fish(1.2) :: Nil))\nser: String = {&quot;animals&quot;:[{&quot;jsonClass&quot;:&quot;Dog&quot;,&quot;name&quot;:&quot;pluto&quot;},{&quot;jsonClass&quot;:&quot;Fish&quot;,&quot;weight&quot;:1.2}]}\n\nscala&gt; read[Animals](ser)\nres0: Animals = Animals(List(Dog(pluto), Fish(1.2)))\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Animal</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Dog</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Fish</span>(<span class=\"pl-v\">weight</span>: <span class=\"pl-en\">Double</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Animal</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Animals</span>(<span class=\"pl-v\">animals</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Animal</span>])\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Serialization</span>.formats(<span class=\"pl-en\">ShortTypeHints</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">Dog</span>], <span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">Fish</span>])))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ser</span> <span class=\"pl-k\">=</span> write(<span class=\"pl-en\">Animals</span>(<span class=\"pl-en\">Dog</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pluto<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">::</span> <span class=\"pl-en\">Fish</span>(<span class=\"pl-c1\">1.2</span>) <span class=\"pl-k\">::</span> <span class=\"pl-en\">Nil</span>))\nser<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>animals<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jsonClass<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Dog<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pluto<span class=\"pl-pds\">\"</span></span>},{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jsonClass<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Fish<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-c1\">1.2</span>}]}\n\nscala<span class=\"pl-k\">&gt;</span> read[<span class=\"pl-en\">Animals</span>](ser)\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Animals</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Animals</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Dog</span>(pluto), <span class=\"pl-en\">Fish</span>(<span class=\"pl-c1\">1.2</span>)))</pre></div>\n<p dir=\"auto\">ShortTypeHints outputs the short classname for all instances of configured objects. FullTypeHints outputs the full\nclassname. Other strategies can be implemented by extending the TypeHints trait.</p>\n<h2 dir=\"auto\"><a id=\"user-content-serializing-fields-of-a-class\" class=\"anchor\" aria-hidden=\"true\" href=\"#serializing-fields-of-a-class\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Serializing fields of a class</h2>\n<p dir=\"auto\">To enable serialization of fields, a single FieldSerializer can be added for each type:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val formats: Formats = DefaultFormats + FieldSerializer[WildDog]()\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">+</span> <span class=\"pl-en\">FieldSerializer</span>[<span class=\"pl-en\">WildDog</span>]()</pre></div>\n<p dir=\"auto\">Now the type WildDog (and all subtypes) gets serialized with all its fields (+ constructor parameters).\nFieldSerializer takes two optional parameters, which can be used to intercept the field serialization:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class FieldSerializer[A: Manifest](\n  serializer:   PartialFunction[(String, Any), Option[(String, Any)]] = Map(),\n  deserializer: PartialFunction[JField, JField] = Map()\n)\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FieldSerializer</span>[<span class=\"pl-en\">A</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Manifest</span>](\n  <span class=\"pl-v\">serializer</span>:   <span class=\"pl-en\">PartialFunction</span>[(<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Any</span>), <span class=\"pl-en\">Option</span>[(<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Any</span>)]] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Map</span>(),\n  <span class=\"pl-v\">deserializer</span>: <span class=\"pl-en\">PartialFunction</span>[<span class=\"pl-en\">JField</span>, <span class=\"pl-en\">JField</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Map</span>()\n)</pre></div>\n<p dir=\"auto\">Those PartialFunctions are called just before a field is serialized or deserialized. Some useful PFs to rename and ignore fields are provided:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val dogSerializer = FieldSerializer[WildDog](\n  renameTo(&quot;name&quot;, &quot;animalname&quot;) orElse ignore(&quot;owner&quot;),\n  renameFrom(&quot;animalname&quot;, &quot;name&quot;))\n\nimplicit val formats: Formats = DefaultFormats + dogSerializer\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">dogSerializer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">FieldSerializer</span>[<span class=\"pl-en\">WildDog</span>](\n  renameTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>animalname<span class=\"pl-pds\">\"</span></span>) orElse ignore(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>owner<span class=\"pl-pds\">\"</span></span>),\n  renameFrom(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>animalname<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>))\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">+</span> dogSerializer</pre></div>\n<p dir=\"auto\">Support for renaming multiple fields is accomplished by chaining the PFs like so:\n(do not add more than one FieldSerializer per type)</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{&quot;id&quot;: &quot;a244&quot;, &quot;start-time&quot;: 12314545, &quot;end-time&quot;: -1}\"><pre>{<span class=\"pl-ent\">\"id\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a244<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-ent\">\"start-time\"</span>: <span class=\"pl-c1\">12314545</span>, <span class=\"pl-ent\">\"end-time\"</span>: <span class=\"pl-c1\">-1</span>}</pre></div>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Log(id: String, startTime: Long, endTime: Long)\nval logSerializer = FieldSerializer[Log](\n  renameTo(&quot;startTime&quot;, &quot;start-time&quot;) orElse renameTo(&quot;endTime&quot;, &quot;end-time&quot;),\n  renameFrom(&quot;start-time&quot;, &quot;startTime&quot;) orElse renameFrom(&quot;end-time&quot;, &quot;endTime&quot;))\n\nimplicit val formats: Formats = DefaultFormats + logSerializer\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Log</span>(<span class=\"pl-v\">id</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">startTime</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">endTime</span>: <span class=\"pl-en\">Long</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">logSerializer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">FieldSerializer</span>[<span class=\"pl-en\">Log</span>](\n  renameTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>startTime<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start-time<span class=\"pl-pds\">\"</span></span>) orElse renameTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>endTime<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end-time<span class=\"pl-pds\">\"</span></span>),\n  renameFrom(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start-time<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>startTime<span class=\"pl-pds\">\"</span></span>) orElse renameFrom(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end-time<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>endTime<span class=\"pl-pds\">\"</span></span>))\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">+</span> logSerializer</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-serializing-classes-defined-in-traits-or-classes\" class=\"anchor\" aria-hidden=\"true\" href=\"#serializing-classes-defined-in-traits-or-classes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Serializing classes defined in traits or classes</h2>\n<p dir=\"auto\">We've added support for case classes defined in a trait. But they do need custom formats. I'll explain why and then how.</p>\n<h5 dir=\"auto\"><a id=\"user-content-why\" class=\"anchor\" aria-hidden=\"true\" href=\"#why\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Why?</h5>\n<p dir=\"auto\">For classes defined in a trait it's a bit difficult to get to their companion object, which is needed to provide default values. We could punt on those but that brings us to the next problem, that the compiler generates an extra field in the constructor of such case classes. The first field in the constructor of those case classes is called <code>$outer</code> and is of type of the <em>defining trait</em>. So somehow we need to get an instance of that object, naively we could scan all classes and collect the ones that are implementing the trait, but when there are more than one: which one to take?</p>\n<h5 dir=\"auto\"><a id=\"user-content-how\" class=\"anchor\" aria-hidden=\"true\" href=\"#how\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>How?</h5>\n<p dir=\"auto\">I've chosen to extend the formats to include a list of companion mappings for those case classes. So you can have formats that belong to your modules and keep the mappings in there. That will then make default values work and provide the much needed <code>$outer</code> field.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait SharedModule {\n  case class SharedObj(name: String, visible: Boolean = false)\n}\n\nobject PingPongGame extends SharedModule\nimplicit val formats: Formats =\n  DefaultFormats.withCompanions(classOf[PingPongGame.SharedObj] -&gt; PingPongGame)\n\nval inst = PingPongGame.SharedObj(&quot;jeff&quot;, visible = true)\nval extr = Extraction.decompose(inst)\nextr must_== JObject(&quot;name&quot; -&gt; JString(&quot;jeff&quot;), &quot;visible&quot; -&gt; JBool(true))\nextr.extract[PingPongGame.SharedObj] must_== inst\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">SharedModule</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">SharedObj</span>(<span class=\"pl-v\">name</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">visible</span>: <span class=\"pl-en\">Boolean</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>)\n}\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">PingPongGame</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">SharedModule</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-en\">DefaultFormats</span>.withCompanions(<span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">PingPongGame</span>.<span class=\"pl-en\">SharedObj</span>] <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">PingPongGame</span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">inst</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PingPongGame</span>.<span class=\"pl-en\">SharedObj</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jeff<span class=\"pl-pds\">\"</span></span>, visible <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">extr</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Extraction</span>.decompose(inst)\nextr must_<span class=\"pl-k\">==</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">JString</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jeff<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>visible<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">JBool</span>(<span class=\"pl-c1\">true</span>))\nextr.extract[<span class=\"pl-en\">PingPongGame</span>.<span class=\"pl-en\">SharedObj</span>] must_<span class=\"pl-k\">==</span> inst</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-serializing-non-supported-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#serializing-non-supported-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Serializing non-supported types</h2>\n<p dir=\"auto\">It is possible to plug in custom serializer + deserializer functions for any type.\nNow, if we have a non-case class Interval (thus, not supported by default), we can still serialize it\nby providing following serializer.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; class Interval(start: Long, end: Long) {\n         val startTime = start\n         val endTime = end\n       }\n\nscala&gt; class IntervalSerializer extends CustomSerializer[Interval](format =&gt; (\n         {\n           case JObject(JField(&quot;start&quot;, JInt(s)) :: JField(&quot;end&quot;, JInt(e)) :: Nil) =&gt;\n             new Interval(s.longValue, e.longValue)\n         },\n         {\n           case x: Interval =&gt;\n             JObject(JField(&quot;start&quot;, JInt(BigInt(x.startTime))) ::\n                     JField(&quot;end&quot;,   JInt(BigInt(x.endTime))) :: Nil)\n         }\n       ))\n\nscala&gt; implicit val formats: Formats = Serialization.formats(NoTypeHints) + new IntervalSerializer\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Interval</span>(<span class=\"pl-v\">start</span>: <span class=\"pl-en\">Long</span>, <span class=\"pl-v\">end</span>: <span class=\"pl-en\">Long</span>) {\n         <span class=\"pl-k\">val</span> <span class=\"pl-smi\">startTime</span> <span class=\"pl-k\">=</span> start\n         <span class=\"pl-k\">val</span> <span class=\"pl-smi\">endTime</span> <span class=\"pl-k\">=</span> end\n       }\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IntervalSerializer</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">CustomSerializer</span>[<span class=\"pl-en\">Interval</span>](format <span class=\"pl-k\">=&gt;</span> (\n         {\n           <span class=\"pl-k\">case</span> <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JInt</span>(s)) <span class=\"pl-k\">::</span> <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JInt</span>(e)) <span class=\"pl-k\">::</span> <span class=\"pl-en\">Nil</span>) <span class=\"pl-k\">=&gt;</span>\n             <span class=\"pl-k\">new</span> <span class=\"pl-en\">Interval</span>(s.longValue, e.longValue)\n         },\n         {\n           <span class=\"pl-k\">case</span> <span class=\"pl-v\">x</span>: <span class=\"pl-en\">Interval</span> <span class=\"pl-k\">=&gt;</span>\n             <span class=\"pl-en\">JObject</span>(<span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JInt</span>(<span class=\"pl-en\">BigInt</span>(x.startTime))) <span class=\"pl-k\">::</span>\n                     <span class=\"pl-en\">JField</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end<span class=\"pl-pds\">\"</span></span>,   <span class=\"pl-en\">JInt</span>(<span class=\"pl-en\">BigInt</span>(x.endTime))) <span class=\"pl-k\">::</span> <span class=\"pl-en\">Nil</span>)\n         }\n       ))\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Serialization</span>.formats(<span class=\"pl-en\">NoTypeHints</span>) <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">IntervalSerializer</span></pre></div>\n<p dir=\"auto\">A custom serializer is created by providing two partial functions. The first evaluates to a value\nif it can unpack the data from JSON. The second creates the desired JSON if the type matches.</p>\n<h2 dir=\"auto\"><a id=\"user-content-extensions\" class=\"anchor\" aria-hidden=\"true\" href=\"#extensions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Extensions</h2>\n<p dir=\"auto\">Module json4s-ext contains extensions to extraction and serialization. The following types are supported.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Scala enums\nimplicit val formats: Formats = org.json4s.DefaultFormats + new org.json4s.ext.EnumSerializer(MyEnum)\n// or\nimplicit val formats: Formats = org.json4s.DefaultFormats + new org.json4s.ext.EnumNameSerializer(MyEnum)\n\n// Joda Time\nimplicit val formats: Formats = org.json4s.DefaultFormats ++ org.json4s.ext.JodaTimeSerializers.all\n\n// Java 8 Date &amp; Time\nimplicit val formats: Formats = org.json4s.DefaultFormats ++ org.json4s.ext.JavaTimeSerializers.all\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Scala enums</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> org.json4s.<span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> org.json4s.ext.<span class=\"pl-en\">EnumSerializer</span>(<span class=\"pl-en\">MyEnum</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> org.json4s.<span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> org.json4s.ext.<span class=\"pl-en\">EnumNameSerializer</span>(<span class=\"pl-en\">MyEnum</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Joda Time</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> org.json4s.<span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">++</span> org.json4s.ext.<span class=\"pl-en\">JodaTimeSerializers</span>.all\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Java 8 Date &amp; Time</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">formats</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Formats</span> <span class=\"pl-k\">=</span> org.json4s.<span class=\"pl-en\">DefaultFormats</span> <span class=\"pl-k\">++</span> org.json4s.ext.<span class=\"pl-en\">JavaTimeSerializers</span>.all</pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-xml-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#xml-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>XML support</h1>\n<p dir=\"auto\">JSON structure can be converted to XML nodes and vice versa.\nPlease see more examples in <a href=\"https://github.com/json4s/json4s/blob/3.6/tests/src/test/scala/org/json4s/XmlExamples.scala\">XmlExamples.scala</a>.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; import org.json4s.Xml.{toJson, toXml}\nscala&gt; val xml =\n         &lt;users&gt;\n           &lt;user&gt;\n             &lt;id&gt;1&lt;/id&gt;\n             &lt;name&gt;Harry&lt;/name&gt;\n           &lt;/user&gt;\n           &lt;user&gt;\n             &lt;id&gt;2&lt;/id&gt;\n             &lt;name&gt;David&lt;/name&gt;\n           &lt;/user&gt;\n         &lt;/users&gt;\n\nscala&gt; val json = toJson(xml)\nscala&gt; pretty(render(json))\nres3: String =\n{\n  &quot;users&quot;:{\n    &quot;user&quot;:[{\n      &quot;id&quot;:&quot;1&quot;,\n      &quot;name&quot;:&quot;Harry&quot;\n    },{\n      &quot;id&quot;:&quot;2&quot;,\n      &quot;name&quot;:&quot;David&quot;\n    }]\n  }\n}\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">json4s</span>.<span class=\"pl-en\">Xml</span>.{<span class=\"pl-en\">toJson</span>, <span class=\"pl-en\">toXml</span>}\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">xml</span> <span class=\"pl-k\">=</span>\n         &lt;<span class=\"pl-ent\">users</span>&gt;\n           &lt;<span class=\"pl-ent\">user</span>&gt;\n             &lt;<span class=\"pl-ent\">id</span>&gt;<span class=\"pl-c1\">1</span>&lt;/<span class=\"pl-ent\">id</span>&gt;\n             &lt;<span class=\"pl-ent\">name</span>&gt;<span class=\"pl-en\">Harry</span>&lt;/<span class=\"pl-ent\">name</span>&gt;\n           &lt;/<span class=\"pl-ent\">user</span>&gt;\n           &lt;<span class=\"pl-ent\">user</span>&gt;\n             &lt;<span class=\"pl-ent\">id</span>&gt;<span class=\"pl-c1\">2</span>&lt;/<span class=\"pl-ent\">id</span>&gt;\n             &lt;<span class=\"pl-ent\">name</span>&gt;<span class=\"pl-en\">David</span>&lt;/<span class=\"pl-ent\">name</span>&gt;\n           &lt;/<span class=\"pl-ent\">user</span>&gt;\n         &lt;/<span class=\"pl-ent\">users</span>&gt;\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> toJson(xml)\nscala<span class=\"pl-k\">&gt;</span> pretty(render(json))\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span>\n{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>{\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span>[{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Harry<span class=\"pl-pds\">\"</span></span>\n    },{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>David<span class=\"pl-pds\">\"</span></span>\n    }]\n  }\n}</pre></div>\n<p dir=\"auto\">Now, the above example has two problems. First, the ID is converted to String while we might want it as an Int. This is easy to fix by mapping JString(s) to JInt(s.toInt). The second problem is more subtle. The conversion function decides to use a JSON array because there's more than one <code>user</code> element in XML. Therefore a structurally equivalent XML document which happens to have just one <code>user</code> element will generate a JSON document without a JSON array. This is rarely a desired outcome. These both problems can be fixed by the following transformation function.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; json transformField {\n         case (&quot;id&quot;, JString(s)) =&gt; (&quot;id&quot;, JInt(s.toInt))\n         case (&quot;user&quot;, x: JObject) =&gt; (&quot;user&quot;, JArray(x :: Nil))\n       }\"><pre>scala<span class=\"pl-k\">&gt;</span> json transformField {\n         <span class=\"pl-k\">case</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JString</span>(s)) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JInt</span>(s.toInt))\n         <span class=\"pl-k\">case</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">x</span>: <span class=\"pl-en\">JObject</span>) <span class=\"pl-k\">=&gt;</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">JArray</span>(x <span class=\"pl-k\">::</span> <span class=\"pl-en\">Nil</span>))\n       }</pre></div>\n<p dir=\"auto\">Other direction is supported too. Converting JSON to XML:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; toXml(json)\nres5: scala.xml.NodeSeq = NodeSeq(&lt;users&gt;&lt;user&gt;&lt;id&gt;1&lt;/id&gt;&lt;name&gt;Harry&lt;/name&gt;&lt;/user&gt;&lt;user&gt;&lt;id&gt;2&lt;/id&gt;&lt;name&gt;David&lt;/name&gt;&lt;/user&gt;&lt;/users&gt;)\"><pre>scala<span class=\"pl-k\">&gt;</span> toXml(json)\nres5<span class=\"pl-k\">:</span> scala.xml.<span class=\"pl-en\">NodeSeq</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">NodeSeq</span>(&lt;<span class=\"pl-ent\">users</span>&gt;&lt;<span class=\"pl-ent\">user</span>&gt;&lt;<span class=\"pl-ent\">id</span>&gt;<span class=\"pl-c1\">1</span>&lt;/<span class=\"pl-ent\">id</span>&gt;&lt;<span class=\"pl-ent\">name</span>&gt;<span class=\"pl-en\">Harry</span>&lt;/<span class=\"pl-ent\">name</span>&gt;&lt;/<span class=\"pl-ent\">user</span>&gt;&lt;<span class=\"pl-ent\">user</span>&gt;&lt;<span class=\"pl-ent\">id</span>&gt;<span class=\"pl-c1\">2</span>&lt;/<span class=\"pl-ent\">id</span>&gt;&lt;<span class=\"pl-ent\">name</span>&gt;<span class=\"pl-en\">David</span>&lt;/<span class=\"pl-ent\">name</span>&gt;&lt;/<span class=\"pl-ent\">user</span>&gt;&lt;/<span class=\"pl-ent\">users</span>&gt;)</pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-low-level-pull-parser-api\" class=\"anchor\" aria-hidden=\"true\" href=\"#low-level-pull-parser-api\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Low-level pull parser API</h1>\n<p dir=\"auto\">The pull parser API is provided for cases requiring extreme performance. It improves parsing performance in two ways. First, no intermediate AST is generated. Second, you can stop parsing at any time, skipping the rest of the stream. Note:  This parsing style is recommended only as an optimization. The above-mentioned functional APIs are easier to use.</p>\n<p dir=\"auto\">Consider the following example, which shows how to parse one field value from a big JSON:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val json = &quot;&quot;&quot;\n  {\n    ...\n    &quot;firstName&quot;: &quot;John&quot;,\n    &quot;lastName&quot;: &quot;Smith&quot;,\n    &quot;address&quot;: {\n      &quot;streetAddress&quot;: &quot;21 2nd Street&quot;,\n      &quot;city&quot;: &quot;New York&quot;,\n      &quot;state&quot;: &quot;NY&quot;,\n      &quot;postalCode&quot;: 10021\n    },\n    &quot;phoneNumbers&quot;: [\n      { &quot;type&quot;: &quot;home&quot;, &quot;number&quot;: &quot;212 555-1234&quot; },\n      { &quot;type&quot;: &quot;fax&quot;, &quot;number&quot;: &quot;646 555-4567&quot; }\n    ],\n    ...\n  }&quot;&quot;&quot;\n\nscala&gt; val parser = (p: Parser) =&gt; {\n         def parse: BigInt = p.nextToken match {\n           case FieldStart(&quot;postalCode&quot;) =&gt; p.nextToken match {\n             case IntVal(code) =&gt; code\n             case _ =&gt; p.fail(&quot;expected int&quot;)\n           }\n           case End =&gt; p.fail(&quot;no field named 'postalCode'&quot;)\n           case _ =&gt; parse\n         }\n\n         parse\n       }\n\nscala&gt; val postalCode = parse(json, parser)\npostalCode: BigInt = 10021\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">json</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">  {</span>\n<span class=\"pl-s\">    ...</span>\n<span class=\"pl-s\">    \"firstName\": \"John\",</span>\n<span class=\"pl-s\">    \"lastName\": \"Smith\",</span>\n<span class=\"pl-s\">    \"address\": {</span>\n<span class=\"pl-s\">      \"streetAddress\": \"21 2nd Street\",</span>\n<span class=\"pl-s\">      \"city\": \"New York\",</span>\n<span class=\"pl-s\">      \"state\": \"NY\",</span>\n<span class=\"pl-s\">      \"postalCode\": 10021</span>\n<span class=\"pl-s\">    },</span>\n<span class=\"pl-s\">    \"phoneNumbers\": [</span>\n<span class=\"pl-s\">      { \"type\": \"home\", \"number\": \"212 555-1234\" },</span>\n<span class=\"pl-s\">      { \"type\": \"fax\", \"number\": \"646 555-4567\" }</span>\n<span class=\"pl-s\">    ],</span>\n<span class=\"pl-s\">    ...</span>\n<span class=\"pl-s\">  }<span class=\"pl-pds\">\"\"\"</span></span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">parser</span> <span class=\"pl-k\">=</span> (<span class=\"pl-v\">p</span>: <span class=\"pl-en\">Parser</span>) <span class=\"pl-k\">=&gt;</span> {\n         <span class=\"pl-k\">def</span> <span class=\"pl-en\">parse</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">BigInt</span> <span class=\"pl-k\">=</span> p.nextToken <span class=\"pl-k\">match</span> {\n           <span class=\"pl-k\">case</span> <span class=\"pl-en\">FieldStart</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>postalCode<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">=&gt;</span> p.nextToken <span class=\"pl-k\">match</span> {\n             <span class=\"pl-k\">case</span> <span class=\"pl-en\">IntVal</span>(code) <span class=\"pl-k\">=&gt;</span> code\n             <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span> p.fail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>expected int<span class=\"pl-pds\">\"</span></span>)\n           }\n           <span class=\"pl-k\">case</span> <span class=\"pl-en\">End</span> <span class=\"pl-k\">=&gt;</span> p.fail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>no field named 'postalCode'<span class=\"pl-pds\">\"</span></span>)\n           <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span> parse\n         }\n\n         parse\n       }\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">postalCode</span> <span class=\"pl-k\">=</span> parse(json, parser)\npostalCode<span class=\"pl-k\">:</span> <span class=\"pl-en\">BigInt</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10021</span></pre></div>\n<p dir=\"auto\">The pull parser is a function <code>Parser =&gt; A</code>; in this example it is concretely <code>Parser =&gt; BigInt</code>.\nThe constructed parser recursively reads tokens until it finds a <code>FieldStart(\"postalCode\")</code> token.\nAfter that the next token must be <code>IntVal</code>; otherwise parsing fails. It returns the parsed integer value and stops parsing immediately.</p>\n<h1 dir=\"auto\"><a id=\"user-content-kudos\" class=\"anchor\" aria-hidden=\"true\" href=\"#kudos\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Kudos</h1>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">The original idea for the DSL syntax was taken from the Lift mailing list (<a href=\"http://markmail.org/message/lniven2hn22vhupu\" rel=\"nofollow\">by Marius</a>).</p>\n</li>\n<li>\n<p dir=\"auto\">The idea for the AST and rendering was taken from <a href=\"http://book.realworldhaskell.org/read/writing-a-library-working-with-json-data.html\" rel=\"nofollow\">Real World Haskell book</a>.</p>\n</li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://github.com/xuwei-k",
        "contributions" : 665
      },
      {
        "login" : "casualjim",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/456109?v=4",
        "url" : "https://github.com/casualjim",
        "contributions" : 309
      },
      {
        "login" : "seratch",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19658?v=4",
        "url" : "https://github.com/seratch",
        "contributions" : 199
      },
      {
        "login" : "json4s-bot[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2207799?v=4",
        "url" : "https://github.com/apps/json4s-bot",
        "contributions" : 155
      },
      {
        "login" : "mccartney",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/762437?v=4",
        "url" : "https://github.com/mccartney",
        "contributions" : 28
      },
      {
        "login" : "dependabot[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/29110?v=4",
        "url" : "https://github.com/apps/dependabot",
        "contributions" : 22
      },
      {
        "login" : "magnolia-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1701138?v=4",
        "url" : "https://github.com/magnolia-k",
        "contributions" : 21
      },
      {
        "login" : "dozed",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/239058?v=4",
        "url" : "https://github.com/dozed",
        "contributions" : 16
      },
      {
        "login" : "ymasory",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/237542?v=4",
        "url" : "https://github.com/ymasory",
        "contributions" : 15
      },
      {
        "login" : "yanns",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/51669?v=4",
        "url" : "https://github.com/yanns",
        "contributions" : 11
      },
      {
        "login" : "rossabaker",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142698?v=4",
        "url" : "https://github.com/rossabaker",
        "contributions" : 11
      },
      {
        "login" : "github-actions[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/15368?v=4",
        "url" : "https://github.com/apps/github-actions",
        "contributions" : 10
      },
      {
        "login" : "asantas93",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4418080?v=4",
        "url" : "https://github.com/asantas93",
        "contributions" : 6
      },
      {
        "login" : "shanielh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/746471?v=4",
        "url" : "https://github.com/shanielh",
        "contributions" : 6
      },
      {
        "login" : "fedeoasi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2257172?v=4",
        "url" : "https://github.com/fedeoasi",
        "contributions" : 6
      },
      {
        "login" : "ponkotuy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4147492?v=4",
        "url" : "https://github.com/ponkotuy",
        "contributions" : 6
      },
      {
        "login" : "scelestino",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/768503?v=4",
        "url" : "https://github.com/scelestino",
        "contributions" : 6
      },
      {
        "login" : "MPvHarmelen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1544429?v=4",
        "url" : "https://github.com/MPvHarmelen",
        "contributions" : 4
      },
      {
        "login" : "tjarvstrand",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/394280?v=4",
        "url" : "https://github.com/tjarvstrand",
        "contributions" : 4
      },
      {
        "login" : "bryce-anderson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2948506?v=4",
        "url" : "https://github.com/bryce-anderson",
        "contributions" : 4
      },
      {
        "login" : "karthicks",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1120120?v=4",
        "url" : "https://github.com/karthicks",
        "contributions" : 3
      },
      {
        "login" : "meirmaor",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3160585?v=4",
        "url" : "https://github.com/meirmaor",
        "contributions" : 3
      },
      {
        "login" : "arkadius",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/534341?v=4",
        "url" : "https://github.com/arkadius",
        "contributions" : 2
      },
      {
        "login" : "BlueTufa",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5139972?v=4",
        "url" : "https://github.com/BlueTufa",
        "contributions" : 2
      },
      {
        "login" : "gkossakowski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4217?v=4",
        "url" : "https://github.com/gkossakowski",
        "contributions" : 2
      },
      {
        "login" : "hvesalai",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/861035?v=4",
        "url" : "https://github.com/hvesalai",
        "contributions" : 2
      },
      {
        "login" : "raimohanska",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/292964?v=4",
        "url" : "https://github.com/raimohanska",
        "contributions" : 2
      },
      {
        "login" : "mpartel",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/328952?v=4",
        "url" : "https://github.com/mpartel",
        "contributions" : 2
      },
      {
        "login" : "jilen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/546573?v=4",
        "url" : "https://github.com/jilen",
        "contributions" : 2
      },
      {
        "login" : "Khalian",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5463072?v=4",
        "url" : "https://github.com/Khalian",
        "contributions" : 2
      },
      {
        "login" : "takezoe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1094760?v=4",
        "url" : "https://github.com/takezoe",
        "contributions" : 2
      },
      {
        "login" : "aki-ks",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/36778587?v=4",
        "url" : "https://github.com/aki-ks",
        "contributions" : 1
      },
      {
        "login" : "aiacovella",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/363442?v=4",
        "url" : "https://github.com/aiacovella",
        "contributions" : 1
      },
      {
        "login" : "aeons",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1432894?v=4",
        "url" : "https://github.com/aeons",
        "contributions" : 1
      },
      {
        "login" : "kblibr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3476665?v=4",
        "url" : "https://github.com/kblibr",
        "contributions" : 1
      },
      {
        "login" : "ceedubs",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/977929?v=4",
        "url" : "https://github.com/ceedubs",
        "contributions" : 1
      },
      {
        "login" : "cstroe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1182093?v=4",
        "url" : "https://github.com/cstroe",
        "contributions" : 1
      },
      {
        "login" : "dsbos",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9450469?v=4",
        "url" : "https://github.com/dsbos",
        "contributions" : 1
      },
      {
        "login" : "Wopple",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/111152?v=4",
        "url" : "https://github.com/Wopple",
        "contributions" : 1
      },
      {
        "login" : "dragisak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/800802?v=4",
        "url" : "https://github.com/dragisak",
        "contributions" : 1
      },
      {
        "login" : "emma-burrows",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1822937?v=4",
        "url" : "https://github.com/emma-burrows",
        "contributions" : 1
      },
      {
        "login" : "ericdgonzalez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9595514?v=4",
        "url" : "https://github.com/ericdgonzalez",
        "contributions" : 1
      },
      {
        "login" : "jozic",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/124249?v=4",
        "url" : "https://github.com/jozic",
        "contributions" : 1
      },
      {
        "login" : "gabigart",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1481994?v=4",
        "url" : "https://github.com/gabigart",
        "contributions" : 1
      },
      {
        "login" : "Miuler",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9974?v=4",
        "url" : "https://github.com/Miuler",
        "contributions" : 1
      },
      {
        "login" : "gsnewmark",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/669671?v=4",
        "url" : "https://github.com/gsnewmark",
        "contributions" : 1
      },
      {
        "login" : "iwein",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/57862?v=4",
        "url" : "https://github.com/iwein",
        "contributions" : 1
      },
      {
        "login" : "jakozaur",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/972989?v=4",
        "url" : "https://github.com/jakozaur",
        "contributions" : 1
      },
      {
        "login" : "omnispearjared",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/957155?v=4",
        "url" : "https://github.com/omnispearjared",
        "contributions" : 1
      },
      {
        "login" : "custommonkey",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1583909?v=4",
        "url" : "https://github.com/custommonkey",
        "contributions" : 1
      },
      {
        "login" : "nornagon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/172800?v=4",
        "url" : "https://github.com/nornagon",
        "contributions" : 1
      },
      {
        "login" : "joehalliwell",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8868?v=4",
        "url" : "https://github.com/joehalliwell",
        "contributions" : 1
      },
      {
        "login" : "tkawachi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22657?v=4",
        "url" : "https://github.com/tkawachi",
        "contributions" : 1
      },
      {
        "login" : "kjr-stratslab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/42806899?v=4",
        "url" : "https://github.com/kjr-stratslab",
        "contributions" : 1
      },
      {
        "login" : "kenrose",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1178304?v=4",
        "url" : "https://github.com/kenrose",
        "contributions" : 1
      },
      {
        "login" : "LannyRipple",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/132310?v=4",
        "url" : "https://github.com/LannyRipple",
        "contributions" : 1
      },
      {
        "login" : "larsrh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/923079?v=4",
        "url" : "https://github.com/larsrh",
        "contributions" : 1
      },
      {
        "login" : "tilumi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/734766?v=4",
        "url" : "https://github.com/tilumi",
        "contributions" : 1
      },
      {
        "login" : "smanikim",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9019390?v=4",
        "url" : "https://github.com/smanikim",
        "contributions" : 1
      },
      {
        "login" : "mkubala",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/328844?v=4",
        "url" : "https://github.com/mkubala",
        "contributions" : 1
      },
      {
        "login" : "mpmiller",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/681266?v=4",
        "url" : "https://github.com/mpmiller",
        "contributions" : 1
      },
      {
        "login" : "msturm",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/48190?v=4",
        "url" : "https://github.com/msturm",
        "contributions" : 1
      },
      {
        "login" : "mmatz-ccri",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11392977?v=4",
        "url" : "https://github.com/mmatz-ccri",
        "contributions" : 1
      },
      {
        "login" : "poslegm",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4687050?v=4",
        "url" : "https://github.com/poslegm",
        "contributions" : 1
      },
      {
        "login" : "thesamet",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/307373?v=4",
        "url" : "https://github.com/thesamet",
        "contributions" : 1
      },
      {
        "login" : "ncolomer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/941891?v=4",
        "url" : "https://github.com/ncolomer",
        "contributions" : 1
      },
      {
        "login" : "ocadaruma",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6070684?v=4",
        "url" : "https://github.com/ocadaruma",
        "contributions" : 1
      },
      {
        "login" : "pjfanning",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11783444?v=4",
        "url" : "https://github.com/pjfanning",
        "contributions" : 1
      },
      {
        "login" : "raghothams",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1147540?v=4",
        "url" : "https://github.com/raghothams",
        "contributions" : 1
      },
      {
        "login" : "robhowley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5652308?v=4",
        "url" : "https://github.com/robhowley",
        "contributions" : 1
      },
      {
        "login" : "sebzz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/652476?v=4",
        "url" : "https://github.com/sebzz",
        "contributions" : 1
      },
      {
        "login" : "geggo98",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/54929?v=4",
        "url" : "https://github.com/geggo98",
        "contributions" : 1
      },
      {
        "login" : "Smerity",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/32325?v=4",
        "url" : "https://github.com/Smerity",
        "contributions" : 1
      },
      {
        "login" : "tabdulradi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/725206?v=4",
        "url" : "https://github.com/tabdulradi",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://github.com/gitter-badger",
        "contributions" : 1
      },
      {
        "login" : "timothyklim",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/387270?v=4",
        "url" : "https://github.com/timothyklim",
        "contributions" : 1
      },
      {
        "login" : "ovstetun",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/41553?v=4",
        "url" : "https://github.com/ovstetun",
        "contributions" : 1
      },
      {
        "login" : "vladmiller",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1024144?v=4",
        "url" : "https://github.com/vladmiller",
        "contributions" : 1
      },
      {
        "login" : "gnawux",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/54124?v=4",
        "url" : "https://github.com/gnawux",
        "contributions" : 1
      },
      {
        "login" : "abesanderson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15162698?v=4",
        "url" : "https://github.com/abesanderson",
        "contributions" : 1
      },
      {
        "login" : "firehooper",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1431982?v=4",
        "url" : "https://github.com/firehooper",
        "contributions" : 1
      },
      {
        "login" : "gakuzzzz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/772571?v=4",
        "url" : "https://github.com/gakuzzzz",
        "contributions" : 1
      },
      {
        "login" : "insano10",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7420159?v=4",
        "url" : "https://github.com/insano10",
        "contributions" : 1
      },
      {
        "login" : "janresiak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3851768?v=4",
        "url" : "https://github.com/janresiak",
        "contributions" : 1
      },
      {
        "login" : "kobtea",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1685207?v=4",
        "url" : "https://github.com/kobtea",
        "contributions" : 1
      },
      {
        "login" : "leek1211",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11023719?v=4",
        "url" : "https://github.com/leek1211",
        "contributions" : 1
      },
      {
        "login" : "mathhun",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5974117?v=4",
        "url" : "https://github.com/mathhun",
        "contributions" : 1
      },
      {
        "login" : "softprops",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2242?v=4",
        "url" : "https://github.com/softprops",
        "contributions" : 1
      },
      {
        "login" : "sullis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30938?v=4",
        "url" : "https://github.com/sullis",
        "contributions" : 1
      },
      {
        "login" : "thetrav",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/111969?v=4",
        "url" : "https://github.com/thetrav",
        "contributions" : 1
      },
      {
        "login" : "thirstycrow",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1327305?v=4",
        "url" : "https://github.com/thirstycrow",
        "contributions" : 1
      },
      {
        "login" : "thrykol",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/976157?v=4",
        "url" : "https://github.com/thrykol",
        "contributions" : 1
      }
    ],
    "commits" : 1589,
    "topics" : [
      "jackson",
      "json",
      "scala"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : "https://gitter.im/json4s/json4s",
    "openIssues" : [
      {
        "number" : 1082,
        "title" : "extraction always yield empty JObject if loaded AFTER scalatest 3.2.10",
        "url" : "https://github.com/json4s/json4s/issues/1082"
      },
      {
        "number" : 1035,
        "title" : "Extraction fails with Scala 3 (\"Can't find ScalaSig\")",
        "url" : "https://github.com/json4s/json4s/issues/1035"
      },
      {
        "number" : 1034,
        "title" : "Could not find implicit value for evidence parameter of type org.json4s.AsJsonInput in json4s 4.0.4",
        "url" : "https://github.com/json4s/json4s/issues/1034"
      },
      {
        "number" : 1028,
        "title" : "json4s parsing StructType",
        "url" : "https://github.com/json4s/json4s/issues/1028"
      },
      {
        "number" : 1022,
        "title" : "Contextual deserialization of a field based on multiple fields?",
        "url" : "https://github.com/json4s/json4s/issues/1022"
      },
      {
        "number" : 982,
        "title" : "Deprecation Warning for extract with Scala 3",
        "url" : "https://github.com/json4s/json4s/issues/982"
      },
      {
        "number" : 857,
        "title" : "MappingException: unknown error with using json4s on spark datasets",
        "url" : "https://github.com/json4s/json4s/issues/857"
      },
      {
        "number" : 849,
        "title" : "cannot transform from AST",
        "url" : "https://github.com/json4s/json4s/issues/849"
      },
      {
        "number" : 815,
        "title" : "json4s-jackson-core: no implicit MonadicJValue",
        "url" : "https://github.com/json4s/json4s/issues/815"
      },
      {
        "number" : 805,
        "title" : "Security considerations: `FullTypeHints` and `org.json4s.jackson.Serialization::read` DDoS",
        "url" : "https://github.com/json4s/json4s/issues/805"
      },
      {
        "number" : 771,
        "title" : "Parsing 10ks of JSON documents hits bottleneck on ParserUtil segment pool.",
        "url" : "https://github.com/json4s/json4s/issues/771"
      },
      {
        "number" : 767,
        "title" : "java.time.Instant serializer (and probably others too) is dropping sub-milliseconds",
        "url" : "https://github.com/json4s/json4s/issues/767"
      },
      {
        "number" : 756,
        "title" : "FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. org.json4s.jackson.JsonMethods$.parse$default$3()Z",
        "url" : "https://github.com/json4s/json4s/issues/756"
      },
      {
        "number" : 748,
        "title" : "Create new issue template",
        "url" : "https://github.com/json4s/json4s/issues/748"
      },
      {
        "number" : 712,
        "title" : "CustomSerializer[Enumeration.Value] clobbers EnumNameSerializer()",
        "url" : "https://github.com/json4s/json4s/issues/712"
      },
      {
        "number" : 709,
        "title" : "De-serialization polymorphic lists",
        "url" : "https://github.com/json4s/json4s/issues/709"
      },
      {
        "number" : 706,
        "title" : "Formats.typeHints.typeHintFieldName is inaccurate",
        "url" : "https://github.com/json4s/json4s/issues/706"
      },
      {
        "number" : 702,
        "title" : "Extraction.decompose fails on case class with secondary implicit arguments list : org.json4s.package$MappingException: Can't find constructor",
        "url" : "https://github.com/json4s/json4s/issues/702"
      },
      {
        "number" : 682,
        "title" : "convert xml to json",
        "url" : "https://github.com/json4s/json4s/issues/682"
      },
      {
        "number" : 680,
        "title" : "Serializer & KeySerializer should be Serializable",
        "url" : "https://github.com/json4s/json4s/issues/680"
      },
      {
        "number" : 678,
        "title" : "Improve numeric type interoperability with ECMAScript JSON",
        "url" : "https://github.com/json4s/json4s/issues/678"
      },
      {
        "number" : 677,
        "title" : "Types extending Iterable[_] are not rendered correctly",
        "url" : "https://github.com/json4s/json4s/issues/677"
      },
      {
        "number" : 672,
        "title" : "Question: Raise exception while extraction object with the wrong schema on the Optional field",
        "url" : "https://github.com/json4s/json4s/issues/672"
      },
      {
        "number" : 665,
        "title" : "camelizeKeys/snakelizeKey for all case classes",
        "url" : "https://github.com/json4s/json4s/issues/665"
      },
      {
        "number" : 664,
        "title" : "Provide a format configuration that retains pre-3.6 behavior for strictOptionParsing.",
        "url" : "https://github.com/json4s/json4s/issues/664"
      },
      {
        "number" : 661,
        "title" : "Constructor matcher downvotes arguments with defaults, which may choose least correct option.",
        "url" : "https://github.com/json4s/json4s/issues/661"
      },
      {
        "number" : 652,
        "title" : "Using Hints prevent hot reloading in Play",
        "url" : "https://github.com/json4s/json4s/issues/652"
      },
      {
        "number" : 650,
        "title" : "extract should fail on extra fields",
        "url" : "https://github.com/json4s/json4s/issues/650"
      },
      {
        "number" : 648,
        "title" : "extractOpt[String] seems to be broken in 3.6.x",
        "url" : "https://github.com/json4s/json4s/issues/648"
      },
      {
        "number" : 647,
        "title" : "Unexpectedly returns default values for entire case class when one field is missing",
        "url" : "https://github.com/json4s/json4s/issues/647"
      },
      {
        "number" : 646,
        "title" : "Should org.json4s.Executable be replaced by Java 8's java.lang.reflect.Executable class",
        "url" : "https://github.com/json4s/json4s/issues/646"
      },
      {
        "number" : 645,
        "title" : "Is the dependency on paranamer unnecessary?",
        "url" : "https://github.com/json4s/json4s/issues/645"
      },
      {
        "number" : 623,
        "title" : "Consider adding back `seq2jvalue` for `Traversable` for binary compatibility",
        "url" : "https://github.com/json4s/json4s/issues/623"
      },
      {
        "number" : 614,
        "title" : "Serialization with generic type alias of different arity is broken",
        "url" : "https://github.com/json4s/json4s/issues/614"
      },
      {
        "number" : 596,
        "title" : "There is no way to determine if an object is serializable",
        "url" : "https://github.com/json4s/json4s/issues/596"
      },
      {
        "number" : 554,
        "title" : "Denial of service when parsing a JSON object with an unexpected field that has a big number",
        "url" : "https://github.com/json4s/json4s/issues/554"
      },
      {
        "number" : 553,
        "title" : "Denial of service when parsing JSON object with keys that have the same hash code",
        "url" : "https://github.com/json4s/json4s/issues/553"
      },
      {
        "number" : 542,
        "title" : "Illegal reflective access operation, will be denied in Java 11.",
        "url" : "https://github.com/json4s/json4s/issues/542"
      },
      {
        "number" : 539,
        "title" : "Deserialization for large files is very slow",
        "url" : "https://github.com/json4s/json4s/issues/539"
      },
      {
        "number" : 536,
        "title" : "Regression: MappingException when serializing case classes with companion object",
        "url" : "https://github.com/json4s/json4s/issues/536"
      },
      {
        "number" : 525,
        "title" : "Don't serialize lazyVals with FieldSerializer at all, instead of serializing default values",
        "url" : "https://github.com/json4s/json4s/issues/525"
      },
      {
        "number" : 513,
        "title" : "Extraction of Option[Int] does not work when multiple constructors are present",
        "url" : "https://github.com/json4s/json4s/issues/513"
      },
      {
        "number" : 509,
        "title" : "Drop native import from TypeFieldSerializer",
        "url" : "https://github.com/json4s/json4s/issues/509"
      },
      {
        "number" : 508,
        "title" : "add extractors for the JValue subtypes",
        "url" : "https://github.com/json4s/json4s/issues/508"
      },
      {
        "number" : 502,
        "title" : "Serializing/Deserializing a Case Class that is also Seq to JSON",
        "url" : "https://github.com/json4s/json4s/issues/502"
      },
      {
        "number" : 501,
        "title" : "Extraction of Option converts to None in case of multiple choices present",
        "url" : "https://github.com/json4s/json4s/issues/501"
      },
      {
        "number" : 497,
        "title" : "Fail to fail parsing array of objects with missing comma",
        "url" : "https://github.com/json4s/json4s/issues/497"
      },
      {
        "number" : 495,
        "title" : "Snakeize should not modify key if the key is a negative number",
        "url" : "https://github.com/json4s/json4s/issues/495"
      },
      {
        "number" : 494,
        "title" : "Do not know how to serialize key of type class com.mypackage.Myclass. Consider implementing a CustomKeySerializer",
        "url" : "https://github.com/json4s/json4s/issues/494"
      },
      {
        "number" : 492,
        "title" : "Native accepts arbitrary number of commas",
        "url" : "https://github.com/json4s/json4s/issues/492"
      },
      {
        "number" : 490,
        "title" : "Incorrect XML to JSON conversion",
        "url" : "https://github.com/json4s/json4s/issues/490"
      },
      {
        "number" : 470,
        "title" : "generic with self referencing type bounds causes StackOverflowError in serialization or deserialization",
        "url" : "https://github.com/json4s/json4s/issues/470"
      },
      {
        "number" : 464,
        "title" : "Deserialization not working on Android",
        "url" : "https://github.com/json4s/json4s/issues/464"
      },
      {
        "number" : 458,
        "title" : "Deserializing \"{}\" to JObject with Jackson creates JObject(obj=null) which NPEs on comparison",
        "url" : "https://github.com/json4s/json4s/issues/458"
      },
      {
        "number" : 457,
        "title" : "#suggestion/#request: snippet in README.md for flatten function from Extract",
        "url" : "https://github.com/json4s/json4s/issues/457"
      },
      {
        "number" : 447,
        "title" : "ScalaSigReader's findConstructor fails when case class has at least one implicit parameter",
        "url" : "https://github.com/json4s/json4s/issues/447"
      },
      {
        "number" : 446,
        "title" : "Possibility to attach CustomSerializer to a specific case class",
        "url" : "https://github.com/json4s/json4s/issues/446"
      },
      {
        "number" : 445,
        "title" : "Inconsistent decomposition of case class with Option of value class",
        "url" : "https://github.com/json4s/json4s/issues/445"
      },
      {
        "number" : 444,
        "title" : "Extraction to a case class with Option of value class does not work",
        "url" : "https://github.com/json4s/json4s/issues/444"
      },
      {
        "number" : 442,
        "title" : "Duplicate field serialization when inheriting from base class",
        "url" : "https://github.com/json4s/json4s/issues/442"
      },
      {
        "number" : 441,
        "title" : "README could better cover MonadicJValue methods",
        "url" : "https://github.com/json4s/json4s/issues/441"
      },
      {
        "number" : 432,
        "title" : "Throwing exceptions on unknown fields",
        "url" : "https://github.com/json4s/json4s/issues/432"
      },
      {
        "number" : 431,
        "title" : "Polymorphic Extraction is broken",
        "url" : "https://github.com/json4s/json4s/issues/431"
      },
      {
        "number" : 430,
        "title" : "Extracting an Int from a json Long should throw an exception ",
        "url" : "https://github.com/json4s/json4s/issues/430"
      },
      {
        "number" : 428,
        "title" : "Loop over JArray executes too many times",
        "url" : "https://github.com/json4s/json4s/issues/428"
      },
      {
        "number" : 424,
        "title" : "IllegalArgumentException coming from a failed \"require\" block is wrapped in a MappingException",
        "url" : "https://github.com/json4s/json4s/issues/424"
      },
      {
        "number" : 418,
        "title" : "Encountering 'org.json4s.package$MappingException: No usable value for x' when classloading sequence is changed by Spark",
        "url" : "https://github.com/json4s/json4s/issues/418"
      },
      {
        "number" : 407,
        "title" : "Option[JValue] field type not parsed correctly",
        "url" : "https://github.com/json4s/json4s/issues/407"
      },
      {
        "number" : 403,
        "title" : "error \"Can't find ScalaSig for class java.lang.Object\" writing class with type member ",
        "url" : "https://github.com/json4s/json4s/issues/403"
      },
      {
        "number" : 401,
        "title" : "How to just get the parent \"name\" with LINQ style?",
        "url" : "https://github.com/json4s/json4s/issues/401"
      },
      {
        "number" : 397,
        "title" : "Bug: Extraction's reflection breaks on type aliases (loops endlessly or throws)",
        "url" : "https://github.com/json4s/json4s/issues/397"
      },
      {
        "number" : 396,
        "title" : "Is there a way to get all keys from the parsed json?",
        "url" : "https://github.com/json4s/json4s/issues/396"
      },
      {
        "number" : 395,
        "title" : "Would there be a performance issue if I combine all EnumNameSerializer into one implicit Formats?",
        "url" : "https://github.com/json4s/json4s/issues/395"
      },
      {
        "number" : 394,
        "title" : "Can not serialize case class with context bound",
        "url" : "https://github.com/json4s/json4s/issues/394"
      },
      {
        "number" : 392,
        "title" : "Can not serialize java class if it has java.util.Map",
        "url" : "https://github.com/json4s/json4s/issues/392"
      },
      {
        "number" : 389,
        "title" : "java.io.NotSerializableException: org.json4s.DefaultFormats",
        "url" : "https://github.com/json4s/json4s/issues/389"
      },
      {
        "number" : 388,
        "title" : "Quick Question on Configuring Jackson ObjectMapper",
        "url" : "https://github.com/json4s/json4s/issues/388"
      },
      {
        "number" : 386,
        "title" : "Add  CHANGELOG",
        "url" : "https://github.com/json4s/json4s/issues/386"
      },
      {
        "number" : 376,
        "title" : "Either does not seem to work in practice",
        "url" : "https://github.com/json4s/json4s/issues/376"
      },
      {
        "number" : 369,
        "title" : "Extracting case class with implicit member fails",
        "url" : "https://github.com/json4s/json4s/issues/369"
      },
      {
        "number" : 356,
        "title" : "When deserializing Option json4s fails silently on missing properties",
        "url" : "https://github.com/json4s/json4s/issues/356"
      },
      {
        "number" : 355,
        "title" : "Diff doesn't work with arrays",
        "url" : "https://github.com/json4s/json4s/issues/355"
      },
      {
        "number" : 354,
        "title" : "JSON patch support",
        "url" : "https://github.com/json4s/json4s/issues/354"
      },
      {
        "number" : 353,
        "title" : "LocalDate parsing fails",
        "url" : "https://github.com/json4s/json4s/issues/353"
      },
      {
        "number" : 349,
        "title" : "Deserialization of a classes with AnyVals failing with class cast exception",
        "url" : "https://github.com/json4s/json4s/issues/349"
      },
      {
        "number" : 336,
        "title" : "Type alias for parameterized type in case class causes `java.lang.IndexOutOfBoundsException`",
        "url" : "https://github.com/json4s/json4s/issues/336"
      },
      {
        "number" : 334,
        "title" : "Easier way to create both Serializer and KeySerializer when serializing as string",
        "url" : "https://github.com/json4s/json4s/issues/334"
      },
      {
        "number" : 330,
        "title" : "native implementation does not fully adhere to json.org spec",
        "url" : "https://github.com/json4s/json4s/issues/330"
      },
      {
        "number" : 329,
        "title" : "Support for configuring (Long vs BigInt) broken in Jackson backend",
        "url" : "https://github.com/json4s/json4s/issues/329"
      },
      {
        "number" : 326,
        "title" : "Extracting Java built in Maps/HashMaps from json",
        "url" : "https://github.com/json4s/json4s/issues/326"
      },
      {
        "number" : 323,
        "title" : "extracting object from parsed json from mongodb ",
        "url" : "https://github.com/json4s/json4s/issues/323"
      },
      {
        "number" : 322,
        "title" : "Support SortedMap in case classes",
        "url" : "https://github.com/json4s/json4s/issues/322"
      },
      {
        "number" : 319,
        "title" : "how can i get a json by merged tow json objects",
        "url" : "https://github.com/json4s/json4s/issues/319"
      },
      {
        "number" : 318,
        "title" : "Weird behavior on diff version 3.3.0",
        "url" : "https://github.com/json4s/json4s/issues/318"
      },
      {
        "number" : 317,
        "title" : "DefaultFormats shows error : java.lang.AbstractMethodError ",
        "url" : "https://github.com/json4s/json4s/issues/317"
      },
      {
        "number" : 315,
        "title" : "Memoizing companion objects assumes they are fixed",
        "url" : "https://github.com/json4s/json4s/issues/315"
      },
      {
        "number" : 308,
        "title" : "Custom Serializer issue with Option type field",
        "url" : "https://github.com/json4s/json4s/issues/308"
      },
      {
        "number" : 301,
        "title" : "Error with serializer - cannot be applied to ((String, Option[List[Widget2]]))",
        "url" : "https://github.com/json4s/json4s/issues/301"
      },
      {
        "number" : 298,
        "title" : "SerializerCheck tests occasionally fail",
        "url" : "https://github.com/json4s/json4s/issues/298"
      },
      {
        "number" : 291,
        "title" : "Performance degradation when using many custom Serializers",
        "url" : "https://github.com/json4s/json4s/issues/291"
      },
      {
        "number" : 283,
        "title" : "How to pattern-match JValue without considering the JSON fields ordering?",
        "url" : "https://github.com/json4s/json4s/issues/283"
      },
      {
        "number" : 281,
        "title" : "Serialization of a simple case class with type synonyms hangs indefinitely",
        "url" : "https://github.com/json4s/json4s/issues/281"
      },
      {
        "number" : 278,
        "title" : "strange behavior of filterField",
        "url" : "https://github.com/json4s/json4s/issues/278"
      },
      {
        "number" : 277,
        "title" : "parsing DateTime with JodaTimeSerializers is inconsistent",
        "url" : "https://github.com/json4s/json4s/issues/277"
      },
      {
        "number" : 274,
        "title" : "Problem with default fields and Apache Spark",
        "url" : "https://github.com/json4s/json4s/issues/274"
      },
      {
        "number" : 273,
        "title" : "Aliased type field cannot extract properly",
        "url" : "https://github.com/json4s/json4s/issues/273"
      },
      {
        "number" : 262,
        "title" : "Inconsistent behavior of removeField",
        "url" : "https://github.com/json4s/json4s/issues/262"
      },
      {
        "number" : 261,
        "title" : "Generic Json case class format. org.json4s.package$MappingException: Can't find constructor ",
        "url" : "https://github.com/json4s/json4s/issues/261"
      },
      {
        "number" : 254,
        "title" : "Changing default serialization for tuples",
        "url" : "https://github.com/json4s/json4s/issues/254"
      },
      {
        "number" : 228,
        "title" : "Json4s cannot deserialise Java Pojos (Can't find ScalaSig)",
        "url" : "https://github.com/json4s/json4s/issues/228"
      },
      {
        "number" : 226,
        "title" : "Parsing result of rendering primitive throws an error. 3.2.11",
        "url" : "https://github.com/json4s/json4s/issues/226"
      },
      {
        "number" : 223,
        "title" : "json4s & Jackson StackOverflow error when serializing case class with Char field",
        "url" : "https://github.com/json4s/json4s/issues/223"
      },
      {
        "number" : 221,
        "title" : "Extraction of case class inheriting a Tuple val from a trait fails",
        "url" : "https://github.com/json4s/json4s/issues/221"
      },
      {
        "number" : 220,
        "title" : "Infinite loop when deserialize class with field of collection of scalaz tagged type",
        "url" : "https://github.com/json4s/json4s/issues/220"
      },
      {
        "number" : 218,
        "title" : "FieldSerializer serializing implicit manifest",
        "url" : "https://github.com/json4s/json4s/issues/218"
      },
      {
        "number" : 176,
        "title" : "JsonParser hangs on very long number",
        "url" : "https://github.com/json4s/json4s/issues/176"
      },
      {
        "number" : 175,
        "title" : "Stack overflow when parsing deeply nested JSON data",
        "url" : "https://github.com/json4s/json4s/issues/175"
      },
      {
        "number" : 174,
        "title" : "Json4s with play framework Actions issue",
        "url" : "https://github.com/json4s/json4s/issues/174"
      },
      {
        "number" : 172,
        "title" : "JObject appears to use a List(JField) underneath so constant time \\() is not possible",
        "url" : "https://github.com/json4s/json4s/issues/172"
      },
      {
        "number" : 166,
        "title" : "Cannot extract data from json with more than 22 fields in scala 2.10",
        "url" : "https://github.com/json4s/json4s/issues/166"
      },
      {
        "number" : 160,
        "title" : "Unable to serialize case class containing Double to required format",
        "url" : "https://github.com/json4s/json4s/issues/160"
      },
      {
        "number" : 158,
        "title" : "Fail-fast if multiple classes map to the same type hint",
        "url" : "https://github.com/json4s/json4s/issues/158"
      },
      {
        "number" : 153,
        "title" : "DSL not working even with minimal imports",
        "url" : "https://github.com/json4s/json4s/issues/153"
      },
      {
        "number" : 152,
        "title" : "Documentation and functionality of merge",
        "url" : "https://github.com/json4s/json4s/issues/152"
      },
      {
        "number" : 151,
        "title" : "json4s throws No JSON serializer found for type Map[String,Any] on Scala Map serialization",
        "url" : "https://github.com/json4s/json4s/issues/151"
      },
      {
        "number" : 149,
        "title" : "Problem with implicits when parsing withing a map",
        "url" : "https://github.com/json4s/json4s/issues/149"
      },
      {
        "number" : 143,
        "title" : "org.json4s.package$MappingException: Can't find constructor for <case class>",
        "url" : "https://github.com/json4s/json4s/issues/143"
      },
      {
        "number" : 142,
        "title" : "Multiple EnumNameSerializers can assign wrong enum value to case class",
        "url" : "https://github.com/json4s/json4s/issues/142"
      },
      {
        "number" : 139,
        "title" : "Extracting case classes with Type Parameters fails with runtime error",
        "url" : "https://github.com/json4s/json4s/issues/139"
      },
      {
        "number" : 132,
        "title" : "Unify code formating",
        "url" : "https://github.com/json4s/json4s/issues/132"
      },
      {
        "number" : 118,
        "title" : "When extracting a List[Int] it should fail when the json array is heterogenous",
        "url" : "https://github.com/json4s/json4s/issues/118"
      },
      {
        "number" : 117,
        "title" : "Use apply/unapply for creating readers and writers (codecs)",
        "url" : "https://github.com/json4s/json4s/issues/117"
      },
      {
        "number" : 113,
        "title" : "Pattern matching is order-dependent",
        "url" : "https://github.com/json4s/json4s/issues/113"
      },
      {
        "number" : 105,
        "title" : "Deserialization of objects produces different instances",
        "url" : "https://github.com/json4s/json4s/issues/105"
      },
      {
        "number" : 66,
        "title" : "Serialization of ADT's in case class",
        "url" : "https://github.com/json4s/json4s/issues/66"
      },
      {
        "number" : 64,
        "title" : "Can't extract Map[String, Any] from mixed lists",
        "url" : "https://github.com/json4s/json4s/issues/64"
      },
      {
        "number" : 50,
        "title" : "Problem serializing Mongo DBOBject date field, it gets serialized to JNothing",
        "url" : "https://github.com/json4s/json4s/issues/50"
      },
      {
        "number" : 30,
        "title" : "Add scalaz iteratee support",
        "url" : "https://github.com/json4s/json4s/issues/30"
      },
      {
        "number" : 25,
        "title" : "XML to JSON to XML",
        "url" : "https://github.com/json4s/json4s/issues/25"
      },
      {
        "number" : 24,
        "title" : "Xml.toJson produces incorrect results for mixed sub tags",
        "url" : "https://github.com/json4s/json4s/issues/24"
      }
    ],
    "scalaPercentage" : 96,
    "license" : "Apache-2.0",
    "commitActivity" : [
      {
        "total" : 4,
        "week" : 1629590400000,
        "days" : [
          0,
          0,
          0,
          0,
          2,
          1,
          1
        ]
      },
      {
        "total" : 6,
        "week" : 1630195200000,
        "days" : [
          0,
          0,
          0,
          0,
          5,
          0,
          1
        ]
      },
      {
        "total" : 1,
        "week" : 1630800000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 4,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          0,
          1,
          1,
          0,
          2
        ]
      },
      {
        "total" : 5,
        "week" : 1632009600000,
        "days" : [
          0,
          1,
          0,
          0,
          1,
          1,
          2
        ]
      },
      {
        "total" : 4,
        "week" : 1632614400000,
        "days" : [
          1,
          1,
          0,
          0,
          2,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1633219200000,
        "days" : [
          1,
          0,
          1,
          0,
          2,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1633824000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 5,
        "week" : 1634428800000,
        "days" : [
          0,
          2,
          0,
          0,
          1,
          2,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1635033600000,
        "days" : [
          2,
          0,
          0,
          1,
          0,
          0,
          1
        ]
      },
      {
        "total" : 2,
        "week" : 1635638400000,
        "days" : [
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1636243200000,
        "days" : [
          0,
          2,
          0,
          0,
          1,
          1,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1636848000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1637452800000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          2
        ]
      },
      {
        "total" : 3,
        "week" : 1638662400000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          2
        ]
      },
      {
        "total" : 2,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          1,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1639872000000,
        "days" : [
          1,
          0,
          1,
          1,
          0,
          1,
          2
        ]
      },
      {
        "total" : 2,
        "week" : 1640476800000,
        "days" : [
          1,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1641081600000,
        "days" : [
          1,
          1,
          0,
          1,
          0,
          3,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1641686400000,
        "days" : [
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 6,
        "week" : 1642291200000,
        "days" : [
          0,
          0,
          1,
          1,
          2,
          1,
          1
        ]
      },
      {
        "total" : 3,
        "week" : 1642896000000,
        "days" : [
          1,
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1643500800000,
        "days" : [
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1644105600000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          0,
          1
        ]
      },
      {
        "total" : 2,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          1,
          1
        ]
      },
      {
        "total" : 0,
        "week" : 1645315200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1645920000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1646524800000,
        "days" : [
          0,
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1647734400000,
        "days" : [
          0,
          1,
          0,
          1,
          0,
          1,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1648339200000,
        "days" : [
          1,
          0,
          1,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 7,
        "week" : 1648944000000,
        "days" : [
          0,
          0,
          3,
          0,
          0,
          4,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1649548800000,
        "days" : [
          0,
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          1,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 4,
        "week" : 1650758400000,
        "days" : [
          0,
          1,
          3,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651363200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1654387200000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654992000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1655596800000,
        "days" : [
          0,
          1,
          0,
          2,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1656201600000,
        "days" : [
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1656806400000,
        "days" : [
          1,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "total" : 2,
        "week" : 1657411200000,
        "days" : [
          1,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1658016000000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658620800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1659225600000,
        "days" : [
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1659830400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          1,
          1
        ]
      },
      {
        "total" : 1,
        "week" : 1660435200000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "json4s-ast",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "json",
    "beginnerIssuesLabel" : null
  }
}