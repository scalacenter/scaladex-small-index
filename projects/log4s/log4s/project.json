{
  "organization" : "log4s",
  "repository" : "log4s",
  "creationDate" : 1610334851000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1643173617707
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "High-performance SLF4J wrapper for Scala.",
    "logo" : "https://avatars.githubusercontent.com/u/5321885?v=4",
    "stars" : 164,
    "forks" : 22,
    "watchers" : 9,
    "issues" : 9,
    "creationDate" : 1367135868000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-log4s\" class=\"anchor\" aria-hidden=\"true\" href=\"#log4s\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Log4s</h1>\n<p dir=\"auto\"><strong>Note:</strong> Log4s is not vulnerable to <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44228\" rel=\"nofollow\">log4shell (CVE-2021-44228)</a> but the loggers that sit behind it may be. <a href=\"#cve-2021-44228-log4shell\">See more details.</a></p>\n<p dir=\"auto\"><strong>Note:</strong> version 1.6 and above have <em>experimental</em> support for\n<a href=\"https://www.scala-js.org/\" rel=\"nofollow\">Scala.js</a>. See the table of contents below for\ndocumentation.</p>\n<p dir=\"auto\">To get started quickly, you can add this dependency to your <code>build.sbt</code></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.log4s&quot; %% &quot;log4s&quot; % &quot;1.8.2&quot;\"><pre><code>libraryDependencies += \"org.log4s\" %% \"log4s\" % \"1.8.2\"\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-topics\" class=\"anchor\" aria-hidden=\"true\" href=\"#topics\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Topics</h2>\n<ul dir=\"auto\">\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#requirements\">Requirements</a></li>\n<li><a href=\"#using-log4s\">Using Log4s</a>\n<ul dir=\"auto\">\n<li><a href=\"#getting-a-logger\">Getting a logger</a></li>\n<li><a href=\"#logging-messages\">Performing logging</a></li>\n<li><a href=\"#exception-logging\">Exception logging</a></li>\n<li><a href=\"#diagnostic-contexts\">Diagnostic contexts</a></li>\n</ul>\n</li>\n<li><a href=\"#scalajs-support\">Scala.js support</a></li>\n<li><a href=\"#testing\">Log4s Testing</a></li>\n<li><a href=\"#unsupported-features\">Unsupported features</a></li>\n<li><a href=\"#contributors\">Contributors</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Introduction</h2>\n<p dir=\"auto\">Logging is a generally solved problem on the JVM, thanks largely to the\nexcellent work of Ceki Gülcü and many others. The <a href=\"http://slf4j.org\" rel=\"nofollow\">SLF4J</a>\nlibrary solves the problem of abstracting logging over different frameworks\non the JVM, and frameworks like <a href=\"https://logback.qos.ch/\" rel=\"nofollow\">Logback</a> and\n<a href=\"https://logging.apache.org/log4j/2.x/\" rel=\"nofollow\">Log4j 2</a> are both flexible and\npowerful.</p>\n<p dir=\"auto\">On the JVM, Log4s simply sits on top of these existing subsystems. Scala's\nmacro and value classes, enable Log4s provide an idiomatic Scala façade that\ndoes not impose runtime overhead and that frequently outperforms the common\nusage patterns of the JVM APIs.</p>\n<p dir=\"auto\">Log4s also provides some additional functionality to improve the ease of\nlogging-related development, including the Log4s Testing framework for\nfacilitating the testing of logging-related code.</p>\n<h2 dir=\"auto\"><a id=\"user-content-using-log4s\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-log4s\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using Log4s</h2>\n<h3 dir=\"auto\"><a id=\"user-content-requirements\" class=\"anchor\" aria-hidden=\"true\" href=\"#requirements\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Requirements</h3>\n<p dir=\"auto\">Scala 2.11, 2.12 and 2.13 are fully supported. No special settings or\ncompiler options are required: just add the dependency as described\nabove.</p>\n<h4 dir=\"auto\"><a id=\"user-content-scala-210\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-210\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala 2.10</h4>\n<p dir=\"auto\">Scala 2.10 support is still present, but it is beyond its support window: it\nmay be removed in any future minor release if there's a reason. (It will not\nbe removed in a patch release.)</p>\n<p dir=\"auto\">The macro paradise compiler extensions are not required for Scala 2.10.</p>\n<h3 dir=\"auto\"><a id=\"user-content-getting-a-logger\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-a-logger\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Getting a logger</h3>\n<p dir=\"auto\">Most of the time, you simply want to define a logger with a name that matches\nthe enclosing class or module.  Log4s makes this common case as easy as\npossible, transparently deriving the name for you with zero overhead at runtime.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.example.project\nimport org.log4s._\n\nclass DemoClass {\n  // Retrieves a logger for &quot;com.example.project.DemoClass&quot;\n  private[this] val logger = getLogger\n  ???\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">example</span>.<span class=\"pl-en\">project</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">log4s</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DemoClass</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Retrieves a logger for \"com.example.project.DemoClass\"</span>\n  <span class=\"pl-k\">private</span>[<span class=\"pl-c1\">this</span>] <span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span> <span class=\"pl-k\">=</span> getLogger\n  <span class=\"pl-k\">???</span>\n}</pre></div>\n<p dir=\"auto\">There is no requirement that you mark your loggers with <code>private[this]</code>, but\nthe compiler may bypass accessors and generate direct field access if you do.</p>\n<p dir=\"auto\">It is not required that you import <code>org.log4s._</code> into your classes: calling\n<code>org.log4s.getLogger</code> will also have the same effect. I generally recommend\nimporting the entire <code>log4s</code> package: it doesn't have many symbols that are\nlikely to conflict, and importing the package makes it easy to access other\nlogging features if needed.</p>\n<p dir=\"auto\">Automatic logger naming also works for modules (a.k.a. objects or\nsingletons).</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object DemoClass {\n  // Will log against category &quot;com.example.project.DemoClass&quot;\n  private val logger = org.log4s.getLogger\n  ???\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">DemoClass</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Will log against category \"com.example.project.DemoClass\"</span>\n  <span class=\"pl-k\">private</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span> <span class=\"pl-k\">=</span> org.log4s.getLogger\n  <span class=\"pl-k\">???</span>\n}</pre></div>\n<p dir=\"auto\">Notice that by default, Log4s does not include a <em>$</em> at the end of logger\ncategories for modules.  This is slightly different behavior from the common\nidiom <code>LoggerFactory.getLogger(getClass)</code> used to get a logger for a module,\nbut this behavior is more consistent with Java practices and I suspect is what\na majority of users will prefer.  Future enhancements may provide a mechanism\nto allow the user to choose whether to include the trailing <em>$</em>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-custom-logger-names\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-logger-names\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Custom Logger Names</h4>\n<p dir=\"auto\">There are situations where you may want to use a custom logger name. E.g., you\nmay want to have a special category for some kind of high-level events, or you\nmay want to consolidate the logging of two related classes.</p>\n<p dir=\"auto\">To accomplish this, you can simply pass a name directly to <code>getLogger</code>.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.log4s._\n\nobject CustomNamed {\n  private[this] val queryLogger = getLogger(&quot;queries&quot;)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">log4s</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">CustomNamed</span> {\n  <span class=\"pl-k\">private</span>[<span class=\"pl-c1\">this</span>] <span class=\"pl-k\">val</span> <span class=\"pl-smi\">queryLogger</span> <span class=\"pl-k\">=</span> getLogger(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>queries<span class=\"pl-pds\">\"</span></span>)\n}</pre></div>\n<p dir=\"auto\">Although this is fully supported, I recommend that you use the automatic\nclass-named loggers most of the time. Class-named loggers provide useful\ndebugging information and usually align well with the decisions you'll make\nabout which logging statements you want to enable in which situations. By\nletting the compiler provide the name for you, you also reduce the chance of\nerrors as you refactor your code.</p>\n<h4 dir=\"auto\"><a id=\"user-content-instance-or-static\" class=\"anchor\" aria-hidden=\"true\" href=\"#instance-or-static\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Instance or static?</h4>\n<p dir=\"auto\">My recommendation is that by default you create your loggers as instance\nvariables and mark them as <code>private[this]</code>.  This may be more compatible with\nsome complex classloading environments, and this practice is more friendly to\nprinciples of encapsulation.</p>\n<p dir=\"auto\">However, if a specific class will be instantiated very frequently, you may\nwant to move its logger to the companion module and mark it <code>private</code>.\nThere are some cases where greater visibility is justified, but these are\ninfrequent for most applications.</p>\n<p dir=\"auto\">The SLF4J FAQ has a good discussion of the <a href=\"http://slf4j.org/faq.html#declared_static\" rel=\"nofollow\">tradeoffs between static and\ninstance loggers</a>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-logging-messages\" class=\"anchor\" aria-hidden=\"true\" href=\"#logging-messages\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Logging messages</h3>\n<p dir=\"auto\">The logger interfaces are extremely simple, but they're more powerful than\nthey look.  All the standard loggers take a single argument of type string.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass(val data: Map[String,Int]) {\n  private[this] val logger = org.log4s.getLogger\n\n  logger.debug(&quot;Constructing new instance of MyClass&quot;)\n  logger.trace(s&quot;New instance's data set: $data&quot;)\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MyClass</span>(<span class=\"pl-k\">val</span> <span class=\"pl-smi\">data</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>,<span class=\"pl-en\">Int</span>]) {\n  <span class=\"pl-k\">private</span>[<span class=\"pl-c1\">this</span>] <span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span> <span class=\"pl-k\">=</span> org.log4s.getLogger\n\n  logger.debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Constructing new instance of MyClass<span class=\"pl-pds\">\"</span></span>)\n  logger.trace(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">New instance's data set: </span>$data<span class=\"pl-s\">\"</span>)\n}</pre></div>\n<p dir=\"auto\">Unlike SLF4J, there are no special methods for parameterized logging, because\nit turns out to be completely unnecessary.  Parameterized logging serves two\nprimary purposes: it provides an easy way to construct complex strings, and it\nhelps avoid some of the costs of building a dynamic message when the message\nis at a level that is not enabled.</p>\n<p dir=\"auto\">As you can see from the example, Scala 2.10's\n<a href=\"http://docs.scala-lang.org/overviews/core/string-interpolation.html\" rel=\"nofollow\">string interpolation</a>\nis a much more powerful solution to the first of these issues—and it even saves\nthe runtime work of parsing a format string by splitting up the string into\neasily concatenated pieces at compile time.</p>\n<p dir=\"auto\">Log4s goes even further in that it uses macros to manipulate the execution so\nthat the string interpolations are not even performed unless the logger is\nenabled. It does this by inspecting the structure of the argument that you pass\ninto the logger.</p>\n<p dir=\"auto\">If you pass a constant string literal, Log4s will make a direct, in-line call\nto the underlying SLF4J log method.  If you pass in any kind of more complex\nexpression, Log4s will wrap it in an <tt>is<i>Level</i>Enabled</tt> call\nautomatically.  This is what SLF4J does when you use parameterized logging, but\nLog4s does it transparently and can even auto-wrap additional calculation.</p>\n<p dir=\"auto\">Compare the following:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class JavaClass {\n    ...\n    logger.trace(&quot;Element 1000: {}&quot;, linkedList.get(1000));\n    ...\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">JavaClass</span> {\n    <span class=\"pl-c1\">...</span>\n    logger.<span class=\"pl-en\">trace</span>(\"<span class=\"pl-smi\">Element</span> <span class=\"pl-v\">1000</span>: {}\", <span class=\"pl-v\">linkedList</span>.<span class=\"pl-v\">get</span>(<span class=\"pl-v\">1000</span>));\n    <span class=\"pl-c1\">...</span>\n}</pre></div>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ScalaClass {\n  ...\n  logger.trace(s&quot;Element 1000: ${linkedList(1000)}&quot;)\n  ...\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ScalaClass</span> {\n  ...\n  logger.trace(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">Element 1000: </span>${linkedList(<span class=\"pl-c1\">1000</span>)}<span class=\"pl-s\">\"</span>)\n  ...\n}</pre></div>\n<p dir=\"auto\">In the Java API, parameterized logging is not enough: unless you wrap the call\nwith <code>isTraceEnabled</code>, you will still incur the cost of stepping through the\nlinked list to find element 1000 even if trace-level logging is disabled.\nWithout manual intervention, SLF4J only avoids the cost of string\nconcatenations.</p>\n<p dir=\"auto\">However, Log4s can do better. Its macros discover at compile time that you are\nconstructing a dynamic log statement and automatically wrap the entire\ncalculation with <code>isTraceEnabled</code>.</p>\n<p dir=\"auto\">The string interpolation syntax is not required for this detection, but it\nis usually the easiest and best-performing approach.</p>\n<p dir=\"auto\">You can also use message nesting with entire code blocks. If logging is not\nenabled at the provided level, the block is skipped entirely.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ComplexTrace {\n  ...\n  logger trace {\n    def helper(s: String) = ???\n    val x = ...\n    val y = helper(...)\n    s&quot;Combined trace message for $x: $y&quot;\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ComplexTrace</span> {\n  ...\n  logger trace {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">helper</span>(<span class=\"pl-v\">s</span>: <span class=\"pl-en\">String</span>) <span class=\"pl-k\">=</span> <span class=\"pl-k\">???</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> ...\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">y</span> <span class=\"pl-k\">=</span> helper(...)\n    <span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">Combined trace message for </span>$x<span class=\"pl-s\">: </span>$y<span class=\"pl-s\">\"</span>\n  }\n}</pre></div>\n<p dir=\"auto\">You can, of course, accomplish the same thing using\n<code>if (logger.isTraceEnabled) ...</code>. If the logger is disabled, they will have\nidentical performance. However, the explicit test may perform slightly better\nthan a block in the case where the logger is enabled as a closure may be\nrequired to compile the block. (In most situations, these differences are\n<em>completely</em> negligible, but designing for zero overhead and documenting any\nusage patterns that do add overhead is a major goal of Log4s.)</p>\n<h3 dir=\"auto\"><a id=\"user-content-exception-logging\" class=\"anchor\" aria-hidden=\"true\" href=\"#exception-logging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Exception logging</h3>\n<p dir=\"auto\">When logging an exception, it's always the best practice to send the actual\nexception object into your logging system. This gives you flexibility in how\nit's displayed, the ability to do filtering, and additional options for things\nlike database logging.</p>\n<p dir=\"auto\">Log4s allows you to pass exceptions into your logger, while still maintining\nthe simple string-interpolation style API that makes it so convenient. To log\nan exception, use the following syntax.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"try {\n  ...\n} catch {\n  case e: Exception =&gt; logger.error(e)(&quot;Some error message&quot;)\n}\"><pre><span class=\"pl-k\">try</span> {\n  ...\n} <span class=\"pl-k\">catch</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-v\">e</span>: <span class=\"pl-en\">Exception</span> <span class=\"pl-k\">=&gt;</span> logger.error(e)(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Some error message<span class=\"pl-pds\">\"</span></span>)\n}</pre></div>\n<p dir=\"auto\">There is no method to log an error message without any message, because this\nis generally not a good practice. You can always feed it an empty string if\nyou really want. It's usually not desirable to use the exception's message, as\nmost logging systems will output this anyway.</p>\n<p dir=\"auto\">Like regular message logging, dynamic arguments are only evaluated if the\nprovided logger is turned on. This includes both the <code>Throwable</code> and the\nmessage itself.</p>\n<p dir=\"auto\">This means you could use the following pattern to see who is calling a method,\nand if you were to disable trace logging you would only pay for the call to\n<code>isTraceEnabled</code>, which has a cost of only a few nanoseconds (according to the\n<a href=\"http://www.slf4j.org/faq.html#trace\" rel=\"nofollow\">SLF4J FAQ</a>).</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object MyObject {\n  def xyz() {\n    logger.trace(new RuntimeException())(&quot;Got call into xyz&quot;)\n    ???\n  }\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">MyObject</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">xyz</span>() {\n    logger.trace(<span class=\"pl-k\">new</span> <span class=\"pl-en\">RuntimeException</span>())(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Got call into xyz<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-k\">???</span>\n  }\n}</pre></div>\n<p dir=\"auto\">(This is more an illustration of the possibilities of dynamic message\nprocessing than a suggestion that this is the best way to get caller\ninformation. However, sometimes a low-tech solution like this can be a good\ncomplement to more complex solutions like profilers and debuggers.)</p>\n<h3 dir=\"auto\"><a id=\"user-content-diagnostic-contexts\" class=\"anchor\" aria-hidden=\"true\" href=\"#diagnostic-contexts\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Diagnostic contexts</h3>\n<p dir=\"auto\">Mapped diagnostic contexts (MDCs) are a great way to put share common\ncontextual information across all log statements. Frameworks like Logback\nhave the ability to not just output them, but also use them in filtering to\nselect the type of logging to perform or even persist certain information in\ndatabases.</p>\n<p dir=\"auto\">MDCs in Log4s have the same semantics as those of standard MDCs in SLF4J.\nIn keeping with the design goal of making SLF4J idiomatic to Scala,\nLog4s's MDCs implement the standard interface for a\n<a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.mutable.Map\" rel=\"nofollow\">Scala mutable map</a>.</p>\n<p dir=\"auto\"><strong>Though I cover the map-style API first, see the <a href=\"#mdc-convenience-and-safety\">MDC convenience and\nsafety</a> section below for the simpler idiom that\nI recommend for most situations.</strong></p>\n<h4 dir=\"auto\"><a id=\"user-content-mdc-map-style-api\" class=\"anchor\" aria-hidden=\"true\" href=\"#mdc-map-style-api\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MDC Map-style API</h4>\n<p dir=\"auto\">The direct way to manipulate MDCs is through the <code>org.log4s.MDC</code> object.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.log4s._\n\nobject DiagnosticExample {\n  private[this] val logger = getLogger\n\n  def doRequest(user: String) {\n    val requestId = java.util.UUID.randomUUID\n\n    // Empty out the MDC for this thread\n    MDC.clear\n\n    /* *************************** */\n    /* Set some context in the MDC */\n    /* *************************** */\n\n    // Set a single value\n    MDC(&quot;request-id&quot;) = requestId.toString\n    // Set multiple values\n    MDC += (&quot;request-user&quot; -&gt; user, &quot;request-time&quot; -&gt; System.currentTimeMillis)\n\n    // Note that Log4s requires the caller to do string conversion. This helps\n    // ensure that it's really the implementation that you want.\n\n    /* *************** */\n    /* Use our context */\n    /* *************** */\n\n    // No need to put the request ID in the message: it's in the context\n    logger.debug(&quot;Processing request&quot;)\n\n    /* ************************ */\n    /* Remove context variables */\n    /* ************************ */\n\n    // Remove a single value\n    MDC -= &quot;request-id&quot;\n    // Remove multiple values\n    MDC -= (&quot;request-user&quot;, &quot;request-time&quot;)\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">log4s</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">DiagnosticExample</span> {\n  <span class=\"pl-k\">private</span>[<span class=\"pl-c1\">this</span>] <span class=\"pl-k\">val</span> <span class=\"pl-smi\">logger</span> <span class=\"pl-k\">=</span> getLogger\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">doRequest</span>(<span class=\"pl-v\">user</span>: <span class=\"pl-en\">String</span>) {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">requestId</span> <span class=\"pl-k\">=</span> java.util.<span class=\"pl-en\">UUID</span>.randomUUID\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Empty out the MDC for this thread</span>\n    <span class=\"pl-en\">MDC</span>.clear\n\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> *************************** <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Set some context in the MDC <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> *************************** <span class=\"pl-c\">*/</span></span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Set a single value</span>\n    <span class=\"pl-en\">MDC</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-id<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">=</span> requestId.toString\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Set multiple values</span>\n    <span class=\"pl-en\">MDC</span> <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-user<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> user, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-time<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-en\">System</span>.currentTimeMillis)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Note that Log4s requires the caller to do string conversion. This helps</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> ensure that it's really the implementation that you want.</span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> *************** <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Use our context <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> *************** <span class=\"pl-c\">*/</span></span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> No need to put the request ID in the message: it's in the context</span>\n    logger.debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Processing request<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> ************************ <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Remove context variables <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> ************************ <span class=\"pl-c\">*/</span></span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Remove a single value</span>\n    <span class=\"pl-en\">MDC</span> <span class=\"pl-k\">-</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-id<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Remove multiple values</span>\n    <span class=\"pl-en\">MDC</span> <span class=\"pl-k\">-</span><span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-user<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-time<span class=\"pl-pds\">\"</span></span>)\n  }\n}</pre></div>\n<p dir=\"auto\">These are a few common examples, but all the mutator methods of a mutable\nmap will work. It's also possible to intermix calls to SLF4J's MDC methods\ndirectly: the Log4s map is backed by the actual SLF4J MDC.</p>\n<h4 dir=\"auto\"><a id=\"user-content-mdc-convenience-and-safety\" class=\"anchor\" aria-hidden=\"true\" href=\"#mdc-convenience-and-safety\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MDC convenience and safety</h4>\n<p dir=\"auto\">Note that the example above has a common bug: if some exception happens during\nrequest processing, the MDC will not get cleaned up and it will leak to other\noperations. Because of this common situation, there's a convenience method\nthat does cleanup in a finalizer block. I recommend using this approach for\nmost common settings.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.log4s._\n\nobject BlockExample {\n  def doRequest(user: String) {\n    val requestId = java.util.UUID.randomUUID\n\n    // This context operates only for the block, then cleans itself up\n    MDC.withCtx(&quot;request-id&quot; -&gt; requestId.toString, &quot;request-user&quot; -&gt; user) {\n      logger.debug(&quot;Processing request&quot;)\n    }\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">log4s</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">BlockExample</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">doRequest</span>(<span class=\"pl-v\">user</span>: <span class=\"pl-en\">String</span>) {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">requestId</span> <span class=\"pl-k\">=</span> java.util.<span class=\"pl-en\">UUID</span>.randomUUID\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> This context operates only for the block, then cleans itself up</span>\n    <span class=\"pl-en\">MDC</span>.withCtx(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-id<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> requestId.toString, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request-user<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> user) {\n      logger.debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Processing request<span class=\"pl-pds\">\"</span></span>)\n    }\n  }\n}</pre></div>\n<p dir=\"auto\">Nesting context blocks is permitted. The inner context block retains the\nvalues of the outer context. If there are conflicts, the inner block wins, but\nthe outer value is restored when the inner block is completed.</p>\n<p dir=\"auto\">This ability to restore previous values on block exit does require their\nstorage in a map which adds slight memory overhead. If you are in a tight loop\nwith nested contexts, you may have better performance if you add and remove\nvalues directly. These performance costs apply only to the block-based API,\nnot the map-style API.</p>\n<h2 dir=\"auto\"><a id=\"user-content-scalajs-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#scalajs-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala.js Support</h2>\n<p dir=\"auto\"><strong>Scala.js support is currently experimental.</strong> It should be stable enough to\nuse reliably, but there may be API changes in the future. If there are changes,\nthey would likely be to either the configuration system or to the JavaScript native APIs.</p>\n<p dir=\"auto\">Many Scala.js-specific APIs are in the <code>org.log4s.log4sjs</code> package. It is not\ncurrently recommended that you import this full package. There may be many public\nAPIs in here that become private later.</p>\n<h3 dir=\"auto\"><a id=\"user-content-scala-defined-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-defined-usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala-defined usage</h3>\n<p dir=\"auto\">Your Scala code that targets JavaScript can retrieve and use loggers <em>exactly</em> the same way\nthat you would when targeting the JVM, fulfilling the basic promise of Scala.js.</p>\n<h4 dir=\"auto\"><a id=\"user-content-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Configuration</h4>\n<p dir=\"auto\">Unlike when targeting the JVM, standard frameworks like Logback or Log4j are\nnot available to do the configuration of the logging system. Instead, there is\nan API that you can call to adjust logging thresholds and appenders.</p>\n<p dir=\"auto\">Normally, you will call this API very early on during your application's\nstartup to set up your logging configuration. However, you can adjust the\nsettings at any time.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.log4s._\n\ndef initLogging(): Unit = {\n  import Log4sConfig._\n\n  /* Set `org.log4s.foo` and any children to log only Info or higher */\n  setLoggerThreshold(&quot;org.log4s.foo&quot;, Info)\n\n  /* Set `org.log4s` to not log anything. This will not override the specific\n   * setting we already applied to `org.log4s.foo`. */\n  setLoggerThreshold(&quot;org.log4s&quot;, OffThreshold)\n\n  /* Set to log everything */\n  setLoggerThreshold(&quot;&quot;, AllThreshold)\n\n  /* Unset a previously customized threshold. *Now* this category will inherit\n   * from the parent level, which we disabled. */\n  resetLoggerThreshold(&quot;org.log4s.foo&quot;)\n\n  /* Add a custom appender */\n  val myAppender = { ev: log4sjs.LoggedEvent =&gt; ??? }\n  /* Add a custom appender, leaving others in place */\n  addLoggerAppender(&quot;org.example&quot;, myAppender)\n\n  /* Set the specific appenders. The `additive` parameter controls whether\n   * this is in addition to the appenders of the parent logger. The `false`\n   * here means to *not* include any parent appenders. */\n  setLoggerAppenders(&quot;org.log4s.audit&quot;, false, Seq(myAppender))\n\n  /* The `true` here means that myAppender` from the `audit` logger will still\n   * be called since it allows additive inheritance. */\n  val appender2 = { ev: log4sjs.LoggedEvent =&gt; ??? }\n  setLoggerAppenders(&quot;org.log4s.audit.detailed&quot;, true, Seq(appender2))\n\n  /* Resets the logger to default settings. This also adjusts the\n   * `org.log4s.audit.detailed` appenders, since that logger inherits\n   * appenders from its parents */\n  resetLoggerAppenders(&quot;org.log4s.audit&quot;)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">log4s</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">initLogging</span>()<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">Log4sConfig</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Set `org.log4s.foo` and any children to log only Info or higher <span class=\"pl-c\">*/</span></span>\n  setLoggerThreshold(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.foo<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">Info</span>)\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Set `org.log4s` to not log anything. This will not override the specific</span>\n<span class=\"pl-c\">   * setting we already applied to `org.log4s.foo`. <span class=\"pl-c\">*/</span></span>\n  setLoggerThreshold(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">OffThreshold</span>)\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Set to log everything <span class=\"pl-c\">*/</span></span>\n  setLoggerThreshold(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">AllThreshold</span>)\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Unset a previously customized threshold. *Now* this category will inherit</span>\n<span class=\"pl-c\">   * from the parent level, which we disabled. <span class=\"pl-c\">*/</span></span>\n  resetLoggerThreshold(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.foo<span class=\"pl-pds\">\"</span></span>)\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Add a custom appender <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">myAppender</span> <span class=\"pl-k\">=</span> { <span class=\"pl-v\">ev</span>: log4sjs.<span class=\"pl-en\">LoggedEvent</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">???</span> }\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Add a custom appender, leaving others in place <span class=\"pl-c\">*/</span></span>\n  addLoggerAppender(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.example<span class=\"pl-pds\">\"</span></span>, myAppender)\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Set the specific appenders. The `additive` parameter controls whether</span>\n<span class=\"pl-c\">   * this is in addition to the appenders of the parent logger. The `false`</span>\n<span class=\"pl-c\">   * here means to *not* include any parent appenders. <span class=\"pl-c\">*/</span></span>\n  setLoggerAppenders(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.audit<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">false</span>, <span class=\"pl-en\">Seq</span>(myAppender))\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> The `true` here means that myAppender` from the `audit` logger will still</span>\n<span class=\"pl-c\">   * be called since it allows additive inheritance. <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">appender2</span> <span class=\"pl-k\">=</span> { <span class=\"pl-v\">ev</span>: log4sjs.<span class=\"pl-en\">LoggedEvent</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">???</span> }\n  setLoggerAppenders(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.audit.detailed<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">true</span>, <span class=\"pl-en\">Seq</span>(appender2))\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> Resets the logger to default settings. This also adjusts the</span>\n<span class=\"pl-c\">   * `org.log4s.audit.detailed` appenders, since that logger inherits</span>\n<span class=\"pl-c\">   * appenders from its parents <span class=\"pl-c\">*/</span></span>\n  resetLoggerAppenders(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.audit<span class=\"pl-pds\">\"</span></span>)\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-javascript-direct-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#javascript-direct-usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>JavaScript direct usage</h3>\n<p dir=\"auto\">To JavaScript, Log4s exposes a few key methods as a module so that you can\naccess logging facilities from any JavaScript code you might have. You should\nconsult the Scala.js documentation for how to get access to your modules from\nJavaScript.</p>\n<p dir=\"auto\">Note that all the examples below will assume you have already imported the\nmodule under the name <code>log4s</code>, which could look like this for a separately\npackaged log4s.</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var log4s = require('log4s-opt.js')\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">log4s</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'log4s-opt.js'</span><span class=\"pl-kos\">)</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-basic-logging\" class=\"anchor\" aria-hidden=\"true\" href=\"#basic-logging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Basic logging</h4>\n<p dir=\"auto\"><code>getLogger</code> is a top-level function that takes a String and gives you back a\nlogger object, just as you'd expect in Scala.</p>\n<p dir=\"auto\">The methods on a logger are straightforward:</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var logger = log4s.getLogger(&quot;org.log4s&quot;)\n\nlogger.debug(&quot;testing&quot;)\n\nif (logger.isWarnEnabled) {\n  logger.warn(&quot;Something went wrong&quot;, new Error())\n}\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">logger</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getLogger</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"org.log4s\"</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">debug</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"testing\"</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">isWarnEnabled</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">warn</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Something went wrong\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">The names of the log levels are the same as in Scala. Note that doing\ntrace-level logging does not trigger the JavaScript's console trace, which\nautomatically dumps a stack trace. if you want this behavior, you can always\nadd a custom appender that inspects the level. If you have advanced needs in\nthis area, please file a feature request.</p>\n<h4 dir=\"auto\"><a id=\"user-content-mdcs-in-javascript\" class=\"anchor\" aria-hidden=\"true\" href=\"#mdcs-in-javascript\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MDCs in JavaScript</h4>\n<p dir=\"auto\">The MDC is available through JavaScript just as it is in Scala. Here's an example</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"/* Clear the MDC before we start */\nlog4s.MDC.clear()\n\nlog4s.MDC.put(&quot;user&quot;, &quot;john.doe&quot;)\n/* Do some logging */\nlog4s.MDC.remove(&quot;user&quot;)\n/* Fetch an MDC value (usually not recommended) */\nlog4s.MDC.get(&quot;user&quot;)\n/* Or get a copy of the entire MDC (also not usually recommended) */\nlog4s.MDC.getCopyOfContextMap()\"><pre><span class=\"pl-c\">/* Clear the MDC before we start */</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">clear</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">put</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"user\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"john.doe\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">/* Do some logging */</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">remove</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"user\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">/* Fetch an MDC value (usually not recommended) */</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"user\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">/* Or get a copy of the entire MDC (also not usually recommended) */</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getCopyOfContextMap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">Just as in Scala, there's a \"with context\" method that automatically handles\nany cleanup for you. It's not quite as convenient in JavaScript as in Scala,\nbut it can still be a good way to ensure your MDC gets cleaned up. These are\ncurried functions: you pass it a context and then it gives you new function to\nwhich you pass a zero-argument function that does the work.</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var logger = log4s.getLogger(&quot;com.example&quot;)\n/* With a single MDC value */\nlog4s.MDC.withCtx(&quot;user&quot;, &quot;jane.roe&quot;)(() =&gt; {\n  /* Do some stuff */\n  logger.debug(&quot;User did something&quot;)\n})\n/* With several MDC values */\nlog4s.MDC.withCtx({&quot;user&quot;: &quot;benway&quot;, &quot;query&quot;: &quot;1234&quot;})(() =&gt; {\n  /* Do some stuff */\n  logger.debug(&quot;Use with complext context did something&quot;)\n})\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">logger</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getLogger</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"com.example\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">/* With a single MDC value */</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">withCtx</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"user\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"jane.roe\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">/* Do some stuff */</span>\n  <span class=\"pl-s1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">debug</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"User did something\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">/* With several MDC values */</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MDC</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">withCtx</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-s\">\"user\"</span>: <span class=\"pl-s\">\"benway\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"query\"</span>: <span class=\"pl-s\">\"1234\"</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">/* Do some stuff */</span>\n  <span class=\"pl-s1\">logger</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">debug</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Use with complext context did something\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-javascript-configuration-objects\" class=\"anchor\" aria-hidden=\"true\" href=\"#javascript-configuration-objects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>JavaScript Configuration Objects</h4>\n<p dir=\"auto\">The same basic methods that you would use to do Scala-defined configuration\nare available through JavaScript. See the documentation above for details on\nhow to use them.</p>\n<div class=\"highlight highlight-source-js position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"log4s.Config.setLoggerThreshold(&quot;org.log4s&quot;, log4s.Info)\nlog4s.Config.resetLoggerThreshold(&quot;org.log4s&quot;)\nlog4s.Config.addLoggerAppender(&quot;org&quot;, e =&gt; console.log(e.level.name + &quot;: &quot; + e.message))\nlog4s.Config.setLoggerAppenders(&quot;org.test&quot;, false, [e =&gt; console.log(e.message)])\nlog4s.Config.resetLoggerAppenders(&quot;org&quot;)\"><pre><span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Config</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">setLoggerThreshold</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"org.log4s\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Info</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Config</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resetLoggerThreshold</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"org.log4s\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Config</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addLoggerAppender</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"org\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">e</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">level</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">\": \"</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">e</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">message</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Config</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">setLoggerAppenders</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"org.test\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">e</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">message</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">log4s</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">Config</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resetLoggerAppenders</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"org\"</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">Appenders can be created by passing in a JavaScript function.</p>\n<p dir=\"auto\">For parameters, there are top-level threshold/level objects available:</p>\n<ul dir=\"auto\">\n<li><code>AllThreshold</code></li>\n<li><code>Trace</code></li>\n<li><code>Debug</code></li>\n<li><code>Info</code></li>\n<li><code>Warn</code></li>\n<li><code>Error</code></li>\n<li><code>OffThreshold</code></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-log4s-testing\" class=\"anchor\" aria-hidden=\"true\" href=\"#log4s-testing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Log4s-Testing</h2>\n<p dir=\"auto\">There is a Logback-specific testing library that allows you to do mock-object\nstyle testing of your log messages if you'd like. This was built for internal\ntesting of Log4s, but it has been made public by request.</p>\n<h3 dir=\"auto\"><a id=\"user-content-setup\" class=\"anchor\" aria-hidden=\"true\" href=\"#setup\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Setup</h3>\n<p dir=\"auto\">This only works if you are using Logback as your logging framework, at\nleast during testing. (Doing this will not interfere with using a different\nframework for your runtime logging if you correctly configure the two\nclasspaths.)</p>\n<h4 dir=\"auto\"><a id=\"user-content-sbt-config\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt-config\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SBT config</h4>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.log4s&quot; %% &quot;log4s-testing&quot; % log4sVersion % &quot;test&quot;\"><pre><code>libraryDependencies += \"org.log4s\" %% \"log4s-testing\" % log4sVersion % \"test\"\n</code></pre></div>\n<p dir=\"auto\">I recommend you use a <code>val log4sVersion</code> to match the version number with the\nmain Log4s dependency.</p>\n<h4 dir=\"auto\"><a id=\"user-content-logback-config\" class=\"anchor\" aria-hidden=\"true\" href=\"#logback-config\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Logback config</h4>\n<p dir=\"auto\">You'll then want to add lines like the following in your <code>logback-test.xml</code></p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;appender name=&quot;TEST&quot; class=&quot;org.log4s.TestAppender&quot;/&gt;\n&lt;logger name=&quot;org.log4s.abc&quot; additivity=&quot;false&quot; level=&quot;TRACE&quot;&gt;\n  &lt;!-- Set additivity to `false` if you don't want this logging to actually go to the main output. --&gt;\n  &lt;appender-ref ref=&quot;TEST&quot; /&gt;\n&lt;/logger&gt;\"><pre>&lt;<span class=\"pl-ent\">appender</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>TEST<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.TestAppender<span class=\"pl-pds\">\"</span></span>/&gt;\n&lt;<span class=\"pl-ent\">logger</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.abc<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">additivity</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>false<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">level</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>TRACE<span class=\"pl-pds\">\"</span></span>&gt;\n  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> Set additivity to `false` if you don't want this logging to actually go to the main output. <span class=\"pl-c\">--&gt;</span></span>\n  &lt;<span class=\"pl-ent\">appender-ref</span> <span class=\"pl-e\">ref</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>TEST<span class=\"pl-pds\">\"</span></span> /&gt;\n&lt;/<span class=\"pl-ent\">logger</span>&gt;</pre></div>\n<p dir=\"auto\">Full documentation of this is beyond the scope of this document, but you need\nto create the custom appender and register it with the appropriate categories.\nNote that Logback's Groovy-based configuration is more convenient and flexible\nthan the XML for more complicated logging configurations, but it's less\nfamiliar and adds an extra runtime dependency on Groovy.</p>\n<h3 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h3>\n<p dir=\"auto\">The steps are relatively simple</p>\n<ol dir=\"auto\">\n<li>Get access to a logger that hooked up to your appender</li>\n<li>Write one or more events to that logger</li>\n<li>Call into the TestAppender object to dequeue the events and inspect them</li>\n</ol>\n<p dir=\"auto\">Here's a simple example of code you might write:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.log4s._\nimport org.scalatest._\n\n/* An auto-named logger would work just as well as long as that logger\n * is hooked up in your Logback configuration. */\nval testLogger = getLogger(&quot;org.log4s.abc&quot;)\n\nTestAppender.withAppender() {\n  testLogger.debug(&quot;Here's a test message&quot;)\n  val eventOpt = TestAppender.dequeue\n  eventOpt should be ('defined)\n  eventOpt foreach { e =&gt;\n    e.message should equal (&quot;Here's a test message&quot;)\n    e.throwable should not be 'defined\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">log4s</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">scalatest</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> An auto-named logger would work just as well as long as that logger</span>\n<span class=\"pl-c\"> * is hooked up in your Logback configuration. <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">testLogger</span> <span class=\"pl-k\">=</span> getLogger(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.log4s.abc<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-en\">TestAppender</span>.withAppender() {\n  testLogger.debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Here's a test message<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">eventOpt</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">TestAppender</span>.dequeue\n  eventOpt should be (<span class=\"pl-c1\">'defined</span>)\n  eventOpt foreach { e <span class=\"pl-k\">=&gt;</span>\n    e.message should equal (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Here's a test message<span class=\"pl-pds\">\"</span></span>)\n    e.throwable should not be <span class=\"pl-c1\">'defined</span>\n  }\n}</pre></div>\n<p dir=\"auto\">More examples are available if you look through the various test classes\nin this project.</p>\n<h3 dir=\"auto\"><a id=\"user-content-should-i-test-my-logging\" class=\"anchor\" aria-hidden=\"true\" href=\"#should-i-test-my-logging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Should I test my logging?</h3>\n<p dir=\"auto\">Testing scope and philosophy is a complex topic far beyond the reach of this\ndocuemnt, but I can give some general guidance based on my personal views.</p>\n<p dir=\"auto\">Good tests validate the behavior that callers or users should expect when\ninteracting with your code, but not arbitrary implementation details. Quality\ntests don't fail just because you changed something—unless that thing impacts\nthe expected behavior of the code. My view is effectively that tests should\nattempt to fully verify the black-box behavior of a piece of code while\nignoring details that do not affect black-box behavior. (However, white-box\ndevelopment techniques may be useful to provide this verification, and\njudgment is required in the drawing of the lines.)</p>\n<p dir=\"auto\">I'll give two examples.</p>\n<p dir=\"auto\">At one extreme is a trace statement that is used for developer debugging. You\nprobably would not benefit from crying wolf with a test failure just because\nyou added an additional bit of detail to a debug statement or you changed its\npunctuation. In my opinion, this log statement is probably not part of the\ncode's specification and should not be tested.</p>\n<p dir=\"auto\">At the other extreme would be a scenario where you're using your logging\nframework to generate audit logs that track access to secured resources. This\nis important functionality that may be required for regulatory compliance. It\nis <em>strongly</em> advisable to develop tests that ensure this log is written as\nexpected. I would probably consider a white-box unit test to ensure the messages\nwent to the right logger in the right format and a black-box test that inspected\nthe actual output log files to ensure events were being written in an end-to-end\nmanner.</p>\n<p dir=\"auto\">Most real situations will lie between these two extremes, and you will need to\nuse judgment. In my estimation, most applications probably do not need or want\ntests that verify the details of their logging, but there are many situations\nwhere this testing is approrpiate.</p>\n<h2 dir=\"auto\"><a id=\"user-content-unsupported-features\" class=\"anchor\" aria-hidden=\"true\" href=\"#unsupported-features\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Unsupported features</h2>\n<p dir=\"auto\">The following potential or suggested features are not implemented. If some\nmissing feature is particularly valuable to you, feel free to reach out with\nyour requests or suggestions. I'm also—of course—open to pull requests,\nbut please drop me an email first if there are significant new APIs or\nfeatures so we can agree on the general design.</p>\n<ul dir=\"auto\">\n<li>A <code>scalac</code> compiler flag or environment variable to automatically disable\nall logging below a certain level.</li>\n<li>Marker support.</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-cve-2021-44228-log4shell\" class=\"anchor\" aria-hidden=\"true\" href=\"#cve-2021-44228-log4shell\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>CVE-2021-44228 (\"log4shell\")</h2>\n<p dir=\"auto\">log4s delegates all logging operations to <a href=\"https://www.slf4j.org/\" rel=\"nofollow\">slf4j</a>.  log4s is\nnot directly at risk from CVE-2021-44228, but your configured slf4j\nprovider may put you at risk.  See <a href=\"https://www.slf4j.org/log4shell.html\" rel=\"nofollow\">slf4j's comments on\nCVE-2021-44228</a> for more.</p>\n<h2 dir=\"auto\"><a id=\"user-content-contributors\" class=\"anchor\" aria-hidden=\"true\" href=\"#contributors\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contributors</h2>\n<h3 dir=\"auto\"><a id=\"user-content-maintainers\" class=\"anchor\" aria-hidden=\"true\" href=\"#maintainers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Maintainers</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/sarahgerweck/\">Sarah Gerweck</a> (creator &amp; primary maintainer)</li>\n<li><a href=\"https://github.com/rossabaker\">Ross A. Baker</a></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-additional-contributors\" class=\"anchor\" aria-hidden=\"true\" href=\"#additional-contributors\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Additional contributors</h3>\n<p dir=\"auto\">Here are all other contributors, listed chronologically. Thanks to all!</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/bryce-anderson\">Bryce Anderson</a></li>\n<li><a href=\"https://github.com/dyross\">David Ross</a></li>\n<li><a href=\"https://github.com/SethTisue\">Seth Tisue</a></li>\n<li><a href=\"https://github.com/mkows\">Michal</a></li>\n<li><a href=\"https://github.com/sullis\">Sean Sullivan</a></li>\n<li><a href=\"https://github.com/liff\">Olli Helenius</a></li>\n<li><a href=\"https://github.com/rpiaggio\">Raúl Piaggio</a></li>\n<li><a href=\"https://github.com/satorg\">Sergey Torgashov</a></li>\n<li><a href=\"https://github.com/Kevin-Lee\">Kevin Lee</a></li>\n<li><a href=\"https://github.com/vasilmkd\">Vasil Vasilev</a></li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "sarahgerweck",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3421345?v=4",
        "url" : "https://api.github.com/users/sarahgerweck",
        "contributions" : 303
      },
      {
        "login" : "rossabaker",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/142698?v=4",
        "url" : "https://api.github.com/users/rossabaker",
        "contributions" : 47
      },
      {
        "login" : "sullis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30938?v=4",
        "url" : "https://api.github.com/users/sullis",
        "contributions" : 10
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://api.github.com/users/SethTisue",
        "contributions" : 3
      },
      {
        "login" : "Kevin-Lee",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2307335?v=4",
        "url" : "https://api.github.com/users/Kevin-Lee",
        "contributions" : 2
      },
      {
        "login" : "bryce-anderson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2948506?v=4",
        "url" : "https://api.github.com/users/bryce-anderson",
        "contributions" : 1
      },
      {
        "login" : "dyross",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1029110?v=4",
        "url" : "https://api.github.com/users/dyross",
        "contributions" : 1
      },
      {
        "login" : "mkows",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1754664?v=4",
        "url" : "https://api.github.com/users/mkows",
        "contributions" : 1
      },
      {
        "login" : "liff",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/124475?v=4",
        "url" : "https://api.github.com/users/liff",
        "contributions" : 1
      },
      {
        "login" : "rpiaggio",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1895643?v=4",
        "url" : "https://api.github.com/users/rpiaggio",
        "contributions" : 1
      },
      {
        "login" : "satorg",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3954178?v=4",
        "url" : "https://api.github.com/users/satorg",
        "contributions" : 1
      },
      {
        "login" : "vasilmkd",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7115459?v=4",
        "url" : "https://api.github.com/users/vasilmkd",
        "contributions" : 1
      }
    ],
    "commits" : 372,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 71,
        "title" : "Migrate tests to MUnit",
        "url" : "https://github.com/Log4s/log4s/issues/71"
      },
      {
        "number" : 42,
        "title" : "LevelLogger should expose the underlying slf4j Logger",
        "url" : "https://github.com/Log4s/log4s/issues/42"
      },
      {
        "number" : 22,
        "title" : "Using Logger.isDebugEnabled is not inlined as expected ",
        "url" : "https://github.com/Log4s/log4s/issues/22"
      },
      {
        "number" : 19,
        "title" : "Better document SLF4J",
        "url" : "https://github.com/Log4s/log4s/issues/19"
      },
      {
        "number" : 11,
        "title" : "Support for log helper methods showing the caller's line number?",
        "url" : "https://github.com/Log4s/log4s/issues/11"
      },
      {
        "number" : 8,
        "title" : "Support logger.error(message: String, t:Throwable)",
        "url" : "https://github.com/Log4s/log4s/issues/8"
      },
      {
        "number" : 1,
        "title" : "Add compiler flag to elide all trace-level (or higher) logging",
        "url" : "https://github.com/Log4s/log4s/issues/1"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : null,
    "beginnerIssuesLabel" : null
  }
}