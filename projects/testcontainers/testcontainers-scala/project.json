{
  "organization" : "testcontainers",
  "repository" : "testcontainers-scala",
  "creationDate" : 1632104309000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644274554837
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Docker containers for testing in scala",
    "logo" : "https://avatars.githubusercontent.com/u/13393021?v=4",
    "stars" : 481,
    "forks" : 85,
    "watchers" : 18,
    "issues" : 18,
    "creationDate" : 1484554350000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"logo.png\"><img src=\"logo.png\" alt=\"Logo\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a href=\"https://travis-ci.org/testcontainers/testcontainers-scala\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/96cb9ac2e6d22aca5a4665ca8ddfc72c8bac9a31f7ebdf7445c15e0f2070aa2d/68747470733a2f2f7472617669732d63692e6f72672f74657374636f6e7461696e6572732f74657374636f6e7461696e6572732d7363616c612e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/testcontainers/testcontainers-scala.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/com.dimafeng/testcontainers-scala_2.12\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/038fe9cdabaf80a22656a15faf15e97ae35459333939abcb7501530c8212695d/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e64696d6166656e672f74657374636f6e7461696e6572732d7363616c615f322e31322e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.dimafeng/testcontainers-scala_2.12.svg\" style=\"max-width: 100%;\"></a></p>\n<h1 dir=\"auto\"><a id=\"user-content-testcontainers-scala\" class=\"anchor\" aria-hidden=\"true\" href=\"#testcontainers-scala\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Testcontainers-scala</h1>\n<p dir=\"auto\">Scala wrapper for <a href=\"https://github.com/testcontainers/testcontainers-java\">testcontainers-java</a> that\nallows using docker containers for functional/integration/<del>unit</del> testing.</p>\n<blockquote>\n<p dir=\"auto\">TestContainers is a Java 8 library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.</p>\n</blockquote>\n<p dir=\"auto\">Testcontainers-scala in action: <a href=\"http://dimafeng.com/2016/08/01/testcontainers-selenium/\" rel=\"nofollow\">http://dimafeng.com/2016/08/01/testcontainers-selenium/</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-slack\" class=\"anchor\" aria-hidden=\"true\" href=\"#slack\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Slack</h2>\n<p dir=\"auto\"><a href=\"https://testcontainers.slack.com/messages/CAFK4GL85\" rel=\"nofollow\">Slack channel</a></p>\n<p dir=\"auto\"><a href=\"https://slack.testcontainers.org/\" rel=\"nofollow\">Invite link for slack</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-setup\" class=\"anchor\" aria-hidden=\"true\" href=\"#setup\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Setup</h2>\n<p dir=\"auto\">For scalatest users:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.dimafeng&quot; %% &quot;testcontainers-scala-scalatest&quot; % testcontainersScalaVersion % &quot;test&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-scalatest<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">For MUnit users:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.dimafeng&quot; %% &quot;testcontainers-scala-munit&quot; % testcontainersScalaVersion % &quot;test&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-munit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-requirements\" class=\"anchor\" aria-hidden=\"true\" href=\"#requirements\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Requirements</h2>\n<ul dir=\"auto\">\n<li>JDK &gt;= 1.8</li>\n<li><a href=\"https://www.testcontainers.org/compatibility.html\" rel=\"nofollow\">See 'Compatibility' section</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-quick-start\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-start\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick Start</h2>\n<p dir=\"auto\">First of all, let's add scalatest and MySQL testcontainers modules in the <code>build.sbt</code> file to play with:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;com.dimafeng&quot; %% &quot;testcontainers-scala-scalatest&quot; % testcontainersScalaVersion % &quot;test&quot;,\n  &quot;com.dimafeng&quot; %% &quot;testcontainers-scala-mysql&quot; % testcontainersScalaVersion % &quot;test&quot;,\n)\"><pre>libraryDependencies <span class=\"pl-k\">++</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-scalatest<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-mysql<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>,\n)</pre></div>\n<p dir=\"auto\">Next, add the following line to run tests in a separate JVM from sbt. This allows for graceful shutdown of containers once the tests have finished running.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Test / fork := true,\"><pre><span class=\"pl-en\">Test</span> <span class=\"pl-k\">/</span> fork <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>,</pre></div>\n<p dir=\"auto\">There are two ScalaTest aware traits:</p>\n<ul dir=\"auto\">\n<li><code>ForEachTestContainer</code> starts a new container(s) before each test case and then stops and removes it.</li>\n<li><code>ForAllTestContainer</code> starts and stops a container only once for all test cases within the spec.</li>\n</ul>\n<p dir=\"auto\">To start using it, you just need to extend one of those traits and override a <code>container</code> val as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.dimafeng.testcontainers.{ForAllTestContainer, MySQLContainer}\n\nclass MysqlSpec extends AnyFlatSpec with ForAllTestContainer {\n\n  override val container: MySQLContainer = MySQLContainer()\n\n  it should &quot;do something&quot; in {\n    Class.forName(container.driverClassName)\n    val connection = DriverManager.getConnection(container.jdbcUrl, container.username, container.password)\n    ...\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">dimafeng</span>.<span class=\"pl-en\">testcontainers</span>.{<span class=\"pl-en\">ForAllTestContainer</span>, <span class=\"pl-en\">MySQLContainer</span>}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MySQLContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>()\n\n  it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>do something<span class=\"pl-pds\">\"</span></span> in {\n    <span class=\"pl-en\">Class</span>.forName(container.driverClassName)\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">connection</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DriverManager</span>.getConnection(container.jdbcUrl, container.username, container.password)\n    ...\n  }\n}</pre></div>\n<p dir=\"auto\">Be sure to override <code>container</code> with a <code>val</code> not a <code>def</code>, otherwise you will start a new container each\ntime you call <code>container</code> and this is likely to fail your tests.</p>\n<p dir=\"auto\">This spec has a clean mysql database instance for each of its test cases.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.testcontainers.containers.MySQLContainer\n\nclass MysqlSpec extends AnyFlatSpec with ForAllTestContainer {\n\n    override val container: MySQLContainer = MySQLContainer()\n\n    it should &quot;do something&quot; in {\n      ...\n    }\n\n    it should &quot;do something 2&quot; in {\n      ...\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">org</span>.<span class=\"pl-en\">testcontainers</span>.<span class=\"pl-en\">containers</span>.<span class=\"pl-en\">MySQLContainer</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n\n    <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MySQLContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>()\n\n    it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>do something<span class=\"pl-pds\">\"</span></span> in {\n      ...\n    }\n\n    it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>do something 2<span class=\"pl-pds\">\"</span></span> in {\n      ...\n    }\n}</pre></div>\n<p dir=\"auto\">This spec starts one container and both tests share the container's state.</p>\n<p dir=\"auto\">Most of available container classes allow you to provide custom image name or version\ninstead of default one set in the library.</p>\n<p dir=\"auto\">In order to provide custom image name you need to pass <code>DockerImageName</code> object.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"override val container: MongoDBContainer = MongoDBContainer(DockerImageName.parse(&quot;mongo:4.0.10&quot;))\"><pre><span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MongoDBContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MongoDBContainer</span>(<span class=\"pl-en\">DockerImageName</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mongo:4.0.10<span class=\"pl-pds\">\"</span></span>))</pre></div>\n<p dir=\"auto\">Starting from testcontainers-java 1.15.0 container classes execute image compatibility checks during initialization\n(for more details, see this <a href=\"https://github.com/testcontainers/testcontainers-java/pull/3021\">pull request</a>).\nIf you want to use custom image that is compatible with selected container class implementation,\nit must be explicitly marked as compatible with default image.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"override val container: MongoDBContainer = MongoDBContainer(DockerImageName.parse(&quot;myregistry/mongo:4.0.10&quot;).asCompatibleSubstituteFor(&quot;mongo&quot;))\"><pre><span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MongoDBContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MongoDBContainer</span>(<span class=\"pl-en\">DockerImageName</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myregistry/mongo:4.0.10<span class=\"pl-pds\">\"</span></span>).asCompatibleSubstituteFor(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mongo<span class=\"pl-pds\">\"</span></span>))</pre></div>\n<p dir=\"auto\">Providing custom image name as <code>String</code> is currently deprecated.\nImplicit conversion method is available in ScalaTest and MUnit traits.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MongoSpec extends AnyFlatSpec with ForAllTestContainer {\n    //deprecated implicit conversion\n    override val container: MongoDBContainer = MongoDBContainer(&quot;mongo:4.0.10&quot;)\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MongoSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>deprecated implicit conversion</span>\n    <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MongoDBContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MongoDBContainer</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mongo:4.0.10<span class=\"pl-pds\">\"</span></span>)\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#modules\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Modules</h2>\n<p dir=\"auto\">Testcontainers-scala is modular. All modules has the same version. To depend on some module put this into your <code>build.sbt</code> file:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.dimafeng&quot; %% moduleName % testcontainersScalaVersion % &quot;test&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> moduleName <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Here is the full list of the currently available modules:</p>\n<ul dir=\"auto\">\n<li><code>testcontainers-scala-core</code> — core module.\nIt contains some basic building blocks of the library and no integration with any test frameworks.\nYou probably will not use it directly, because all other modules depend on it.</li>\n<li><code>testcontainers-scala-scalatest</code> — Scalatest integration module.</li>\n<li><code>testcontainers-scala-munit</code> — MUnit integration module.</li>\n<li><code>testcontainers-scala-scalatest-selenium</code> — module to use the Selenium container with the Scalatest.</li>\n<li><code>testcontainers-scala-mysql</code> — module with the MySQL container.</li>\n<li><code>testcontainers-scala-postgresql</code> — module with the PostgreSQL container.</li>\n<li><code>testcontainers-scala-cassandra</code> — module with the Cassandra container.</li>\n<li><code>testcontainers-scala-kafka</code> — module with the Kafka container.</li>\n<li><code>testcontainers-scala-vault</code> — module with the Vault container.</li>\n<li><code>testcontainers-scala-oracle-xe</code> — module with the Oracle container.</li>\n<li><code>testcontainers-scala-neo4j</code> — module with the Neo4J server container.</li>\n<li><code>testcontainers-scala-mssqlserver</code> — module with the MsSQL server container.</li>\n<li><code>testcontainers-scala-clickhouse</code> — module with the ClickHouse container.</li>\n<li><code>testcontainers-scala-cockroachdb</code> — module with the CockroachDB container.</li>\n<li><code>testcontainers-scala-couchbase</code> — module with the Couchbase container.</li>\n<li><code>testcontainers-scala-db2</code> — module with the DB2 container.</li>\n<li><code>testcontainers-scala-dynalite</code> — module with the Dynalite container.</li>\n<li><code>testcontainers-scala-elasticsearch</code> — module with the Elastic search container.</li>\n<li><code>testcontainers-scala-influxdb</code> — module with the InfluxDB container.</li>\n<li><code>testcontainers-scala-localstack</code> — module with the Localstack container.</li>\n<li><code>testcontainers-scala-localstack-v2</code> — module with the Localstack V2 container.</li>\n<li><code>testcontainers-scala-mariadb</code> — module with the MariaDB container.</li>\n<li><code>testcontainers-scala-mockserver</code> — module with the MockServer container.</li>\n<li><code>testcontainers-scala-nginx</code> — module with the Nginx container.</li>\n<li><code>testcontainers-scala-pulsar</code> — module with the Pulsar container.</li>\n<li><code>testcontainers-scala-rabbitmq</code> — module with the RabbitMQ container.</li>\n<li><code>testcontainers-scala-toxiproxy</code> — module with the ToxiProxy container.</li>\n<li><code>testcontainers-scala-orientdb</code> — module with the OrientDB container.</li>\n<li><code>testcontainers-scala-presto</code> — module with the Presto container.</li>\n<li><code>testcontainers-scala-trino</code> — module with the Trino container.</li>\n<li><code>testcontainers-scala-mongodb</code> — module with the MongoDB container.</li>\n<li><code>testcontainers-scala-solr</code> — module with the Solr container.</li>\n<li><code>testcontainers-scala-gcloud</code> — module with the Firebase emulator container.</li>\n</ul>\n<p dir=\"auto\">Most of the modules are just proxies to the testcontainers-java modules and behave exactly like java containers.\nYou can find documentation about them in the <a href=\"https://www.testcontainers.org/\" rel=\"nofollow\">testcontainers-java docs pages</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-container-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#container-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Container types</h2>\n<h3 dir=\"auto\"><a id=\"user-content-generic-container\" class=\"anchor\" aria-hidden=\"true\" href=\"#generic-container\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Generic Container</h3>\n<p dir=\"auto\">The most flexible but less convenient container type is <code>GenericContainer</code>. This container allows to launch any docker image\nwith custom configuration.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class GenericContainerSpec extends AnyFlatSpec with ForAllTestContainer {\n  override val container: GenericContainer = GenericContainer(&quot;nginx:latest&quot;,\n    exposedPorts = Seq(80),\n    waitStrategy = Wait.forHttp(&quot;/&quot;)\n  )\n\n  &quot;GenericContainer&quot; should &quot;start nginx and expose 80 port&quot; in {\n    assert(Source.fromInputStream(\n      new URL(s&quot;http://${container.containerIpAddress}:${container.mappedPort(80)}/&quot;).openConnection().getInputStream\n    ).mkString.contains(&quot;If you see this page, the nginx web server is successfully installed&quot;))\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">GenericContainerSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">GenericContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">GenericContainer</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nginx:latest<span class=\"pl-pds\">\"</span></span>,\n    exposedPorts <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">80</span>),\n    waitStrategy <span class=\"pl-k\">=</span> <span class=\"pl-en\">Wait</span>.forHttp(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>)\n  )\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>GenericContainer<span class=\"pl-pds\">\"</span></span> should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>start nginx and expose 80 port<span class=\"pl-pds\">\"</span></span> in {\n    assert(<span class=\"pl-en\">Source</span>.fromInputStream(\n      <span class=\"pl-k\">new</span> <span class=\"pl-en\">URL</span>(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">http://</span>${container.containerIpAddress}<span class=\"pl-s\">:</span>${container.mappedPort(<span class=\"pl-c1\">80</span>)}<span class=\"pl-s\">/</span><span class=\"pl-s\">\"</span>).openConnection().getInputStream\n    ).mkString.contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>If you see this page, the nginx web server is successfully installed<span class=\"pl-pds\">\"</span></span>))\n  }\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-docker-compose\" class=\"anchor\" aria-hidden=\"true\" href=\"#docker-compose\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Docker Compose</h3>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ComposeSpec extends AnyFlatSpec with ForAllTestContainer {\n  override val container: DockerComposeContainer = DockerComposeContainer(new File(&quot;src/test/resources/docker-compose.yml&quot;), exposedServices = Seq(ExposedService(&quot;redis_1&quot;, 6379)))\n\n  &quot;DockerComposeContainer&quot; should &quot;retrieve non-0 port for any of services&quot; in {\n    assert(container.getServicePort(&quot;redis_1&quot;, 6379) &gt; 0)\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ComposeSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">DockerComposeContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DockerComposeContainer</span>(<span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src/test/resources/docker-compose.yml<span class=\"pl-pds\">\"</span></span>), exposedServices <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(<span class=\"pl-en\">ExposedService</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>redis_1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">6379</span>)))\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DockerComposeContainer<span class=\"pl-pds\">\"</span></span> should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>retrieve non-0 port for any of services<span class=\"pl-pds\">\"</span></span> in {\n    assert(container.getServicePort(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>redis_1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">6379</span>) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>)\n  }\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-selenium\" class=\"anchor\" aria-hidden=\"true\" href=\"#selenium\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Selenium</h3>\n<p dir=\"auto\">Before you can use this type of containers, you need to add the following dependencies to your project:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;com.dimafeng&quot; %% &quot;testcontainers-scala-scalatest-selenium&quot; % testcontainersScalaVersion % &quot;test&quot;\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-scalatest-selenium<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Now you can write a test in this way:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class SeleniumSpec extends AnyFlatSpec with SeleniumTestContainerSuite with WebBrowser {\n  override def desiredCapabilities = DesiredCapabilities.chrome()\n\n  &quot;Browser&quot; should &quot;show google&quot; in {\n      go to &quot;http://google.com&quot;\n  }\n}\n\"><pre><code>class SeleniumSpec extends AnyFlatSpec with SeleniumTestContainerSuite with WebBrowser {\n  override def desiredCapabilities = DesiredCapabilities.chrome()\n\n  \"Browser\" should \"show google\" in {\n      go to \"http://google.com\"\n  }\n}\n\n</code></pre></div>\n<p dir=\"auto\">In this case, you'll obtain a clean instance of browser (firefox/chrome) within container to which\na test will connect via remote-driver. See <a href=\"https://www.testcontainers.org/usage/webdriver_containers.html\" rel=\"nofollow\">Webdriver Containers</a>\nfor more details.</p>\n<h3 dir=\"auto\"><a id=\"user-content-mysql\" class=\"anchor\" aria-hidden=\"true\" href=\"#mysql\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Mysql</h3>\n<p dir=\"auto\">Requires you to add this dependency:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;com.dimafeng&quot; %% &quot;testcontainers-scala-mysql&quot; % testcontainersScalaVersion % &quot;test&quot;\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-mysql<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span></pre></div>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MysqlSpec extends AnyFlatSpec with ForAllTestContainer {\n\n  override val container: MySQLContainer = MySQLContainer()\n\n  &quot;Mysql container&quot; should &quot;be started&quot; in {\n    Class.forName(container.driverClassName)\n    val connection = DriverManager.getConnection(container.jdbcUrl, container.username, container.password)\n      ...\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MySQLContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>()\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mysql container<span class=\"pl-pds\">\"</span></span> should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>be started<span class=\"pl-pds\">\"</span></span> in {\n    <span class=\"pl-en\">Class</span>.forName(container.driverClassName)\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">connection</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DriverManager</span>.getConnection(container.jdbcUrl, container.username, container.password)\n      ...\n  }\n}</pre></div>\n<p dir=\"auto\">The container can also be customized using the constructor parameters, this snippet will initialize a docker container from a specific docker image, with a specific schema name and specific username/password</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MysqlSpec extends AnyFlatSpec with ForAllTestContainer {\n\n  override val container: MySQLContainer = MySQLContainer(mysqlImageVersion = DockerImageName.parse(&quot;mysql:5.7.18&quot;),\n                                          databaseName = &quot;testcontainer-scala&quot;,\n                                          username = &quot;scala&quot;,\n                                          password = &quot;scala&quot;)\n\n  &quot;Mysql container&quot; should &quot;be started&quot; in {\n    Class.forName(container.driverClassName)\n    val connection = DriverManager.getConnection(container.jdbcUrl, container.username, container.password)\n      ...\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MySQLContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>(mysqlImageVersion <span class=\"pl-k\">=</span> <span class=\"pl-en\">DockerImageName</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mysql:5.7.18<span class=\"pl-pds\">\"</span></span>),\n                                          databaseName <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainer-scala<span class=\"pl-pds\">\"</span></span>,\n                                          username <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scala<span class=\"pl-pds\">\"</span></span>,\n                                          password <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scala<span class=\"pl-pds\">\"</span></span>)\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Mysql container<span class=\"pl-pds\">\"</span></span> should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>be started<span class=\"pl-pds\">\"</span></span> in {\n    <span class=\"pl-en\">Class</span>.forName(container.driverClassName)\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">connection</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DriverManager</span>.getConnection(container.jdbcUrl, container.username, container.password)\n      ...\n  }\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-postgresql\" class=\"anchor\" aria-hidden=\"true\" href=\"#postgresql\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>PostgreSQL</h3>\n<p dir=\"auto\">Requires you to add this dependency:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;com.dimafeng&quot; %% &quot;testcontainers-scala-postgresql&quot; % testcontainersScalaVersion % &quot;test&quot;\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.dimafeng<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testcontainers-scala-postgresql<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> testcontainersScalaVersion <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span></pre></div>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class PostgresqlSpec extends AnyFlatSpec with ForAllTestContainer  {\n\n  override val container: PostgreSQLContainer = PostgreSQLContainer()\n\n  &quot;PostgreSQL container&quot; should &quot;be started&quot; in {\n    Class.forName(container.driverClassName)\n    val connection = DriverManager.getConnection(container.jdbcUrl, container.username, container.password)\n      ...\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">PostgresqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span>  {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">PostgreSQLContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PostgreSQLContainer</span>()\n\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>PostgreSQL container<span class=\"pl-pds\">\"</span></span> should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>be started<span class=\"pl-pds\">\"</span></span> in {\n    <span class=\"pl-en\">Class</span>.forName(container.driverClassName)\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">connection</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DriverManager</span>.getConnection(container.jdbcUrl, container.username, container.password)\n      ...\n  }\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-multiple-containers\" class=\"anchor\" aria-hidden=\"true\" href=\"#multiple-containers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Multiple Containers</h3>\n<p dir=\"auto\">If you need to test more than one container in your test, you could use <code>MultipleContainers</code> for that. Just define your containers and pass them to the <code>MultipleContainers</code> constructor:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val mySqlContainer = MySQLContainer()\nval genericContainer = GenericContainer(...)\n\noverride val container: MultipleContainers = MultipleContainers(mySqlContainer, genericContainer)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">mySqlContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>()\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">genericContainer</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">GenericContainer</span>(...)\n\n<span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MultipleContainers</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MultipleContainers</span>(mySqlContainer, genericContainer)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-dependent-containers\" class=\"anchor\" aria-hidden=\"true\" href=\"#dependent-containers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dependent containers</h4>\n<p dir=\"auto\">If configuration of one container depends on runtime state of another one, you should define your containers as <code>lazy</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val container1 = Container1()\nlazy val container2 = Container2(container1.port)\n\noverride val container: MultipleContainers = MultipleContainers(container1, container2)\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Container1</span>()\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Container2</span>(container1.port)\n\n<span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">MultipleContainers</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MultipleContainers</span>(container1, container2)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-fixed-host-port-containers\" class=\"anchor\" aria-hidden=\"true\" href=\"#fixed-host-port-containers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Fixed Host Port Containers</h3>\n<p dir=\"auto\">This container will allow you to map container ports to statically defined ports on the docker host.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"...\nval container = FixedHostPortGenericContainer(&quot;nginx:latest&quot;,\n    waitStrategy = Wait.forHttp(&quot;/&quot;),\n    exposedHostPort = 8090,\n    exposedContainerPort = 80\n  )\"><pre>...\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">container</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">FixedHostPortGenericContainer</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nginx:latest<span class=\"pl-pds\">\"</span></span>,\n    waitStrategy <span class=\"pl-k\">=</span> <span class=\"pl-en\">Wait</span>.forHttp(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>),\n    exposedHostPort <span class=\"pl-k\">=</span> <span class=\"pl-c1\">8090</span>,\n    exposedContainerPort <span class=\"pl-k\">=</span> <span class=\"pl-c1\">80</span>\n  )</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-custom-configuration-of-inner-containers\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-configuration-of-inner-containers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Custom configuration of inner containers</h3>\n<p dir=\"auto\">All container types have constructor methods with most popular parameters. In case you're missing some custom option from <code>testcontainers-java</code>, there is\na method that provides an elegant way to tune the nested container. <strong>It's not recommended to access inner container directly.</strong></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"override val container: MySQLContainer = MySQLContainer().configure { c =&gt;\n    c.withNetwork(...)\n    c.withStartupAttempts(...)\n  }\"><pre><code>override val container: MySQLContainer = MySQLContainer().configure { c =&gt;\n    c.withNetwork(...)\n    c.withStartupAttempts(...)\n  }\n</code></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-startstop-hooks\" class=\"anchor\" aria-hidden=\"true\" href=\"#startstop-hooks\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Start/Stop hooks</h3>\n<p dir=\"auto\">If you want to execute your code after container start or before container stop you can override <code>afterStart()</code> and <code>beforeStop()</code> methods.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MysqlSpec extends AnyFlatSpec with ForAllTestContainer {\n\n  ...\n\n  override def beforeStop(): Unit = {\n    // your code\n  }\n\n  override def afterStart(): Unit = {\n    // your code\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">ForAllTestContainer</span> {\n\n  ...\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">beforeStop</span>()<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> your code</span>\n  }\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">afterStart</span>()<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> your code</span>\n  }\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-new-api\" class=\"anchor\" aria-hidden=\"true\" href=\"#new-api\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>New API</h2>\n<p dir=\"auto\">Starting from 0.34.0 version testcontainers-scala provides the new API.\nThe main motivation points are in the <a href=\"https://github.com/testcontainers/testcontainers-scala/pull/78\">pull request</a>.</p>\n<p dir=\"auto\"><strong>This API is experimental and may change!</strong></p>\n<h3 dir=\"auto\"><a id=\"user-content-container-and-containerdef\" class=\"anchor\" aria-hidden=\"true\" href=\"#container-and-containerdef\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><code>Container</code> and <code>ContainerDef</code></h3>\n<p dir=\"auto\">Docker containers are represented through the two different entities:</p>\n<ol dir=\"auto\">\n<li><code>ContainerDef</code> — it's container definition. <code>ContainerDef</code> describes, how to build a container.\nYou can think about it like about a container constructor, or dockerfile description.\nUsually, <code>ContainerDef</code> receives some parameters.\n<code>ContainerDef</code> has a <code>start()</code> method. It returns a started <code>Container</code>.</li>\n<li><code>Container</code> — it's a started container. You can interact with it through its methods.\nFor example, in the case of <code>MySQLContainer</code> you can get it's JDBC URL with <code>jdbcUrl</code> method.\n<code>Container</code> is the main entity for using inside tests.</li>\n</ol>\n<h3 dir=\"auto\"><a id=\"user-content-scalatest-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#scalatest-usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scalatest usage</h3>\n<p dir=\"auto\">You can use one of the four traits:</p>\n<ol dir=\"auto\">\n<li><code>TestContainerForAll</code> — will start a single container before all tests and stop after all tests.</li>\n<li><code>TestContainerForEach</code> — will start a single container before each test and stop after each test.</li>\n<li><code>TestContainersForAll</code> — will start multiple containers before all tests and stop after all tests.</li>\n<li><code>TestContainersForEach</code> — will start multiple containers before each test and stop after each test.</li>\n</ol>\n<h4 dir=\"auto\"><a id=\"user-content-single-container-in-tests\" class=\"anchor\" aria-hidden=\"true\" href=\"#single-container-in-tests\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Single container in tests</h4>\n<p dir=\"auto\">If you want to use a single container in your test:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MysqlSpec extends AnyFlatSpec with TestContainerForAll {\n\n  // You need to override `containerDef` with needed container definition\n  override val containerDef = MySQLContainer.Def()\n\n  // To use containers in tests you need to use `withContainers` function\n  it should &quot;test&quot; in withContainers { mysqlContainer =&gt;\n    // Inside your test body you can do with your container whatever you want to\n    assert(mysqlContainer.jdbcUrl.nonEmpty)\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">TestContainerForAll</span> {\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> You need to override `containerDef` with needed container definition</span>\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">containerDef</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>.<span class=\"pl-en\">Def</span>()\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> To use containers in tests you need to use `withContainers` function</span>\n  it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span> in withContainers { mysqlContainer <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Inside your test body you can do with your container whatever you want to</span>\n    assert(mysqlContainer.jdbcUrl.nonEmpty)\n  }\n}</pre></div>\n<p dir=\"auto\">Usage of <code>TestContainerForEach</code> is not different from the example above.</p>\n<h4 dir=\"auto\"><a id=\"user-content-multiple-containers-in-tests\" class=\"anchor\" aria-hidden=\"true\" href=\"#multiple-containers-in-tests\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Multiple containers in tests</h4>\n<p dir=\"auto\">If you want to use multiple containers in your test:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ExampleSpec extends AnyFlatSpec with TestContainersForAll {\n\n  // First of all, you need to declare, which containers you want to use\n  override type Containers = MySQLContainer and PostgreSQLContainer and DockerComposeContainer\n\n  // After that, you need to describe, how you want to start them,\n  // In this method you can use any intermediate logic.\n  // You can pass parameters between containers, for example.\n  override def startContainers(): Containers = {\n    val container1 = MySQLContainer.Def().start()\n    val container2 = PostgreSQLContainer.Def().start()\n    val container3 = DockerComposeContainer.Def(ComposeFile(Left(new File(&quot;docker-compose.yml&quot;)))).start()\n    container1 and container2 and container3\n  }\n  \n  // `withContainers` function supports multiple containers:\n  it should &quot;test&quot; in withContainers { case mysqlContainer and pgContainer and dcContainer =&gt;\n    // Inside your test body you can do with your containers whatever you want to\n    assert(mysqlContainer.jdbcUrl.nonEmpty &amp;&amp; pgContainer.jdbcUrl.nonEmpty)\n  }\n  \n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ExampleSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">TestContainersForAll</span> {\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> First of all, you need to declare, which containers you want to use</span>\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">type</span> <span class=\"pl-en\">Containers</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span> and <span class=\"pl-en\">PostgreSQLContainer</span> and <span class=\"pl-en\">DockerComposeContainer</span>\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> After that, you need to describe, how you want to start them,</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> In this method you can use any intermediate logic.</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> You can pass parameters between containers, for example.</span>\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">startContainers</span>()<span class=\"pl-k\">:</span> <span class=\"pl-en\">Containers</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>.<span class=\"pl-en\">Def</span>().start()\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PostgreSQLContainer</span>.<span class=\"pl-en\">Def</span>().start()\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DockerComposeContainer</span>.<span class=\"pl-en\">Def</span>(<span class=\"pl-en\">ComposeFile</span>(<span class=\"pl-en\">Left</span>(<span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>docker-compose.yml<span class=\"pl-pds\">\"</span></span>)))).start()\n    container1 and container2 and container3\n  }\n  \n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> `withContainers` function supports multiple containers:</span>\n  it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span> in withContainers { <span class=\"pl-k\">case</span> mysqlContainer and pgContainer and dcContainer <span class=\"pl-k\">=&gt;</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Inside your test body you can do with your containers whatever you want to</span>\n    assert(mysqlContainer.jdbcUrl.nonEmpty <span class=\"pl-k\">&amp;&amp;</span> pgContainer.jdbcUrl.nonEmpty)\n  }\n  \n}</pre></div>\n<p dir=\"auto\">Usage of <code>TestContainersForEach</code> is not different from the example above.</p>\n<h3 dir=\"auto\"><a id=\"user-content-genericcontainer-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#genericcontainer-usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><code>GenericContainer</code> usage</h3>\n<p dir=\"auto\">To create a custom container, which is not built-in in the library, you need to use <code>GenericContainer</code>.</p>\n<p dir=\"auto\">For example, you want to create a custom nginx container:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class NginxContainer(port: Int, underlying: GenericContainer) extends GenericContainer(underlying) {\n  // you can add any methods or fields inside your container's body\n  def rootUrl: String = s&quot;http://$containerIpAddress:${mappedPort(port)}/&quot;\n}\nobject NginxContainer {\n\n  // In the container definition you need to describe, how your container will be constructed:\n  case class Def(port: Int) extends GenericContainer.Def[NginxContainer](\n    new NginxContainer(port, GenericContainer(\n      dockerImage = &quot;nginx:latest&quot;,\n      exposedPorts = Seq(port),\n      waitStrategy = Wait.forHttp(&quot;/&quot;)\n    ))\n  )\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">NginxContainer</span>(<span class=\"pl-v\">port</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">underlying</span>: <span class=\"pl-en\">GenericContainer</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">GenericContainer</span>(underlying) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> you can add any methods or fields inside your container's body</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">rootUrl</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">http://</span>$containerIpAddress<span class=\"pl-s\">:</span>${mappedPort(port)}<span class=\"pl-s\">/</span><span class=\"pl-s\">\"</span>\n}\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">NginxContainer</span> {\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> In the container definition you need to describe, how your container will be constructed:</span>\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Def</span>(<span class=\"pl-v\">port</span>: <span class=\"pl-en\">Int</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">GenericContainer</span>.<span class=\"pl-en\">Def</span>[<span class=\"pl-en\">NginxContainer</span>](\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">NginxContainer</span>(port, <span class=\"pl-en\">GenericContainer</span>(\n      dockerImage <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nginx:latest<span class=\"pl-pds\">\"</span></span>,\n      exposedPorts <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(port),\n      waitStrategy <span class=\"pl-k\">=</span> <span class=\"pl-en\">Wait</span>.forHttp(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>)\n    ))\n  )\n}</pre></div>\n<p dir=\"auto\">However, if you don't want to create a custom container, you can use <code>GenericContainer</code> directly while overriding <code>containerDef</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"override val containerDef = GenericContainer.Def(&quot;nginx:latest&quot;,\n  exposedPorts = Seq(80),\n  waitStrategy = Wait.forHttp(&quot;/&quot;)\n)\"><pre><span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">containerDef</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">GenericContainer</span>.<span class=\"pl-en\">Def</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nginx:latest<span class=\"pl-pds\">\"</span></span>,\n  exposedPorts <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(<span class=\"pl-c1\">80</span>),\n  waitStrategy <span class=\"pl-k\">=</span> <span class=\"pl-en\">Wait</span>.forHttp(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>)\n)</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-migration-from-the-classic-api\" class=\"anchor\" aria-hidden=\"true\" href=\"#migration-from-the-classic-api\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Migration from the classic API</h3>\n<ol dir=\"auto\">\n<li>If you have custom containers created with the <code>GenericContainer</code>, add <code>ContainerDef</code> in the companion like this:\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object MyCustomContainer {\n  case class Def(/*constructor params here*/) extends GenericContainer.Def[MyCustomContainer](\n    new MyCustomContainer(/*constructor params here*/)\n  )\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">MyCustomContainer</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Def</span>(<span class=\"pl-c\"><span class=\"pl-c\">/*</span>constructor params here<span class=\"pl-c\">*/</span></span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">GenericContainer</span>.<span class=\"pl-en\">Def</span>[<span class=\"pl-en\">MyCustomContainer</span>](\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">MyCustomContainer</span>(<span class=\"pl-c\"><span class=\"pl-c\">/*</span>constructor params here<span class=\"pl-c\">*/</span></span>)\n  )\n}</pre></div>\n</li>\n<li>If you are using <code>ForEachTestContainer</code>:\n<ol dir=\"auto\">\n<li>If your test contains only one container, replace <code>ForEachTestContainer</code> with <code>TestContainerForEach</code></li>\n<li>If your test contains multiple containers, replace <code>ForEachTestContainer</code> with <code>TestContainersForEach</code></li>\n</ol>\n</li>\n<li>If you are using <code>ForAllTestContainer</code>:\n<ol dir=\"auto\">\n<li>If your test contains only one container, replace <code>ForAllTestContainer</code> with <code>TestContainerForAll</code></li>\n<li>If your test contains multiple containers, replace <code>ForAllTestContainer</code> with <code>TestContainersForAll</code></li>\n</ol>\n</li>\n<li>Fix all compilation errors using compiler messages and examples above.</li>\n</ol>\n<h3 dir=\"auto\"><a id=\"user-content-munit-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#munit-usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MUnit usage</h3>\n<p dir=\"auto\">Similarly to Scalatest, you can use one of the four traits:</p>\n<ol dir=\"auto\">\n<li><code>TestContainerForAll</code> — will start a single container before all tests and stop after all tests.</li>\n<li><code>TestContainerForEach</code> — will start a single container before each test and stop after each test.</li>\n<li><code>TestContainersForAll</code> — will start multiple containers before all tests and stop after all tests.</li>\n<li><code>TestContainersForEach</code> — will start multiple containers before each test and stop after each test.</li>\n</ol>\n<h4 dir=\"auto\"><a id=\"user-content-single-container-in-tests-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#single-container-in-tests-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Single container in tests</h4>\n<p dir=\"auto\">If you want to use a single container for all tests in your suite:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MysqlSpec extends FunSuite with TestContainerForAll {\n\n  // You need to override `containerDef` with needed container definition\n  override val containerDef = MySQLContainer.Def()\n\n  // To use containers in tests you need to use `withContainers` function\n  test(&quot;test case name&quot;) {\n    withContainers { mysqlContainer =&gt;\n      // Inside your test body you can do with your container whatever you want to\n      assert(mysqlContainer.jdbcUrl.nonEmpty)\n    }\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">FunSuite</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">TestContainerForAll</span> {\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> You need to override `containerDef` with needed container definition</span>\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">containerDef</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>.<span class=\"pl-en\">Def</span>()\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> To use containers in tests you need to use `withContainers` function</span>\n  test(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test case name<span class=\"pl-pds\">\"</span></span>) {\n    withContainers { mysqlContainer <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Inside your test body you can do with your container whatever you want to</span>\n      assert(mysqlContainer.jdbcUrl.nonEmpty)\n    }\n  }\n}</pre></div>\n<p dir=\"auto\">If you want to use a single container for each test in your suite just use code above with <code>TestContainerForEach</code> trait instead of <code>TestContainerForAll</code>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-multiple-containers-in-tests-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#multiple-containers-in-tests-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Multiple containers in tests</h4>\n<p dir=\"auto\">If you want to use multiple containers for all tests in your suite:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ExampleSpec extends FunSuite with TestContainersForAll {\n\n  // First of all, you need to declare, which containers you want to use\n  override type Containers = MySQLContainer and PostgreSQLContainer and DockerComposeContainer\n\n  // After that, you need to describe, how you want to start them,\n  // In this method you can use any intermediate logic.\n  // You can pass parameters between containers, for example.\n  override def startContainers(): Containers = {\n    val container1 = MySQLContainer.Def().start()\n    val container2 = PostgreSQLContainer.Def().start()\n    val container3 = DockerComposeContainer.Def(ComposeFile(Left(new File(&quot;docker-compose.yml&quot;)))).start()\n    container1 and container2 and container3\n  }\n\n  // `withContainers` function supports multiple containers:\n  test(&quot;test&quot;) {\n    withContainers { case mysqlContainer and pgContainer and dcContainer =&gt;\n      // Inside your test body you can do with your containers whatever you want to\n      assert(mysqlContainer.jdbcUrl.nonEmpty &amp;&amp; pgContainer.jdbcUrl.nonEmpty)\n    }\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ExampleSpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">FunSuite</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">TestContainersForAll</span> {\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> First of all, you need to declare, which containers you want to use</span>\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">type</span> <span class=\"pl-en\">Containers</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span> and <span class=\"pl-en\">PostgreSQLContainer</span> and <span class=\"pl-en\">DockerComposeContainer</span>\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> After that, you need to describe, how you want to start them,</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> In this method you can use any intermediate logic.</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> You can pass parameters between containers, for example.</span>\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">startContainers</span>()<span class=\"pl-k\">:</span> <span class=\"pl-en\">Containers</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>.<span class=\"pl-en\">Def</span>().start()\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PostgreSQLContainer</span>.<span class=\"pl-en\">Def</span>().start()\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container3</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DockerComposeContainer</span>.<span class=\"pl-en\">Def</span>(<span class=\"pl-en\">ComposeFile</span>(<span class=\"pl-en\">Left</span>(<span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>docker-compose.yml<span class=\"pl-pds\">\"</span></span>)))).start()\n    container1 and container2 and container3\n  }\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> `withContainers` function supports multiple containers:</span>\n  test(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>) {\n    withContainers { <span class=\"pl-k\">case</span> mysqlContainer and pgContainer and dcContainer <span class=\"pl-k\">=&gt;</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Inside your test body you can do with your containers whatever you want to</span>\n      assert(mysqlContainer.jdbcUrl.nonEmpty <span class=\"pl-k\">&amp;&amp;</span> pgContainer.jdbcUrl.nonEmpty)\n    }\n  }\n}</pre></div>\n<p dir=\"auto\">If you want to use a single container for each test in your suite just use code above with <code>TestContainersForEach</code> trait instead of <code>TestContainersForAll</code>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-startstop-hooks-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#startstop-hooks-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Start/Stop hooks</h4>\n<p dir=\"auto\">You have the option to override <code>afterContainersStart</code> and <code>beforeContainersStop</code> methods.</p>\n<h5 dir=\"auto\"><a id=\"user-content-example-with-single-container\" class=\"anchor\" aria-hidden=\"true\" href=\"#example-with-single-container\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example with single container</h5>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MySpec extends AnyFlatSpec with TestContainerForAll {\n\n  override val containerDef: ContainerDef =\n    PostgreSQLContainer.Def(DockerImageName.parse(&quot;postgres:12&quot;))\n\n  override def afterContainersStart(container: Containers): Unit = {\n    super.afterContainersStart(container)\n\n    container match {\n      case _: PostgreSQLContainer =&gt; println(&quot;your logic here&quot;)\n    }\n  }\n\n  override def beforeContainersStop(container: Containers): Unit = {\n    super.beforeContainersStop(container)\n\n    container match {\n      case _: PostgreSQLContainer =&gt; println(&quot;your logic here&quot;)\n    }\n  }\n\n it should &quot;work&quot; in withContainers { \n   case pgContainer: PostgreSQLContainer =&gt;\n     assert(pgContainer.jdbcUrl.nonEmpty) \n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MySpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">TestContainerForAll</span> {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">containerDef</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ContainerDef</span> <span class=\"pl-k\">=</span>\n    <span class=\"pl-en\">PostgreSQLContainer</span>.<span class=\"pl-en\">Def</span>(<span class=\"pl-en\">DockerImageName</span>.parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>postgres:12<span class=\"pl-pds\">\"</span></span>))\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">afterContainersStart</span>(<span class=\"pl-v\">container</span>: <span class=\"pl-en\">Containers</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c1\">super</span>.afterContainersStart(container)\n\n    container <span class=\"pl-k\">match</span> {\n      <span class=\"pl-k\">case</span> <span class=\"pl-v\">_</span>: <span class=\"pl-en\">PostgreSQLContainer</span> <span class=\"pl-k\">=&gt;</span> println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your logic here<span class=\"pl-pds\">\"</span></span>)\n    }\n  }\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">beforeContainersStop</span>(<span class=\"pl-v\">container</span>: <span class=\"pl-en\">Containers</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c1\">super</span>.beforeContainersStop(container)\n\n    container <span class=\"pl-k\">match</span> {\n      <span class=\"pl-k\">case</span> <span class=\"pl-v\">_</span>: <span class=\"pl-en\">PostgreSQLContainer</span> <span class=\"pl-k\">=&gt;</span> println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your logic here<span class=\"pl-pds\">\"</span></span>)\n    }\n  }\n\n it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>work<span class=\"pl-pds\">\"</span></span> in withContainers { \n   <span class=\"pl-k\">case</span> <span class=\"pl-v\">pgContainer</span>: <span class=\"pl-en\">PostgreSQLContainer</span> <span class=\"pl-k\">=&gt;</span>\n     assert(pgContainer.jdbcUrl.nonEmpty) \n  }\n}</pre></div>\n<h5 dir=\"auto\"><a id=\"user-content-example-with-multiple-containers\" class=\"anchor\" aria-hidden=\"true\" href=\"#example-with-multiple-containers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example with multiple containers</h5>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MySpec extends AnyFlatSpec with TestContainersForAll {\n\n  override type Containers = MySQLContainer and PostgreSQLContainer\n\n  override def startContainers(): Containers = {\n    val container1 = MySQLContainer.Def().start()\n    val container2 = PostgreSQLContainer.Def().start()\n\n    container1 and container2\n  }\n\n  override def afterContainersStart(containers: Containers): Unit = {\n    super.afterContainersStart(containers)\n\n    containers match {\n      case mySqlContainer and pgContainer =&gt; println(&quot;your logic here&quot;)\n    }\n  }\n\n  override def beforeContainersStop(containers: Containers): Unit = {\n    super.beforeContainersStop(containers)\n\n    containers match {\n      case mySqlContainer and pgContainer =&gt; println(&quot;your logic here&quot;)\n    }\n  }\n\n  it should &quot;work&quot; in withContainers {\n    case mysqlContainer and pgContainer =&gt;\n      assert(mysqlContainer.jdbcUrl.nonEmpty &amp;&amp; pgContainer.jdbcUrl.nonEmpty)\n  }\n\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MySpec</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">AnyFlatSpec</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">TestContainersForAll</span> {\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">type</span> <span class=\"pl-en\">Containers</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span> and <span class=\"pl-en\">PostgreSQLContainer</span>\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">startContainers</span>()<span class=\"pl-k\">:</span> <span class=\"pl-en\">Containers</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container1</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">MySQLContainer</span>.<span class=\"pl-en\">Def</span>().start()\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">container2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PostgreSQLContainer</span>.<span class=\"pl-en\">Def</span>().start()\n\n    container1 and container2\n  }\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">afterContainersStart</span>(<span class=\"pl-v\">containers</span>: <span class=\"pl-en\">Containers</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c1\">super</span>.afterContainersStart(containers)\n\n    containers <span class=\"pl-k\">match</span> {\n      <span class=\"pl-k\">case</span> mySqlContainer and pgContainer <span class=\"pl-k\">=&gt;</span> println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your logic here<span class=\"pl-pds\">\"</span></span>)\n    }\n  }\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">beforeContainersStop</span>(<span class=\"pl-v\">containers</span>: <span class=\"pl-en\">Containers</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Unit</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c1\">super</span>.beforeContainersStop(containers)\n\n    containers <span class=\"pl-k\">match</span> {\n      <span class=\"pl-k\">case</span> mySqlContainer and pgContainer <span class=\"pl-k\">=&gt;</span> println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your logic here<span class=\"pl-pds\">\"</span></span>)\n    }\n  }\n\n  it should <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>work<span class=\"pl-pds\">\"</span></span> in withContainers {\n    <span class=\"pl-k\">case</span> mysqlContainer and pgContainer <span class=\"pl-k\">=&gt;</span>\n      assert(mysqlContainer.jdbcUrl.nonEmpty <span class=\"pl-k\">&amp;&amp;</span> pgContainer.jdbcUrl.nonEmpty)\n  }\n\n}</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-notes-on-munit-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#notes-on-munit-usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Notes on MUnit usage</h4>\n<ul dir=\"auto\">\n<li>If you use <code>*ForAll</code> trait and override beforeAll() without calling super.beforeAll() your containers won't start.</li>\n<li>If you use <code>*ForAll</code> trait and override afterAll() without calling super.afterAll() your containers won't stop.</li>\n<li>If you use <code>*ForEach</code> trait and override beforeEach() without calling super.beforeEach() your containers won't start.</li>\n<li>If you use <code>*ForEach</code> trait and override afterEach() without calling super.afterEach() your containers won't stop.</li>\n<li><a href=\"https://github.com/scalameta/munit/issues/119\">Currently,</a> there is no way to retrieve test status in MUnit <code>afterEach</code> block, so <code>afterTest</code> hook will never contain an error.</li>\n</ul>\n<p dir=\"auto\">If you have any questions or difficulties feel free to ask it in our <a href=\"https://testcontainers.slack.com/messages/CAFK4GL85\" rel=\"nofollow\">slack channel</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-release-notes\" class=\"anchor\" aria-hidden=\"true\" href=\"#release-notes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Release notes</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>0.40.0</strong></p>\n<ul dir=\"auto\">\n<li>Added file system bindings <a href=\"https://github.com/testcontainers/testcontainers-scala/pull/206\">https://github.com/testcontainers/testcontainers-scala/pull/206</a></li>\n<li><strong>Breaking change:</strong> <code>classpathResourceMapping</code> is now <code>Seq[FileSystemBind]</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.11</strong></p>\n<ul dir=\"auto\">\n<li>Generic container instantiation - <a href=\"https://github.com/testcontainers/testcontainers-scala/pull/194\">https://github.com/testcontainers/testcontainers-scala/pull/194</a></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.10</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.16.2</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.9</strong></p>\n<ul dir=\"auto\">\n<li>Added <code>SchemaRegistryContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.8</strong></p>\n<ul dir=\"auto\">\n<li>Fixed Scaladex</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.7</strong></p>\n<ul dir=\"auto\">\n<li>Fix for <a href=\"https://github.com/testcontainers/testcontainers-scala/issues/186\">https://github.com/testcontainers/testcontainers-scala/issues/186</a></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.6</strong></p>\n<ul dir=\"auto\">\n<li>Scala 3.0.1 support</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.5</strong></p>\n<ul dir=\"auto\">\n<li>Scala 3.0.0 support</li>\n<li>Added the ability to specify services for <code>DockerComposeContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.4</strong></p>\n<ul dir=\"auto\">\n<li>Added <code>TrinoContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.3</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.15.2</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.2</strong></p>\n<ul dir=\"auto\">\n<li>Scala updated to 3.0.0-RC1</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.1</strong></p>\n<ul dir=\"auto\">\n<li>Scala updated to 3.0.0-M3</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.39.0</strong></p>\n<ul dir=\"auto\">\n<li>Scalatest updated to 3.2.3</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.8</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.15.1.</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.7</strong></p>\n<ul dir=\"auto\">\n<li>Addressed testcontainers-java image compatibility checks by changing <code>String</code> to <code>DockerImageName</code> in Container class constructors</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.6</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.15.0:\n<ul dir=\"auto\">\n<li>Include fix for \"Can not connect to Ryuk\" on macOS with Docker for Mac 2.4.0.0 (<a href=\"https://github.com/testcontainers/testcontainers-java/issues/3166\">https://github.com/testcontainers/testcontainers-java/issues/3166</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.5</strong></p>\n<ul dir=\"auto\">\n<li>Added <code>LocalStackV2Container</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.4</strong></p>\n<ul dir=\"auto\">\n<li>Fixed <code>SolrContainer</code> configuration nullability</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.3</strong></p>\n<ul dir=\"auto\">\n<li>Fixed <code>MongoDBContainer</code> default version</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.1</strong></p>\n<ul dir=\"auto\">\n<li>Fixed class cast exception in the next containers:\n<ul dir=\"auto\">\n<li>InfluxDBContainer</li>\n<li>MariaDBContainer</li>\n<li>MSSQLServerContainer</li>\n<li>MySQLContainer</li>\n<li>NginxContainer</li>\n<li>PostgreSQLContainer</li>\n<li>PrestoContainer</li>\n<li>VaultContainer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.38.0</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.14.3:\n<ul dir=\"auto\">\n<li>Added <code>MongoDBContainer</code>.</li>\n<li>Added <code>SolrContainer</code>.</li>\n<li>Added <code>urlParams</code> constructor parameter to <code>CockroachContainer</code>, <code>Db2Container</code>, <code>MariaDBContainer</code>, <code>MSSQLServerContainer</code>, <code>MySQLContainer</code> and <code>PostgreSQLContainer</code>.</li>\n<li>Added <code>host</code> method to containers. This method will replace <code>containerIpAddress</code> in the future.</li>\n<li><code>CouchbaseContainer</code> was rewritten. This change is not backward compatible.</li>\n<li>Added <code>vhost</code> parameter to <code>RabbitMQContainer.Exchange</code>.</li>\n</ul>\n</li>\n<li>Added <code>commonJdbcParams</code> constructor parameter to <code>CockroachContainer</code>, <code>Db2Container</code>, <code>MariaDBContainer</code>, <code>MSSQLServerContainer</code>, <code>MySQLContainer</code>, <code>PostgreSQLContainer</code>, <code>OracleContainer</code> and <code>PrestoContainer</code>. It contains common options for JDBC containers.</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.37.0</strong></p>\n<ul dir=\"auto\">\n<li>Added MUnit integration.</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.36.1</strong></p>\n<ul dir=\"auto\">\n<li>Added <code>.waitingFor()</code> to <code>DockerComposeContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.36.0</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.13.0:\n<ul dir=\"auto\">\n<li>Added <code>OrientDBContainer</code>.</li>\n<li>Added <code>PrestoContainer</code>.</li>\n<li>Added <code>DockerComposeContainer.getContainerByServiceName</code> method.</li>\n</ul>\n</li>\n<li>Change module dependencies for container modules. They now depend on the core module instead of scalatest module.</li>\n<li>Removed <code>dbPassword</code> parameter from the <code>ClickHouseContainer</code>. Looks like this parameter was added accidentally (java container doesn't support it).</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.35.2</strong></p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.12.5.</li>\n<li>Added methods to the <code>SingleContainer</code>:\n<ul dir=\"auto\">\n<li><code>execInContainer</code></li>\n<li><code>copyFileToContainer</code></li>\n<li><code>copyFileFromContainer</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.35.1</strong></p>\n<ul dir=\"auto\">\n<li>MariaDB NPE fix #106</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.35.0</strong></p>\n<p dir=\"auto\">From this release testcontainers-scala supports all testcontainers-java containers and methods. If you find missing parts — don't hesitate to create an issue!</p>\n<ul dir=\"auto\">\n<li>testcontainers-java updated to 1.12.4.</li>\n<li>Added missing containers from the testcontainers-java.  Here is the full list of new containers:\n<ul dir=\"auto\">\n<li><code>testcontainers-scala-neo4j</code></li>\n<li><code>testcontainers-scala-mssqlserver</code></li>\n<li><code>testcontainers-scala-clickhouse</code></li>\n<li><code>testcontainers-scala-cockroachdb</code></li>\n<li><code>testcontainers-scala-couchbase</code></li>\n<li><code>testcontainers-scala-db2</code></li>\n<li><code>testcontainers-scala-dynalite</code></li>\n<li><code>testcontainers-scala-elasticsearch</code></li>\n<li><code>testcontainers-scala-influxdb</code></li>\n<li><code>testcontainers-scala-localstack</code></li>\n<li><code>testcontainers-scala-mariadb</code></li>\n<li><code>testcontainers-scala-mockserver</code></li>\n<li><code>testcontainers-scala-nginx</code></li>\n<li><code>testcontainers-scala-pulsar</code></li>\n<li><code>testcontainers-scala-rabbitmq</code></li>\n<li><code>testcontainers-scala-toxiproxy  </code></li>\n</ul>\n</li>\n<li>Added missing methods to the <code>SingleContainer</code>:\n<ul dir=\"auto\">\n<li><code>envMap</code></li>\n<li><code>boundPortNumbers</code></li>\n<li><code>copyToFileContainerPathMap</code></li>\n<li><code>labels</code></li>\n<li><code>shmSize</code></li>\n<li><code>testHostIpAddress</code></li>\n<li><code>tmpFsMapping</code></li>\n<li><code>logs</code></li>\n<li><code>livenessCheckPortNumbers</code></li>\n</ul>\n</li>\n<li>Added missing parameters to the <code>GenericContainer</code> constructor:\n<ul dir=\"auto\">\n<li><code>labels</code></li>\n<li><code>tmpFsMapping</code></li>\n<li><code>imagePullPolicy</code></li>\n</ul>\n</li>\n<li>Added missing methods to the <code>CassandraContainer</code>:\n<ul dir=\"auto\">\n<li><code>cluster</code></li>\n<li><code>username</code></li>\n<li><code>password</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.34.3</strong></p>\n<ul dir=\"auto\">\n<li>Support of the new API in the <code>DockerComposeContainer</code>: added <code>DockerComposeContainer.Def</code>.</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.34.2</strong></p>\n<ul dir=\"auto\">\n<li>New <code>OracleContainer</code>. It is in the <code>testcontainers-scala-oracle-xe</code> package.</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.34.1</strong></p>\n<ul dir=\"auto\">\n<li>New API improvements:\n<ul dir=\"auto\">\n<li>Changed signature of <code>def withContainers(runTest: Containers =&gt; Unit): Unit</code> to\n<code>def withContainers[A](runTest: Containers =&gt; A): A</code></li>\n<li>Renamed <code>afterStart</code> to <code>afterContainersStart</code> and added a <code>containers: Containers</code> argument to it.</li>\n<li>Renamed <code>beforeStop</code> to <code>beforeContainersStop</code> and added a <code>containers: Containers</code> argument to it.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.34.0</strong></p>\n<ul dir=\"auto\">\n<li>Added new, experimental API and DSL.\nThe main motivation points are in the <a href=\"https://github.com/testcontainers/testcontainers-scala/pull/78\">pull request</a>.\nOld API remains the same, so all your old code will continue to work.<br>\nWe will wait for the user's feedback about the new API.\nIf it will be positive, eventually this API may replace the current API.\nYou can find more information about the new API above.</li>\n<li>The library is split into multiple modules.\nEvery built-in container now has a separate module with all needed transitive dependencies,\nso you will not have to add them manually. More details are above, in the dedicated paragraph.\nOld module <code>testcontainers-scala</code> is still provided but will be eventually dropped in future.\nTo migrate to the new modules remove <code>testcontainers-scala</code> dependency\nand add only needed dependencies from the modules list in the docs.</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.33.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.12.1</code> -&gt; <code>1.12.2</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.32.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers -&gt; <code>1.12.1</code></li>\n<li>SBT -&gt; <code>1.3.0</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.31.0</strong></p>\n<ul dir=\"auto\">\n<li>Additional config options for PostgreSQL <a href=\"https://github.com/testcontainers/testcontainers-scala/pull/70\">#70</a></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.30.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers -&gt; <code>1.12.0</code></li>\n<li>Scala -&gt; <code>2.12.9</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.29.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.11.2</code> -&gt; <code>1.11.4</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.28.0</strong></p>\n<ul dir=\"auto\">\n<li><code>VaultContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.27.0</strong></p>\n<ul dir=\"auto\">\n<li>New <code>TestLifecycleAware</code> trait introduced. You can use it when you want to do something with the container before or after the test.</li>\n<li><code>Container</code> now implements <code>Startable</code> interface with <code>start</code> and <code>stop</code> methods.</li>\n<li>Old container's lifecycle methods <code>finished</code>, <code>succeeded</code>, <code>starting</code>, <code>failed</code> are deprecated. Use <code>start</code>, <code>stop</code>, and <code>TestLifecycleAware</code> methods instead.</li>\n<li>Added <code>KafkaContainer</code></li>\n<li>Added <code>CassandraContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.26.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.11.2</code> -&gt; <code>1.11.3</code></li>\n<li>Scala 2.13.0</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.25.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.11.1</code> -&gt; <code>1.11.2</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.24.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.10.6</code> -&gt; <code>1.11.1</code></li>\n<li>Scala 2.13.0-M5</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.23.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.10.1</code> -&gt; <code>1.10.6</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.22.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.9.1</code> -&gt; <code>1.10.1</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.21.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.8.3</code> -&gt; <code>1.9.1</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.20.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.8.0</code> -&gt; <code>1.8.3</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.19.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.7.3</code> -&gt; <code>1.8.0</code></li>\n<li>(#24) <code>DockerComposeContainer</code> enhancements</li>\n<li>Added Dockerfile support to <code>GenericContainer</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.18.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.7.1</code> -&gt; <code>1.7.3</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.17.0</strong></p>\n<ul dir=\"auto\">\n<li>Testcontainers <code>1.6.0</code> -&gt; <code>1.7.1</code></li>\n<li>Removed <code>shapeless</code> dependency</li>\n<li>Added implicit conversion to <code>LazyContainer</code>. This gives you a possibility to not wrap your containers into the <code>LazyContainer</code> manually.</li>\n<li><code>MultipleContainers.apply</code> now receives <code>LazyContainer[_]*</code> type. Together with the previous point, it makes usage experience of <code>MultipleContainers</code> more smooth.</li>\n<li>Added multiple missing reflecting methods to all containers</li>\n<li>Added <code>configure</code> method. See <a href=\"#custom-configuration-of-inner-containers\">this</a> for more details</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.16.0</strong></p>\n<ul dir=\"auto\">\n<li><code>FixedHostPortGenericContainer</code> added</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.15.0</strong></p>\n<ul dir=\"auto\">\n<li>Additional configuration parameters for <code>MySQLContainer</code></li>\n<li>Improvements to <code>MultipleContainers</code> - container lazy creation for dependent containers</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.14.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.5.1</code> -&gt; <code>1.6.0</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.13.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.4.3</code> -&gt; <code>1.5.1</code></li>\n<li>Scala 2.10 support</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.12.0</strong></p>\n<ul dir=\"auto\">\n<li>Improvement: <code>afterStart</code> hook now handles exceptions correctly</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.11.0</strong></p>\n<ul dir=\"auto\">\n<li>Improvement: containers don't start in <code>ForAllTestContainer</code> if all tests are ignored</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.10.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.4.2</code> -&gt; <code>1.4.3</code></li>\n<li>Fix of #8</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.8.0</strong></p>\n<ul dir=\"auto\">\n<li>PostgreSQL container</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.7.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.2.1</code> -&gt; <code>1.4.2</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.6.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.2.0</code> -&gt; <code>1.2.1</code></li>\n<li>Fix of the <code>afterStart</code> hook</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.5.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.1.8</code> -&gt; <code>1.2.0</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.4.1</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.1.7</code> -&gt; <code>1.1.8</code></li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.4.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.1.5</code> -&gt; <code>1.1.7</code></li>\n<li>Scala cross-building (2.11.* + 2.12.*)</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.3.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.1.0</code> -&gt; <code>1.1.5</code></li>\n<li>Start/Stop hooks</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\"><strong>0.2.0</strong></p>\n<ul dir=\"auto\">\n<li>TestContainers <code>1.0.5</code> -&gt; <code>1.1.0</code></li>\n<li>Code refactoring</li>\n<li>Scala wrappers for major container types</li>\n</ul>\n</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-publishing\" class=\"anchor\" aria-hidden=\"true\" href=\"#publishing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Publishing</h2>\n<p dir=\"auto\"><code>$ sbt clean release</code></p>\n</article></div>",
    "contributors" : [
      {
        "login" : "dimafeng",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/778473?v=4",
        "url" : "https://api.github.com/users/dimafeng",
        "contributions" : 379
      },
      {
        "login" : "sullis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/30938?v=4",
        "url" : "https://api.github.com/users/sullis",
        "contributions" : 26
      },
      {
        "login" : "LMnet",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2826500?v=4",
        "url" : "https://api.github.com/users/LMnet",
        "contributions" : 20
      },
      {
        "login" : "alejandrohdezma",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9027541?v=4",
        "url" : "https://api.github.com/users/alejandrohdezma",
        "contributions" : 8
      },
      {
        "login" : "psisoyev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1637013?v=4",
        "url" : "https://api.github.com/users/psisoyev",
        "contributions" : 8
      },
      {
        "login" : "pbylicki",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9861707?v=4",
        "url" : "https://api.github.com/users/pbylicki",
        "contributions" : 6
      },
      {
        "login" : "BusyByte",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3882422?v=4",
        "url" : "https://api.github.com/users/BusyByte",
        "contributions" : 6
      },
      {
        "login" : "guizmaii",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1193670?v=4",
        "url" : "https://api.github.com/users/guizmaii",
        "contributions" : 6
      },
      {
        "login" : "matsluni",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2551177?v=4",
        "url" : "https://api.github.com/users/matsluni",
        "contributions" : 5
      },
      {
        "login" : "tpolecat",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1200131?v=4",
        "url" : "https://api.github.com/users/tpolecat",
        "contributions" : 4
      },
      {
        "login" : "nryanov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19765449?v=4",
        "url" : "https://api.github.com/users/nryanov",
        "contributions" : 4
      },
      {
        "login" : "AdrianRaFo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15971742?v=4",
        "url" : "https://api.github.com/users/AdrianRaFo",
        "contributions" : 3
      },
      {
        "login" : "bplommer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8990749?v=4",
        "url" : "https://api.github.com/users/bplommer",
        "contributions" : 3
      },
      {
        "login" : "benkio",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4698396?v=4",
        "url" : "https://api.github.com/users/benkio",
        "contributions" : 3
      },
      {
        "login" : "schrepfler",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3553?v=4",
        "url" : "https://api.github.com/users/schrepfler",
        "contributions" : 3
      },
      {
        "login" : "bskarda",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1924657?v=4",
        "url" : "https://api.github.com/users/bskarda",
        "contributions" : 2
      },
      {
        "login" : "insdami",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1742610?v=4",
        "url" : "https://api.github.com/users/insdami",
        "contributions" : 2
      },
      {
        "login" : "devsprint",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/89512?v=4",
        "url" : "https://api.github.com/users/devsprint",
        "contributions" : 2
      },
      {
        "login" : "JesusMtnez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8639179?v=4",
        "url" : "https://api.github.com/users/JesusMtnez",
        "contributions" : 2
      },
      {
        "login" : "jsoizo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3462087?v=4",
        "url" : "https://api.github.com/users/jsoizo",
        "contributions" : 2
      },
      {
        "login" : "markarasev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3638968?v=4",
        "url" : "https://api.github.com/users/markarasev",
        "contributions" : 2
      },
      {
        "login" : "ivmikhail",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5416314?v=4",
        "url" : "https://api.github.com/users/ivmikhail",
        "contributions" : 2
      },
      {
        "login" : "scoquelin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2460514?v=4",
        "url" : "https://api.github.com/users/scoquelin",
        "contributions" : 2
      },
      {
        "login" : "faustin0",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/47699119?v=4",
        "url" : "https://api.github.com/users/faustin0",
        "contributions" : 2
      },
      {
        "login" : "arkxc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16373874?v=4",
        "url" : "https://api.github.com/users/arkxc",
        "contributions" : 1
      },
      {
        "login" : "dmi3zkm",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1760444?v=4",
        "url" : "https://api.github.com/users/dmi3zkm",
        "contributions" : 1
      },
      {
        "login" : "quiquedev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19170662?v=4",
        "url" : "https://api.github.com/users/quiquedev",
        "contributions" : 1
      },
      {
        "login" : "jaapterwoerds",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1687640?v=4",
        "url" : "https://api.github.com/users/jaapterwoerds",
        "contributions" : 1
      },
      {
        "login" : "wjlow",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/368630?v=4",
        "url" : "https://api.github.com/users/wjlow",
        "contributions" : 1
      },
      {
        "login" : "jalaziz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/247849?v=4",
        "url" : "https://api.github.com/users/jalaziz",
        "contributions" : 1
      },
      {
        "login" : "jphautin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/778660?v=4",
        "url" : "https://api.github.com/users/jphautin",
        "contributions" : 1
      },
      {
        "login" : "Hjdskes",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1260727?v=4",
        "url" : "https://api.github.com/users/Hjdskes",
        "contributions" : 1
      },
      {
        "login" : "denisovlev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1573853?v=4",
        "url" : "https://api.github.com/users/denisovlev",
        "contributions" : 1
      },
      {
        "login" : "mhovorchuk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/73752472?v=4",
        "url" : "https://api.github.com/users/mhovorchuk",
        "contributions" : 1
      },
      {
        "login" : "mareckmareck",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4955389?v=4",
        "url" : "https://api.github.com/users/mareckmareck",
        "contributions" : 1
      },
      {
        "login" : "markus1189",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/591567?v=4",
        "url" : "https://api.github.com/users/markus1189",
        "contributions" : 1
      },
      {
        "login" : "mrtnrdl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1167062?v=4",
        "url" : "https://api.github.com/users/mrtnrdl",
        "contributions" : 1
      },
      {
        "login" : "MaximGovorchuk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1481190?v=4",
        "url" : "https://api.github.com/users/MaximGovorchuk",
        "contributions" : 1
      },
      {
        "login" : "takezoe",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1094760?v=4",
        "url" : "https://api.github.com/users/takezoe",
        "contributions" : 1
      },
      {
        "login" : "rtyley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/52038?v=4",
        "url" : "https://api.github.com/users/rtyley",
        "contributions" : 1
      },
      {
        "login" : "bsideup",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1050762?v=4",
        "url" : "https://api.github.com/users/bsideup",
        "contributions" : 1
      },
      {
        "login" : "TobiasRoland",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5878818?v=4",
        "url" : "https://api.github.com/users/TobiasRoland",
        "contributions" : 1
      },
      {
        "login" : "vkrylov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5032428?v=4",
        "url" : "https://api.github.com/users/vkrylov",
        "contributions" : 1
      },
      {
        "login" : "dzx11",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13459787?v=4",
        "url" : "https://api.github.com/users/dzx11",
        "contributions" : 1
      },
      {
        "login" : "jbwheatley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19939655?v=4",
        "url" : "https://api.github.com/users/jbwheatley",
        "contributions" : 1
      },
      {
        "login" : "kittsville",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6013087?v=4",
        "url" : "https://api.github.com/users/kittsville",
        "contributions" : 1
      },
      {
        "login" : "mylesjao",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6355605?v=4",
        "url" : "https://api.github.com/users/mylesjao",
        "contributions" : 1
      },
      {
        "login" : "rgba",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1962225?v=4",
        "url" : "https://api.github.com/users/rgba",
        "contributions" : 1
      },
      {
        "login" : "rwiskerke",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10156008?v=4",
        "url" : "https://api.github.com/users/rwiskerke",
        "contributions" : 1
      },
      {
        "login" : "shimamoto",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1875052?v=4",
        "url" : "https://api.github.com/users/shimamoto",
        "contributions" : 1
      }
    ],
    "commits" : 528,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 207,
        "title" : "Support Couchbase Scopes and Collections",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/207"
      },
      {
        "number" : 205,
        "title" : "Missing `withFileSystemBind` in `GenericContainer`",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/205"
      },
      {
        "number" : 201,
        "title" : "support of weaver test framework",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/201"
      },
      {
        "number" : 200,
        "title" : "ContainerLaunchException with Docker Compose V2",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/200"
      },
      {
        "number" : 175,
        "title" : "Could not find a valid Docker environment",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/175"
      },
      {
        "number" : 171,
        "title" : "With MUnit / TestContainersForAll, containers start even if the suite is excluded via categories",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/171"
      },
      {
        "number" : 167,
        "title" : "How to make MySQLContainer and JdbcDatabaseDelegate work together? ",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/167"
      },
      {
        "number" : 160,
        "title" : "Is there a way to share the same single container instance between suites?",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/160"
      },
      {
        "number" : 151,
        "title" : "Allow specifying full image in KafkaContainer",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/151"
      },
      {
        "number" : 147,
        "title" : "SBT Plugin",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/147"
      },
      {
        "number" : 146,
        "title" : "Easier Usage With Play / Other Servers",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/146"
      },
      {
        "number" : 145,
        "title" : "Couldn't get mapped port for localstackv2 container",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/145"
      },
      {
        "number" : 134,
        "title" : "Kafka container not waiting for full startup",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/134"
      },
      {
        "number" : 99,
        "title" : "Not recognizing DockerComposeContainer with any upper case identifier as started",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/99"
      },
      {
        "number" : 98,
        "title" : "Multiple docker-compose files?",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/98"
      },
      {
        "number" : 18,
        "title" : "Contributing new containers?",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/18"
      },
      {
        "number" : 5,
        "title" : "Any love for specs2?",
        "url" : "https://github.com/testcontainers/testcontainers-scala/issues/5"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "virtualization-and-containerization",
    "beginnerIssuesLabel" : null
  }
}