{
  "organization" : "lambdista",
  "repository" : "money",
  "creationDate" : 1478598200846,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644288181922
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Scala DSL for money-related operations",
    "logo" : "https://avatars.githubusercontent.com/u/4966276?v=4",
    "stars" : 73,
    "forks" : 5,
    "watchers" : 3,
    "issues" : 1,
    "creationDate" : 1424358042000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-scala-dsl-for-money-related-operations\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-dsl-for-money-related-operations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala DSL for money-related operations</h1>\n<p dir=\"auto\">This Domain-Specific Language (DSL) lets you perform operations among different currencies,\nby transparently doing all internal conversions. The conversion map is injected implicitly by the client code.</p>\n<h2 dir=\"auto\"><a id=\"user-content-using-money\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-money\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using Money</h2>\n<p dir=\"auto\">As a first step you need to add the resolver and dependency to your build file:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.lambdista&quot; %% &quot;money&quot; % &quot;0.8.0&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.lambdista<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>money<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.8.0<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">You can find all the released versions <a href=\"https://github.com/lambdista/money/releases\">here</a>.</p>\n<p dir=\"auto\">Builds are available for Scala 2.13.x, 2.12.x.</p>\n<h2 dir=\"auto\"><a id=\"user-content-usage-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage-example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage Example</h2>\n<p dir=\"auto\">Here's a simple usage example:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import money._\n\nobject Usage {\n  def main(args: Array[String]): Unit = {\n    val conversion: Conversion = Map(\n      (EUR, USD) -&gt; 1.13,\n      (EUR, GBP) -&gt; 0.71,\n      (USD, EUR) -&gt; 0.88,\n      (USD, GBP) -&gt; 0.63,\n      (GBP, EUR) -&gt; 1.40,\n      (GBP, USD) -&gt; 1.59\n    )\n\n    implicit val converter = Converter(conversion)\n\n    val sumAndConversion1 = 100.001 (USD) + 200 (EUR) to GBP\n    println(s&quot;sumAndConversion1: $sumAndConversion1&quot;)\n\n    val sumAndConversion2: Money = 100 (USD) + 210.4 (EUR) to EUR\n    println(s&quot;sumAndConversion2: $sumAndConversion2&quot;)\n\n    val sum              = 100.001 (USD) + 200 (EUR)\n    val simpleConversion = sum to GBP\n    println(s&quot;simpleConversion: $simpleConversion&quot;)\n\n    val sumWithSimpleNumber = 100 (USD) + 23.560\n    println(s&quot;sumWithSimpleNumber: $sumWithSimpleNumber&quot;)\n\n    val multiplicationWithSimpleNumber = 100 (USD) * 23\n    println(s&quot;multiplicationWithSimpleNumber: $multiplicationWithSimpleNumber&quot;)\n\n    val usd = Currency(&quot;USD&quot;)\n\n    val multiplication = 100 (usd) * 23\n    println(s&quot;multiplication: $multiplication&quot;)\n\n    val divisionWithSimpleNumber = 100 (USD) / 23\n    println(s&quot;divisionWithSimpleNumber: $divisionWithSimpleNumber&quot;)\n\n    val comparison = 100 (USD) &gt; 99 (EUR)\n    println(s&quot;100 USD &gt; 99 EUR? $comparison&quot;)\n  }\n}\"><pre lang=\"tut:silent\"><code>import money._\n\nobject Usage {\n  def main(args: Array[String]): Unit = {\n    val conversion: Conversion = Map(\n      (EUR, USD) -&gt; 1.13,\n      (EUR, GBP) -&gt; 0.71,\n      (USD, EUR) -&gt; 0.88,\n      (USD, GBP) -&gt; 0.63,\n      (GBP, EUR) -&gt; 1.40,\n      (GBP, USD) -&gt; 1.59\n    )\n\n    implicit val converter = Converter(conversion)\n\n    val sumAndConversion1 = 100.001 (USD) + 200 (EUR) to GBP\n    println(s\"sumAndConversion1: $sumAndConversion1\")\n\n    val sumAndConversion2: Money = 100 (USD) + 210.4 (EUR) to EUR\n    println(s\"sumAndConversion2: $sumAndConversion2\")\n\n    val sum              = 100.001 (USD) + 200 (EUR)\n    val simpleConversion = sum to GBP\n    println(s\"simpleConversion: $simpleConversion\")\n\n    val sumWithSimpleNumber = 100 (USD) + 23.560\n    println(s\"sumWithSimpleNumber: $sumWithSimpleNumber\")\n\n    val multiplicationWithSimpleNumber = 100 (USD) * 23\n    println(s\"multiplicationWithSimpleNumber: $multiplicationWithSimpleNumber\")\n\n    val usd = Currency(\"USD\")\n\n    val multiplication = 100 (usd) * 23\n    println(s\"multiplication: $multiplication\")\n\n    val divisionWithSimpleNumber = 100 (USD) / 23\n    println(s\"divisionWithSimpleNumber: $divisionWithSimpleNumber\")\n\n    val comparison = 100 (USD) &gt; 99 (EUR)\n    println(s\"100 USD &gt; 99 EUR? $comparison\")\n  }\n}\n</code></pre></div>\n<p dir=\"auto\">As you can see the client code just needs a simple import and an implicit value of type <code>Converter</code>\nin order to use the DSL. The operations shown in the previous code are only a few among the available ones.\nHave a look at the <code>Money</code> class for a complete coverage.</p>\n<h2 dir=\"auto\"><a id=\"user-content-run-the-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#run-the-example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Run the example</h2>\n<p dir=\"auto\">To run the previous example launch:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ sbt run\"><pre><code>$ sbt run\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-play-with-the-repl\" class=\"anchor\" aria-hidden=\"true\" href=\"#play-with-the-repl\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Play with the REPL</h2>\n<p dir=\"auto\">To play with Scala's REPL launch:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ sbt console\"><pre><code>$ sbt console\n</code></pre></div>\n<p dir=\"auto\">This will automatically fire the Scala's REPL and run the following commands for you:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import money._\n\nval conversion: Conversion = Map(\n  (EUR, USD) -&gt; 1.13,\n  (EUR, GBP) -&gt; 0.71,\n  (USD, EUR) -&gt; 0.88,\n  (USD, GBP) -&gt; 0.63,\n  (GBP, EUR) -&gt; 1.40,\n  (GBP, USD) -&gt; 1.59\n)\n\nimplicit val converter = Converter(conversion)\"><pre lang=\"tut:silent\"><code>import money._\n\nval conversion: Conversion = Map(\n  (EUR, USD) -&gt; 1.13,\n  (EUR, GBP) -&gt; 0.71,\n  (USD, EUR) -&gt; 0.88,\n  (USD, GBP) -&gt; 0.63,\n  (GBP, EUR) -&gt; 1.40,\n  (GBP, USD) -&gt; 1.59\n)\n\nimplicit val converter = Converter(conversion)\n</code></pre></div>\n<p dir=\"auto\">This way you can start playing with the DSL expressions (e.g.: <code>100(USD) + 90(EUR)</code>) without worrying about imports\nand the conversion map. Of course if you need to use your own conversion you can redefine it.</p>\n<h2 dir=\"auto\"><a id=\"user-content-scalas-numeric-type-class-implementation\" class=\"anchor\" aria-hidden=\"true\" href=\"#scalas-numeric-type-class-implementation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala's Numeric type class implementation</h2>\n<p dir=\"auto\">When using the following import:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import money._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">money</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">you get the default implicit for <code>Numeric[Money]</code> whose implementation is as follows:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit def numericMoney(implicit converter: Converter) = new NumericMoney(DEFAULT_CURRENCY)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">numericMoney</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">converter</span>: <span class=\"pl-en\">Converter</span>) <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">NumericMoney</span>(<span class=\"pl-en\">DEFAULT_CURRENCY</span>)</pre></div>\n<p dir=\"auto\">It uses <code>DEFAULT_CURRENCY</code>, which is <code>USD</code>. That's necessary for the <code>fromInt</code> method of <code>Numeric</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"def fromInt(x: Int): Money\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">fromInt</span>(<span class=\"pl-v\">x</span>: <span class=\"pl-en\">Int</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Money</span></pre></div>\n<p dir=\"auto\">That is, in order to create a <code>Money</code> object you need a <code>Currency</code>.</p>\n<p dir=\"auto\">If you intend to use a different currency you can define your own implicit <code>Numeric[Money]</code>, e.g.:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit def numericMoney(implicit converter: Converter) = new NumericMoney(EUR)\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">numericMoney</span>(<span class=\"pl-k\">implicit</span> <span class=\"pl-v\">converter</span>: <span class=\"pl-en\">Converter</span>) <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">NumericMoney</span>(<span class=\"pl-en\">EUR</span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-bugs-and-feedback\" class=\"anchor\" aria-hidden=\"true\" href=\"#bugs-and-feedback\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Bugs and Feedback</h2>\n<p dir=\"auto\">For bugs, questions and discussions please use the <a href=\"https://github.com/lambdista/money/issues\">Github Issues</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\">Copyright 2014-2021 Alessandro Lacava.</p>\n<p dir=\"auto\">Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\nwith the License. You may obtain a copy of the License at</p>\n<p dir=\"auto\"><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p dir=\"auto\">Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "lambdista",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4966276?v=4",
        "url" : "https://api.github.com/users/lambdista",
        "contributions" : 69
      }
    ],
    "commits" : 69,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 6,
        "title" : "Implicit currency?",
        "url" : "https://github.com/lambdista/money/issues/6"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "money",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "economy-finance-and-cryptocurrencies",
    "beginnerIssuesLabel" : null
  }
}