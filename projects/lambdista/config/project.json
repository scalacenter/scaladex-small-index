{
  "organization" : "lambdista",
  "repository" : "config",
  "creationDate" : 1455296080000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660798277327
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : "A type safe, purely functional configuration library for Scala",
    "logo" : "https://avatars.githubusercontent.com/u/4966276?v=4",
    "stars" : 29,
    "forks" : 1,
    "watchers" : 1,
    "issues" : 0,
    "creationDate" : 1453125987000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><a href=\"https://travis-ci.org/lambdista/config\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7859e9b47427642dafaf5b7890ffd0bf8831ab52a80ab089b3e011959a88049d/68747470733a2f2f7472617669732d63692e6f72672f6c616d6264697374612f636f6e6669672e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/lambdista/config.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"http://codecov.io/github/lambdista/config?branch=master\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/84c6bd56e2c15e22ae892f67ec47e4433c54ee85e28ac786c9d50866c29b9a7a/687474703a2f2f636f6465636f762e696f2f6769746875622f6c616d6264697374612f636f6e6669672f636f7665726167652e7376673f6272616e63683d6d6173746572\" alt=\"codecov.io\" data-canonical-src=\"http://codecov.io/github/lambdista/config/coverage.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://javadoc.io/doc/com.lambdista/config_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/03a6f16f586b92b505b69a20eeb35d50a6e350e4adf265bdfa8f174c473c7c0f/68747470733a2f2f6a617661646f632e696f2f62616467652f636f6d2e6c616d6264697374612f636f6e6669675f322e31332e737667\" alt=\"Javadocs\" data-canonical-src=\"https://javadoc.io/badge/com.lambdista/config_2.13.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/com.lambdista/config_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/792c0c2a770b4585b9ad6386a4a49cb214fe2137c407b9a8972efeebe0e7180e/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f636f6d2e6c616d6264697374612f636f6e6669675f322e31332f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/com.lambdista/config_2.13/badge.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://index.scala-lang.org/lambdista/config/config\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/e7a3964080a1881e84d5bf4f1638bb70d2c46b43789f65b90d023d3df3165cea/68747470733a2f2f696e6465782e7363616c612d6c616e672e6f72672f6c616d6264697374612f636f6e6669672f636f6e6669672f6c61746573742e7376673f636f6c6f723d677265656e26763d31\" alt=\"Latest version\" data-canonical-src=\"https://index.scala-lang.org/lambdista/config/config/latest.svg?color=green&amp;v=1\" style=\"max-width: 100%;\"></a></p>\n<h1 dir=\"auto\"><a id=\"user-content-config-a-type-safe-purely-functional-configuration-library-for-scala\" class=\"anchor\" aria-hidden=\"true\" href=\"#config-a-type-safe-purely-functional-configuration-library-for-scala\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>config: a type safe, purely functional configuration library for Scala</h1>\n<h2 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of Contents</h2>\n<ul dir=\"auto\">\n<li><a href=\"#notOnlyTypesafeConfig\">Not only another Typesafe's config wrapper</a></li>\n<li><a href=\"#configSyntax\">Configuration Syntax</a></li>\n<li><a href=\"#usage\">Usage</a>\n<ul dir=\"auto\">\n<li><a href=\"#caseClassConversion\">Automatic conversion to case class</a></li>\n<li><a href=\"#sealedTraitConversion\">Automatic conversion to sealed trait</a></li>\n<li><a href=\"#mapConversion\">Automatic conversion to Map[String, A]</a></li>\n<li><a href=\"#valueByValueConversion\">Value-by-value conversion</a></li>\n<li><a href=\"#dynamicValueByValueConversion\">Dynamic value-by-value conversion</a></li>\n<li><a href=\"#customDecoders\">Custom concrete value decoders</a></li>\n</ul>\n</li>\n<li><a href=\"#configLoaders\">Config loaders</a>\n<ul dir=\"auto\">\n<li><a href=\"#stringLoader\">Loading config from a simple String</a></li>\n<li><a href=\"#typesafeLoader\">Loading a config from Typesafe Config</a></li>\n</ul>\n</li>\n<li><a href=\"#mergingConfigs\">Merging two configurations</a></li>\n<li><a href=\"#scaladoc\">Scaladoc API</a></li>\n<li><a href=\"#feedback\">Bugs and Feedback</a></li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n<p dir=\"auto\"><a name=\"user-content-notonlytypesafeconfig\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-not-only-another-typesafes-config-wrapper\" class=\"anchor\" aria-hidden=\"true\" href=\"#not-only-another-typesafes-config-wrapper\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Not only another Typesafe's config wrapper</h2>\n<p dir=\"auto\">Right from the start I didn't want to depend on other config libraries when I started implementing this one so I wrote\nmy own parser for a simple <em>JSONish</em> syntax. One of the advantages in using your own parser is you can add other custom\ntypes. For example this lib allows you to define a\nScala <a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range\" rel=\"nofollow\">Range</a> while\n<a href=\"https://github.com/typesafehub/config/blob/master/HOCON.md\">HOCON</a> doesn't.\nHence, this is not only another <a href=\"https://github.com/typesafehub/config\">Typesafe's config</a> wrapper. However,\nif you are already using Typesafe's config library and/or just prefer HOCON syntax for your configuration,\nthere's an adapter that will convert a Typesafe <code>Config</code> object into this config's AST.\nSee <a href=\"#typesafeLoader\">this example</a>.</p>\n<p dir=\"auto\"><a name=\"user-content-configsyntax\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-configuration-syntax\" class=\"anchor\" aria-hidden=\"true\" href=\"#configuration-syntax\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Configuration Syntax</h2>\n<p dir=\"auto\">The syntax expected by this library is a JSON-superset. This means that any JSON file\nshould be a valid configuration. However, the <code>null</code> JSON values can only be converted to <code>Option[A]</code>, where <code>A</code>\nis the type you expect because, of course, we don't fancy <code>null</code> in Scala code. The <em>superset</em> part means that:</p>\n<ul dir=\"auto\">\n<li>You can optionally use <code>=</code> instead of <code>:</code></li>\n<li>You can use comments: you can start a comment line using both <code>//</code> and <code>#</code></li>\n<li>You can avoid putting the keys between quotes, unless your key contains white spaces</li>\n<li>You can use a Scala <a href=\"http://www.scala-lang.org/api/current/index.html#scala.concurrent.duration.Duration\" rel=\"nofollow\">Duration</a></li>\n<li>You can use a Scala <a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range\" rel=\"nofollow\">Range</a></li>\n</ul>\n<p dir=\"auto\"><a name=\"user-content-usage\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h2>\n<p dir=\"auto\">As a first step you need to add the dependency to your build file:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.lambdista&quot; %% &quot;config&quot; % &quot;0.8.1&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.lambdista<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>config<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.8.1<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Only Scala 2.13.x versions are supported.</p>\n<p dir=\"auto\">Ok, let's see the typical usage scenarios. As a use case consider the following configuration, unless otherwise specified:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// comment 1\n{\n  bar = &quot;hello&quot;,\n  # comment 2\n  baz = 42,\n  list = [1, // comment 3\n          2, 3],\n  map = {\n    alpha = &quot;hello&quot;,\n    beta = 42\n  },\n  mapList = [\n    {\n      alpha = &quot;hello&quot;,\n      beta = 42\n    },\n    {\n      alpha = &quot;world&quot;,\n      beta = 24\n    }\n  ],\n  range = 2 to 10 by 2,\n  duration = 5 seconds\n}\"><pre class=\"notranslate\"><code>// comment 1\n{\n  bar = \"hello\",\n  # comment 2\n  baz = 42,\n  list = [1, // comment 3\n          2, 3],\n  map = {\n    alpha = \"hello\",\n    beta = 42\n  },\n  mapList = [\n    {\n      alpha = \"hello\",\n      beta = 42\n    },\n    {\n      alpha = \"world\",\n      beta = 24\n    }\n  ],\n  range = 2 to 10 by 2,\n  duration = 5 seconds\n}\n</code></pre></div>\n<p dir=\"auto\">Suppose the previous configuration is at the relative path: <code>core/src/test/resources/foo.conf</code>.</p>\n<p dir=\"auto\">First thing first, load and parse your config:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import scala.concurrent.duration.Duration\n\nimport java.nio.file.Paths\n\nimport com.lambdista.config._\n\n\nval confPath = &quot;core/src/test/resources/foo.conf&quot;\n// confPath: String = &quot;core/src/test/resources/foo.conf&quot;\nval config: Result[Config] = Config.from(Paths.get(confPath))\n// config: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = HashMap(\n//         &quot;duration&quot; -&gt; AbstractDuration(value = 5 seconds),\n//         &quot;range&quot; -&gt; AbstractRange(value = Range(2, 4, 6, 8, 10)),\n//         &quot;bar&quot; -&gt; AbstractString(value = &quot;hello&quot;),\n//         &quot;mapList&quot; -&gt; AbstractList(\n//           values = List(\n//             AbstractMap(\n//               value = Map(\n//                 &quot;alpha&quot; -&gt; AbstractString(value = &quot;hello&quot;),\n//                 &quot;beta&quot; -&gt; AbstractNumber(value = 42.0)\n//               )\n//             ),\n//             AbstractMap(\n//               value = Map(\n//                 &quot;alpha&quot; -&gt; AbstractString(value = &quot;world&quot;),\n//                 &quot;beta&quot; -&gt; AbstractNumber(value = 24.0)\n//               )\n//             )\n//           )\n//         ),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 42.0),\n//         &quot;list&quot; -&gt; AbstractList(\n//           values = List(\n//             AbstractNumber(value = 1.0),\n//             AbstractNumber(value = 2.0),\n//             AbstractNumber(value = 3.0)\n//           )\n//         )\n//       )\n//     )\n//   )\n// )\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">concurrent</span>.<span class=\"pl-en\">duration</span>.<span class=\"pl-en\">Duration</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">nio</span>.<span class=\"pl-en\">file</span>.<span class=\"pl-en\">Paths</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">lambdista</span>.<span class=\"pl-en\">config</span>.<span class=\"pl-en\">_</span>\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">confPath</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>core/src/test/resources/foo.conf<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confPath: String = \"core/src/test/resources/foo.conf\"</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(<span class=\"pl-en\">Paths</span>.get(confPath))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = HashMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"duration\" -&gt; AbstractDuration(value = 5 seconds),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"range\" -&gt; AbstractRange(value = Range(2, 4, 6, 8, 10)),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"bar\" -&gt; AbstractString(value = \"hello\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"mapList\" -&gt; AbstractList(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           values = List(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"alpha\" -&gt; AbstractString(value = \"hello\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"beta\" -&gt; AbstractNumber(value = 42.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"alpha\" -&gt; AbstractString(value = \"world\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"beta\" -&gt; AbstractNumber(value = 24.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 42.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"list\" -&gt; AbstractList(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           values = List(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractNumber(value = 2.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractNumber(value = 3.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">Apart from <code>java.nio.file.Path</code> you can load your config from other resources using <a href=\"#configLoaders\">Config Loaders</a>.</p>\n<p dir=\"auto\">As you can see the result is a <code>Result[Config]</code> (where <code>Result[A]</code> is just a type alias for <code>Either[Error, A]</code>).\nIndeed you can get two types of error here:</p>\n<ul dir=\"auto\">\n<li>The resource cannot be found.</li>\n<li>The resource can be found but its parsing failed.</li>\n</ul>\n<p dir=\"auto\">In both cases you would get a <code>Left</code> wrapping the appropriate <code>Error</code> (a subclass of <code>Exception</code>).</p>\n<p dir=\"auto\">Once you have a <code>Config</code> object you can do two main things with it:</p>\n<ul dir=\"auto\">\n<li>Convert it entirely into a case class representing the whole configuration.</li>\n<li>Retrieve a single value and convert it to whatever it's convertible to.</li>\n</ul>\n<p dir=\"auto\"><a name=\"user-content-caseclassconversion\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-automatic-conversion-to-case-class\" class=\"anchor\" aria-hidden=\"true\" href=\"#automatic-conversion-to-case-class\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Automatic conversion to case class</h3>\n<p dir=\"auto\">Here's how you would map the previous configuration to a case class (<code>config</code> is the value from the previous example):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"case class Greek(alpha: String, beta: Int)\n\n\ncase class FooConfig(\n    bar: String, \n    baz: Option[Int], \n    list: List[Int],\n    map: Greek,\n    mapList: List[Greek], \n    range: Range, \n    duration: Duration,\n    missingValue: Option[String]\n)\n\n\nval fooConfig: Result[FooConfig] = for {\n  conf &lt;- config\n  result &lt;- conf.as[FooConfig]\n} yield result\n// fooConfig: Result[FooConfig] = Left(\n//   value = com.lambdista.config.ConversionError: Could not convert {duration = 5 seconds, range = [2.0, 4.0, 6.0, 8.0, 10.0], bar = &quot;hello&quot;, mapList = [{alpha = &quot;hello&quot;, beta = 42.0}, {alpha = &quot;world&quot;, beta = 24.0}], baz = 42.0, list = [1.0, 2.0, 3.0]} to the type requested\n// )\"><pre><span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Greek</span>(<span class=\"pl-v\">alpha</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">beta</span>: <span class=\"pl-en\">Int</span>)\n\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FooConfig</span>(\n    <span class=\"pl-v\">bar</span>: <span class=\"pl-en\">String</span>, \n    <span class=\"pl-v\">baz</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>], \n    <span class=\"pl-v\">list</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>],\n    <span class=\"pl-v\">map</span>: <span class=\"pl-en\">Greek</span>,\n    <span class=\"pl-v\">mapList</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Greek</span>], \n    <span class=\"pl-v\">range</span>: <span class=\"pl-en\">Range</span>, \n    <span class=\"pl-v\">duration</span>: <span class=\"pl-en\">Duration</span>,\n    <span class=\"pl-v\">missingValue</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>]\n)\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">fooConfig</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">FooConfig</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.as[<span class=\"pl-en\">FooConfig</span>]\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> fooConfig: Result[FooConfig] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.ConversionError: Could not convert {duration = 5 seconds, range = [2.0, 4.0, 6.0, 8.0, 10.0], bar = \"hello\", mapList = [{alpha = \"hello\", beta = 42.0}, {alpha = \"world\", beta = 24.0}], baz = 42.0, list = [1.0, 2.0, 3.0]} to the type requested</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>fooConfig</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(FooConfig(hello,Some(42),List(1, 2, 3),Greek(hello,42),List(Greek(hello,42), Greek(world,24)),Range(2, 4, 6, 8, 10),5 seconds))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">FooConfig</span>(hello,<span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">42</span>),<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>),<span class=\"pl-en\">Greek</span>(hello,<span class=\"pl-c1\">42</span>),<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Greek</span>(hello,<span class=\"pl-c1\">42</span>), <span class=\"pl-en\">Greek</span>(world,<span class=\"pl-c1\">24</span>)),<span class=\"pl-en\">Range</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">10</span>),<span class=\"pl-c1\">5</span> seconds))</pre></div>\n<p dir=\"auto\">Here you can already notice some interesting features of this library:</p>\n<ul dir=\"auto\">\n<li>The conversion to a case class happens automatically, no boilerplate on the client side is required.</li>\n<li>Since <code>baz</code> is declared as <code>Option[Int]</code> the library automatically wraps the <code>Int</code> value into a <code>Some</code>.</li>\n<li>By the way, note also how <code>missingValue</code> is not present in the config but since it's declared as <code>Option</code> in the\ncase class its value becomes <code>None</code>.</li>\n<li>The automatic conversion works also for nested structures, see <code>mapList</code> for example.</li>\n<li><code>Range</code> and <code>Duration</code> work like a charm. Note that for both <code>Range</code> and <code>Duration</code> you can use the syntax you\nwould use in regular Scala code. For example, you could have used <code>5 secs</code> instead of <code>5 seconds</code> in <code>foo.conf</code> and\nit would have worked smoothly.</li>\n</ul>\n<p dir=\"auto\"><a name=\"user-content-sealedtraitconversion\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-automatic-conversion-to-sealed-trait\" class=\"anchor\" aria-hidden=\"true\" href=\"#automatic-conversion-to-sealed-trait\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Automatic conversion to sealed trait</h3>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait Foo\n\nfinal case class Bar(a: Int, b: Option[String]) extends Foo\n\nfinal case class Baz(z: Int)                    extends Foo\n\n\nval barCfg: String = &quot;&quot;&quot;\n    {\n      a: 42,\n      b: &quot;hello&quot;\n    }\n&quot;&quot;&quot;\n// barCfg: String = &quot;&quot;&quot;\n//     {\n//       a: 42,\n//       b: &quot;hello&quot;\n//     }\n// &quot;&quot;&quot;\n\nval bazCfg: String = &quot;&quot;&quot;\n    {\n      z: 1\n    }\n&quot;&quot;&quot;\n// bazCfg: String = &quot;&quot;&quot;\n//     {\n//       z: 1\n//     }\n// &quot;&quot;&quot;\n\nval barFoo: Result[Foo] = for {\n  cfg &lt;- Config.from(barCfg)\n  foo &lt;- cfg.as[Foo]\n} yield foo\n// barFoo: Result[Foo] = Right(value = Bar(a = 42, b = Some(value = &quot;hello&quot;)))\n\nval bazFoo: Result[Foo] = for {\n  cfg &lt;- Config.from(bazCfg)\n  foo &lt;- cfg.as[Foo]\n} yield foo\n// bazFoo: Result[Foo] = Right(value = Baz(z = 1))\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">Foo</span>\n\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Bar</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">b</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">String</span>]) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Foo</span>\n\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Baz</span>(<span class=\"pl-v\">z</span>: <span class=\"pl-en\">Int</span>)                    <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Foo</span>\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">barCfg</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    {</span>\n<span class=\"pl-s\">      a: 42,</span>\n<span class=\"pl-s\">      b: \"hello\"</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> barCfg: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       a: 42,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       b: \"hello\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">bazCfg</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    {</span>\n<span class=\"pl-s\">      z: 1</span>\n<span class=\"pl-s\">    }</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> bazCfg: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       z: 1</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">barFoo</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Foo</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  cfg <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Config</span>.from(barCfg)\n  foo <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> cfg.as[<span class=\"pl-en\">Foo</span>]\n} <span class=\"pl-k\">yield</span> foo\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> barFoo: Result[Foo] = Right(value = Bar(a = 42, b = Some(value = \"hello\")))</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">bazFoo</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Foo</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  cfg <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Config</span>.from(bazCfg)\n  foo <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> cfg.as[<span class=\"pl-en\">Foo</span>]\n} <span class=\"pl-k\">yield</span> foo\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> bazFoo: Result[Foo] = Right(value = Baz(z = 1))</span></pre></div>\n<p dir=\"auto\">The value of <code>barFoo</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(Bar(42,Some(hello)))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Bar</span>(<span class=\"pl-c1\">42</span>,<span class=\"pl-en\">Some</span>(hello)))</pre></div>\n<p dir=\"auto\">The value of <code>bazFoo</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(Baz(1))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Baz</span>(<span class=\"pl-c1\">1</span>))</pre></div>\n<p dir=\"auto\"><a name=\"user-content-mapconversion\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-automatic-conversion-to-mapstring-a\" class=\"anchor\" aria-hidden=\"true\" href=\"#automatic-conversion-to-mapstring-a\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Automatic conversion to <code>Map[String, A]</code></h3>\n<p dir=\"auto\">You can convert a configuration to a <code>Map[String, A]</code>, provided that all the values in the <code>Map</code> have the same type,\n<code>A</code>, and there exists an implicit instance of <code>ConcreteValue[A]</code> in scope. Most of the times this instance is\nautomatically generated as in the case class example so you don't need to worry about that.\nHere's an example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val cfgStr = &quot;&quot;&quot;\n{\n  foo = 0,\n  bar = 1,\n  baz = 42\n}\n&quot;&quot;&quot;\n// cfgStr: String = &quot;&quot;&quot;\n// {\n//   foo = 0,\n//   bar = 1,\n//   baz = 42\n// }\n// &quot;&quot;&quot;\n\nval config: Result[Config] = Config.from(cfgStr)\n// config: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractNumber(value = 0.0),\n//         &quot;bar&quot; -&gt; AbstractNumber(value = 1.0),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 42.0)\n//       )\n//     )\n//   )\n// )\n\nval confAsMap: Result[Map[String, Int]] = for {\n  conf &lt;- config\n  result &lt;- conf.as[Map[String, Int]]\n} yield result\n// confAsMap: Result[Map[String, Int]] = Right(\n//   value = Map(&quot;foo&quot; -&gt; 0, &quot;bar&quot; -&gt; 1, &quot;baz&quot; -&gt; 42)\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">cfgStr</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">{</span>\n<span class=\"pl-s\">  foo = 0,</span>\n<span class=\"pl-s\">  bar = 1,</span>\n<span class=\"pl-s\">  baz = 42</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> cfgStr: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   foo = 0,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   bar = 1,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   baz = 42</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(cfgStr)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractNumber(value = 0.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"bar\" -&gt; AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 42.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">confAsMap</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.as[<span class=\"pl-en\">Map</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Int</span>]]\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confAsMap: Result[Map[String, Int]] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Map(\"foo\" -&gt; 0, \"bar\" -&gt; 1, \"baz\" -&gt; 42)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>confAsMap</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(Map(foo -&gt; 0, bar -&gt; 1, baz -&gt; 42))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Map</span>(foo <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>, bar <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>, baz <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">42</span>))</pre></div>\n<p dir=\"auto\"><a name=\"user-content-valuebyvalueconversion\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-value-by-value-conversion\" class=\"anchor\" aria-hidden=\"true\" href=\"#value-by-value-conversion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Value-by-value conversion</h3>\n<p dir=\"auto\">Instead of using a case class you may want to retrieve the single values and convert them as you go:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val bar: Result[String] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[String](&quot;bar&quot;)\n} yield result\n// bar: Result[String] = Left(\n//   value = com.lambdista.config.ConversionError: Could not convert 1.0 to the type requested\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">bar</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">String</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> bar: Result[String] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.ConversionError: Could not convert 1.0 to the type requested</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>bar</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(&quot;hello&quot;)\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">You can also use the <em>dot</em> syntax to retrieve a value. E.g.:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val cfgStr = &quot;&quot;&quot;\n{\n  foo = {\n    bar = 42\n  }\n}\n&quot;&quot;&quot;\n// cfgStr: String = &quot;&quot;&quot;\n// {\n//   foo = {\n//     bar = 42\n//   }\n// }\n// &quot;&quot;&quot;\n\nval config: Result[Config] = Config.from(cfgStr)\n// config: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(value = Map(&quot;bar&quot; -&gt; AbstractNumber(value = 42.0)))\n//       )\n//     )\n//   )\n// )\n\nval bar: Result[Int] = for {\n  c &lt;- config\n  bar &lt;- c.getAs[Int](&quot;foo.bar&quot;)\n} yield bar\n// bar: Result[Int] = Right(value = 42)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">cfgStr</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">{</span>\n<span class=\"pl-s\">  foo = {</span>\n<span class=\"pl-s\">    bar = 42</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> cfgStr: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   foo = {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     bar = 42</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(cfgStr)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(value = Map(\"bar\" -&gt; AbstractNumber(value = 42.0)))</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">bar</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Int</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  c <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  bar <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> c.getAs[<span class=\"pl-en\">Int</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo.bar<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> bar\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> bar: Result[Int] = Right(value = 42)</span></pre></div>\n<p dir=\"auto\">Note how the <code>bar</code> value was retrieved using the dot syntax.</p>\n<p dir=\"auto\">Apart from converting the whole config into a case class, you can also convert a given value provided it's an object in\nthe JSON-superset syntax:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val greekList: Result[List[Greek]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[List[Greek]](&quot;mapList&quot;)\n} yield result\n// greekList: Result[List[Greek]] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: mapList\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">greekList</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Greek</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Greek</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mapList<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> greekList: Result[List[Greek]] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: mapList</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>greekList</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(List(Greek(hello,42), Greek(world,24)))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Greek</span>(hello,<span class=\"pl-c1\">42</span>), <span class=\"pl-en\">Greek</span>(world,<span class=\"pl-c1\">24</span>)))</pre></div>\n<p dir=\"auto\">Sorry? You said you would have preferred a <code>Vector[Greek]</code> in place of <code>List[Greek]</code>? No problem:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val greekVector: Result[Vector[Greek]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[Vector[Greek]](&quot;mapList&quot;)\n} yield result\n// greekVector: Result[Vector[Greek]] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: mapList\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">greekVector</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Vector</span>[<span class=\"pl-en\">Greek</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">Vector</span>[<span class=\"pl-en\">Greek</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mapList<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> greekVector: Result[Vector[Greek]] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: mapList</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">Here's the value of <code>greekVector</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(Vector(Greek(hello,42), Greek(world,24)))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Vector</span>(<span class=\"pl-en\">Greek</span>(hello,<span class=\"pl-c1\">42</span>), <span class=\"pl-en\">Greek</span>(world,<span class=\"pl-c1\">24</span>)))</pre></div>\n<p dir=\"auto\">Oh, yes, <code>Set[Greek]</code> would have worked too:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val greekSet: Result[Set[Greek]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[Set[Greek]](&quot;mapList&quot;)\n} yield result\n// greekSet: Result[Set[Greek]] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: mapList\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">greekSet</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Set</span>[<span class=\"pl-en\">Greek</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">Set</span>[<span class=\"pl-en\">Greek</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mapList<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> greekSet: Result[Set[Greek]] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: mapList</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">Here's the value of <code>greekSet</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(Set(Greek(hello,42), Greek(world,24)))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Set</span>(<span class=\"pl-en\">Greek</span>(hello,<span class=\"pl-c1\">42</span>), <span class=\"pl-en\">Greek</span>(world,<span class=\"pl-c1\">24</span>)))</pre></div>\n<p dir=\"auto\">Analogously you can automatically convert a <code>Range</code> into a <code>List</code>, <code>Vector</code> or <code>Set</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val rangeAsList: Result[List[Int]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[List[Int]](&quot;range&quot;)\n} yield result\n// rangeAsList: Result[List[Int]] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: range\n// )\n\nval rangeAsVector: Result[Vector[Int]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[Vector[Int]](&quot;range&quot;)\n} yield result\n// rangeAsVector: Result[Vector[Int]] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: range\n// )\n\nval rangeAsSet: Result[Set[Int]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[Set[Int]](&quot;range&quot;)\n} yield result\n// rangeAsSet: Result[Set[Int]] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: range\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">rangeAsList</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>range<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> rangeAsList: Result[List[Int]] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: range</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">rangeAsVector</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Vector</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">Vector</span>[<span class=\"pl-en\">Int</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>range<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> rangeAsVector: Result[Vector[Int]] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: range</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">rangeAsSet</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Set</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">Set</span>[<span class=\"pl-en\">Int</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>range<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> rangeAsSet: Result[Set[Int]] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: range</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">Here are the results:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(List(2, 4, 6, 8, 10)) // rangeAsList\n\nRight(Vector(2, 4, 6, 8, 10)) // rangeAsVector\n\nRight(Set(4, 2, 8, 6, 10)) // rangeAsSet\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">10</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> rangeAsList</span>\n\n<span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Vector</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">10</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> rangeAsVector</span>\n\n<span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Set</span>(<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">10</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> rangeAsSet</span></pre></div>\n<p dir=\"auto\">Notice, however, that in case of <code>Set</code> the order is not guaranteed because of the very nature of sets.</p>\n<p dir=\"auto\"><a name=\"user-content-dynamicvaluebyvalueconversion\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-dynamic-value-by-value-conversion\" class=\"anchor\" aria-hidden=\"true\" href=\"#dynamic-value-by-value-conversion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dynamic value-by-value conversion</h3>\n<p dir=\"auto\">You can also use a dynamic syntax to access the configuration values by <em>pretending</em> the <code>Config</code> object has\nthose fields:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val alpha: Result[String] = for {\n  conf &lt;- config\n  result &lt;- conf.map.alpha.as[String] // equivalent to: conf.getAs[String](&quot;map.alpha&quot;)\n} yield result\n// alpha: Result[String] = Left(\n//   value = com.lambdista.config.KeyNotFoundError: No such key: map\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">alpha</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">String</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.map.alpha.as[<span class=\"pl-en\">String</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equivalent to: conf.getAs[String](\"map.alpha\")</span>\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> alpha: Result[String] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.KeyNotFoundError: No such key: map</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>alpha</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(&quot;hello&quot;)\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\"><strong>Warning</strong>: Some IDEs could mark <code>map.alpha</code> as an error since they don't know about the dynamic nature of\nthose fields. Nevertheless, your code will keep compiling and working like a charm.</p>\n<p dir=\"auto\"><a name=\"user-content-customdecoders\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-custom-concrete-value-decoders\" class=\"anchor\" aria-hidden=\"true\" href=\"#custom-concrete-value-decoders\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Custom concrete value decoders</h3>\n<p dir=\"auto\">Sometimes you may want to provide a custom concrete value decoder for some configuration parameter. For example\nyou may want to decode a UUID as such instead of using the provided String concrete value decoder, you know,\nfor a better type safety.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.util.UUID\n\n\nval confStr: String = &quot;&quot;&quot;\n  {\n    uuid = &quot;238dfdf4-850d-4643-b4f3-019252515ed8&quot;\n  }\n&quot;&quot;&quot;\n// confStr: String = &quot;&quot;&quot;\n//   {\n//     uuid = &quot;238dfdf4-850d-4643-b4f3-019252515ed8&quot;\n//   }\n// &quot;&quot;&quot;\nfinal case class Foo(uuid: UUID)\n\nimplicit val uuidCv: ConcreteValue[UUID] = new ConcreteValue[UUID] {\n  override def apply(abstractValue: AbstractValue): Option[UUID] = abstractValue match {\n    case AbstractString(x) =&gt; Result.attempt(UUID.fromString(x)).toOption\n    case _                 =&gt; None\n  }\n}\n// uuidCv: ConcreteValue[UUID] = repl.MdocSession$App$$anon$11@5c8322a6\n\nval foo: Result[Foo] = for {\n  conf &lt;- Config.from(confStr)\n  result &lt;- conf.as[Foo]\n} yield result\n// foo: Result[Foo] = Right(\n//   value = Foo(uuid = 238dfdf4-850d-4643-b4f3-019252515ed8)\n// )\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">util</span>.<span class=\"pl-en\">UUID</span>\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">confStr</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">  {</span>\n<span class=\"pl-s\">    uuid = \"238dfdf4-850d-4643-b4f3-019252515ed8\"</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confStr: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     uuid = \"238dfdf4-850d-4643-b4f3-019252515ed8\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span>(<span class=\"pl-v\">uuid</span>: <span class=\"pl-en\">UUID</span>)\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">uuidCv</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ConcreteValue</span>[<span class=\"pl-en\">UUID</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">ConcreteValue</span>[<span class=\"pl-en\">UUID</span>] {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>(<span class=\"pl-v\">abstractValue</span>: <span class=\"pl-en\">AbstractValue</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">UUID</span>] <span class=\"pl-k\">=</span> abstractValue <span class=\"pl-k\">match</span> {\n    <span class=\"pl-k\">case</span> <span class=\"pl-en\">AbstractString</span>(x) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Result</span>.attempt(<span class=\"pl-en\">UUID</span>.fromString(x)).toOption\n    <span class=\"pl-k\">case</span> _                 <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">None</span>\n  }\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> uuidCv: ConcreteValue[UUID] = repl.MdocSession$App$$anon$11@5c8322a6</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">foo</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Foo</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> <span class=\"pl-en\">Config</span>.from(confStr)\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.as[<span class=\"pl-en\">Foo</span>]\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> foo: Result[Foo] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Foo(uuid = 238dfdf4-850d-4643-b4f3-019252515ed8)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>foo</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(Foo(238dfdf4-850d-4643-b4f3-019252515ed8))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">Foo</span>(238dfdf4<span class=\"pl-k\">-</span><span class=\"pl-c1\">850d</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">4643</span><span class=\"pl-k\">-</span>b4f3<span class=\"pl-k\">-</span>019252515ed8))</pre></div>\n<p dir=\"auto\"><a name=\"user-content-configloaders\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-config-loaders\" class=\"anchor\" aria-hidden=\"true\" href=\"#config-loaders\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Config loaders</h2>\n<p dir=\"auto\">Apart from loading your config through a <code>java.nio.file.Path</code> you can also use the following resources:</p>\n<ul dir=\"auto\">\n<li>String</li>\n<li>java.io.File</li>\n<li>scala.io.Source</li>\n<li>java.net.URI</li>\n<li>java.net.URL</li>\n<li>com.typesafe.config.Config</li>\n</ul>\n<p dir=\"auto\">If that's not enough it's not so difficult provide your implementation of the <code>ConfigLoader</code> type class and make it\navailable in scope. Here's how the <code>ConfigLoader</code> looks like:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait ConfigLoader[R] {\n  def load(resource: R): Result[Config]\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">ConfigLoader</span>[<span class=\"pl-en\">R</span>] {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">load</span>(<span class=\"pl-v\">resource</span>: <span class=\"pl-en\">R</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>]\n}</pre></div>\n<p dir=\"auto\">Actually all you need to do is find a way to <em>read</em> your resource into a <code>String</code> and your done. Have a look at the\n<code>ConfigLoader</code> companion object for some examples.</p>\n<p dir=\"auto\"><a name=\"user-content-stringloader\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-loading-config-from-a-simple-string\" class=\"anchor\" aria-hidden=\"true\" href=\"#loading-config-from-a-simple-string\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Loading config from a simple String</h3>\n<p dir=\"auto\">What follows is an example of loading the config from a simple <code>String</code>. In this example you can also appreciate\ntwo other features of the library: how it deals with <code>null</code> values and its ability to convert char ranges too.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val confStr: String = &quot;{age = null, charRange = 'a' to 'z'}&quot;\n// confStr: String = &quot;{age = null, charRange = 'a' to 'z'}&quot;\n    \nval config: Result[Config] = Config.from(confStr)\n// config: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;age&quot; -&gt; AbstractNone,\n//         &quot;charRange&quot; -&gt; AbstractRange(\n//           value = Range(\n//             97,\n//             98,\n//             99,\n//             100,\n//             101,\n//             102,\n//             103,\n//             104,\n//             105,\n//             106,\n//             107,\n//             108,\n//             109,\n//             110,\n//             111,\n//             112,\n//             113,\n//             114,\n//             115,\n//             116,\n//             117,\n//             118,\n//             119,\n//             120,\n//             121,\n//             122\n//           )\n//         )\n//       )\n//     )\n//   )\n// )\n\nval age: Result[Option[Int]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[Option[Int]](&quot;age&quot;)\n} yield result\n// age: Result[Option[Int]] = Right(value = None)\n\nval charRange: Result[List[Char]] = for {\n  conf &lt;- config\n  result &lt;- conf.getAs[List[Char]](&quot;charRange&quot;)\n} yield result\n// charRange: Result[List[Char]] = Right(\n//   value = List(\n//     'a',\n//     'b',\n//     'c',\n//     'd',\n//     'e',\n//     'f',\n//     'g',\n//     'h',\n//     'i',\n//     'j',\n//     'k',\n//     'l',\n//     'm',\n//     'n',\n//     'o',\n//     'p',\n//     'q',\n//     'r',\n//     's',\n//     't',\n//     'u',\n//     'v',\n//     'w',\n//     'x',\n//     'y',\n//     'z'\n//   )\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">confStr</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{age = null, charRange = 'a' to 'z'}<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confStr: String = \"{age = null, charRange = 'a' to 'z'}\"</span>\n    \n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(confStr)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"age\" -&gt; AbstractNone,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"charRange\" -&gt; AbstractRange(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Range(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             97,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             98,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             99,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             100,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             101,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             102,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             103,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             104,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             105,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             106,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             107,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             108,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             109,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             110,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             111,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             112,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             113,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             114,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             115,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             116,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             117,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             118,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             119,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             120,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             121,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             122</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">age</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>age<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> age: Result[Option[Int]] = Right(value = None)</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">charRange</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Char</span>]] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config\n  result <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> conf.getAs[<span class=\"pl-en\">List</span>[<span class=\"pl-en\">Char</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>charRange<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">yield</span> result\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> charRange: Result[List[Char]] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = List(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'a',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'b',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'c',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'd',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'e',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'f',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'g',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'h',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'i',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'j',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'k',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'l',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'm',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'n',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'o',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'p',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'q',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'r',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     's',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     't',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'u',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'v',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'w',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'x',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'y',</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     'z'</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">As you may expect the values of <code>age</code> and <code>charRange</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(None) // age\n\nRight(List(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)) // charRange\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">None</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> age</span>\n\n<span class=\"pl-en\">Right</span>(<span class=\"pl-en\">List</span>(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> charRange</span></pre></div>\n<p dir=\"auto\"><a name=\"user-content-typesafeloader\"></a></p>\n<h3 dir=\"auto\"><a id=\"user-content-loading-a-config-from-typesafe-config\" class=\"anchor\" aria-hidden=\"true\" href=\"#loading-a-config-from-typesafe-config\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Loading a config from Typesafe Config</h3>\n<p dir=\"auto\">Here's how simple is loading a configuration passing through Typesafe config library. First thing first, you need to add\nthe dependency for the Typesafe config adapter:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.lambdista&quot; %% &quot;config-typesafe&quot; % &quot;0.8.1&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.lambdista<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>config-typesafe<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.8.1<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">The example configuration is the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"string = &quot;hello&quot;\nint = 42\ndouble = 1.414\nboolean = true\nlist = [1, 2, 3]\nmapList = [\n  {\n    firstName = &quot;John&quot;\n    lastName = &quot;Doe&quot;\n  }\n  {\n    firstName = &quot;Jane&quot;\n    lastName = &quot;Doe&quot;\n  }\n]\"><pre class=\"notranslate\"><code>string = \"hello\"\nint = 42\ndouble = 1.414\nboolean = true\nlist = [1, 2, 3]\nmapList = [\n  {\n    firstName = \"John\"\n    lastName = \"Doe\"\n  }\n  {\n    firstName = \"Jane\"\n    lastName = \"Doe\"\n  }\n]\n</code></pre></div>\n<p dir=\"auto\">Suppose it's in a file at the relative path <code>typesafe/src/test/resources/typesafe.conf</code>:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.io.File\n\nimport com.typesafe.config.{Config =&gt; TSConfig, ConfigFactory}\n\nimport com.lambdista.config.typesafe._ // important to bring into scope the ConfigLoader for Typesafe's Config\n // important to bring into scope the ConfigLoader for Typesafe's Config\n\ncase class Person(firstName: String, lastName: String)\n\n\ncase class TypesafeConfig(string: String, int: Int, double: Double, boolean: Boolean, list: List[Int], mapList: List[Person])\n\n\nval confPath = &quot;typesafe/src/test/resources/typesafe.conf&quot;\n// confPath: String = &quot;typesafe/src/test/resources/typesafe.conf&quot;\n\nval tsConfig: TSConfig = ConfigFactory.parseFile(new File(confPath))\n// tsConfig: com.typesafe.config.Config = Config(SimpleConfigObject({&quot;boolean&quot;:true,&quot;double&quot;:1.414,&quot;int&quot;:42,&quot;list&quot;:[1,2,3],&quot;mapList&quot;:[{&quot;firstName&quot;:&quot;John&quot;,&quot;lastName&quot;:&quot;Doe&quot;},{&quot;firstName&quot;:&quot;Jane&quot;,&quot;lastName&quot;:&quot;Doe&quot;}],&quot;string&quot;:&quot;hello&quot;}))\n\nval configTry: Result[Config] = Config.from(tsConfig)\n// configTry: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = HashMap(\n//         &quot;string&quot; -&gt; AbstractString(value = &quot;hello&quot;),\n//         &quot;double&quot; -&gt; AbstractNumber(value = 1.414),\n//         &quot;boolean&quot; -&gt; AbstractBool(value = true),\n//         &quot;int&quot; -&gt; AbstractNumber(value = 42.0),\n//         &quot;mapList&quot; -&gt; AbstractList(\n//           values = List(\n//             AbstractMap(\n//               value = Map(\n//                 &quot;firstName&quot; -&gt; AbstractString(value = &quot;John&quot;),\n//                 &quot;lastName&quot; -&gt; AbstractString(value = &quot;Doe&quot;)\n//               )\n//             ),\n//             AbstractMap(\n//               value = Map(\n//                 &quot;lastName&quot; -&gt; AbstractString(value = &quot;Doe&quot;),\n//                 &quot;firstName&quot; -&gt; AbstractString(value = &quot;Jane&quot;)\n//               )\n//             )\n//           )\n//         ),\n//         &quot;list&quot; -&gt; AbstractList(\n//           values = List(\n//             AbstractNumber(value = 1.0),\n//             AbstractNumber(value = 2.0),\n//             AbstractNumber(value = 3.0)\n//           )\n//         )\n//       )\n//     )\n//   )\n// )\n\nval typesafeConfig: Result[TypesafeConfig] = config.flatMap(_.as[TypesafeConfig])\n// typesafeConfig: Result[TypesafeConfig] = Left(\n//   value = com.lambdista.config.ConversionError: Could not convert {age = None, charRange = [97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0]} to the type requested\n// )\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">java</span>.<span class=\"pl-en\">io</span>.<span class=\"pl-en\">File</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">typesafe</span>.<span class=\"pl-en\">config</span>.{<span class=\"pl-en\">Config</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">TSConfig</span>, <span class=\"pl-en\">ConfigFactory</span>}\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">lambdista</span>.<span class=\"pl-en\">config</span>.<span class=\"pl-en\">typesafe</span>.<span class=\"pl-en\">_</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> important to bring into scope the ConfigLoader for Typesafe's Config</span>\n <span class=\"pl-c\"><span class=\"pl-c\">//</span> important to bring into scope the ConfigLoader for Typesafe's Config</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-v\">firstName</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">lastName</span>: <span class=\"pl-en\">String</span>)\n\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">TypesafeConfig</span>(<span class=\"pl-v\">string</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">int</span>: <span class=\"pl-en\">Int</span>, <span class=\"pl-v\">double</span>: <span class=\"pl-en\">Double</span>, <span class=\"pl-v\">boolean</span>: <span class=\"pl-en\">Boolean</span>, <span class=\"pl-v\">list</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>], <span class=\"pl-v\">mapList</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Person</span>])\n\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">confPath</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>typesafe/src/test/resources/typesafe.conf<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confPath: String = \"typesafe/src/test/resources/typesafe.conf\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">tsConfig</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">TSConfig</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ConfigFactory</span>.parseFile(<span class=\"pl-k\">new</span> <span class=\"pl-en\">File</span>(confPath))\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> tsConfig: com.typesafe.config.Config = Config(SimpleConfigObject({\"boolean\":true,\"double\":1.414,\"int\":42,\"list\":[1,2,3],\"mapList\":[{\"firstName\":\"John\",\"lastName\":\"Doe\"},{\"firstName\":\"Jane\",\"lastName\":\"Doe\"}],\"string\":\"hello\"}))</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">configTry</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(tsConfig)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> configTry: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = HashMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"string\" -&gt; AbstractString(value = \"hello\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"double\" -&gt; AbstractNumber(value = 1.414),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"boolean\" -&gt; AbstractBool(value = true),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"int\" -&gt; AbstractNumber(value = 42.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"mapList\" -&gt; AbstractList(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           values = List(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"firstName\" -&gt; AbstractString(value = \"John\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"lastName\" -&gt; AbstractString(value = \"Doe\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"lastName\" -&gt; AbstractString(value = \"Doe\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>                 \"firstName\" -&gt; AbstractString(value = \"Jane\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>               )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"list\" -&gt; AbstractList(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           values = List(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractNumber(value = 2.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             AbstractNumber(value = 3.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">typesafeConfig</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">TypesafeConfig</span>] <span class=\"pl-k\">=</span> config.flatMap(_.as[<span class=\"pl-en\">TypesafeConfig</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> typesafeConfig: Result[TypesafeConfig] = Left(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = com.lambdista.config.ConversionError: Could not convert {age = None, charRange = [97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0]} to the type requested</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\">The value of <code>typesafeConfig</code> will be:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Right(TypesafeConfig(hello,42,1.414,true,List(1, 2, 3),List(Person(John,Doe), Person(Jane,Doe))))\"><pre><span class=\"pl-en\">Right</span>(<span class=\"pl-en\">TypesafeConfig</span>(hello,<span class=\"pl-c1\">42</span>,<span class=\"pl-c1\">1.414</span>,<span class=\"pl-c1\">true</span>,<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>),<span class=\"pl-en\">List</span>(<span class=\"pl-en\">Person</span>(<span class=\"pl-en\">John</span>,<span class=\"pl-en\">Doe</span>), <span class=\"pl-en\">Person</span>(<span class=\"pl-en\">Jane</span>,<span class=\"pl-en\">Doe</span>))))</pre></div>\n<p dir=\"auto\"><a name=\"user-content-mergingconfigs\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-merging-two-configurations\" class=\"anchor\" aria-hidden=\"true\" href=\"#merging-two-configurations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Merging two configurations</h2>\n<p dir=\"auto\">You can also merge two configurations using either the <code>recursivelyMerge</code> or <code>merge</code> method of <code>Config</code>,\nas in <code>config.recursivelyMerge(thatConfig)</code> or <code>config.merge(thatConfig)</code>. The behaviour of the\nformer is that, given a key, if the correspondent value is a map then <code>thatConfig</code>'s value is\n<em>recursively</em> merged to this config's value otherwise <code>thatConfig</code>'s value replaces this config's value.\nAn example should clarify the difference between the two approaches:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val confStr1 = &quot;&quot;&quot;\n{\n  foo = {\n    alpha = 1,\n    bar = &quot;hello&quot;\n  },\n  baz = 42\n}\n&quot;&quot;&quot;\n// confStr1: String = &quot;&quot;&quot;\n// {\n//   foo = {\n//     alpha = 1,\n//     bar = &quot;hello&quot;\n//   },\n//   baz = 42\n// }\n// &quot;&quot;&quot;\n\nval confStr2 = &quot;&quot;&quot;\n{\n  foo = {\n    baz = 15,\n    bar = &quot;goodbye&quot;\n  },\n  baz = 1,\n  zoo = &quot;hi&quot;\n}\n&quot;&quot;&quot;\n// confStr2: String = &quot;&quot;&quot;\n// {\n//   foo = {\n//     baz = 15,\n//     bar = &quot;goodbye&quot;\n//   },\n//   baz = 1,\n//   zoo = &quot;hi&quot;\n// }\n// &quot;&quot;&quot;\n\nval config1: Result[Config] = Config.from(confStr1)\n// config1: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(\n//           value = Map(\n//             &quot;alpha&quot; -&gt; AbstractNumber(value = 1.0),\n//             &quot;bar&quot; -&gt; AbstractString(value = &quot;hello&quot;)\n//           )\n//         ),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 42.0)\n//       )\n//     )\n//   )\n// )\n\nval config2: Result[Config] = Config.from(confStr2)\n// config2: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(\n//           value = Map(\n//             &quot;baz&quot; -&gt; AbstractNumber(value = 15.0),\n//             &quot;bar&quot; -&gt; AbstractString(value = &quot;goodbye&quot;)\n//           )\n//         ),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 1.0),\n//         &quot;zoo&quot; -&gt; AbstractString(value = &quot;hi&quot;)\n//       )\n//     )\n//   )\n// )\n\nval mergedConfig: Result[Config] = for {\n  conf1 &lt;- config1\n  conf2 &lt;- config2\n} yield conf1.recursivelyMerge(conf2)\n// mergedConfig: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(\n//           value = Map(\n//             &quot;alpha&quot; -&gt; AbstractNumber(value = 1.0),\n//             &quot;bar&quot; -&gt; AbstractString(value = &quot;goodbye&quot;),\n//             &quot;baz&quot; -&gt; AbstractNumber(value = 15.0)\n//           )\n//         ),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 1.0),\n//         &quot;zoo&quot; -&gt; AbstractString(value = &quot;hi&quot;)\n//       )\n//     )\n//   )\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">confStr1</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">{</span>\n<span class=\"pl-s\">  foo = {</span>\n<span class=\"pl-s\">    alpha = 1,</span>\n<span class=\"pl-s\">    bar = \"hello\"</span>\n<span class=\"pl-s\">  },</span>\n<span class=\"pl-s\">  baz = 42</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confStr1: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   foo = {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     alpha = 1,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     bar = \"hello\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   },</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   baz = 42</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">confStr2</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">{</span>\n<span class=\"pl-s\">  foo = {</span>\n<span class=\"pl-s\">    baz = 15,</span>\n<span class=\"pl-s\">    bar = \"goodbye\"</span>\n<span class=\"pl-s\">  },</span>\n<span class=\"pl-s\">  baz = 1,</span>\n<span class=\"pl-s\">  zoo = \"hi\"</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confStr2: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   foo = {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     baz = 15,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     bar = \"goodbye\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   },</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   baz = 1,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   zoo = \"hi\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(confStr1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config1: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"alpha\" -&gt; AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"bar\" -&gt; AbstractString(value = \"hello\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 42.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(confStr2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config2: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"baz\" -&gt; AbstractNumber(value = 15.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"bar\" -&gt; AbstractString(value = \"goodbye\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"zoo\" -&gt; AbstractString(value = \"hi\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">mergedConfig</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf1 <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config1\n  conf2 <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config2\n} <span class=\"pl-k\">yield</span> conf1.recursivelyMerge(conf2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> mergedConfig: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"alpha\" -&gt; AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"bar\" -&gt; AbstractString(value = \"goodbye\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"baz\" -&gt; AbstractNumber(value = 15.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"zoo\" -&gt; AbstractString(value = \"hi\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\"><code>mergedConfig</code> will represent a config such as the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  foo = {\n    alpha = 1,\n    baz = 15,\n    bar = &quot;goodbye&quot;\n  },\n  baz = 1,\n  zoo = &quot;hi&quot;\n}\"><pre class=\"notranslate\"><code>{\n  foo = {\n    alpha = 1,\n    baz = 15,\n    bar = \"goodbye\"\n  },\n  baz = 1,\n  zoo = \"hi\"\n}\n</code></pre></div>\n<p dir=\"auto\">As you can see the value of <code>config2</code>'s <code>foo</code> did not replace entirely the value of <code>config1</code>'s <code>foo</code>, but they\nwere recursively merged.</p>\n<p dir=\"auto\">On the other hand <code>merge</code>'s behaviour is more like Scala's default behaviour when using <code>++</code> between two <code>Map</code>s. Indeed,\n<code>config2</code>'s values replace entirely <code>config1</code>'s values with the same key. E.g.:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val confStr1 = &quot;&quot;&quot;\n{\n  foo = {\n    alpha = 1,\n    bar = &quot;hello&quot;\n  },\n  zoo = &quot;hi&quot;,\n  baz = 42\n}\n&quot;&quot;&quot;\n// confStr1: String = &quot;&quot;&quot;\n// {\n//   foo = {\n//     alpha = 1,\n//     bar = &quot;hello&quot;\n//   },\n//   zoo = &quot;hi&quot;,\n//   baz = 42\n// }\n// &quot;&quot;&quot;\n\nval confStr2 = &quot;&quot;&quot;\n{\n  foo = {\n    baz = 15,\n    bar = &quot;goodbye&quot;\n  },\n  baz = 1\n}\n&quot;&quot;&quot;\n// confStr2: String = &quot;&quot;&quot;\n// {\n//   foo = {\n//     baz = 15,\n//     bar = &quot;goodbye&quot;\n//   },\n//   baz = 1\n// }\n// &quot;&quot;&quot;\n\nval config1: Result[Config] = Config.from(confStr1)\n// config1: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(\n//           value = Map(\n//             &quot;alpha&quot; -&gt; AbstractNumber(value = 1.0),\n//             &quot;bar&quot; -&gt; AbstractString(value = &quot;hello&quot;)\n//           )\n//         ),\n//         &quot;zoo&quot; -&gt; AbstractString(value = &quot;hi&quot;),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 42.0)\n//       )\n//     )\n//   )\n// )\n\nval config2: Result[Config] = Config.from(confStr2)\n// config2: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(\n//           value = Map(\n//             &quot;baz&quot; -&gt; AbstractNumber(value = 15.0),\n//             &quot;bar&quot; -&gt; AbstractString(value = &quot;goodbye&quot;)\n//           )\n//         ),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 1.0)\n//       )\n//     )\n//   )\n// )\n\nval mergedConfig: Result[Config] = for {\n  conf1 &lt;- config1\n  conf2 &lt;- config2\n} yield conf1.merge(conf2)\n// mergedConfig: Result[Config] = Right(\n//   value = Config(\n//     abstractMap = AbstractMap(\n//       value = Map(\n//         &quot;foo&quot; -&gt; AbstractMap(\n//           value = Map(\n//             &quot;baz&quot; -&gt; AbstractNumber(value = 15.0),\n//             &quot;bar&quot; -&gt; AbstractString(value = &quot;goodbye&quot;)\n//           )\n//         ),\n//         &quot;zoo&quot; -&gt; AbstractString(value = &quot;hi&quot;),\n//         &quot;baz&quot; -&gt; AbstractNumber(value = 1.0)\n//       )\n//     )\n//   )\n// )\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">confStr1</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">{</span>\n<span class=\"pl-s\">  foo = {</span>\n<span class=\"pl-s\">    alpha = 1,</span>\n<span class=\"pl-s\">    bar = \"hello\"</span>\n<span class=\"pl-s\">  },</span>\n<span class=\"pl-s\">  zoo = \"hi\",</span>\n<span class=\"pl-s\">  baz = 42</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confStr1: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   foo = {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     alpha = 1,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     bar = \"hello\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   },</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   zoo = \"hi\",</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   baz = 42</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">confStr2</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">{</span>\n<span class=\"pl-s\">  foo = {</span>\n<span class=\"pl-s\">    baz = 15,</span>\n<span class=\"pl-s\">    bar = \"goodbye\"</span>\n<span class=\"pl-s\">  },</span>\n<span class=\"pl-s\">  baz = 1</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> confStr2: String = \"\"\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   foo = {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     baz = 15,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     bar = \"goodbye\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   },</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   baz = 1</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> }</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \"\"\"</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(confStr1)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config1: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"alpha\" -&gt; AbstractNumber(value = 1.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"bar\" -&gt; AbstractString(value = \"hello\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"zoo\" -&gt; AbstractString(value = \"hi\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 42.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">config2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Config</span>.from(confStr2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> config2: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"baz\" -&gt; AbstractNumber(value = 15.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"bar\" -&gt; AbstractString(value = \"goodbye\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 1.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">mergedConfig</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Result</span>[<span class=\"pl-en\">Config</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">for</span> {\n  conf1 <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config1\n  conf2 <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">-</span> config2\n} <span class=\"pl-k\">yield</span> conf1.merge(conf2)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> mergedConfig: Result[Config] = Right(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   value = Config(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     abstractMap = AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"foo\" -&gt; AbstractMap(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           value = Map(</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"baz\" -&gt; AbstractNumber(value = 15.0),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>             \"bar\" -&gt; AbstractString(value = \"goodbye\")</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>           )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         ),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"zoo\" -&gt; AbstractString(value = \"hi\"),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>         \"baz\" -&gt; AbstractNumber(value = 1.0)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>       )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>     )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   )</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> )</span></pre></div>\n<p dir=\"auto\"><code>mergedConfig</code> will represent a config such as the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  foo = {\n    baz = 15,\n    bar = &quot;goodbye&quot;\n  },\n  baz = 1,\n  zoo = &quot;hi&quot;\n}\"><pre class=\"notranslate\"><code>{\n  foo = {\n    baz = 15,\n    bar = \"goodbye\"\n  },\n  baz = 1,\n  zoo = \"hi\"\n}\n</code></pre></div>\n<p dir=\"auto\">Look at the tests for this library to see the examples in practise.</p>\n<p dir=\"auto\"><a name=\"user-content-scaladoc\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-scaladoc-api\" class=\"anchor\" aria-hidden=\"true\" href=\"#scaladoc-api\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scaladoc API</h2>\n<p dir=\"auto\"><a href=\"https://javadoc.io/doc/com.lambdista/config_2.13\" rel=\"nofollow\">config API</a></p>\n<p dir=\"auto\"><a name=\"user-content-feedback\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-bugs-and-feedback\" class=\"anchor\" aria-hidden=\"true\" href=\"#bugs-and-feedback\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Bugs and Feedback</h2>\n<p dir=\"auto\">For bugs, questions and discussions please use <a href=\"https://github.com/lambdista/config/issues\">Github Issues</a>.</p>\n<p dir=\"auto\"><a name=\"user-content-license\"></a></p>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\">Copyright 2016-2021 Alessandro Lacava.</p>\n<p dir=\"auto\">Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\nwith the License. You may obtain a copy of the License at</p>\n<p dir=\"auto\"><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p dir=\"auto\">Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "lambdista",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4966276?v=4",
        "url" : "https://github.com/lambdista",
        "contributions" : 234
      }
    ],
    "commits" : 234,
    "topics" : [
      "configuration",
      "pure-functional",
      "scala",
      "typesafe"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
    ],
    "scalaPercentage" : 99,
    "license" : "Apache-2.0",
    "commitActivity" : [
      {
        "total" : 0,
        "week" : 1629590400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1630195200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1630800000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632009600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632614400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1633219200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1633824000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1634428800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635033600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635638400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636243200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636848000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1637452800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638662400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639872000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1640476800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641081600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641686400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642291200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642896000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1643500800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644105600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645315200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645920000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1646524800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647734400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648339200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648944000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1649548800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650758400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651363200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654387200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654992000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1655596800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656201600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656806400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1657411200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658016000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658620800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659225600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659830400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1660435200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "config-typesafe",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "configuration-and-environment",
    "beginnerIssuesLabel" : null
  }
}