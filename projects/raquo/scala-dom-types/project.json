{
  "organization" : "raquo",
  "repository" : "scala-dom-types",
  "creationDate" : 1503882864000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644303092765
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Scala types for your library to represent HTML tags, attributes, properties and CSS styles",
    "logo" : "https://avatars.githubusercontent.com/u/532656?v=4",
    "stars" : 62,
    "forks" : 19,
    "watchers" : 10,
    "issues" : 8,
    "creationDate" : 1503870188000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-scala-dom-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-dom-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala DOM Types</h1>\n<p dir=\"auto\"><a href=\"https://circleci.com/gh/raquo/Airstream\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/23e9aa2ded10fd21cd362600afe338d247ef63c1462cd440bb0abe669b6b08d1/68747470733a2f2f636972636c6563692e636f6d2f67682f726171756f2f7363616c612d646f6d2d74797065732e7376673f7374796c653d737667\" alt=\"Build Status\" data-canonical-src=\"https://circleci.com/gh/raquo/scala-dom-types.svg?style=svg\" style=\"max-width: 100%;\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7d29b69b580c273008397ef2e214c4d2dfe64885127ffc96430ea3896322f943/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e726171756f2f646f6d74797065735f736a73315f322e31332e737667\"><img src=\"https://camo.githubusercontent.com/7d29b69b580c273008397ef2e214c4d2dfe64885127ffc96430ea3896322f943/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e726171756f2f646f6d74797065735f736a73315f322e31332e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.raquo/domtypes_sjs1_2.13.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><em>Scala DOM Types</em> provides listings and type definitions for Javascript HTML and SVG tags as well as their attributes, DOM properties, and CSS styles.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;com.raquo&quot; %%% &quot;domtypes&quot; % &quot;0.16.0-RC2&quot;    // Scala.js 1.7.1+\n&quot;com.raquo&quot; %% &quot;domtypes&quot; % &quot;0.16.0-RC2&quot;     // JVM\"><pre><code>\"com.raquo\" %%% \"domtypes\" % \"0.16.0-RC2\"    // Scala.js 1.7.1+\n\"com.raquo\" %% \"domtypes\" % \"0.16.0-RC2\"     // JVM\n</code></pre></div>\n<p dir=\"auto\">Our type definitions are designed for easy integration into any kind of library. You can use this project to build your own DOM libraries like React or Snabbdom, but type-safe. For example, popular Scala.js reactive UI library <a href=\"https://github.com/OutWatch/outwatch/\">Outwatch</a> recently switched to <em>Scala DOM Types</em>, offloading thousands of lines of code and improving type safety (<a href=\"https://github.com/OutWatch/outwatch/pull/62\">diff</a>). I am also using <em>Scala DOM Types</em> in my own projects:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/raquo/laminar\">Laminar</a>, a high level reactive UI library for Scala.js</li>\n<li><a href=\"https://github.com/raquo/scala-dom-builder\">Scala DOM Builder</a>, a low level DOM manipulation and tree tracking library</li>\n<li><a href=\"https://github.com/raquo/scala-dom-testutils\">Scala DOM Test Utils</a>, a library that verifies that your DOM node / tree matches provided description</li>\n</ul>\n<p dir=\"auto\"><code>DOM</code> stands for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\" rel=\"nofollow\">Document Object Model</a>, in our context it's an object that represents an HTML document along with its HTML elements and their attributes, props and styles.</p>\n<h2 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of Contents</h2>\n<ul dir=\"auto\">\n<li><a href=\"#community\">Community</a></li>\n<li><a href=\"#why-use-scala-dom-types\">Why use <em>Scala DOM Types</em></a></li>\n<li><a href=\"#what-about-scalatags\">What about ScalaTags</a></li>\n<li><a href=\"#what-about-scala-js-dom\">What about scala-js-dom</a></li>\n<li><a href=\"#design-goals\">Design Goals</a></li>\n<li><a href=\"#documentation\">Documentation</a>\n<ul dir=\"auto\">\n<li><a href=\"#codecs\">Codecs</a></li>\n<li><a href=\"#reflected-attributes\">Reflected Attributes</a></li>\n<li><a href=\"#complex-keys\">Complex Keys</a></li>\n<li><a href=\"#dom-events--domeventtarget\">DOM Events &amp; <code>dom.Event.target</code></a></li>\n<li><a href=\"#css\">CSS</a></li>\n<li><a href=\"#svg\">SVG</a></li>\n<li><a href=\"#naming-differences-compared-to-native-html--dom\">Naming Differences Compared To Native HTML &amp; DOM</a></li>\n<li><a href=\"#how-to-use-_scala-dom-types_\">How to Use <em>Scala DOM Types</em></a></li>\n</ul>\n</li>\n<li><a href=\"#my-related-projects\">Related Projects</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-community\" class=\"anchor\" aria-hidden=\"true\" href=\"#community\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Community</h2>\n<p dir=\"auto\">Please use <a href=\"https://github.com/raquo/scala-dom-types/issues\">github issues</a> for bugs, feature requests, as well as all kinds of discussions, including questions on usage and integrations. I think this will work better than spreading thin across gitter / stackoverflow / etc. You can <em>watch</em> this project on github to get issue updates if you're interested in following discussions.</p>\n<p dir=\"auto\">See also: <a href=\"https://github.com/raquo/scala-dom-types/blob/master/CONTRIBUTING.md\">Contribution guide</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-why-use-scala-dom-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#why-use-scala-dom-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Why use <em>Scala DOM Types</em></h2>\n<p dir=\"auto\">Canonical use case: you're writing a Scala library that does HTML / DOM construction / manipulation and want to provide a type-safe API like this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"div(\n  h1(rel := &quot;title&quot;, &quot;Hello world&quot;),\n  p(\n    backgroundColor := &quot;red&quot;,\n    &quot;Welcome to my fancy page!&quot;,\n    span(draggable := true, &quot;Fancyness is important.&quot;)\n  ),\n  button(onClick := doFancyThing, &quot;Do Fancy Thing&quot;),\n  a(href := &quot;http://example.com&quot;, title := &quot;foo&quot;, &quot;Example&quot;)\n)\"><pre>div(\n  h1(rel <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello world<span class=\"pl-pds\">\"</span></span>),\n  p(\n    backgroundColor <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>red<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Welcome to my fancy page!<span class=\"pl-pds\">\"</span></span>,\n    span(draggable <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Fancyness is important.<span class=\"pl-pds\">\"</span></span>)\n  ),\n  button(onClick <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> doFancyThing, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Do Fancy Thing<span class=\"pl-pds\">\"</span></span>),\n  a(href <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://example.com<span class=\"pl-pds\">\"</span></span>, title <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example<span class=\"pl-pds\">\"</span></span>)\n)</pre></div>\n<p dir=\"auto\">Of course, your API doesn't need to look anything like this, that's just an example. <em>Scala DOM Types</em> doesn't actually provide the <strong><code>Tag.apply</code></strong> and <strong><code>:=</code></strong> methods that you'd need to make this example work.</p>\n<p dir=\"auto\">If you do in fact want similar syntax, you should create simple <code>Tag</code>, <code>HtmlAttr</code>, <code>Prop</code>, etc. classes similar to what's found in the test fixtures of this project. Up to v0.15.0, <em>Scala DOM Types</em> provided its own canonical implementations of these types, but they were not needed as so were removed.</p>\n<hr>\n<p dir=\"auto\">You don't need to be writing a whole library to benefit from <em>Scala DOM Types</em>, you can use it instead to make your application code more type-safe. For example, your imaginary method</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"setProperty(element: dom.Element, propName: String, propValue: Any)\"><pre>setProperty(<span class=\"pl-v\">element</span>: dom.<span class=\"pl-en\">Element</span>, <span class=\"pl-v\">propName</span>: <span class=\"pl-en\">String</span>, <span class=\"pl-v\">propValue</span>: <span class=\"pl-en\">Any</span>)</pre></div>\n<p dir=\"auto\">could become</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"setProperty[Value](element: dom.Element, prop: Prop[Value], propValue: Value)\"><pre>setProperty[<span class=\"pl-en\">Value</span>](<span class=\"pl-v\">element</span>: dom.<span class=\"pl-en\">Element</span>, <span class=\"pl-v\">prop</span>: <span class=\"pl-en\">Prop</span>[<span class=\"pl-en\">Value</span>], <span class=\"pl-v\">propValue</span>: <span class=\"pl-en\">Value</span>)</pre></div>\n<p dir=\"auto\">Now you can't pass just about any random string as <code>propName</code>, and even <code>propValue</code> is now type checked. However, doing this without a UI library that already makes use of <em>Scala DOM Types</em> puts the burden of writing the integration boilerplate on yourself.</p>\n<h2 dir=\"auto\"><a id=\"user-content-what-about-scalatags\" class=\"anchor\" aria-hidden=\"true\" href=\"#what-about-scalatags\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>What about ScalaTags</h2>\n<p dir=\"auto\"><a href=\"http://www.lihaoyi.com/scalatags/\" rel=\"nofollow\">ScalaTags</a> is a popular Scala library that contains DOM type definitions similar to what we have here. However, <em>Scala DOM Types</em> is different in a few ways:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>More type safe</strong>. For example, in <em>Scala DOM Types</em> an <code>input</code> tag is linked to Scala.js <code>HTMLInputElement</code> class. This lets you provide exact types for the DOM nodes you create, so that you don't need to perform unsafe casts in your application code if you want to e.g. access the <code>value</code> property on an <code>input</code> you created. Similarly, all attributes, properties and styles are linked to the types that they accept to prevent you from assigning incorrect values.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>More flexible</strong>. <em>Scala DOM Types</em> does not tell you how to compose your attributes / props / styles / tags together, and does not enforce any rendering paradigm. You are free to implement your own composition. I see that some projects fork ScalaTags just to get the type definitions without everything else. <em>Scala DOM Types</em> does not get in your way, eliminating the need for such forking.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Better representation of native DOM types</strong>. <em>Scala DOM Types</em> handles Reflected Attributes consistently, and uses Codecs to properly encode/decode DOM values.</p>\n</li>\n</ul>\n<p dir=\"auto\">There are some other differences, for example <em>Scala DOM Types</em> uses camelCase for attr / prop / style names because that is consistent with common Scala style.</p>\n<h2 dir=\"auto\"><a id=\"user-content-what-about-scala-js-dom\" class=\"anchor\" aria-hidden=\"true\" href=\"#what-about-scala-js-dom\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>What about scala-js-dom</h2>\n<p dir=\"auto\">The <a href=\"http://scala-js.github.io/scala-js-dom/\" rel=\"nofollow\">scala-js-dom</a> project serves a very different purpose – it provides typed Scala.js interfaces to native Javascript DOM classes such as <code>HTMLInputElement</code>. You can use those types when you already have instances of DOM elements, but you can not instantiate those types without using untyped methods like <code>document.createElement</code> because that is the only kind of API that Javascript provides for this.</p>\n<p dir=\"auto\">On the other hand, <em>Scala DOM Types</em> lets the consuming library create a type-safe <em>representation</em> of real JS DOM nodes or trees, and it is up to your library's code to instantiate real JS nodes from the provided description. <a href=\"https://github.com/raquo/scala-dom-builder\">Scala DOM Builder</a> does that in the most straightforward way, but higher level libraries like React, <a href=\"https://github.com/raquo/Snabbdom.scala\">Snabbdom</a> or <a href=\"https://github.com/raquo/Laminar\">Laminar</a> could use <em>Scala DOM Types</em> in their own way, e.g. to create <em>virtual</em> or <em>reactive</em> DOM structures.</p>\n<p dir=\"auto\">Oh, and <em>Scala DOM Types</em> <strong>does</strong> work on the JVM. Obviously you can't get native JS types there, but you can provide your own replacements for specific Scala.js types, or just not bother with such specificity (see <a href=\"https://github.com/raquo/scala-dom-types/blob/master/shared/src/main/scala/com/raquo/domtypes/generic/defs/package.scala\"><code>defs.sameRefTags</code></a>).</p>\n<h2 dir=\"auto\"><a id=\"user-content-design-goals\" class=\"anchor\" aria-hidden=\"true\" href=\"#design-goals\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Design Goals</h2>\n<p dir=\"auto\">The purpose of <em>Scala DOM Types</em> is to become a standard DOM types library used in Scala.js projects.</p>\n<h4 dir=\"auto\"><a id=\"user-content-precise-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#precise-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Precise Types</h4>\n<p dir=\"auto\">The most important type information must be encoded as Scala types. For example, DOM properties that only accept integers should be typed as such.</p>\n<h4 dir=\"auto\"><a id=\"user-content-reasonably-precise-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#reasonably-precise-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Reasonably Precise Types</h4>\n<p dir=\"auto\">The types we provide will never be perfect. For example, MDN has this to say about the <code>list</code> attribute (<code>listId</code> in our API):</p>\n<blockquote>\n<p dir=\"auto\">The value must be the id of a  element in the same document. [...] This attribute is ignored when the type attribute's value is hidden, checkbox, radio, file, or a button type.</p>\n</blockquote>\n<p dir=\"auto\">A far as I know, encoding such constraints as Scala types would be very hard, if possible at all.</p>\n<p dir=\"auto\">This is not to say that we are content with the level of type safety we currently have in <em>Scala DOM Types</em>. Improvements are welcome as long as they provide significantly more value than burden to users of this library. This kind of thing is often subjective, so I suggest you open an issue for discussion first.</p>\n<h4 dir=\"auto\"><a id=\"user-content-flexibility\" class=\"anchor\" aria-hidden=\"true\" href=\"#flexibility\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Flexibility</h4>\n<p dir=\"auto\"><em>Scala DOM Types</em> is a low level library that is used by other libraries. As such, its API should be unopinionated and focused solely on providing useful data about DOM elements / attributes / etc. to consuming libraries in a way that is easy for them to implement.</p>\n<h4 dir=\"auto\"><a id=\"user-content-sanity-preservation-measures\" class=\"anchor\" aria-hidden=\"true\" href=\"#sanity-preservation-measures\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Sanity Preservation Measures</h4>\n<p dir=\"auto\">We should provide a better API than the DOM if we can do that in a way that keeps usage discoverable and unsurprising.</p>\n<p dir=\"auto\">Developers familiar with the DOM API should generally be able to discover the names of attributes / tags / etc. they need using IDE autocompletion (assuming they expect the names to match the DOM API). For example: <code>forId</code> is a good name for the <code>for</code> attribute. It avoids using a Scala reserved word, and it starts with <code>for</code> like the original attribute, so it's easy to find. It also implies what kind of string is expected for a value (an <code>id</code> of an element).</p>\n<p dir=\"auto\">Within that constraint, we should also try to clean up the more insane corners of the DOM API.</p>\n<ul dir=\"auto\">\n<li>For example, the difference between <code>value</code> attribute vs <code>value</code> property trips up even experienced developers all the time. Scala DOM Types on the other hand has a <code>defaultValue</code> reflected attribute and a <code>value</code> property, which behave the way everyone would expect from the given names or from their knowledge of the DOM API.</li>\n<li>For another example, enumerated attributes like <code>contentEditable</code> that in the DOM accept \"true\" / \"false\" or \"on\" / \"off\" or \"yes\" / \"no\" should be boolean attributes in <em>Scala DOM Types</em>.</li>\n</ul>\n<p dir=\"auto\">All naming differences with the DOM API should be documented in the README file (see below). Type differences are generally assumed to be self-documenting.</p>\n<h2 dir=\"auto\"><a id=\"user-content-documentation\" class=\"anchor\" aria-hidden=\"true\" href=\"#documentation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Documentation</h2>\n<p dir=\"auto\"><a href=\"https://javadoc.io/doc/com.raquo/domtypes_sjs1_2.13/latest/com/raquo/domtypes/index.html\" rel=\"nofollow\">API doc</a></p>\n<p dir=\"auto\">TODO:</p>\n<ul dir=\"auto\">\n<li>Write about general project structure, builders, etc.</li>\n<li>Provide links to specific implementation examples in other libraries (use my keys + implicits, or use your own keys)</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-codecs\" class=\"anchor\" aria-hidden=\"true\" href=\"#codecs\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Codecs</h3>\n<p dir=\"auto\"><em>Scala DOM Types</em> provides some normalization of the native HTML / DOM API, which is crazy in places.</p>\n<p dir=\"auto\">For example, there are a few ways to encode a boolean value into an HTML attribute:</p>\n<ol dir=\"auto\">\n<li>As presence of the attribute – if attribute is present, <code>true</code>, else <code>false</code>.</li>\n<li>As string \"true\" for true, or \"false\" for false</li>\n<li>As string \"yes\" for true, or \"no\" for false.</li>\n</ol>\n<p dir=\"auto\">Which one of those you need to use depends on the attribute. For example, attribute <code>disabled</code> needs option #1, but attribute <code>contenteditable</code> needs option #2. And then there are DOM Properties (as opposed to HTML Attributes) where booleans are encoded as actual booleans.</p>\n<p dir=\"auto\">Similarly, numbers are encoded as strings in attributes, with no such conversion when working with properties.</p>\n<p dir=\"auto\"><em>Scala DOM Types</em> coalesces all these differences using codecs. When implementing a function that builds an attribute, you get provided with the attribute's name (key), datatype, and a codec that knows how to encode / decode that datatype into a value that should be passed to Javascript's native DOM API.</p>\n<p dir=\"auto\">For example, the codecs for the three boolean options above are <code>BooleanAsPresenceCodec</code>, <code>BooleanAsTrueFalseStringCodec</code>, and <code>BooleanAsYesNoStringCodec</code>. They have concrete implementations of encode / decode methods but of course you don't have to use those.</p>\n<h3 dir=\"auto\"><a id=\"user-content-reflected-attributes\" class=\"anchor\" aria-hidden=\"true\" href=\"#reflected-attributes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Reflected Attributes</h3>\n<p dir=\"auto\">HTML attributes and DOM properties are different things. As a prerequisite for this section, please read <a href=\"https://stackoverflow.com/a/6004028/2601788\" rel=\"nofollow\">this StackOverflow answer</a> first.</p>\n<p dir=\"auto\">For more on this, read <a href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes\" rel=\"nofollow\">Section 2.6.1 of this DOM spec</a>. Note that it uses the term \"IDL attributes\" to refer to what we call \"DOM properties\", and \"Content attributes\" to refer to what we here call \"HTML attributes\".</p>\n<p dir=\"auto\">So with that knowledge, <code>id</code> for example is a reflected attribute. Setting and reading it works exactly the same way regardless of whether you're using the HTML attribute <code>id</code>, or the DOM property <code>id</code>. Such reflected attributes live in <code>ReflectedHtmlAttrs</code> trait, which lets you build either attributes or properties depending on what implementation of <code>ReflectedHtmlAttrBuilder</code> you provide.</p>\n<p dir=\"auto\">To keep you sane, <em>Scala DOM Types</em> reflected attributes also normalize the DOM API a bit. For example, there is no <code>value</code> attribute in <em>Scala DOM Types</em>. There is only <code>defaultValue</code> reflected attribute, which uses either the <code>value</code> HTML attribute or the <code>defaultValue</code> DOM property depending on how you implement <code>ReflectedHtmlAttrBuilder</code>. This is because that attribute and that property behave the same even though they're named differently in the DOM, whereas the <code>value</code> DOM property has different behaviour (see the StackOverflow answer linked above). A corresponding HTML attribute with such behaviour does not exist, so in Scala DOM Types the <code>value</code> prop is defined in trait <code>Props</code>. It is not an attribute, nor is it a reflected attribute.</p>\n<p dir=\"auto\">Reflected attributes may behave slightly differently depending on whether you implement them as props or attributes. For example, in HTML5 the <code>cols</code> reflected attribute has a default value of <code>20</code>. If you read the <code>col</code> property from an empty <code>&lt;textarea&gt;</code> element, you will get <code>20</code>. However, if you try to read the attribute <code>col</code>, you will get nothing because the attribute was never explicitly set.</p>\n<p dir=\"auto\">Note that Javascript DOM performs better for reading/writing DOM props than reading/writing HTML attributes.</p>\n<h3 dir=\"auto\"><a id=\"user-content-complex-keys\" class=\"anchor\" aria-hidden=\"true\" href=\"#complex-keys\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Complex Keys</h3>\n<p dir=\"auto\">Properties like <code>className</code> often require special handling in consuming libraries. For example, instead of a <code>String</code> based interface, you might want to offer a <code>Seq[String]</code> based one for <code>className</code>. To facilitate the development of such opinionated APIs we offer these keys in separate traits (<code>ComplexHtmlKeys</code> and <code>ComplexSvgKeys</code>) that allow for completely custom types.</p>\n<p dir=\"auto\">If you don't need such customization at all, just use <code>CanonicalComplexHtmlKeys</code> and <code>CanonicalComplexSvgKeys</code> traits which implement these keys similar to all the others.</p>\n<h3 dir=\"auto\"><a id=\"user-content-dom-events--domeventtarget\" class=\"anchor\" aria-hidden=\"true\" href=\"#dom-events--domeventtarget\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>DOM Events &amp; <code>dom.Event.target</code></h3>\n<p dir=\"auto\">When listening to <code>onChange</code>, <code>onSelect</code>, <code>onInput</code> events found in <code>FormEventProps</code>, you often need to access <code>event.target.value</code> to get the new value of the input element the event was fired on. However, <code>dom.Event.target</code> is an <code>EventTarget</code>, whereas the <code>value</code> property is only defined on <code>HTMLInputElement</code>, which <code>EventTarget</code> is not.</p>\n<p dir=\"auto\">Properly typing <code>target</code> in JS events is hard because almost all events in which we care about it could fire not only on <code>HTMLInputElement</code>, but also <code>HTMLTextAreaElement</code>, and even <code>HTMLElement</code> in some cases (<code>onInput</code> on element with <code>contentEditable</code> set to <code>true</code>).</p>\n<p dir=\"auto\"><em>Scala DOM Types</em> provides a few type params in <code>FormEventProps</code> to help deal with this mess, as well as the <code>TypedTargetEvent</code> type refinement trait. Ultimately, you simply can't safely use <code>.target</code> as something other than an <code>HTMLElement</code> for most events due to the underlying JS API being very dynamic.</p>\n<p dir=\"auto\">For related discussion see <a href=\"https://github.com/raquo/scala-dom-types/issues/13\">issue #13</a> and <a href=\"https://github.com/OutWatch/outwatch/issues/93\">Outwatch issue #93</a>, and some comments on <a href=\"https://github.com/raquo/scala-dom-types/pull/9\">PR #9</a>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-css\" class=\"anchor\" aria-hidden=\"true\" href=\"#css\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>CSS</h3>\n<p dir=\"auto\">CSS is rather hard to type properly. A lot of CSS properties accept both numbers and a set of magic strings such as \"auto\", or specially formed strings in multiple formats such as \"2px 5em 0 auto\". We attempt to deal with this the same way that ScalaTags does, by defining objects for some CSS properties that have shorthand methods for applicable magic strings defined on them.</p>\n<p dir=\"auto\">The downside of this approach is that this requires <em>Scala DOM Types</em> to venture outside of its design scope, as for such a setup to work <em>Scala DOM Types</em> needs to be aware of the concept of setters – <code>Modifier</code>s that set a particular property to a particular value, such as <code>backGroundColor := \"auto\"</code>.</p>\n<p dir=\"auto\">See <a href=\"https://github.com/raquo/scala-dom-types/issues/2\">Issue #2</a> for discussion.</p>\n<h3 dir=\"auto\"><a id=\"user-content-svg\" class=\"anchor\" aria-hidden=\"true\" href=\"#svg\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SVG</h3>\n<p dir=\"auto\">SVG attributes have the same typing problems as CSS properties (see above), but a different solution in <em>Scala DOM Types</em>. We basically type most SVG attributes as strings. Eventually we hope to find a better solution that will fit both SVG and CSS use cases. See <a href=\"https://github.com/raquo/scala-dom-types/issues/2\">Issue #2</a> for discussion.</p>\n<h3 dir=\"auto\"><a id=\"user-content-naming-differences-compared-to-native-html--dom\" class=\"anchor\" aria-hidden=\"true\" href=\"#naming-differences-compared-to-native-html--dom\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Naming Differences Compared To Native HTML &amp; DOM</h3>\n<p dir=\"auto\">We try to make the native HTML &amp; DOM API a bit saner to work with in Scala.</p>\n<h4 dir=\"auto\"><a id=\"user-content-general\" class=\"anchor\" aria-hidden=\"true\" href=\"#general\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>General</h4>\n<ul dir=\"auto\">\n<li>All identifiers are camelCased, (e.g. <code>datalist</code> is <code>dataList</code>) for consistency with conventional Scala style.</li>\n<li><code>data-&lt;suffix&gt;</code> attributes are created using <code>dataAttr(suffix: String)</code> factory.</li>\n<li><code>aria-&lt;suffix&gt;</code> attributes are available without the <code>aria-</code> prefix in the <code>AriaAttrs</code> trait. You could thus create <code>object aria extends AriaAttrs[...]</code> to namespace those attributes.</li>\n</ul>\n<h4 dir=\"auto\"><a id=\"user-content-attributes--props\" class=\"anchor\" aria-hidden=\"true\" href=\"#attributes--props\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Attributes &amp; Props</h4>\n<ul dir=\"auto\">\n<li><code>value</code> <strong>attribute</strong> is renamed <code>defaultValue</code> because native naming is misleading and confusing (<a href=\"https://stackoverflow.com/a/6004028/2601788\" rel=\"nofollow\">example</a>)\n<ul dir=\"auto\">\n<li>Note that the <code>value</code> <strong>property</strong> retains its name</li>\n</ul>\n</li>\n<li><code>checked</code> <strong>attribute</strong> is renamed to <code>defaultChecked</code> for the same reason\n<ul dir=\"auto\">\n<li>Note that the <code>checked</code> <strong>property</strong> retains its name</li>\n</ul>\n</li>\n<li><code>selected</code> <strong>attribute</strong> is renamed to <code>defaultSelected</code> for the same reason\n<ul dir=\"auto\">\n<li>Note that the <code>selected</code> <strong>property</strong> retains its name</li>\n</ul>\n</li>\n<li><code>class</code> <strong>attribute</strong> is renamed to <code>className</code> for consistency with reflected property name, and to avoid Scala reserved word</li>\n<li><code>for</code> attribute and <code>htmlFor</code> property are available as reflected attribute <code>forId</code> for consistency and to avoid Scala reserved word</li>\n<li><code>id</code> reflected attribute is renamed to <code>idAttr</code>, <code>max</code> attribute to <code>maxAttr</code>, <code>min</code> to <code>minAttr</code>, and <code>step</code> to <code>stepAttr</code> to free up good names for end user code</li>\n<li><code>offset</code> and <code>result</code> SVG attributes renamed to <code>offsetAttr</code> and <code>resultAttr</code> respectively to free up good names for end user code</li>\n<li><code>loading</code> reflected HTML attribute renamed to <code>loadingAttr</code> to avoid using a good name</li>\n<li><code>style</code> attribute is renamed to <code>styleAttr</code> to let you implement a custom <code>style</code> attribute if you want.</li>\n<li><code>content</code> attribute is renamed to <code>contentAttr</code> to avoid using a common name</li>\n<li><code>form</code> attribute is renamed to <code>formId</code> to avoid conflict with <code>form</code> tag</li>\n<li><code>label</code> attribute is renamed to <code>labelAttr</code> to avoid conflict with <code>label</code> tag</li>\n<li><code>height</code> attribute is renamed to <code>heightAttr</code> to avoid conflict with <code>height</code> CSS property</li>\n<li><code>width</code> attribute is renamed to <code>widthAttr</code> to avoid conflict with <code>width</code> CSS property</li>\n<li><code>list</code> attribute is renamed to <code>listId</code> for clarity and consistency</li>\n<li><code>contextmenu</code> attribute is renamed to <code>contextMenuId</code> for clarity and consistency</li>\n</ul>\n<h4 dir=\"auto\"><a id=\"user-content-css-style-props\" class=\"anchor\" aria-hidden=\"true\" href=\"#css-style-props\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>CSS Style Props</h4>\n<ul dir=\"auto\">\n<li><code>content</code> prop is renamed to <code>contentCss</code> to avoid using a common name</li>\n</ul>\n<h4 dir=\"auto\"><a id=\"user-content-tags\" class=\"anchor\" aria-hidden=\"true\" href=\"#tags\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Tags</h4>\n<ul dir=\"auto\">\n<li>Tags renamed to free up good names for end user code:\n<ul dir=\"auto\">\n<li><code>style</code> -&gt; <code>styleTag</code>, <code>link</code> -&gt; <code>linkTag</code>, <code>param</code> -&gt; <code>paramTag</code>, <code>map</code> -&gt; <code>mapTag</code></li>\n</ul>\n</li>\n<li>Other tag renamings:\n<ul dir=\"auto\">\n<li><code>title</code> -&gt; <code>titleTag</code> to avoid conflict with <code>title</code> reflected attribute</li>\n<li><code>object</code> -&gt; <code>objectTag</code> to avoid Scala reserved word</li>\n</ul>\n</li>\n</ul>\n<h4 dir=\"auto\"><a id=\"user-content-aliases\" class=\"anchor\" aria-hidden=\"true\" href=\"#aliases\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Aliases</h4>\n<ul dir=\"auto\">\n<li>Attribute <code>type</code> == <code>typ</code> == <code>tpe</code> to avoid Scala reserved word</li>\n<li>Attribute <code>className</code> == <code>cls</code> for consistency with Scala / ScalaTags</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-how-to-use-scala-dom-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#how-to-use-scala-dom-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>How to Use <em>Scala DOM Types</em></h3>\n<p dir=\"auto\">So you're considering building a higher level DOM manipulation library on top of <em>Scala DOM Types</em> such as <a href=\"https://github.com/raquo/Laminar\">Laminar</a>, <a href=\"https://github.com/OutWatch/outwatch\">Outwatch</a> or <a href=\"https://github.com/japgolly/scalajs-react\">ScalaJS-React</a> (the former two use <em>Scala DOM Types</em>, the latter doesn't).</p>\n<p dir=\"auto\">First off, if you're building such a library, you need to know a quite few things about how JS DOM works. <em>Scala DOM Types</em> is just a collection of types, it's not an abstraction layer for the DOM. <em>You're</em> building the abstraction layer. We can't cover everything about JS DOM here, but we did touch on some of the nastier parts above.</p>\n<p dir=\"auto\">Laminar is my own library that uses <em>Scala DOM Types</em> in a pretty standard way. Open <a href=\"https://github.com/raquo/Laminar/blob/master/src/main/scala/com/raquo/laminar/api/Laminar.scala\">Laminar.scala</a>, which is Laminar's public API, and let's see what it has.</p>\n<p dir=\"auto\">As you see we're building up a big <code>private[laminar] object Laminar</code>. It's marked private because it's exposed under a different alias, <code>com.raquo.laminar.L</code>. End users are expected to import either this object, or all of its properties (<code>L._</code>) depending on their preference, everything will work either way.</p>\n<p dir=\"auto\">Our <code>object Laminar</code> extends quite a few <em>Scala DOM Types</em> traits. Let's see what some of these traits these are, and what kinds of type params we pass to them.</p>\n<p dir=\"auto\">We see <code>with ReflectedHtmlAttrs[ReactiveReflectedProp]</code> – this brings in the <a href=\"https://github.com/raquo/scala-dom-types/blob/master/shared/src/main/scala/com/raquo/domtypes/generic/defs/reflectedAttrs/ReflectedHtmlAttrs.scala\"><code>ReflectedHtmlAttrs</code></a> trait. The type param of <code>ReflectedHtmlAttrs</code> indicates the type of Reflected Attribute instanced that you get when you call <code>L.id</code> or <code>L.alt</code> etc. In Laminar, this type is <a href=\"https://github.com/raquo/Laminar/blob/master/src/main/scala/com/raquo/laminar/keys/ReactiveProp.scala\"><code>ReactiveProp</code></a> which extends <em>Scala DOM Types</em> <a href=\"https://github.com/raquo/scala-dom-types/blob/master/shared/src/main/scala/com/raquo/domtypes/generic/keys/Prop.scala\">Prop</a> class. So ReactiveProp adds Laminar functionality to Prop, but it doesn't actually have to extend Prop, Prop is only provided as a canonical Prop class to help potential interop between libraries and to reduce boilerplate.</p>\n<p dir=\"auto\">Speaking of boilerplate, <code>ReflectedHtmlAttrs</code> trait requires Laminar object to also implement <code>ReflectedHtmlAttrBuilder</code>. Because Laminar uses its own <code>ReactiveProp</code> type, we have to implement it ourselves, and we do it in <a href=\"https://github.com/raquo/Laminar/blob/master/src/main/scala/com/raquo/laminar/builders/HtmlBuilders.scala\"><code>HtmlBuilders</code></a> trait, which <code>object Laminar</code> also extends. But if Laminar just used the canonical <code>Prop</code> instead of its own <code>ReactiveProp</code>, it could have simply used <code>Scala DOM Types</code> <a href=\"https://github.com/raquo/scala-dom-types/blob/master/shared/src/main/scala/com/raquo/domtypes/generic/builders/canonical/CanonicalReflectedPropBuilder.scala\">CanonicalReflectedPropBuilder</a> instead of re-implementing all the same <code>reflectedAttr</code> method in <code>HtmlBuilders</code>. But then I would need to add Laminar functionality to <code>Prop</code> by means of implicit extension methods, and I personally prefer non-implicit APIs.</p>\n<p dir=\"auto\">If you look at <code>HtmlBuilders</code> you will see that it extends quite a few other traits – those follow the same pattern but for different types of keys – html attrs, event props, style props, tags, etc. And you'll see <code>object Laminar</code> extending <em>Scala DOM Types</em> traits that provide these listings of attrs, event props, style props, tags, etc.</p>\n<p dir=\"auto\">Lastly, Scala DOM Types code provides quite a few comments explaining what the traits are used for and what the classes represent. Hopefully together with the Laminar example it will be clear enough how to use Scala DOM Types from your library. If you've built libraries on top of ScalaTags, it's a somewhat similar pattern.</p>\n<p dir=\"auto\">Notice that most <em>Scala DOM Types</em> def traits live in the <code>shared</code> project. Some of them accept many type params to represent different types of DOM Events or HTML elements. This enables you to use <em>Scala DOM Types</em> on the JVM. For implementing a purely frontend library you will want to use the type aliases defined in the <code>js</code> project, specifically in the <a href=\"https://github.com/raquo/scala-dom-types/blob/master/js/src/main/scala/com/raquo/domtypes/jsdom/defs/package.scala\">package object</a> there. Those aliases provide standard type params for <em>Scala DOM Types</em> definition traits from the scalajs-dom project. Laminar uses those type aliases, and there is no reason not to if you don't need JVM compatibility in your library.</p>\n<h2 dir=\"auto\"><a id=\"user-content-my-related-projects\" class=\"anchor\" aria-hidden=\"true\" href=\"#my-related-projects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>My Related Projects</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/raquo/Laminar\">Laminar</a> – Reactive UI library based on <em>Scala DOM Types</em></li>\n<li><a href=\"https://github.com/raquo/scala-dom-builder\">Scala DOM Builder</a> – Low-level Scala &amp; Scala.js library for building and manipulating DOM trees</li>\n<li><a href=\"https://github.com/raquo/scala-dom-testutils\">Scala DOM TestUtils</a> – Test that your Javascript DOM nodes match your expectations</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-author\" class=\"anchor\" aria-hidden=\"true\" href=\"#author\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Author</h2>\n<p dir=\"auto\">Nikita Gazarov – <a href=\"https://twitter.com/raquo\" rel=\"nofollow\">@raquo</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-license-and-credits\" class=\"anchor\" aria-hidden=\"true\" href=\"#license-and-credits\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License and Credits</h2>\n<p dir=\"auto\"><em>Scala DOM Types</em> is provided under the <a href=\"https://github.com/raquo/scala-dom-types/blob/master/LICENSE.md\">MIT license</a>.</p>\n<p dir=\"auto\">Files in <a href=\"https://github.com/raquo/scala-dom-types/tree/master/shared/src/main/scala/com/raquo/domtypes/generic/defs\"><code>defs</code></a> directory contain listings of DOM attributes, props, styles, etc. – Those were adapted from Li Haoyi's <a href=\"http://www.lihaoyi.com/scalatags/#License\" rel=\"nofollow\">ScalaTags</a>, which is also MIT licensed.</p>\n<p dir=\"auto\">Comments marked with \"MDN\" or linking to MDN website are taken or derived from content created by Mozilla Contributors and are licensed under Creative Commons Attribution-ShareAlike license (CC-BY-SA), v2.5.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "raquo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/532656?v=4",
        "url" : "https://api.github.com/users/raquo",
        "contributions" : 276
      },
      {
        "login" : "cornerman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1043127?v=4",
        "url" : "https://api.github.com/users/cornerman",
        "contributions" : 25
      },
      {
        "login" : "doofin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6041353?v=4",
        "url" : "https://api.github.com/users/doofin",
        "contributions" : 4
      },
      {
        "login" : "nikita-wcsc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/47929933?v=4",
        "url" : "https://api.github.com/users/nikita-wcsc",
        "contributions" : 3
      },
      {
        "login" : "busti",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3575167?v=4",
        "url" : "https://api.github.com/users/busti",
        "contributions" : 2
      },
      {
        "login" : "nghuuphuoc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4226036?v=4",
        "url" : "https://api.github.com/users/nghuuphuoc",
        "contributions" : 2
      },
      {
        "login" : "ajaychandran",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4387263?v=4",
        "url" : "https://api.github.com/users/ajaychandran",
        "contributions" : 1
      },
      {
        "login" : "ajablonski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2461496?v=4",
        "url" : "https://api.github.com/users/ajablonski",
        "contributions" : 1
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://api.github.com/users/armanbilge",
        "contributions" : 1
      },
      {
        "login" : "fdietze",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1186516?v=4",
        "url" : "https://api.github.com/users/fdietze",
        "contributions" : 1
      },
      {
        "login" : "yurique",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/919230?v=4",
        "url" : "https://api.github.com/users/yurique",
        "contributions" : 1
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://api.github.com/users/lolgab",
        "contributions" : 1
      },
      {
        "login" : "mariusmuja",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/695669?v=4",
        "url" : "https://api.github.com/users/mariusmuja",
        "contributions" : 1
      },
      {
        "login" : "Lasering",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5956311?v=4",
        "url" : "https://api.github.com/users/Lasering",
        "contributions" : 1
      },
      {
        "login" : "weihsiu",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/31003?v=4",
        "url" : "https://api.github.com/users/weihsiu",
        "contributions" : 1
      },
      {
        "login" : "zakpatterson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1987109?v=4",
        "url" : "https://api.github.com/users/zakpatterson",
        "contributions" : 1
      },
      {
        "login" : "deterdw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/618912?v=4",
        "url" : "https://api.github.com/users/deterdw",
        "contributions" : 1
      },
      {
        "login" : "ioleo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1419884?v=4",
        "url" : "https://api.github.com/users/ioleo",
        "contributions" : 1
      }
    ],
    "commits" : 324,
    "topics" : [
      "elements",
      "css",
      "scalajs",
      "dom",
      "attributes",
      "properties",
      "events",
      "scala-js",
      "html"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 71,
        "title" : "Merge colliding html and svg attr names into shared namespace.",
        "url" : "https://github.com/raquo/scala-dom-types/issues/71"
      },
      {
        "number" : 53,
        "title" : "Discussion about lazy val definitions",
        "url" : "https://github.com/raquo/scala-dom-types/issues/53"
      },
      {
        "number" : 47,
        "title" : "Automatically generate dom types",
        "url" : "https://github.com/raquo/scala-dom-types/issues/47"
      },
      {
        "number" : 29,
        "title" : "Docs: Add MDN docs to SVG attributes",
        "url" : "https://github.com/raquo/scala-dom-types/issues/29"
      },
      {
        "number" : 13,
        "title" : "Track parent tag of properties",
        "url" : "https://github.com/raquo/scala-dom-types/issues/13"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "xml-html-and-dom",
    "beginnerIssuesLabel" : null
  }
}