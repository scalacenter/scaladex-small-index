{
  "organization" : "raquo",
  "repository" : "scala-dom-types",
  "creationDate" : 1503882864000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1730768565598
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Scala types for your library to represent HTML tags, attributes, properties and CSS styles",
    "logo" : "https://avatars.githubusercontent.com/u/532656?v=4",
    "stars" : 92,
    "forks" : 28,
    "watchers" : 10,
    "issues" : 9,
    "creationDate" : 1503870188000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">Scala DOM Types</h1><a id=\"user-content-scala-dom-types\" class=\"anchor\" aria-label=\"Permalink: Scala DOM Types\" href=\"#scala-dom-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><a href=\"https://github.com/raquo/scala-dom-types/actions/workflows/test.yml\"><img src=\"https://github.com/raquo/scala-dom-types/actions/workflows/test.yml/badge.svg\" alt=\"Build status\" style=\"max-width: 100%;\"></a>\n<a href=\"https://discord.gg/JTrUxhq7sj\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/2117ba6332c311013979a67d3291aa5846a4b672a8c9d7cca1fe66863645fb93/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230646973636f72642d3732383964612e737667\" alt=\"Chat on https://discord.gg/JTrUxhq7sj\" data-canonical-src=\"https://img.shields.io/badge/chat-on%20discord-7289da.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://search.maven.org/artifact/com.raquo/domtypes_sjs1_3\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/69a0e7404caaee6aa2191b8b456045de5a2fa1d7dcfffa0863fdf5e9f2c25a0d/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e726171756f2f646f6d74797065735f736a73315f332e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.raquo/domtypes_sjs1_3.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><em>Scala DOM Types</em> provides listings of Javascript HTML and SVG tags as well as their attributes, DOM properties, and CSS styles, including the corresponding type information.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;com.raquo&quot; %% &quot;domtypes&quot; % &quot;&lt;version&gt;&quot;     // JVM &amp; SBT\n&quot;com.raquo&quot; %%% &quot;domtypes&quot; % &quot;&lt;version&gt;&quot;    // Scala.js 1.16.0+\"><pre class=\"notranslate\"><code>\"com.raquo\" %% \"domtypes\" % \"&lt;version&gt;\"     // JVM &amp; SBT\n\"com.raquo\" %%% \"domtypes\" % \"&lt;version&gt;\"    // Scala.js 1.16.0+\n</code></pre></div>\n<p dir=\"auto\"><em>Scala DOM Types</em> is used by the following Scala.js UI libraries:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/raquo/Laminar\">Laminar</a></li>\n<li><a href=\"https://github.com/OutWatch/outwatch\">Outwatch</a></li>\n<li><a href=\"https://github.com/armanbilge/calico\">Calico</a></li>\n<li><a href=\"https://github.com/buntec/ff4s\">ff4s</a></li>\n<li>Add your own here.</li>\n</ul>\n<p dir=\"auto\">As well as by:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/raquo/scala-dom-testutils\">Scala DOM Test Utils</a>, a library that verifies that your DOM node / tree matches the spec</li>\n</ul>\n<p dir=\"auto\">As the end-user of these libraries, you do not depend on <em>Scala DOM Types</em> at runtime, those libraries use it at their compile time (for SDT v17.0.0+).</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Table of Contents</h2><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-label=\"Permalink: Table of Contents\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li><a href=\"#community\">Community</a></li>\n<li><a href=\"#contributing\">Contributing</a></li>\n<li><a href=\"#why-use-scala-dom-types\">Why use <em>Scala DOM Types</em></a></li>\n<li><a href=\"#what-about-scalatags\">What about ScalaTags</a></li>\n<li><a href=\"#what-about-scala-js-dom\">What about scala-js-dom</a></li>\n<li><a href=\"#design-goals\">Design Goals</a></li>\n<li><a href=\"#documentation\">Documentation</a>\n<ul dir=\"auto\">\n<li><a href=\"#how-to-use-scala-dom-types-in-your-library\">How to Use <em>Scala DOM Types</em> in Your Library</a></li>\n<li><a href=\"#migrating-to-code-generation-from-an-older-version-of-scala-dom-types\">Migrating from an older version of <em>Scala DOM Types</em></a></li>\n<li><a href=\"#codecs\">Codecs</a></li>\n<li><a href=\"#reflected-attributes\">Reflected Attributes</a></li>\n<li><a href=\"#complex-keys\">Complex Keys</a></li>\n<li><a href=\"#css\">CSS</a></li>\n<li><a href=\"#naming-differences-compared-to-native-html--dom\">Naming Differences Compared To Native HTML &amp; DOM</a></li>\n</ul>\n</li>\n<li><a href=\"#my-related-projects\">Related Projects</a></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Community</h2><a id=\"user-content-community\" class=\"anchor\" aria-label=\"Permalink: Community\" href=\"#community\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Please use <a href=\"https://github.com/raquo/scala-dom-types/issues\">Github issues</a> for bugs, feature requests, as well as all kinds of discussions, including questions on usage and integrations. You can <em>watch</em> this project on Github to get issue updates if you're interested in following discussions.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Contributing</h2><a id=\"user-content-contributing\" class=\"anchor\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><strong>Q: I want to add an element tag / attribute / prop / etc.</strong></p>\n<p dir=\"auto\"><strong>A:</strong> Awesome! It might seem daunting the first time, but it's not hard. Here's how to add a new <strong>key</strong> (i.e. tag / property / attribute / event / etc.):</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Find the documentation for it on <a href=\"https://developer.mozilla.org/en-US/\" rel=\"nofollow\">MDN</a>, for example <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/gap\" rel=\"nofollow\">gap</a>.</p>\n</li>\n<li>\n<p dir=\"auto\">Confirm that it's reasonably well supported by browsers. Support by latest Firefox and Chrome is the bare minimum. <a href=\"https://caniuse.com/?search=gap\" rel=\"nofollow\">example</a>.</p>\n</li>\n<li>\n<p dir=\"auto\">If it's a property or an attribute, figure out whether it's: (a) non-reflected attribute, (b) non-reflected property, or (c) reflected property. The latter are pretty common. Read the MDN docs, read the docs below, and see other reflected properties we defined for reference.</p>\n</li>\n<li>\n<p dir=\"auto\">If applicable, figure out the type of values that this attribute / property / etc. accepts, or the type of events that it fires. See MDN docs for that. Note that we only care about the type that we can write into it, not the type we can read from it (the latter often includes <code>null</code> or <code>js.undefined</code>). See what codec(s) our other properties of the same type use, it's probably an \"as-is\" codec like StringAsIsCodec. See the docs on codecs below.</p>\n</li>\n<li>\n<p dir=\"auto\">Figure out what the new key should be called, according to the naming convention documented below.</p>\n</li>\n<li>\n<p dir=\"auto\">You now have enough information to easily test your understanding. For Laminar, try using <code>htmlAttr</code> / <code>htmlProp</code> / <code>styleProp</code> / <code>eventProp</code> / etc. locally as <a href=\"https://laminar.dev/documentation#missing-keys\" rel=\"nofollow\">suggested here</a>. For example: <code>styleProp(\"gap\") := \"20px\"</code>. For other UI libraries using <em>Scala DOM Types</em>, see their docs.</p>\n</li>\n<li>\n<p dir=\"auto\">If everything is looking good, you can now add the information necessary to create an SDT definition for this key. Add it to one of the traits in the <a href=\"https://github.com/raquo/scala-dom-types/tree/master/shared/src/main/scala/com/raquo/domtypes/defs\">shared/main/.../defs</a> folder. Look at how other keys are done, and follow the lead. CSS props require a bit more annotation than others. Look at our defs for other CSS props of the same type to see which <code>valueTraits</code>, <code>valueUnits</code>, and <code>implName</code> to specify.</p>\n</li>\n<li>\n<p dir=\"auto\">Run <code>sbt test</code> before committing. This will make a few sanity checks, and generate sample code found in <a href=\"https://github.com/raquo/scala-dom-types/tree/master/js/src/test/scala/com/thirdparty/defs\">js/test/.../defs</a>. You should commit that generated code too.</p>\n</li>\n<li>\n<p dir=\"auto\">And that's it. Send this PR, and I'll check everything (<em>make sure to provide links to MDN docs!</em>). You are not blocked by SDT releases – just keep using the temporary syntax from step 6 until the thing you've added to SDT lands in Laminar / Calico / etc.</p>\n</li>\n</ol>\n<p dir=\"auto\">If this is too much for you right now, or if you're not sure about something, open an issue or ask on Laminar discord.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Why use <em>Scala DOM Types</em></h2><a id=\"user-content-why-use-scala-dom-types\" class=\"anchor\" aria-label=\"Permalink: Why use Scala DOM Types\" href=\"#why-use-scala-dom-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Canonical use case: you're writing a Scala or Scala.js library that does HTML / DOM construction / manipulation and want to provide a type-safe API like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"div(\n  zIndex := 9000,\n  h1(rel := &quot;title&quot;, &quot;Hello world&quot;),\n  p(\n    backgroundColor := &quot;red&quot;,\n    &quot;Welcome to my fancy page!&quot;,\n    span(draggable := true, &quot;Fancyness is important.&quot;)\n  ),\n  button(onClick := doFancyThing, &quot;Do Fancy Thing&quot;),\n  a(href := &quot;http://example.com&quot;, title := &quot;foo&quot;, &quot;Example&quot;)\n)\"><pre>div(\n  zIndex <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">9000</span>,\n  h1(rel <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello world<span class=\"pl-pds\">\"</span></span>),\n  p(\n    backgroundColor <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>red<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Welcome to my fancy page!<span class=\"pl-pds\">\"</span></span>,\n    span(draggable <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Fancyness is important.<span class=\"pl-pds\">\"</span></span>)\n  ),\n  button(onClick <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> doFancyThing, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Do Fancy Thing<span class=\"pl-pds\">\"</span></span>),\n  a(href <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://example.com<span class=\"pl-pds\">\"</span></span>, title <span class=\"pl-k\">:</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Example<span class=\"pl-pds\">\"</span></span>)\n)</pre></div>\n<p dir=\"auto\">Of course, your API doesn't need to look anything like this, that's just an example. <em>Scala DOM Types</em> doesn't actually provide the <strong><code>Tag.apply</code></strong> and <strong><code>:=</code></strong> methods that you'd need to make this example work.</p>\n<p dir=\"auto\">If you do in fact want to create similar syntax, see guidelines for library authors below.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">What about ScalaTags</h2><a id=\"user-content-what-about-scalatags\" class=\"anchor\" aria-label=\"Permalink: What about ScalaTags\" href=\"#what-about-scalatags\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><a href=\"http://www.lihaoyi.com/scalatags/\" rel=\"nofollow\">ScalaTags</a> is a popular Scala library that contains DOM type definitions similar to what we have here. However, <em>Scala DOM Types</em> is different in a few ways:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>More type safe</strong>. For example, in <em>Scala DOM Types</em> an <code>input</code> tag is linked to Scala.js <code>HTMLInputElement</code> class. This lets you provide exact types for the DOM nodes you create, so that you don't need to perform unsafe casts in your application code if you want to e.g. access the <code>value</code> property on an <code>input</code> you created. Similarly, all attributes, properties and styles are linked to the types that they accept to prevent you from assigning incorrect values.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>More flexible</strong>. <em>Scala DOM Types</em> does not tell you how to define your attributes / props / styles / tags, or how to compose them together, and does not enforce any rendering paradigm. You are free to implement your own composition. I see that some projects fork ScalaTags just to get the type definitions without everything else. <em>Scala DOM Types</em> does not get in your way, eliminating the need for such forking.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Better representation of native DOM types</strong>. <em>Scala DOM Types</em> handles Reflected Attributes consistently, and uses Codecs to properly encode/decode DOM values.</p>\n</li>\n</ul>\n<p dir=\"auto\">There are some other differences, for example <em>Scala DOM Types</em> uses camelCase for attr / prop / style names because that is consistent with common Scala style.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">What about scala-js-dom</h2><a id=\"user-content-what-about-scala-js-dom\" class=\"anchor\" aria-label=\"Permalink: What about scala-js-dom\" href=\"#what-about-scala-js-dom\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">The <a href=\"http://scala-js.github.io/scala-js-dom/\" rel=\"nofollow\">scala-js-dom</a> project serves a very different purpose – it provides typed Scala.js interfaces to native Javascript DOM classes such as <code>HTMLInputElement</code>. You can use those types when you already have instances of DOM elements, but you can not instantiate those types without using untyped methods like <code>document.createElement</code> because that is the only kind of API that Javascript provides for this.</p>\n<p dir=\"auto\">On the other hand, <em>Scala DOM Types</em> lets the consuming library create a type-safe <em>representation</em> of real JS DOM nodes or trees, and it is up to your library's code to instantiate real JS nodes from the provided description.</p>\n<p dir=\"auto\">Oh, and <em>Scala DOM Types</em> <strong>does</strong> work on the JVM. Obviously you can't get native JS types there, but you can provide your own replacements for specific Scala.js types, or just not bother with such specificity at all.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Design Goals</h2><a id=\"user-content-design-goals\" class=\"anchor\" aria-label=\"Permalink: Design Goals\" href=\"#design-goals\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">The purpose of <em>Scala DOM Types</em> is to become a standard DOM types library used in Scala.js projects.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Precise Types</h4><a id=\"user-content-precise-types\" class=\"anchor\" aria-label=\"Permalink: Precise Types\" href=\"#precise-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">The most important type information must be encoded as Scala types. For example, DOM properties that only accept integers should be typed as such.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Reasonably Precise Types</h4><a id=\"user-content-reasonably-precise-types\" class=\"anchor\" aria-label=\"Permalink: Reasonably Precise Types\" href=\"#reasonably-precise-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">The types we provide will never be perfect. For example, MDN has this to say about the <code>list</code> attribute:</p>\n<blockquote>\n<p dir=\"auto\">The value must be the id of a  element in the same document. [...] This attribute is ignored when the type attribute's value is hidden, checkbox, radio, file, or a button type.</p>\n</blockquote>\n<p dir=\"auto\">A far as I know, encoding such constraints as Scala types would be very hard, if it's even possible at all.</p>\n<p dir=\"auto\">This is not to say that we are content with the level of type safety we currently have in <em>Scala DOM Types</em>. Improvements are welcome as long as they provide significantly more value than burden to users of this library. This kind of thing is often subjective, so I suggest you open an issue for discussion first.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Flexibility</h4><a id=\"user-content-flexibility\" class=\"anchor\" aria-label=\"Permalink: Flexibility\" href=\"#flexibility\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><em>Scala DOM Types</em> is a low level library that is used by other libraries. As such, its API should be unopinionated and focused solely on providing useful data about DOM elements / attributes / etc. to consuming libraries in a way that is easy for them to implement.</p>\n<p dir=\"auto\">We achieve this with a code generation approach. Instead of providing Scala traits in a predefined format, we give you tools to generate such traits in your own library, with your desired data structures, types, naming conventions, etc.</p>\n<p dir=\"auto\">You can also use the raw element / attribute / etc. data contained <em>Scala DOM Types</em> yourself, whether at compile time or at runtime.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Sanity Preservation Measures</h4><a id=\"user-content-sanity-preservation-measures\" class=\"anchor\" aria-label=\"Permalink: Sanity Preservation Measures\" href=\"#sanity-preservation-measures\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">We should provide a better API than the DOM if we can do that in a way that keeps usage discoverable and unsurprising.</p>\n<p dir=\"auto\">Developers familiar with the DOM API should generally be able to discover the names of attributes / tags / etc. they need using IDE autocompletion (assuming they expect the names to match the DOM API). For example: <code>forId</code> is a good name for the <code>for</code> attribute. It avoids using a Scala reserved word, and it starts with <code>for</code> like the original attribute, so it's easy to find. It also implies what kind of string is expected for a value (an <code>id</code> of an element).</p>\n<p dir=\"auto\">Within that constraint, we should also try to clean up the more insane corners of the DOM API.</p>\n<ul dir=\"auto\">\n<li>For example, the difference between <code>value</code> attribute vs <code>value</code> property trips up even experienced developers all the time. Scala DOM Types on the other hand has a <code>defaultValue</code> reflected attribute and a <code>value</code> property, which behave the way everyone would expect from the given names or from their knowledge of the DOM API.</li>\n<li>For another example, enumerated attributes like <code>contentEditable</code> that in the DOM accept \"true\" / \"false\" or \"on\" / \"off\" or \"yes\" / \"no\" should be boolean attributes in <em>Scala DOM Types</em>.</li>\n</ul>\n<p dir=\"auto\">All naming differences with the DOM API should be documented in the README file (see below). Type differences are generally assumed to be self-documenting.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Documentation</h2><a id=\"user-content-documentation\" class=\"anchor\" aria-label=\"Permalink: Documentation\" href=\"#documentation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><a href=\"https://javadoc.io/doc/com.raquo/domtypes_sjs1_2.13/latest/com/raquo/domtypes/index.html\" rel=\"nofollow\">API doc</a></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">How to Use <em>Scala DOM Types</em> in Your Library</h3><a id=\"user-content-how-to-use-scala-dom-types-in-your-library\" class=\"anchor\" aria-label=\"Permalink: How to Use Scala DOM Types in Your Library\" href=\"#how-to-use-scala-dom-types-in-your-library\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">You generally don't want to use <em>Scala DOM Types</em> directly as the end-user. If you just want to generate some HTML on the backend or something similarly simple, you might want to use <a href=\"https://github.com/com-lihaoyi/scalatags\">ScalaTags</a> instead, or create a new library for that based on <em>Scala DOM Types</em> using the guide below.</p>\n<p dir=\"auto\">So, you're building a DOM manipulation library such as <a href=\"https://github.com/raquo/Laminar\">Laminar</a>, <a href=\"https://github.com/OutWatch/outwatch\">Outwatch</a> or <a href=\"https://github.com/japgolly/scalajs-react\">ScalaJS-React</a> (the former two use <em>Scala DOM Types</em>, the latter doesn't). This guide focuses on the Scala.js use case. <em>Scala DOM Types</em> is perfectly usable from the backend as well, but it will need more customization.</p>\n<p dir=\"auto\">First off, if you're building such a library, you need to know quite a few things about how JS DOM works. <em>Scala DOM Types</em> is just a collection of type information, it's not an abstraction layer for the DOM. <em>You're</em> building the abstraction layer. We can't cover everything about JS DOM here, but we will touch on some of the nastier parts in the following sections.</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Look at <a href=\"https://github.com/raquo/scala-dom-types/blob/master/shared/src/main/scala/com/raquo/domtypes/defs/eventProps/MouseEventPropDefs.scala\">MouseEventPropDefs</a> in <em>Scala DOM Types</em> – several of such listings contain all the data that this library offers. This particular file lists all the mouse-related events that you can handle in the DOM. We create such listings manually. See discussion in <a href=\"https://github.com/raquo/scala-dom-types/issues/87#issuecomment-1330332298\" data-hovercard-type=\"issue\" data-hovercard-url=\"/raquo/scala-dom-types/issues/87/hovercard\">#87</a> and <a href=\"https://github.com/raquo/scala-dom-types/issues/47\" data-hovercard-type=\"issue\" data-hovercard-url=\"/raquo/scala-dom-types/issues/47/hovercard\">#47</a> for why we don't generate these listings from some official source.</p>\n</li>\n<li>\n<p dir=\"auto\">The data in <code>MouseEventPropDefs</code> can be used as-is in certain cases, but typically we want to transform it into well typed Scala traits that look like <a href=\"https://github.com/raquo/scala-dom-types/blob/master/js/src/test/scala/com/thirdparty/defs/eventProps/GlobalEventProps.scala\">GlobalEventProps</a>. In fact, prior to <a href=\"https://github.com/raquo/scala-dom-types/issues/87\" data-hovercard-type=\"issue\" data-hovercard-url=\"/raquo/scala-dom-types/issues/87/hovercard\">#87</a>, such typed traits were the only format in which <em>Scala DOM Types</em> offered its data. For example, here's the old <a href=\"https://github.com/raquo/scala-dom-types/blob/v0.16.0-RC3/shared/src/main/scala/com/raquo/domtypes/generic/defs/eventProps/MouseEventProps.scala\">MouseEventProps</a> from <em>Scala DOM Types</em> version 0.16.0-RC3. As you can see, to make such a trait flexible enough for different libraries and runtimes, we had to use a lot of type params – not ideal, especially for end users who just want to see e.g. the type of events a certain key produces.</p>\n</li>\n<li>\n<p dir=\"auto\">The new version of <em>Scala DOM Types</em> relies on <strong>code generation</strong> to produce simple abstraction-free traits like <a href=\"https://github.com/raquo/scala-dom-types/blob/master/js/src/test/scala/com/thirdparty/defs/eventProps/GlobalEventProps.scala\">GlobalEventProps</a>, tailored for a specific UI library like Laminar. That <code>GlobalEventProps</code> file was in fact produced by this code generator as part of <em>Scala DOM Types</em> <a href=\"https://github.com/raquo/scala-dom-types/blob/master/jvm/src/test/scala/com/raquo/domtypes/GeneratorSpec.scala\">GeneratorSpec</a> test, and its output is verified in <a href=\"https://github.com/raquo/scala-dom-types/blob/master/js/src/test/scala/com/thirdparty/CompileSpec.scala\">CompileSpec</a>.</p>\n<p dir=\"auto\">Previously, <em>Scala DOM Types</em> offered highly abstracted traits as a runtime dependency of libraries like Laminar. Now, Laminar uses <em>Scala DOM Types</em> at compile time only, generating similar traits at compile time.</p>\n<p dir=\"auto\">In Laminar, the code generation is done in <a href=\"https://github.com/raquo/Laminar/blob/master/project/DomDefsGenerator.scala\">DomDefsGenerator</a>. As you see, the generator is customized with the names of Laminar's own types, package names, and desired folder structure. See Laminar's <a href=\"https://github.com/raquo/Laminar/blob/master/build.sbt\">build.sbt</a> and <a href=\"https://github.com/raquo/Laminar/blob/master/project/build.sbt\">project/build.sbt</a> for the compile-time generator build setup.</p>\n<p dir=\"auto\">You will need to create a similar generator setup for your library.</p>\n</li>\n<li>\n<p dir=\"auto\">There are several ways to customize <em>Scala DOM Types</em> code generation. Simpler ones first:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Provide different params to <code>CanonicalGenerator</code>'s constructor</p>\n</li>\n<li>\n<p dir=\"auto\">Provide different params to <code>CanonicalGenerator</code>'s <code>generate*Trait</code> methods</p>\n<p dir=\"auto\">(Including by transforming the list of defs that you pass to them)</p>\n</li>\n<li>\n<p dir=\"auto\">Instantiate <code>TraitGenerator</code> subclasses manually instead of calling <code>generate*Trait</code> methods</p>\n</li>\n<li>\n<p dir=\"auto\">Override <code>CanonicalGenerator</code>'s methods</p>\n</li>\n<li>\n<p dir=\"auto\">Extend individual <code>*TraitGenerator</code> classes, and override their methods</p>\n</li>\n<li>\n<p dir=\"auto\">Create your own generator, perhaps by extending <code>TraitGenerator</code> or <code>SourceGenerator</code></p>\n</li>\n</ol>\n<p dir=\"auto\">Typical usage of <em>Scala DOM Types</em> should not require overly-involved customization effort. If your Scala.js use case seems unnecessarily hard to achieve, please let me know.</p>\n</li>\n<li>\n<p dir=\"auto\">Provide the keys that are deliberately missing from <em>Scala DOM Types</em></p>\n<p dir=\"auto\">We deliberately do not include a small set of \"complex\" keys that UI libraries tend to have different opinions about, such as the <code>class</code> and <code>style</code> HTML attributes. See the full list below. Your library needs to provide such keys itself, for example see <a href=\"https://github.com/raquo/Laminar/blob/master/src/main/scala/com/raquo/laminar/defs/complex/ComplexHtmlKeys.scala\">ComplexHtmlKeys</a> and <a href=\"https://github.com/raquo/Laminar/blob/master/src/main/scala/com/raquo/laminar/defs/complex/ComplexSvgKeys.scala\">ComplexSvgKeys</a> in Laminar – those are not generated, but manually created.</p>\n</li>\n<li>\n<p dir=\"auto\">Provide the Codecs. These are used to translate between Scala values and DOM values. See <a href=\"https://github.com/raquo/Laminar/tree/master/src/main/scala/com/raquo/laminar/codecs\">codecs</a> in Laminar. Your implementation will be almost identical, depending on whether you talk to the DOM directly or via some virtual DOM library with special needs. See below for more info on the codecs.</p>\n</li>\n<li>\n<p dir=\"auto\">Provide concrete types for Tags, Attributes, etc., as well as their functionality (<code>apply</code> and <code>:=</code> methods, etc.). The type representing StyleProp should extend the <code>GlobalKeywords</code> generated style trait, or provide those keywords in some other way.</p>\n</li>\n<li>\n<p dir=\"auto\">Finally, create \"the bundle\". You've generated a bunch of well typed traits and created concrete types – now you need to instantiate a single object that will extend all those traits to expose all the keys like <code>div</code>, <code>onClick</code>, etc. The actual implementation of this might vary based on your preferences and on how you configured the generator, but you can refer to the top of the <a href=\"https://github.com/raquo/Laminar/blob/master/src/main/scala/com/raquo/laminar/api/Laminar.scala\">Laminar.scala</a> file. As you see, I separate HTML keys from SVG keys and ARIA keys to avoid name collisions and to reduce IDE autocomplete pollution. You can choose to do this differently, but that will require some customization on your part.</p>\n</li>\n<li>\n<p dir=\"auto\">With the generator, you're adding comments derived from <a href=\"https://developer.mozilla.org/en-US/\" rel=\"nofollow\">MDN</a> content into your project – those comments are licensed under the CC-BY-SA license, so you need to add a corresponding notice to your project file (or customize code generation to not include the comments for every key). See the bottom of this README.</p>\n</li>\n</ol>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Migrating to code generation from an older version of <em>Scala DOM Types</em></h3><a id=\"user-content-migrating-to-code-generation-from-an-older-version-of-scala-dom-types\" class=\"anchor\" aria-label=\"Permalink: Migrating to code generation from an older version of Scala DOM Types\" href=\"#migrating-to-code-generation-from-an-older-version-of-scala-dom-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Follow the guide above to set up a generator in your project as explained above</p>\n</li>\n<li>\n<p dir=\"auto\">There is no built-in support for <code>TypeTargetEvent</code> anymore – just native JS types.</p>\n<p dir=\"auto\">You can implement / customize that in your project if you wish, but this isn't useful enough IMO.</p>\n</li>\n<li>\n<p dir=\"auto\">CSS styles now have support for unit helpers – e.g. extensions like <code>paddingTop.px</code> or <code>width.calc(\"20px + 10%\")</code>, however you need to implement all that behaviour, and copy-paste the unit traits into your code – see the <a href=\"https://github.com/raquo/Laminar/tree/master/src/main/scala/com/raquo/laminar/defs/styles/units\">units</a> in Laminar for example.</p>\n</li>\n</ol>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Reflected Attributes</h3><a id=\"user-content-reflected-attributes\" class=\"anchor\" aria-label=\"Permalink: Reflected Attributes\" href=\"#reflected-attributes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">HTML attributes and DOM properties are different things. As a prerequisite for this section, please read <a href=\"https://stackoverflow.com/a/6004028/2601788\" rel=\"nofollow\">this StackOverflow answer</a> first.</p>\n<p dir=\"auto\">For more on this, read <a href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes\" rel=\"nofollow\">Section 2.6.1 of this DOM spec</a>. Note that it uses the term \"IDL attributes\" to refer to what we call \"DOM properties\", and \"Content attributes\" to refer to what we here call \"HTML attributes\".</p>\n<p dir=\"auto\">So with that knowledge, <code>id</code> for example is a reflected attribute. Setting and reading it works exactly the same way regardless of whether you're using the HTML attribute <code>id</code>, or the DOM property <code>id</code>. Such reflected attributes live in <code>ReflectedHtmlAttrs</code> trait, which lets you build either attributes or properties depending on what implementation of <code>ReflectedHtmlAttrBuilder</code> you provide.</p>\n<p dir=\"auto\">To keep you sane, <em>Scala DOM Types</em> reflected attributes also normalize the DOM API a bit. For example, there is no <code>value</code> attribute in <em>Scala DOM Types</em>. There is only <code>defaultValue</code> reflected attribute, which uses either the <code>value</code> HTML attribute or the <code>defaultValue</code> DOM property depending on how you implement <code>ReflectedHtmlAttrBuilder</code>. This is because that attribute and that property behave the same even though they're named differently in the DOM, whereas the <code>value</code> DOM property has different behaviour (see the StackOverflow answer linked above). A corresponding HTML attribute with such behaviour does not exist, so in Scala DOM Types the <code>value</code> prop is defined in trait <code>Props</code>. It is not an attribute, nor is it a reflected attribute.</p>\n<p dir=\"auto\">Reflected attributes may behave slightly differently depending on whether you implement them as props or attributes. For example, in HTML5 the <code>cols</code> reflected attribute has a default value of <code>20</code>. If you read the <code>col</code> property from an empty <code>&lt;textarea&gt;</code> element, you will get <code>20</code>. However, if you try to read the attribute <code>col</code>, you will get nothing because the attribute was never explicitly set.</p>\n<p dir=\"auto\">Note that Javascript DOM performs better for reading/writing DOM props than reading/writing HTML attributes.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Codecs</h3><a id=\"user-content-codecs\" class=\"anchor\" aria-label=\"Permalink: Codecs\" href=\"#codecs\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><em>Scala DOM Types</em> provides some normalization of the native HTML / DOM API, which is crazy in places.</p>\n<p dir=\"auto\">For example, there are a few ways to encode a boolean value into an HTML attribute:</p>\n<ol dir=\"auto\">\n<li>As presence of the attribute – if attribute is present, <code>true</code>, else <code>false</code>.</li>\n<li>As string \"true\" for true, or \"false\" for false</li>\n<li>As string \"yes\" for true, or \"no\" for false.</li>\n</ol>\n<p dir=\"auto\">Which one of those you need to use depends on the attribute. For example, attribute <code>disabled</code> needs option #1, but attribute <code>contenteditable</code> needs option #2. And then there are DOM Properties (as opposed to HTML Attributes) where booleans are encoded as actual booleans.</p>\n<p dir=\"auto\">Similarly, numbers are encoded as strings in attributes, with no such conversion when working with properties.</p>\n<p dir=\"auto\"><em>Scala DOM Types</em> coalesces all these differences using codecs. When implementing a function that builds an attribute, you get provided with the attribute's name (key), datatype, and a codec that knows how to encode / decode that datatype into a value that should be passed to Javascript's native DOM API.</p>\n<p dir=\"auto\">For example, the codecs for the three boolean options above are <code>BooleanAsPresence</code>, <code>BooleanAsTrueFalseString</code>, and <code>BooleanAsYesNoString</code>.</p>\n<p dir=\"auto\"><em>Scala DOM Types</em> provides a reference implementation of the codecs. Since you only use <em>Scala DOM Types</em> at <em>compile time</em>, you should copy-paste that implementation into your own library, instead of trying to load <em>Scala DOM Types</em> as a <em>runtime</em> dependency.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Complex Keys</h3><a id=\"user-content-complex-keys\" class=\"anchor\" aria-label=\"Permalink: Complex Keys\" href=\"#complex-keys\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Properties like <code>className</code> often require special handling in consuming libraries. For example, instead of a <code>String</code> based interface, you might want to offer a <code>Seq[String]</code> based one for <code>className</code>. Because there is little to standardize on, <em>Scala DOM Types</em> deliberately does not provide those keys anymore. You need to add them to your library manually.</p>\n<p dir=\"auto\">List of complex keys:</p>\n<ul dir=\"auto\">\n<li><code>class</code>, <code>role</code>, <code>rel</code>, <code>style</code> HTML attributes</li>\n<li><code>data-*</code> HTML attributes</li>\n<li><code>class</code> and <code>rel</code> SVG attributes</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Naming Differences Compared To Native HTML &amp; DOM</h3><a id=\"user-content-naming-differences-compared-to-native-html--dom\" class=\"anchor\" aria-label=\"Permalink: Naming Differences Compared To Native HTML &amp; DOM\" href=\"#naming-differences-compared-to-native-html--dom\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Although each library using <em>Scala DOM Types</em> is free to generate whatever code it wants, we provide a canonical <code>scalaName</code> for every key that we recommend using. It is sometimes different from the native DOM name (<code>domName</code>).</p>\n<p dir=\"auto\">Below are the <code>scalaName</code>-s of the DOM attributes / props / etc. For the record, Laminar uses these names verbatim.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">General</h4><a id=\"user-content-general\" class=\"anchor\" aria-label=\"Permalink: General\" href=\"#general\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>All <code>scalaName</code> identifiers are camelCased for consistency with conventional Scala style, e.g. <code>datalist</code> domName translates to <code>dataList</code> scalaName.</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Attributes &amp; Props</h4><a id=\"user-content-attributes--props\" class=\"anchor\" aria-label=\"Permalink: Attributes &amp; Props\" href=\"#attributes--props\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li><code>value</code> <strong>attribute</strong> is named <code>defaultValue</code> because native HTML naming is misleading and confusing (<a href=\"https://stackoverflow.com/a/6004028/2601788\" rel=\"nofollow\">example</a>)\n<ul dir=\"auto\">\n<li>Note that the <code>value</code> <strong>property</strong> retains its name</li>\n</ul>\n</li>\n<li><code>checked</code> <strong>attribute</strong> is named <code>defaultChecked</code> for the same reason\n<ul dir=\"auto\">\n<li>Note that the <code>checked</code> <strong>property</strong> retains its name</li>\n</ul>\n</li>\n<li><code>selected</code> <strong>attribute</strong> is named <code>defaultSelected</code> for the same reason\n<ul dir=\"auto\">\n<li>Note that the <code>selected</code> <strong>property</strong> retains its name</li>\n</ul>\n</li>\n<li><code>for</code> attribute and <code>htmlFor</code> property are available as reflected attribute <code>forId</code> for consistency and to avoid Scala reserved word</li>\n<li><code>id</code> reflected attribute is named <code>idAttr</code>, <code>max</code> attribute is <code>maxAttr</code>, <code>min</code> is <code>minAttr</code>, and <code>step</code> is <code>stepAttr</code> to free up good names for end user code</li>\n<li><code>name</code> attribute is named <code>nameAttr</code> to free up a good name</li>\n<li><code>offset</code> and <code>result</code> SVG attributes are named <code>offsetAttr</code> and <code>resultAttr</code> respectively to free up good names for end user code</li>\n<li><code>loading</code> reflected HTML attribute is named <code>loadingAttr</code> to avoid using a good name</li>\n<li><code>content</code> attribute is named <code>contentAttr</code> to avoid using a common name</li>\n<li><code>form</code> attribute is named <code>formId</code> to avoid conflict with <code>form</code> tag</li>\n<li><code>label</code> attribute is named <code>labelAttr</code> to avoid conflict with <code>label</code> tag</li>\n<li><code>height</code> attribute is named <code>heightAttr</code> to avoid conflict with <code>height</code> CSS property</li>\n<li><code>width</code> attribute is named <code>widthAttr</code> to avoid conflict with <code>width</code> CSS property</li>\n<li><code>list</code> attribute is named <code>listId</code> for clarity and consistency</li>\n<li><code>contextmenu</code> attribute is named <code>contextMenuId</code> for clarity and consistency</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">CSS Style Props</h4><a id=\"user-content-css-style-props\" class=\"anchor\" aria-label=\"Permalink: CSS Style Props\" href=\"#css-style-props\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li><code>content</code> prop is named <code>contentCss</code> to avoid using a common name</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Tags</h4><a id=\"user-content-tags\" class=\"anchor\" aria-label=\"Permalink: Tags\" href=\"#tags\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Many tag names have a \"Tag\" suffix, usually to free up good names for end user code, or avoid some conflict, e.g.:\n<ul dir=\"auto\">\n<li><code>html</code> -&gt; <code>htmlRootTag</code>, <code>style</code> -&gt; <code>styleTag</code>, <code>link</code> -&gt; <code>linkTag</code>, <code>param</code> -&gt; <code>paramTag</code>, <code>map</code> -&gt; <code>mapTag</code>, <code>title</code> -&gt; <code>titleTag</code>, etc.</li>\n</ul>\n</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Aliases</h4><a id=\"user-content-aliases\" class=\"anchor\" aria-label=\"Permalink: Aliases\" href=\"#aliases\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li>Attribute <code>type</code> == <code>typ</code> == <code>tpe</code> to avoid Scala reserved word</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Special keys</h4><a id=\"user-content-special-keys\" class=\"anchor\" aria-label=\"Permalink: Special keys\" href=\"#special-keys\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Certain special keys are not defined in <em>Scala DOM Types</em>, and are left for the consuming library to define. Of those, typically:</p>\n<ul dir=\"auto\">\n<li><code>class</code> attribute is named <code>className</code> and aliased as <code>cls</code></li>\n<li>the <code>style</code> attribute is named <code>styleAttr</code></li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">My Related Projects</h2><a id=\"user-content-my-related-projects\" class=\"anchor\" aria-label=\"Permalink: My Related Projects\" href=\"#my-related-projects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/raquo/Laminar\">Laminar</a> – Reactive UI library based on <em>Scala DOM Types</em></li>\n<li><a href=\"https://github.com/raquo/scala-dom-testutils\">Scala DOM TestUtils</a> – Test that your Javascript DOM nodes match your expectations</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Author</h2><a id=\"user-content-author\" class=\"anchor\" aria-label=\"Permalink: Author\" href=\"#author\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Nikita Gazarov – <a href=\"https://twitter.com/raquo\" rel=\"nofollow\">@raquo</a></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">License and Credits</h2><a id=\"user-content-license-and-credits\" class=\"anchor\" aria-label=\"Permalink: License and Credits\" href=\"#license-and-credits\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><em>Scala DOM Types</em> is provided under the <a href=\"https://github.com/raquo/scala-dom-types/blob/master/LICENSE.md\">MIT license</a>.</p>\n<p dir=\"auto\">Files in the <a href=\"https://github.com/raquo/scala-dom-types/tree/master/shared/src/main/scala/com/raquo/domtypes/defs\"><code>defs</code></a> directory contain listings of DOM element tags, attributes, props, styles, etc. – Those were originally adapted from Li Haoyi's <a href=\"http://www.lihaoyi.com/scalatags/#License\" rel=\"nofollow\">ScalaTags</a>, which is also MIT licensed.</p>\n<p dir=\"auto\">Comments pertaining to individual DOM element tags, attributes, properties and event properties, as well as CSS properties and their special values / keywords, are taken or derived from content created by Mozilla Contributors and are licensed under Creative Commons Attribution-ShareAlike license (CC-BY-SA), v2.5.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "raquo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/532656?v=4",
        "url" : "https://github.com/raquo",
        "contributions" : 355
      },
      {
        "login" : "cornerman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1043127?v=4",
        "url" : "https://github.com/cornerman",
        "contributions" : 25
      },
      {
        "login" : "armanbilge",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3119428?v=4",
        "url" : "https://github.com/armanbilge",
        "contributions" : 8
      },
      {
        "login" : "doofin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6041353?v=4",
        "url" : "https://github.com/doofin",
        "contributions" : 4
      },
      {
        "login" : "nikita-wcsc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/47929933?v=4",
        "url" : "https://github.com/nikita-wcsc",
        "contributions" : 3
      },
      {
        "login" : "busti",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3575167?v=4",
        "url" : "https://github.com/busti",
        "contributions" : 2
      },
      {
        "login" : "nghuuphuoc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4226036?v=4",
        "url" : "https://github.com/nghuuphuoc",
        "contributions" : 2
      },
      {
        "login" : "Lasering",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5956311?v=4",
        "url" : "https://github.com/Lasering",
        "contributions" : 2
      },
      {
        "login" : "ajaychandran",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4387263?v=4",
        "url" : "https://github.com/ajaychandran",
        "contributions" : 1
      },
      {
        "login" : "ajablonski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2461496?v=4",
        "url" : "https://github.com/ajablonski",
        "contributions" : 1
      },
      {
        "login" : "FabioPinheiro",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4622245?v=4",
        "url" : "https://github.com/FabioPinheiro",
        "contributions" : 1
      },
      {
        "login" : "fdietze",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1186516?v=4",
        "url" : "https://github.com/fdietze",
        "contributions" : 1
      },
      {
        "login" : "yurique",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/919230?v=4",
        "url" : "https://github.com/yurique",
        "contributions" : 1
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://github.com/lolgab",
        "contributions" : 1
      },
      {
        "login" : "mariusmuja",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/695669?v=4",
        "url" : "https://github.com/mariusmuja",
        "contributions" : 1
      },
      {
        "login" : "mprihoda",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/279221?v=4",
        "url" : "https://github.com/mprihoda",
        "contributions" : 1
      },
      {
        "login" : "cyz1901",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/36350890?v=4",
        "url" : "https://github.com/cyz1901",
        "contributions" : 1
      },
      {
        "login" : "weihsiu",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/31003?v=4",
        "url" : "https://github.com/weihsiu",
        "contributions" : 1
      },
      {
        "login" : "zakpatterson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1987109?v=4",
        "url" : "https://github.com/zakpatterson",
        "contributions" : 1
      },
      {
        "login" : "deterdw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/618912?v=4",
        "url" : "https://github.com/deterdw",
        "contributions" : 1
      },
      {
        "login" : "felher",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/622354?v=4",
        "url" : "https://github.com/felher",
        "contributions" : 1
      },
      {
        "login" : "ioleo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1419884?v=4",
        "url" : "https://github.com/ioleo",
        "contributions" : 1
      }
    ],
    "commits" : 415,
    "topics" : [
      "elements",
      "css",
      "scalajs",
      "dom",
      "attributes",
      "properties",
      "events",
      "scala-js",
      "html"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "openIssues" : [
      {
        "number" : 103,
        "title" : "Consider publishing an SBT Plugin?",
        "url" : "https://github.com/raquo/scala-dom-types/issues/103"
      },
      {
        "number" : 97,
        "title" : "Publish defs (and generators?) for popular web component libraries, e.g. UI5, Material",
        "url" : "https://github.com/raquo/scala-dom-types/issues/97"
      },
      {
        "number" : 96,
        "title" : "Add info about supported tags to props/attrs",
        "url" : "https://github.com/raquo/scala-dom-types/issues/96"
      },
      {
        "number" : 82,
        "title" : "Add flow-relative CSS properties",
        "url" : "https://github.com/raquo/scala-dom-types/issues/82"
      },
      {
        "number" : 53,
        "title" : "Discussion about lazy val definitions",
        "url" : "https://github.com/raquo/scala-dom-types/issues/53"
      },
      {
        "number" : 47,
        "title" : "Automatically generate dom types",
        "url" : "https://github.com/raquo/scala-dom-types/issues/47"
      },
      {
        "number" : 29,
        "title" : "Docs: Add MDN docs to SVG attributes",
        "url" : "https://github.com/raquo/scala-dom-types/issues/29"
      },
      {
        "number" : 13,
        "title" : "Track parent tag of properties",
        "url" : "https://github.com/raquo/scala-dom-types/issues/13"
      }
    ],
    "scalaPercentage" : 100,
    "license" : "MIT",
    "commitActivity" : [
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : null,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "xml-html-and-dom",
    "chatroom" : null
  }
}