{
  "organization" : "karols",
  "repository" : "units",
  "creationDate" : 1404165782000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644285881879
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : "Flexible, statically-checked experimental library for units of measurement",
    "logo" : "https://avatars.githubusercontent.com/u/1790750?v=4",
    "stars" : 23,
    "forks" : 2,
    "watchers" : 9,
    "issues" : 2,
    "creationDate" : 1358993288000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-units\" class=\"anchor\" aria-hidden=\"true\" href=\"#units\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>units</h1>\n<p dir=\"auto\"><strong>Flexible, statically-checked experimental library for units of measurement.</strong></p>\n<p dir=\"auto\">Published under MIT License.</p>\n<h2 dir=\"auto\"><a id=\"user-content-current-version-022\" class=\"anchor\" aria-hidden=\"true\" href=\"#current-version-022\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Current version: 0.2.2</h2>\n<p dir=\"auto\"><a href=\"CHANGELOG.md\">Changelog.</a></p>\n<p dir=\"auto\"><a href=\"doc/TODO.md\">Plans for the nearest future.</a></p>\n<p dir=\"auto\"><a href=\"doc/BUILD.md\">Build instructions.</a></p>\n<p dir=\"auto\">Available at Maven Central:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;io.github.karols&quot; %% &quot;units&quot; % &quot;0.2.2&quot;\"><pre><code>libraryDependencies += \"io.github.karols\" %% \"units\" % \"0.2.2\"\n</code></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-features\" class=\"anchor\" aria-hidden=\"true\" href=\"#features\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Features</h2>\n<p dir=\"auto\"><a href=\"doc/RATIONALE.md\">Reasons for creation and design goals.</a></p>\n<p dir=\"auto\">Main features:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">static, compile-time checking of units of measure</p>\n</li>\n<li>\n<p dir=\"auto\">ability to define custom units of measure</p>\n</li>\n<li>\n<p dir=\"auto\">unit arithmetic</p>\n</li>\n<li>\n<p dir=\"auto\">automatic unit conversions</p>\n</li>\n<li>\n<p dir=\"auto\">many out-of-the-box supported units and their conversions</p>\n</li>\n<li>\n<p dir=\"auto\">support for affine spaces</p>\n</li>\n</ul>\n<p dir=\"auto\">A quick comparison with the units of measure support in F# is <a href=\"doc/FSHARP.md\">here</a>.</p>\n<h1 dir=\"auto\"><a id=\"user-content-quick-showcase\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-showcase\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick showcase</h1>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.github.karols.units._\nimport io.github.karols.units.defining._\n\ntype USD = DefineUnit[_U~:_S~:_D] \ntype EUR = DefineUnit[_E~:_U~:_R] \n\nimplicit val EUR_to_USD = one[EUR].contains(1.25)[USD]\n\nimport io.github.karols.units.SI._\nimport io.github.karols.units.USCustomary._\n\nval priceInUSA     =  200.of[USD/square[foot]]\nval priceInGermany = 1500.of[EUR/square[metre]]\n\nval area = 200.of[centimetre] * 550.of[centimetre]\n\nval costInUSA     = priceInUSA     * area.convert[foot × foot]\nval costInGermany = priceInGermany * area.convert[metre × metre]\n\nprintln(s&quot;You can buy tiles in Germany for ${costInGermany.mkString}.&quot;)\nprintln(s&quot;You can buy tiles in USA for ${costInUSA.mkString}.&quot;)\n\nif(costInUSA &gt;~ costInGermany) {\n    println(&quot;Buy in Germany.&quot;)\n} else {\n    println(&quot;Buy in USA.&quot;)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">defining</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">USD</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_U<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_S<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_D] \n<span class=\"pl-k\">type</span> <span class=\"pl-en\">EUR</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_E<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_U<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_R] \n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">EUR_to_USD</span> <span class=\"pl-k\">=</span> one[<span class=\"pl-en\">EUR</span>].contains(<span class=\"pl-c1\">1.25</span>)[<span class=\"pl-en\">USD</span>]\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">SI</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">USCustomary</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">priceInUSA</span>     <span class=\"pl-k\">=</span>  <span class=\"pl-c1\">200</span>.of[<span class=\"pl-en\">USD</span><span class=\"pl-k\">/</span>square[foot]]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">priceInGermany</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1500</span>.of[<span class=\"pl-en\">EUR</span><span class=\"pl-k\">/</span>square[metre]]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">area</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">200</span>.of[centimetre] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">550</span>.of[centimetre]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">costInUSA</span>     <span class=\"pl-k\">=</span> priceInUSA     <span class=\"pl-k\">*</span> area.convert[foot × foot]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">costInGermany</span> <span class=\"pl-k\">=</span> priceInGermany <span class=\"pl-k\">*</span> area.convert[metre × metre]\n\nprintln(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">You can buy tiles in Germany for </span>${costInGermany.mkString}<span class=\"pl-s\">.</span><span class=\"pl-s\">\"</span>)\nprintln(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span><span class=\"pl-s\">You can buy tiles in USA for </span>${costInUSA.mkString}<span class=\"pl-s\">.</span><span class=\"pl-s\">\"</span>)\n\n<span class=\"pl-k\">if</span>(costInUSA <span class=\"pl-k\">&gt;</span><span class=\"pl-k\">~</span> costInGermany) {\n    println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Buy in Germany.<span class=\"pl-pds\">\"</span></span>)\n} <span class=\"pl-k\">else</span> {\n    println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Buy in USA.<span class=\"pl-pds\">\"</span></span>)\n}</pre></div>\n<p dir=\"auto\">prints:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"You can buy tiles in Germany for 16500.0 EUR.\nYou can buy tiles in USA for 23680.602916761392 USD.\nBuy in Germany.\"><pre><code>You can buy tiles in Germany for 16500.0 EUR.\nYou can buy tiles in USA for 23680.602916761392 USD.\nBuy in Germany.\n</code></pre></div>\n<h1 dir=\"auto\"><a id=\"user-content-quick-guide\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-guide\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick Guide</h1>\n<h2 dir=\"auto\"><a id=\"user-content-defining-units\" class=\"anchor\" aria-hidden=\"true\" href=\"#defining-units\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Defining units</h2>\n<p dir=\"auto\">You define a unit using <code>DefineUnit</code> type constructor with a type-level string as a parameter.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.github.karols.units._\nimport io.github.karols.units.defining._\n\ntype metre = DefineUnit[_m]\ntype second = DefineUnit[_s]\ntype kilogram = DefineUnit[ _k ~: _g ]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">defining</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">metre</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_m]\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">second</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_s]\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">kilogram</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[ _k <span class=\"pl-k\">~</span><span class=\"pl-k\">:</span> _g ]</pre></div>\n<p dir=\"auto\">All units are subtypes of trait <code>MUnit</code>. This includes the type <code>_1</code>, which represents the dimensionless unit 1.</p>\n<p dir=\"auto\">This also automatically generates implicit names for those units: <code>\"m\"</code>, <code>\"s\"</code>, and <code>\"kg\"</code> respectively.</p>\n<p dir=\"auto\">You can define a derived unit with operators <code>×</code> and <code>/</code> (the ASCII alternative for <code>×</code> is <code>&gt;&lt;</code>) and type-level functions <code>square</code> and <code>cube</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type newton = (metre × kilogram) / (second × second)\ntype hertz  = _1 / second\ntype m2     = square[metre]\ntype m3     = cube[metre]\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">newton</span> <span class=\"pl-k\">=</span> (metre × kilogram) <span class=\"pl-k\">/</span> (second × second)\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">hertz</span>  <span class=\"pl-k\">=</span> _1 <span class=\"pl-k\">/</span> second\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">m2</span>     <span class=\"pl-k\">=</span> square[metre]\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">m3</span>     <span class=\"pl-k\">=</span> cube[metre]</pre></div>\n<p dir=\"auto\">with implicit names <code>\"kg m s^(-2)\"</code>, <code>\"s^(-1)\"</code>, <code>\"m^2\"</code>, and <code>\"m^3\"</code> respectively.</p>\n<p dir=\"auto\">You can define a related unit with conversion ratio:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"type centimetre = DefineUnit[_c~:_m]\ntype kilometre = DefineUnit[_k~:_m]\n\nimplicit val km_to_m = one[kilometre].contains(1000)[metre]\nimplicit val m_to_cm = one[metre].contains(100)[centimetre]\"><pre><span class=\"pl-k\">type</span> <span class=\"pl-en\">centimetre</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_c<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_m]\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">kilometre</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_k<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_m]\n\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">km_to_m</span> <span class=\"pl-k\">=</span> one[kilometre].contains(<span class=\"pl-c1\">1000</span>)[metre]\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">m_to_cm</span> <span class=\"pl-k\">=</span> one[metre].contains(<span class=\"pl-c1\">100</span>)[centimetre]</pre></div>\n<p dir=\"auto\">This way, you have defined conversions m→km, km→m, m→cm, cm→m, m²→km², m³→km³, km²→m² etc.</p>\n<p dir=\"auto\">Note that this does not define a conversion from kilometres to centimetres. You can do it this way:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val km_to_cm = km_to_m &gt;&gt; m_to_cm\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">km_to_cm</span> <span class=\"pl-k\">=</span> km_to_m <span class=\"pl-k\">&gt;&gt;</span> m_to_cm</pre></div>\n<p dir=\"auto\">You can also quickly generate conversions for kg×m→kg×cm, m/s→cm/s, J/m→J/cm, N/m²→N/cm²:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val kgm_to_kgcm = m_to_cm.times[kilogram]\nimplicit val mps_to_cmps = m_to_cm.dividedBy[second]\nimplicit val Jpm_to_Jpcm = m_to_cm.dividing[joule]\nimplicit val Npm2_to_Npcm2 = m_to_cm.pow2.dividing[newton]\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">kgm_to_kgcm</span> <span class=\"pl-k\">=</span> m_to_cm.times[kilogram]\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">mps_to_cmps</span> <span class=\"pl-k\">=</span> m_to_cm.dividedBy[second]\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">Jpm_to_Jpcm</span> <span class=\"pl-k\">=</span> m_to_cm.dividing[joule]\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">Npm2_to_Npcm2</span> <span class=\"pl-k\">=</span> m_to_cm.pow2.dividing[newton]</pre></div>\n<p dir=\"auto\">See sources for <code>io.github.karols.units.SI</code> and <code>io.github.karols.units.USCustomary</code> objects for more examples.</p>\n<h2 dir=\"auto\"><a id=\"user-content-using-values-with-units\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-values-with-units\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using values with units</h2>\n<p dir=\"auto\">All code below assumes the following is imported:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.github.karols.units._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">You can create a value with a unit:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val length = 2.of[metre]\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>.of[metre]</pre></div>\n<p dir=\"auto\">This value is of type <code>IntU[metre]</code>. If you used a double literal, you would receive a <code>DoubleU</code> instance:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val length2 = 2.0.of[metre]\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">length2</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2.0</span>.of[metre]</pre></div>\n<p dir=\"auto\"><code>IntU</code> and <code>DoubleU</code> are represented at runtime as an unboxed <code>Long</code> and <code>Double</code> respectively.</p>\n<p dir=\"auto\">You can add and subtract values with the same units:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length + length2 // equals 4 m\"><pre>length <span class=\"pl-k\">+</span> length2 <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 4 m</span></pre></div>\n<p dir=\"auto\">You can multiply or divide two values:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length * length2 // equals 4 m^2\"><pre>length <span class=\"pl-k\">*</span> length2 <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 4 m^2</span></pre></div>\n<p dir=\"auto\">You can also compare values with the same units:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val area = 3.of[metre × metre]\narea &gt; length * length2        //equals false\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">area</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>.of[metre × metre]\narea <span class=\"pl-k\">&gt;</span> length <span class=\"pl-k\">*</span> length2        <span class=\"pl-c\"><span class=\"pl-c\">//</span>equals false</span></pre></div>\n<p dir=\"auto\">If you want to extract the raw dimensionless numeric value from the value with a unit, you can use value method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length.value // equals 2: Long\"><pre>length.value <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 2: Long</span></pre></div>\n<p dir=\"auto\">Other useful methods include raising to powers and getting roots:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length.pow2             // 4 m^2\nlength.pow3             // 8 m^3\narea.sqrt               // 1.7... m\n27.of[cube[metre]].cbrt // 3.0 m\"><pre>length.pow2             <span class=\"pl-c\"><span class=\"pl-c\">//</span> 4 m^2</span>\nlength.pow3             <span class=\"pl-c\"><span class=\"pl-c\">//</span> 8 m^3</span>\narea.sqrt               <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1.7... m</span>\n<span class=\"pl-c1\">27</span>.of[cube[metre]].cbrt <span class=\"pl-c\"><span class=\"pl-c\">//</span> 3.0 m</span></pre></div>\n<p dir=\"auto\">Note that while using <code>sqrt</code> (respectively: <code>cbrt</code>) method will currently work for types with units to odd (respectively: not divisible by three) powers, but the resulting value will have some ill-defined type.</p>\n<p dir=\"auto\">If you want to use an SI prefix without creating a separate unit for it, you can use more extension methods defined on numeric types:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"20.kilo[metre]  // equals 20000 m\n3.milli[second] // equals 0.003 s\"><pre><span class=\"pl-c1\">20</span>.kilo[metre]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 20000 m</span>\n<span class=\"pl-c1\">3</span>.milli[second] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 0.003 s</span></pre></div>\n<p dir=\"auto\">Finally, to print a value with a unit, you can use <code>mkString</code> method:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length.mkString               // equals &quot;4 m&quot;\n300.of[metre/second].mkString // equals &quot;300 m s^(-1)&quot;\"><pre>length.mkString               <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals \"4 m\"</span>\n<span class=\"pl-c1\">300</span>.of[metre<span class=\"pl-k\">/</span>second].mkString <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals \"300 m s^(-1)\"</span></pre></div>\n<p dir=\"auto\">It is currently not recommended though, it takes a lot of time to compile and generates awfully large classfiles. The recommended way is to use <code>value</code> method and append a unit symbol manually.</p>\n<p dir=\"auto\"><a href=\"doc/CUSTOM.md\">Section about using custom numeric types with units has been moved here.</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-manual-unit-conversion\" class=\"anchor\" aria-hidden=\"true\" href=\"#manual-unit-conversion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Manual unit conversion</h2>\n<p dir=\"auto\">You can convert a value to another unit, provided there is an implicit conversion ratio in scope:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val length = 2.of[metre]\nlength.convert[centimetre]          // equals 200.0 cm\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>.of[metre]\nlength.convert[centimetre]          <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 200.0 cm</span></pre></div>\n<p dir=\"auto\">If you are converting an integer value from a unit to its subunit, you can get the results as an <code>IntU</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length.convertToInt[centimetre]     // equals 200 cm\"><pre>length.convertToInt[centimetre]     <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 200 cm</span></pre></div>\n<p dir=\"auto\">You can apply the conversion ratio to a more complicated unit in order to replace one unit with another:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"length.represent[metre, centimetre] // equals 200.0 cm\narea.represent[metre, centimetre]   // equals 300.0 cm×m\n1.represent[metre, centimetre]      // equals 100.0 cm/m\"><pre>length.represent[metre, centimetre] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 200.0 cm</span>\narea.represent[metre, centimetre]   <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 300.0 cm×m</span>\n<span class=\"pl-c1\">1</span>.represent[metre, centimetre]      <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 100.0 cm/m</span></pre></div>\n<p dir=\"auto\">Finally, you can apply the conversion to all occurrences of a unit inside another. The only restriction is that the unit you are converting from is a basic unit, defined with <code>DefineUnit</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"area.representAll[metre, centimetre]                              // equals 30000.0 cm^2\n1.representAll[metre, centimetre]                                 // equals 1.0\n2.of[metre/second].representAll[metre, centimetre]                // equals 200.0 cm/s\n2.of[square[metre]/second].representAll[metre, centimetre]        // equals 20000.0 cm^2/s\n30000000.of[kilogram/cube[metre]].representAll[metre, centimetre] // equals 30.0 kg/cm^3\"><pre>area.representAll[metre, centimetre]                              <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 30000.0 cm^2</span>\n<span class=\"pl-c1\">1</span>.representAll[metre, centimetre]                                 <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 1.0</span>\n<span class=\"pl-c1\">2</span>.of[metre<span class=\"pl-k\">/</span>second].representAll[metre, centimetre]                <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 200.0 cm/s</span>\n<span class=\"pl-c1\">2</span>.of[square[metre]<span class=\"pl-k\">/</span>second].representAll[metre, centimetre]        <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 20000.0 cm^2/s</span>\n<span class=\"pl-c1\">30000000</span>.of[kilogram<span class=\"pl-k\">/</span>cube[metre]].representAll[metre, centimetre] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 30.0 kg/cm^3</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-automatic-unit-conversion\" class=\"anchor\" aria-hidden=\"true\" href=\"#automatic-unit-conversion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Automatic unit conversion</h2>\n<p dir=\"auto\">Units are automatically converted in comparisons when using operators ending with a tilde:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"399.of[centimetre] &gt;=~ 4.of[metre]   // false\"><pre><span class=\"pl-c1\">399</span>.of[centimetre] <span class=\"pl-k\">&gt;=</span><span class=\"pl-k\">~</span> <span class=\"pl-c1\">4</span>.of[metre]   <span class=\"pl-c\"><span class=\"pl-c\">//</span> false</span></pre></div>\n<p dir=\"auto\">If there is an integer conversion ratio between two units, then adding/subtracting two values with those units converts the sum/difference to the smaller unit:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"14.of[centimetre] + 3.of[metre]  // equals 314 cm, not 3.14 m\"><pre><span class=\"pl-c1\">14</span>.of[centimetre] <span class=\"pl-k\">+</span> <span class=\"pl-c1\">3</span>.of[metre]  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 314 cm, not 3.14 m</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-affine-spaces\" class=\"anchor\" aria-hidden=\"true\" href=\"#affine-spaces\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Affine spaces</h2>\n<p dir=\"auto\">Affine space is a space of quantities which cannot be multiplied or added, only subtracted. The reason for that is that the zero is chosen arbitrarily. Affine spaces are used to represent temperatures, timestamps, Cartesian coordinates, potential energy, electric potential, and more. See <a href=\"http://math.ucr.edu/home/baez/torsors.html\" rel=\"nofollow\">this article</a> for more info.</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val freezeC = 0.at[CelsiusScale] // temperature at which water freezes\n0.of[celsius_deg]                // zero difference of temperatures\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">freezeC</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>.at[<span class=\"pl-en\">CelsiusScale</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> temperature at which water freezes</span>\n<span class=\"pl-c1\">0</span>.of[celsius_deg]                <span class=\"pl-c\"><span class=\"pl-c\">//</span> zero difference of temperatures</span></pre></div>\n<p dir=\"auto\">Affine values have types <code>DoubleA[A]</code> and <code>IntA[A]</code>, where <code>A</code> is an affine space.</p>\n<p dir=\"auto\">The reason that you can't add affine values is that this operation makes no sense.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val freezeF = freezeC.convert[FahrenheitScale] // equals 32°F\nfreezeC + freezeC                              // 0°C + 0°C == does not compile\nfreezeF + freezeF                              // 32°F + 32°F == does not compile\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">freezeF</span> <span class=\"pl-k\">=</span> freezeC.convert[<span class=\"pl-en\">FahrenheitScale</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 32°F</span>\nfreezeC <span class=\"pl-k\">+</span> freezeC                              <span class=\"pl-c\"><span class=\"pl-c\">//</span> 0°C + 0°C == does not compile</span>\nfreezeF <span class=\"pl-k\">+</span> freezeF                              <span class=\"pl-c\"><span class=\"pl-c\">//</span> 32°F + 32°F == does not compile</span></pre></div>\n<p dir=\"auto\">In the above case, if we assumed naïvely that we can add temperatures, the first sum would end up being 0°C, and the second one would be 64°F – clearly two different results.</p>\n<p dir=\"auto\">You can add/subtract normal values to/from affine values:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val temperatureIncreaseC = 5.of[celsius_deg]                            // equals +5°C\nval temperatureIncreaseF = temperatureIncreaseC.convert[fahrenheit_deg] // equals +9°F\n\nfreezeC + temperatureIncreaseC  // equals 5°C\nfreezeF + temperatureIncreaseF  // equals 41°F == 5°C\nfreezeC - temperatureIncreaseC  // equals -5°C\nfreezeF - temperatureIncreaseF  // equals 23°F == -5°C\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">temperatureIncreaseC</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>.of[celsius_deg]                            <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals +5°C</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">temperatureIncreaseF</span> <span class=\"pl-k\">=</span> temperatureIncreaseC.convert[fahrenheit_deg] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals +9°F</span>\n\nfreezeC <span class=\"pl-k\">+</span> temperatureIncreaseC  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 5°C</span>\nfreezeF <span class=\"pl-k\">+</span> temperatureIncreaseF  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 41°F == 5°C</span>\nfreezeC <span class=\"pl-k\">-</span> temperatureIncreaseC  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals -5°C</span>\nfreezeF <span class=\"pl-k\">-</span> temperatureIncreaseF  <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 23°F == -5°C</span></pre></div>\n<p dir=\"auto\">You can also calculate a difference between two affine values, which yields a normal value:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val boilC = 100.at[CelsiusScale] // equals 100°C == 212°F\nval diffC = boilC -- freezeC     // equals +100°C == +180°F\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">boilC</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>.at[<span class=\"pl-en\">CelsiusScale</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 100°C == 212°F</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">diffC</span> <span class=\"pl-k\">=</span> boilC <span class=\"pl-k\">--</span> freezeC     <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals +100°C == +180°F</span></pre></div>\n<p dir=\"auto\">The operator name is double minus sign, because single minus sign was used for subtracting a normal value and Scala compiler cannot overload that method due to type erasure for value classes.</p>\n<h2 dir=\"auto\"><a id=\"user-content-defining-affine-spaces\" class=\"anchor\" aria-hidden=\"true\" href=\"#defining-affine-spaces\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Defining affine spaces</h2>\n<p dir=\"auto\">AffineSpace is defined as a pair containing a zero point and a unit.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import io.github.karols.units._\nimport io.github.karols.units.defining._\n\ntype celsius_deg = DefineUnit[_deg~:_C]\nsealed trait CelsiusZero\n\ntype CelsiusScale = DefineAffineSpace[CelsiusZero, celsius_deg]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">io</span>.<span class=\"pl-en\">github</span>.<span class=\"pl-en\">karols</span>.<span class=\"pl-en\">units</span>.<span class=\"pl-en\">defining</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">celsius_deg</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineUnit</span>[_deg<span class=\"pl-k\">~</span><span class=\"pl-k\">:</span>_C]\n<span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">CelsiusZero</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">CelsiusScale</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineAffineSpace</span>[<span class=\"pl-en\">CelsiusZero</span>, celsius_deg]</pre></div>\n<p dir=\"auto\">Unlike normal values, affine spaces currently require conversion functions in both directions.</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"implicit val fromCelsiusToFahrenheit = convertAffineSpace[CelsiusScale,FahrenheitScale]{ \n    x =&gt; x * (9/5.0) + 32  // (Double =&gt; Double)\n}\nimplicit val fromFahrenheitToCelsius = convertAffineSpace[FahrenheitScale,CelsiusScale]{ \n    x =&gt; (x - 32) * (5/9.0)\n}\"><pre><span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fromCelsiusToFahrenheit</span> <span class=\"pl-k\">=</span> convertAffineSpace[<span class=\"pl-en\">CelsiusScale</span>,<span class=\"pl-en\">FahrenheitScale</span>]{ \n    x <span class=\"pl-k\">=&gt;</span> x <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">9</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">5.0</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">32</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> (Double =&gt; Double)</span>\n}\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">fromFahrenheitToCelsius</span> <span class=\"pl-k\">=</span> convertAffineSpace[<span class=\"pl-en\">FahrenheitScale</span>,<span class=\"pl-en\">CelsiusScale</span>]{ \n    x <span class=\"pl-k\">=&gt;</span> (x <span class=\"pl-k\">-</span> <span class=\"pl-c1\">32</span>) <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">5</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">9.0</span>)\n}</pre></div>\n<p dir=\"auto\">If two affine spaces only differ by their unit, you can use <code>changeUnit</code> method to convert between them:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait UnixEpoch\ntype UnixEpochSeconds = DefineAffineSpace[UnixEpoch, second]\ntype UnixEpochMillis = DefineAffineSpace[UnixEpoch, millisecond]\n\nval timestamp = 123456789.at[UnixEpochSeconds] // equals 123456789 s from Unix Epoch\ntimestamp.changeUnit[millisecond]              // equals 123456789000 ms from Unix Epoch\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">UnixEpoch</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">UnixEpochSeconds</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineAffineSpace</span>[<span class=\"pl-en\">UnixEpoch</span>, second]\n<span class=\"pl-k\">type</span> <span class=\"pl-en\">UnixEpochMillis</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">DefineAffineSpace</span>[<span class=\"pl-en\">UnixEpoch</span>, millisecond]\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">timestamp</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">123456789</span>.at[<span class=\"pl-en\">UnixEpochSeconds</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 123456789 s from Unix Epoch</span>\ntimestamp.changeUnit[millisecond]              <span class=\"pl-c\"><span class=\"pl-c\">//</span> equals 123456789000 ms from Unix Epoch</span></pre></div>\n<p dir=\"auto\">Affine values can be compared with relational operators, similarly to normal values.</p>\n<h2 dir=\"auto\"><a id=\"user-content-writing-polymorphic-functions-using-units-of-measure\" class=\"anchor\" aria-hidden=\"true\" href=\"#writing-polymorphic-functions-using-units-of-measure\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Writing polymorphic functions using units of measure</h2>\n<p dir=\"auto\"><a href=\"doc/POLYMORPHISM.md\">This section has been moved to a separate document.</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-using-arrays\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-arrays\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using arrays</h2>\n<p dir=\"auto\"><a href=\"doc/ARRAYS.md\">This section has been moved to a separate document.</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-2d-and-3d-vectors\" class=\"anchor\" aria-hidden=\"true\" href=\"#2d-and-3d-vectors\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>2D and 3D vectors</h2>\n<p dir=\"auto\"><a href=\"doc/VECTORS.md\">This section has been moved to a separate document.</a></p>\n<h1 dir=\"auto\"><a id=\"user-content-implementation-details\" class=\"anchor\" aria-hidden=\"true\" href=\"#implementation-details\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Implementation details</h1>\n<p dir=\"auto\">The implementation started with a pretty common type-level implementation of boolean and integers.</p>\n<p dir=\"auto\">Type-level strings are either a cons of a char and a string, a single char, or an empty string. Each char is implemented currently as a triple of members of Z/5Z, so only 125 different characters are allowed.</p>\n<p dir=\"auto\">A basic unit is implemented as a thin wrapper around a type-level string. That string is an identifier that is used for type equality comparison, and is also used for implicit name generation.</p>\n<p dir=\"auto\">The main type for units (<code>MUnit</code>) is a linked list of pairs of basic units and non-zero integers, used to represent a type-level map.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "KarolS",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1790750?v=4",
        "url" : "https://api.github.com/users/KarolS",
        "contributions" : 106
      },
      {
        "login" : "mkiedys",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3410297?v=4",
        "url" : "https://api.github.com/users/mkiedys",
        "contributions" : 5
      }
    ],
    "commits" : 111,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 7,
        "title" : "DoubleU[/[O,I]#Mul[I]] not being treated as Double[O]",
        "url" : "https://github.com/KarolS/units/issues/7"
      },
      {
        "number" : 5,
        "title" : "Where would you like to see non-SI units like \"rpm\"?",
        "url" : "https://github.com/KarolS/units/issues/5"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "units-javatime",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "units-of-measurement",
    "beginnerIssuesLabel" : null
  }
}