{
  "organization" : "fthomas",
  "repository" : "refined",
  "creationDate" : 1444677099265,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644287226863
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Refinement types for Scala",
    "logo" : "https://avatars.githubusercontent.com/u/141252?v=4",
    "stars" : 1463,
    "forks" : 138,
    "watchers" : 31,
    "issues" : 63,
    "creationDate" : 1431274996000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-refined-simple-refinement-types-for-scala\" class=\"anchor\" aria-hidden=\"true\" href=\"#refined-simple-refinement-types-for-scala\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>refined: simple refinement types for Scala</h1>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/actions?query=workflow%3A%22Continuous+Integration%22\"><img src=\"https://camo.githubusercontent.com/5bcbc1b533f48607638db7f37cfb5f1d0b6861440074c8afa89b3f1339d2bc5f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6674686f6d61732f726566696e65642f436f6e74696e756f7573253230496e746567726174696f6e\" alt=\"GitHub Workflow Status\" data-canonical-src=\"https://img.shields.io/github/workflow/status/fthomas/refined/Continuous%20Integration\" style=\"max-width: 100%;\"></a>\n<a href=\"http://codecov.io/github/fthomas/refined\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/097a17da03fe7fb480b9d151f29c1a6da96233c10a80c176ef5306488d60e075/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6674686f6d61732f726566696e65642e737667\" alt=\"codecov.io\" data-canonical-src=\"https://img.shields.io/codecov/c/github/fthomas/refined.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/fthomas/refined?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Gitter\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://index.scala-lang.org/fthomas/refined/refined\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/42c538ed198401cc07fd0ad8502d8b315050963d13a8cdf06c1d08284b4d15f0/68747470733a2f2f696e6465782e7363616c612d6c616e672e6f72672f6674686f6d61732f726566696e65642f726566696e65642f6c61746573742d62792d7363616c612d76657273696f6e2e7376673f636f6c6f723d626c7565\" alt=\"refined Scala version support\" data-canonical-src=\"https://index.scala-lang.org/fthomas/refined/refined/latest-by-scala-version.svg?color=blue\" style=\"max-width: 100%;\"></a>\n<a href=\"https://javadoc.io/doc/eu.timepit/refined_2.12/0.9.28\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/d37f397117da67a8dd65b9db1ccd375e78d7deac152ad859cd269ff25a4386d8/68747470733a2f2f7777772e6a617661646f632e696f2f62616467652f65752e74696d657069742f726566696e65645f322e31322e7376673f636f6c6f723d626c7565266c6162656c3d5363616c61646f63\" alt=\"Scaladoc\" data-canonical-src=\"https://www.javadoc.io/badge/eu.timepit/refined_2.12.svg?color=blue&amp;label=Scaladoc\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><strong>refined</strong> is a Scala library for refining types with type-level predicates\nwhich constrain the set of values described by the refined type.\nIt started as a port of the <a href=\"http://nikita-volkov.github.io/refined\" rel=\"nofollow\">refined</a> Haskell library by\n<a href=\"https://github.com/nikita-volkov\">Nikita Volkov</a> (which also provides an excellent\nmotivation why this kind of library is useful).\nThe idea of expressing constraints at the type-level as Scala library was first\nexplored by <a href=\"https://github.com/fwbrasil\">Flavio W. Brasil</a> in <a href=\"https://github.com/fwbrasil/bond\">bond</a>.</p>\n<p dir=\"auto\">A quick example:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import eu.timepit.refined._\nimport eu.timepit.refined.api.Refined\nimport eu.timepit.refined.auto._\nimport eu.timepit.refined.numeric._\n\n// This refines Int with the Positive predicate and checks via an\n// implicit macro that the assigned value satisfies it:\nscala&gt; val i1: Int Refined Positive = 5\ni1: Int Refined Positive = 5\n\n// If the value does not satisfy the predicate, we get a meaningful\n// compile error:\nscala&gt; val i2: Int Refined Positive = -5\n&lt;console&gt;:22: error: Predicate failed: (-5 &gt; 0).\n       val i2: Int Refined Positive = -5\n                                       ^\n\n// There is also the explicit refineMV macro that can infer the base\n// type from its parameter:\nscala&gt; refineMV[Positive](5)\nres0: Int Refined Positive = 5\n\n// Macros can only validate literals because their values are known at\n// compile-time. To validate arbitrary (runtime) values we can use the\n// refineV function:\n\nscala&gt; val x = 42 // suppose the value of x is not known at compile-time\n\nscala&gt; refineV[Positive](x)\nres1: Either[String, Int Refined Positive] = Right(42)\n\nscala&gt; refineV[Positive](-x)\nres2: Either[String, Int Refined Positive] = Left(Predicate failed: (-42 &gt; 0).)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">api</span>.<span class=\"pl-en\">Refined</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">auto</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">numeric</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> This refines Int with the Positive predicate and checks via an</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> implicit macro that the assigned value satisfies it:</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">i1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\ni1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> If the value does not satisfy the predicate, we get a meaningful</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> compile error:</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">i2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">22</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-en\">Predicate</span> <span class=\"pl-v\">failed</span>: (<span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>).\n       <span class=\"pl-k\">val</span> <span class=\"pl-smi\">i2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">5</span>\n                                       ^\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> There is also the explicit refineMV macro that can infer the base</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> type from its parameter:</span>\nscala<span class=\"pl-k\">&gt;</span> refineMV[<span class=\"pl-en\">Positive</span>](<span class=\"pl-c1\">5</span>)\nres0<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Macros can only validate literals because their values are known at</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> compile-time. To validate arbitrary (runtime) values we can use the</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> refineV function:</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">42</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> suppose the value of x is not known at compile-time</span>\n\nscala<span class=\"pl-k\">&gt;</span> refineV[<span class=\"pl-en\">Positive</span>](x)\nres1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Right</span>(<span class=\"pl-c1\">42</span>)\n\nscala<span class=\"pl-k\">&gt;</span> refineV[<span class=\"pl-en\">Positive</span>](<span class=\"pl-k\">-</span>x)\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Positive</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Left</span>(<span class=\"pl-en\">Predicate</span> <span class=\"pl-v\">failed</span>: (<span class=\"pl-k\">-</span><span class=\"pl-c1\">42</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>).)</pre></div>\n<p dir=\"auto\"><strong>refined</strong> also contains inference rules for converting between different\nrefined types. For example, <code>Int Refined Greater[10]</code> can be safely\nconverted to <code>Int Refined Positive</code> because all integers greater than ten\nare also positive. The type conversion of refined types is a compile-time\noperation that is provided by the library:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val a: Int Refined Greater[5] = 10\na: Int Refined Greater[Int(5)] = 10\n\n// Since every value greater than 5 is also greater than 4, `a` can be\n// ascribed the type Int Refined Greater[4]:\nscala&gt; val b: Int Refined Greater[4] = a\nb: Int Refined Greater[Int(4)] = 10\n\n// An unsound ascription leads to a compile error:\nscala&gt; val c: Int Refined Greater[6] = a\n                                       ^\n       error: type mismatch (invalid inference):\n               eu.timepit.refined.numeric.Greater[5] does not imply\n               eu.timepit.refined.numeric.Greater[6]\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-c1\">5</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\na<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-en\">Int</span>(<span class=\"pl-c1\">5</span>)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Since every value greater than 5 is also greater than 4, `a` can be</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ascribed the type Int Refined Greater[4]:</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">b</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-c1\">4</span>] <span class=\"pl-k\">=</span> a\nb<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-en\">Int</span>(<span class=\"pl-c1\">4</span>)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> An unsound ascription leads to a compile error:</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">c</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-c1\">6</span>] <span class=\"pl-k\">=</span> a\n                                       ^\n       <span class=\"pl-v\">error</span>: <span class=\"pl-k\">type</span> <span class=\"pl-en\">mismatch</span> (invalid inference)<span class=\"pl-k\">:</span>\n               eu.timepit.refined.numeric.<span class=\"pl-en\">Greater</span>[<span class=\"pl-c1\">5</span>] does not imply\n               eu.timepit.refined.numeric.<span class=\"pl-en\">Greater</span>[<span class=\"pl-c1\">6</span>]</pre></div>\n<p dir=\"auto\">This mechanism allows to pass values of more specific types (e.g.\n<code>Int Refined Greater[10]</code>) to functions that take a more general\ntype (e.g. <code>Int Refined Positive</code>) without manual intervention.</p>\n<h3 dir=\"auto\"><a id=\"user-content-prior-scala-213-without-literal-types\" class=\"anchor\" aria-hidden=\"true\" href=\"#prior-scala-213-without-literal-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>prior Scala 2.13 without literal types</h3>\n<p dir=\"auto\">Since there are no literal types prior to Scala 2.13 the literals must be created with shapeless:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"scala&gt; val a: Int Refined Greater[W.`5`.T] = 10\na: Int Refined Greater[Int(5)] = 10\nscala&gt; val b: Int Refined Greater[W.`4`.T] = a\nb: Int Refined Greater[Int(4)] = 10\"><pre>scala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-en\">W</span>.`5`.<span class=\"pl-en\">T</span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\na<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-en\">Int</span>(<span class=\"pl-c1\">5</span>)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">b</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-en\">W</span>.`4`.<span class=\"pl-en\">T</span>] <span class=\"pl-k\">=</span> a\nb<span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Greater</span>[<span class=\"pl-en\">Int</span>(<span class=\"pl-c1\">4</span>)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span></pre></div>\n<p dir=\"auto\"><strong>Note</strong> that <a href=\"https://static.javadoc.io/eu.timepit/refined_2.12/0.9.28/eu/timepit/refined/index.html#W:shapeless.Witness.type\" rel=\"nofollow\"><code>W</code></a>\nis a shortcut for <a href=\"https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0#singleton-typed-literals\"><code>shapeless.Witness</code></a> which provides\nsyntax for <a href=\"http://docs.scala-lang.org/sips/42.type.html\" rel=\"nofollow\">literal-based singleton types</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of contents</h2>\n<ol dir=\"auto\">\n<li><a href=\"#more-examples\">More examples</a></li>\n<li><a href=\"#using-refined\">Using refined</a></li>\n<li><a href=\"#community\">Community</a></li>\n<li><a href=\"#documentation\">Documentation</a></li>\n<li><a href=\"#provided-predicates\">Provided predicates</a></li>\n<li><a href=\"#contributors-and-participation\">Contributors and participation</a></li>\n<li><a href=\"#related-projects\">Related projects</a></li>\n<li><a href=\"#license\">License</a></li>\n</ol>\n<h2 dir=\"auto\"><a id=\"user-content-more-examples\" class=\"anchor\" aria-hidden=\"true\" href=\"#more-examples\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>More examples</h2>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import eu.timepit.refined._\nimport eu.timepit.refined.auto._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.api.{RefType, Refined}\nimport eu.timepit.refined.boolean._\nimport eu.timepit.refined.char._\nimport eu.timepit.refined.collection._\nimport eu.timepit.refined.generic._\nimport eu.timepit.refined.string._\nimport shapeless.{ ::, HNil }\n\nscala&gt; refineMV[NonEmpty](&quot;Hello&quot;)\nres2: String Refined NonEmpty = Hello\n\nscala&gt; refineMV[NonEmpty](&quot;&quot;)\n&lt;console&gt;:39: error: Predicate isEmpty() did not fail.\n            refineMV[NonEmpty](&quot;&quot;)\n                              ^\n\nscala&gt; type ZeroToOne = Not[Less[0.0]] And Not[Greater[1.0]]\ndefined type alias ZeroToOne\n\nscala&gt; refineMV[ZeroToOne](1.8)\n&lt;console&gt;:40: error: Right predicate of (!(1.8 &lt; 0.0) &amp;&amp; !(1.8 &gt; 1.0)) failed: Predicate (1.8 &gt; 1.0) did not fail.\n       refineMV[ZeroToOne](1.8)\n                          ^\n\nscala&gt; refineMV[AnyOf[Digit :: Letter :: Whitespace :: HNil]]('F')\nres3: Char Refined AnyOf[Digit :: Letter :: Whitespace :: HNil] = F\n\nscala&gt; refineMV[MatchesRegex[&quot;[0-9]+&quot;]](&quot;123.&quot;)\n&lt;console&gt;:39: error: Predicate failed: &quot;123.&quot;.matches(&quot;[0-9]+&quot;).\n              refineMV[MatchesRegex[W.`&quot;[0-9]+&quot;`.T]](&quot;123.&quot;)\n                                                    ^\n\nscala&gt; val d1: Char Refined Equal['3'] = '3'\nd1: Char Refined Equal[Char('3')] = 3\n\nscala&gt; val d2: Char Refined Digit = d1\nd2: Char Refined Digit = 3\n\nscala&gt; val d3: Char Refined Letter = d1\n&lt;console&gt;:39: error: type mismatch (invalid inference):\n Equal[Char('3')] does not imply\n Letter\n       val d3: Char Refined Letter = d1\n                                     ^\n\nscala&gt; val r1: String Refined Regex = &quot;(a|b)&quot;\nr1: String Refined Regex = (a|b)\n\nscala&gt; val r2: String Refined Regex = &quot;(a|b&quot;\n&lt;console&gt;:38: error: Regex predicate failed: Unclosed group near index 4\n(a|b\n    ^\n       val r2: String Refined Regex = &quot;(a|b&quot;\n                                      ^\n\nscala&gt; val u1: String Refined Url = &quot;htp://example.com&quot;\n&lt;console&gt;:38: error: Url predicate failed: unknown protocol: htp\n       val u1: String Refined Url = &quot;htp://example.com&quot;\n                                    ^\n\n// Here we define a refined type &quot;Int with the predicate (7 &lt;= value &lt; 77)&quot;.\nscala&gt; type Age = Int Refined Interval.ClosedOpen[7, 77]\n\nscala&gt; val userInput = 55\n\n// We can refine values with this refined type by either using `refineV`\n// with an explicit return type\nscala&gt; val ageEither1: Either[String, Age] = refineV(userInput)\nageEither1: Either[String,Age] = Right(55)\n\n// or by using `RefType.applyRef` with the refined type as type parameter.\nscala&gt; val ageEither2 = RefType.applyRef[Age](userInput)\nageEither2: Either[String,Age] = Right(55)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">auto</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">numeric</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">api</span>.{<span class=\"pl-en\">RefType</span>, <span class=\"pl-en\">Refined</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">boolean</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">char</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">collection</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">generic</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">eu</span>.<span class=\"pl-en\">timepit</span>.<span class=\"pl-en\">refined</span>.<span class=\"pl-en\">string</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">shapeless</span>.{ <span class=\"pl-en\">::</span>, <span class=\"pl-en\">HNil</span> }\n\nscala<span class=\"pl-k\">&gt;</span> refineMV[<span class=\"pl-en\">NonEmpty</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello<span class=\"pl-pds\">\"</span></span>)\nres2<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">NonEmpty</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Hello</span>\n\nscala<span class=\"pl-k\">&gt;</span> refineMV[<span class=\"pl-en\">NonEmpty</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">39</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-en\">Predicate</span> isEmpty() did not fail.\n            refineMV[<span class=\"pl-en\">NonEmpty</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n                              ^\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">type</span> <span class=\"pl-en\">ZeroToOne</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Not</span>[<span class=\"pl-en\">Less</span>[<span class=\"pl-c1\">0.0</span>]] <span class=\"pl-en\">And</span> <span class=\"pl-en\">Not</span>[<span class=\"pl-en\">Greater</span>[<span class=\"pl-c1\">1.0</span>]]\ndefined <span class=\"pl-k\">type</span> <span class=\"pl-en\">alias</span> <span class=\"pl-en\">ZeroToOne</span>\n\nscala<span class=\"pl-k\">&gt;</span> refineMV[<span class=\"pl-en\">ZeroToOne</span>](<span class=\"pl-c1\">1.8</span>)\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">40</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-en\">Right</span> predicate of (<span class=\"pl-k\">!</span>(<span class=\"pl-c1\">1.8</span> <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0.0</span>) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>(<span class=\"pl-c1\">1.8</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1.0</span>)) <span class=\"pl-v\">failed</span>: <span class=\"pl-en\">Predicate</span> (<span class=\"pl-c1\">1.8</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1.0</span>) did not fail.\n       refineMV[<span class=\"pl-en\">ZeroToOne</span>](<span class=\"pl-c1\">1.8</span>)\n                          ^\n\nscala<span class=\"pl-k\">&gt;</span> refineMV[<span class=\"pl-en\">AnyOf</span>[<span class=\"pl-en\">Digit</span> <span class=\"pl-k\">::</span> <span class=\"pl-en\">Letter</span> <span class=\"pl-k\">::</span> <span class=\"pl-en\">Whitespace</span> <span class=\"pl-k\">::</span> <span class=\"pl-en\">HNil</span>]](<span class=\"pl-s\">'F'</span>)\nres3<span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">AnyOf</span>[<span class=\"pl-en\">Digit</span> <span class=\"pl-k\">::</span> <span class=\"pl-en\">Letter</span> <span class=\"pl-k\">::</span> <span class=\"pl-en\">Whitespace</span> <span class=\"pl-k\">::</span> <span class=\"pl-en\">HNil</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">F</span>\n\nscala<span class=\"pl-k\">&gt;</span> refineMV[<span class=\"pl-en\">MatchesRegex</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[0-9]+<span class=\"pl-pds\">\"</span></span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>123.<span class=\"pl-pds\">\"</span></span>)\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">39</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-en\">Predicate</span> <span class=\"pl-v\">failed</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>123.<span class=\"pl-pds\">\"</span></span>.matches(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[0-9]+<span class=\"pl-pds\">\"</span></span>).\n              refineMV[<span class=\"pl-en\">MatchesRegex</span>[<span class=\"pl-en\">W</span>.`\"[0-9]+\"`.<span class=\"pl-en\">T</span>]](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>123.<span class=\"pl-pds\">\"</span></span>)\n                                                    ^\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">d1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Equal</span>[<span class=\"pl-s\">'3'</span>] <span class=\"pl-k\">=</span> <span class=\"pl-s\">'3'</span>\nd1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Equal</span>[<span class=\"pl-en\">Char</span>(<span class=\"pl-s\">'3'</span>)] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">d2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Digit</span> <span class=\"pl-k\">=</span> d1\nd2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Digit</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">d3</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Letter</span> <span class=\"pl-k\">=</span> d1\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">39</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-k\">type</span> <span class=\"pl-en\">mismatch</span> (invalid inference)<span class=\"pl-k\">:</span>\n <span class=\"pl-en\">Equal</span>[<span class=\"pl-en\">Char</span>(<span class=\"pl-s\">'3'</span>)] does not imply\n <span class=\"pl-en\">Letter</span>\n       <span class=\"pl-k\">val</span> <span class=\"pl-smi\">d3</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Char</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Letter</span> <span class=\"pl-k\">=</span> d1\n                                     ^\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">r1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Regex</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(a|b)<span class=\"pl-pds\">\"</span></span>\nr1<span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Regex</span> <span class=\"pl-k\">=</span> (a<span class=\"pl-k\">|</span>b)\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">r2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Regex</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(a|b<span class=\"pl-pds\">\"</span></span>\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">38</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-en\">Regex</span> predicate <span class=\"pl-v\">failed</span>: <span class=\"pl-en\">Unclosed</span> group near index <span class=\"pl-c1\">4</span>\n(a<span class=\"pl-k\">|</span>b\n    ^\n       <span class=\"pl-k\">val</span> <span class=\"pl-smi\">r2</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Regex</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(a|b<span class=\"pl-pds\">\"</span></span>\n                                      ^\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">u1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>htp://example.com<span class=\"pl-pds\">\"</span></span>\n&lt;<span class=\"pl-ent\">console</span>&gt;<span class=\"pl-k\">:</span><span class=\"pl-c1\">38</span><span class=\"pl-k\">:</span> <span class=\"pl-v\">error</span>: <span class=\"pl-en\">Url</span> predicate <span class=\"pl-v\">failed</span>: unknown <span class=\"pl-v\">protocol</span>: htp\n       <span class=\"pl-k\">val</span> <span class=\"pl-smi\">u1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>htp://example.com<span class=\"pl-pds\">\"</span></span>\n                                    ^\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Here we define a refined type \"Int with the predicate (7 &lt;= value &lt; 77)\".</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">type</span> <span class=\"pl-en\">Age</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Int</span> <span class=\"pl-en\">Refined</span> <span class=\"pl-en\">Interval</span>.<span class=\"pl-en\">ClosedOpen</span>[<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">77</span>]\n\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">userInput</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">55</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> We can refine values with this refined type by either using `refineV`</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> with an explicit return type</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ageEither1</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>, <span class=\"pl-en\">Age</span>] <span class=\"pl-k\">=</span> refineV(userInput)\nageEither1<span class=\"pl-k\">:</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>,<span class=\"pl-en\">Age</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Right</span>(<span class=\"pl-c1\">55</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or by using `RefType.applyRef` with the refined type as type parameter.</span>\nscala<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">ageEither2</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">RefType</span>.applyRef[<span class=\"pl-en\">Age</span>](userInput)\nageEither2<span class=\"pl-k\">:</span> <span class=\"pl-en\">Either</span>[<span class=\"pl-en\">String</span>,<span class=\"pl-en\">Age</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Right</span>(<span class=\"pl-c1\">55</span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-using-refined\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-refined\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using refined</h2>\n<p dir=\"auto\">The latest version of the library is 0.9.28, which is available for Scala and\n<a href=\"http://www.scala-js.org\" rel=\"nofollow\">Scala.js</a> version 2.12 and 2.13.</p>\n<p dir=\"auto\">If you're using sbt, add the following to your build:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies ++= Seq(\n  &quot;eu.timepit&quot; %% &quot;refined&quot;                 % &quot;0.9.28&quot;,\n  &quot;eu.timepit&quot; %% &quot;refined-cats&quot;            % &quot;0.9.28&quot;, // optional\n  &quot;eu.timepit&quot; %% &quot;refined-eval&quot;            % &quot;0.9.28&quot;, // optional, JVM-only\n  &quot;eu.timepit&quot; %% &quot;refined-jsonpath&quot;        % &quot;0.9.28&quot;, // optional, JVM-only\n  &quot;eu.timepit&quot; %% &quot;refined-pureconfig&quot;      % &quot;0.9.28&quot;, // optional, JVM-only\n  &quot;eu.timepit&quot; %% &quot;refined-scalacheck&quot;      % &quot;0.9.28&quot;, // optional\n  &quot;eu.timepit&quot; %% &quot;refined-scalaz&quot;          % &quot;0.9.28&quot;, // optional\n  &quot;eu.timepit&quot; %% &quot;refined-scodec&quot;          % &quot;0.9.28&quot;, // optional\n  &quot;eu.timepit&quot; %% &quot;refined-scopt&quot;           % &quot;0.9.28&quot;, // optional\n  &quot;eu.timepit&quot; %% &quot;refined-shapeless&quot;       % &quot;0.9.28&quot;  // optional\n)\"><pre>libraryDependencies <span class=\"pl-k\">++</span><span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined<span class=\"pl-pds\">\"</span></span>                 <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-cats<span class=\"pl-pds\">\"</span></span>            <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-eval<span class=\"pl-pds\">\"</span></span>            <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional, JVM-only</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-jsonpath<span class=\"pl-pds\">\"</span></span>        <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional, JVM-only</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-pureconfig<span class=\"pl-pds\">\"</span></span>      <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional, JVM-only</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-scalacheck<span class=\"pl-pds\">\"</span></span>      <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-scalaz<span class=\"pl-pds\">\"</span></span>          <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-scodec<span class=\"pl-pds\">\"</span></span>          <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-scopt<span class=\"pl-pds\">\"</span></span>           <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eu.timepit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>refined-shapeless<span class=\"pl-pds\">\"</span></span>       <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.9.28<span class=\"pl-pds\">\"</span></span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n)</pre></div>\n<p dir=\"auto\">For Scala.js just replace <code>%%</code> with <code>%%%</code> above.</p>\n<p dir=\"auto\">Instructions for Maven and other build tools are available at <a href=\"http://search.maven.org/#search%7Cga%7C1%7Ceu.timepit.refined\" rel=\"nofollow\">search.maven.org</a>.</p>\n<p dir=\"auto\">Release notes for the latest version are <a href=\"https://github.com/fthomas/refined/releases/tag/v0.9.28\">here</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-community\" class=\"anchor\" aria-hidden=\"true\" href=\"#community\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Community</h2>\n<h3 dir=\"auto\"><a id=\"user-content-internal-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#internal-modules\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Internal modules</h3>\n<p dir=\"auto\">The project provides these optional extensions and library integrations:</p>\n<ul dir=\"auto\">\n<li><code>refined-cats</code> provides <a href=\"https://github.com/typelevel/cats\">Cats</a>\ntype class instances for refined types</li>\n<li><code>refined-eval</code> provides the <code>Eval[S]</code> predicate that checks if a value\napplied to the predicate <code>S</code> yields <code>true</code></li>\n<li><code>refined-jsonpath</code> provides the <code>JSONPath</code> predicate that checks if a\n<code>String</code> is a valid <a href=\"http://goessner.net/articles/JsonPath/\" rel=\"nofollow\">JSONPath</a></li>\n<li><code>refined-pureconfig</code> allows to read configuration with refined types\nusing <a href=\"https://github.com/pureconfig/pureconfig\">PureConfig</a></li>\n<li><code>refined-scalacheck</code> allows to generate arbitrary values of refined types\nwith <a href=\"http://scalacheck.org/\" rel=\"nofollow\">ScalaCheck</a>.\nUse <code>refined-scalacheck_1.13</code> instead if your other dependencies\nuse scalacheck version 1.13</li>\n<li><code>refined-scalaz</code> provides <a href=\"https://github.com/scalaz/scalaz\">Scalaz</a>\ntype class instances for refined types and support for <code>scalaz.@@</code></li>\n<li><code>refined-scodec</code> allows binary decoding and encoding of refined types with\n<a href=\"http://scodec.org/\" rel=\"nofollow\">scodec</a> and allows refining <code>scodec.bits.ByteVector</code></li>\n<li><code>refined-scopt</code> allows to read command line options with refined types\nusing <a href=\"https://github.com/scopt/scopt\">scopt</a></li>\n<li><code>refined-shapeless</code></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-external-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#external-modules\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>External modules</h3>\n<p dir=\"auto\">Below is an incomplete list of third-party extensions and library integrations\nfor <strong>refined</strong>. If your library is missing, please open a pull request to\nlist it here:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/dgouyette/play-api-refiner\">api-refiner</a></li>\n<li><a href=\"https://github.com/alexarchambault/argonaut-shapeless\">argonaut-refined</a></li>\n<li><a href=\"https://github.com/tpolecat/atto\">atto-refined</a></li>\n<li><a href=\"https://github.com/alexarchambault/case-app\">case-app-refined</a></li>\n<li><a href=\"https://github.com/circe/circe\">circe-refined</a></li>\n<li><a href=\"https://github.com/vlovgr/ciris\">ciris-refined</a></li>\n<li><a href=\"https://github.com/ChristopherDavenport/cormorant\">cormorant-refined</a></li>\n<li><a href=\"https://github.com/erikerlandson/coulomb/tree/develop/coulomb-refined\">coulomb-refined</a></li>\n<li><a href=\"http://ben.kirw.in/decline/arguments.html#refined-support\" rel=\"nofollow\">decline-refined</a></li>\n<li><a href=\"https://github.com/tpolecat/doobie\">doobie-refined</a></li>\n<li><a href=\"https://github.com/ysusuk/exercises-refined\">exercises-refined</a></li>\n<li><a href=\"https://github.com/janstenpickle/extruder\">extruder-refined</a></li>\n<li><a href=\"https://github.com/finagle/finch\">finch-refined</a></li>\n<li><a href=\"https://github.com/vectos/formulation\">formulation-refined</a></li>\n<li><a href=\"https://nrinaudo.github.io/kantan.csv/refined.html\" rel=\"nofollow\">kantan.csv-refined</a></li>\n<li><a href=\"https://nrinaudo.github.io/kantan.regex/refined.html\" rel=\"nofollow\">kantan.regex-refined</a></li>\n<li><a href=\"https://nrinaudo.github.io/kantan.xpath/refined.html\" rel=\"nofollow\">kantan.xpath-refined</a></li>\n<li><a href=\"https://github.com/julien-truffaut/Monocle\">monocle-refined</a></li>\n<li><a href=\"https://github.com/neotypes/neotypes\">neotypes-refined</a></li>\n<li><a href=\"https://github.com/kwark/play-refined\">play-refined</a></li>\n<li><a href=\"https://github.com/lunaryorn/play-json-refined\">play-json-refined</a></li>\n<li><a href=\"https://github.com/btlines/play-json-refined\">play-json-refined</a></li>\n<li><a href=\"https://github.com/derekmorr/refined-anorm\">refined-anorm</a></li>\n<li><a href=\"https://github.com/derekmorr/refined-guava\">refined-guava</a></li>\n<li><a href=\"https://github.com/scanamo/scanamo\">scanamo-refined</a></li>\n<li><a href=\"https://github.com/durban/seals\">seals-refined</a></li>\n<li><a href=\"https://github.com/kwark/slick-refined\">slick-refined</a></li>\n<li><a href=\"https://github.com/typeness/spray-json-refined\">spray-json-refined</a></li>\n<li><a href=\"https://github.com/cakesolutions/strictify\">strictify-refined</a></li>\n<li><a href=\"https://github.com/carlpulley/validated-config\">validated-config</a></li>\n<li><a href=\"https://github.com/ovotech/vulcan\">vulcan-refined</a></li>\n<li><a href=\"https://github.com/slamdata/scala-xml-names\">xml-names-core</a></li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-projects-using-refined\" class=\"anchor\" aria-hidden=\"true\" href=\"#projects-using-refined\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Projects using refined</h3>\n<p dir=\"auto\">If your open source project is using <strong>refined</strong>, please consider opening\na pull request to list it here:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/m2-oss/calypso\">calypso</a>: BSON library for Scala</li>\n<li><a href=\"https://github.com/quasar-analytics/quasar\">Quasar</a>: An open source\nNoSQL analytics engine which uses refined for natural and positive\ninteger types</li>\n<li><a href=\"https://github.com/GENIVI/rvi_sota_server\">rvi_sota_server</a>: The SOTA\nServer Reference Implementation uses refined for domain specific types.\nlike the <a href=\"https://en.wikipedia.org/wiki/Vehicle_identification_number\" rel=\"nofollow\">vehicle identification number (VIN)</a>.</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-adopters\" class=\"anchor\" aria-hidden=\"true\" href=\"#adopters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Adopters</h3>\n<p dir=\"auto\">Are you using <strong>refined</strong> in your organization or company? Please consider\nopening a pull request to list it here:</p>\n<ul dir=\"auto\">\n<li><a href=\"http://techblog.scout24.com/\" rel=\"nofollow\">AutoScout24</a></li>\n<li><a href=\"https://besedo.com/\" rel=\"nofollow\">Besedo</a></li>\n<li><a href=\"https://chatroulette.com/\" rel=\"nofollow\">Chatroulette</a></li>\n<li><a href=\"https://www.colisweb.com/fr/\" rel=\"nofollow\">Colisweb</a></li>\n<li><a href=\"https://folio-sec.com/\" rel=\"nofollow\">FOLIO</a></li>\n<li><a href=\"http://techblog.holidaycheck.com/\" rel=\"nofollow\">HolidayCheck</a></li>\n<li><a href=\"https://tech.zalando.de/\" rel=\"nofollow\">Zalando</a></li>\n<li><a href=\"https://contentsquare.com/\" rel=\"nofollow\">ContentSquare</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-documentation\" class=\"anchor\" aria-hidden=\"true\" href=\"#documentation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Documentation</h2>\n<p dir=\"auto\">API documentation of the latest release is available at:\n<a href=\"https://static.javadoc.io/eu.timepit/refined_2.12/0.9.28/eu/timepit/refined/index.html\" rel=\"nofollow\">https://static.javadoc.io/eu.timepit/refined_2.12/0.9.28/eu/timepit/refined/index.html</a></p>\n<p dir=\"auto\">There are further (type-checked) examples in the <a href=\"https://github.com/fthomas/refined/tree/master/modules/docs\"><code>docs</code></a>\ndirectory including ones for defining <a href=\"https://github.com/fthomas/refined/blob/master/modules/docs/custom_predicates.md\">custom predicates</a>\nand working with <a href=\"https://github.com/fthomas/refined/blob/master/modules/docs/type_aliases.md\">type aliases</a>. It also contains a\n<a href=\"https://github.com/fthomas/refined/blob/master/modules/docs/design.md\">description</a> of <strong>refined's</strong> design and internals.</p>\n<p dir=\"auto\">Talks and other external resources are listed on the <a href=\"https://github.com/fthomas/refined/wiki/Resources\">Resources</a>\npage in the wiki.</p>\n<h2 dir=\"auto\"><a id=\"user-content-provided-predicates\" class=\"anchor\" aria-hidden=\"true\" href=\"#provided-predicates\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Provided predicates</h2>\n<p dir=\"auto\">The library comes with these predefined predicates:</p>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/blob/master/modules/core/shared/src/main/scala-3.0+/eu/timepit/refined/boolean.scala\"><code>boolean</code></a></p>\n<ul dir=\"auto\">\n<li><code>True</code>: constant predicate that is always <code>true</code></li>\n<li><code>False</code>: constant predicate that is always <code>false</code></li>\n<li><code>Not[P]</code>: negation of the predicate <code>P</code></li>\n<li><code>And[A, B]</code>: conjunction of the predicates <code>A</code> and <code>B</code></li>\n<li><code>Or[A, B]</code>: disjunction of the predicates <code>A</code> and <code>B</code></li>\n<li><code>Xor[A, B]</code>: exclusive disjunction of the predicates <code>A</code> and <code>B</code></li>\n<li><code>Nand[A, B]</code>: negated conjunction of the predicates <code>A</code> and <code>B</code></li>\n<li><code>Nor[A, B]</code>: negated disjunction of the predicates <code>A</code> and <code>B</code></li>\n<li><code>AllOf[PS]</code>: conjunction of all predicates in <code>PS</code></li>\n<li><code>AnyOf[PS]</code>: disjunction of all predicates in <code>PS</code></li>\n<li><code>OneOf[PS]</code>: exclusive disjunction of all predicates in <code>PS</code></li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/blob/master/modules/core/shared/src/main/scala/eu/timepit/refined/char.scala\"><code>char</code></a></p>\n<ul dir=\"auto\">\n<li><code>Digit</code>: checks if a <code>Char</code> is a digit</li>\n<li><code>Letter</code>: checks if a <code>Char</code> is a letter</li>\n<li><code>LetterOrDigit</code>: checks if a <code>Char</code> is a letter or digit</li>\n<li><code>LowerCase</code>: checks if a <code>Char</code> is a lower case character</li>\n<li><code>UpperCase</code>: checks if a <code>Char</code> is an upper case character</li>\n<li><code>Whitespace</code>: checks if a <code>Char</code> is white space</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/blob/master/modules/core/shared/src/main/scala-3.0+/eu/timepit/refined/collection.scala\"><code>collection</code></a></p>\n<ul dir=\"auto\">\n<li><code>Contains[U]</code>: checks if an <code>Iterable</code> contains a value equal to <code>U</code></li>\n<li><code>Count[PA, PC]</code>: counts the number of elements in an <code>Iterable</code> which satisfy the\npredicate <code>PA</code> and passes the result to the predicate <code>PC</code></li>\n<li><code>Empty</code>: checks if an <code>Iterable</code> is empty</li>\n<li><code>NonEmpty</code>: checks if an <code>Iterable</code> is not empty</li>\n<li><code>Forall[P]</code>: checks if the predicate <code>P</code> holds for all elements of an <code>Iterable</code></li>\n<li><code>Exists[P]</code>: checks if the predicate <code>P</code> holds for some elements of an <code>Iterable</code></li>\n<li><code>Head[P]</code>: checks if the predicate <code>P</code> holds for the first element of an <code>Iterable</code></li>\n<li><code>Index[N, P]</code>: checks if the predicate <code>P</code> holds for the element at index <code>N</code> of a sequence</li>\n<li><code>Init[P]</code>: checks if the predicate <code>P</code> holds for all but the last element of an <code>Iterable</code></li>\n<li><code>Last[P]</code>: checks if the predicate <code>P</code> holds for the last element of an <code>Iterable</code></li>\n<li><code>Tail[P]</code>: checks if the predicate <code>P</code> holds for all but the first element of an <code>Iterable</code></li>\n<li><code>Size[P]</code>: checks if the size of an <code>Iterable</code> satisfies the predicate <code>P</code></li>\n<li><code>MinSize[N]</code>: checks if the size of an <code>Iterable</code> is greater than or equal to <code>N</code></li>\n<li><code>MaxSize[N]</code>: checks if the size of an <code>Iterable</code> is less than or equal to <code>N</code></li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/blob/master/modules/core/shared/src/main/scala-3.0+/eu/timepit/refined/generic.scala\"><code>generic</code></a></p>\n<ul dir=\"auto\">\n<li><code>Equal[U]</code>: checks if a value is equal to <code>U</code></li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/blob/master/modules/core/shared/src/main/scala-3.0+/eu/timepit/refined/numeric.scala\"><code>numeric</code></a></p>\n<ul dir=\"auto\">\n<li><code>Less[N]</code>: checks if a numeric value is less than <code>N</code></li>\n<li><code>LessEqual[N]</code>: checks if a numeric value is less than or equal to <code>N</code></li>\n<li><code>Greater[N]</code>: checks if a numeric value is greater than <code>N</code></li>\n<li><code>GreaterEqual[N]</code>: checks if a numeric value is greater than or equal to <code>N</code></li>\n<li><code>Positive</code>: checks if a numeric value is greater than zero</li>\n<li><code>NonPositive</code>: checks if a numeric value is zero or negative</li>\n<li><code>Negative</code>: checks if a numeric value is less than zero</li>\n<li><code>NonNegative</code>: checks if a numeric value is zero or positive</li>\n<li><code>Interval.Open[L, H]</code>: checks if a numeric value is in the interval (<code>L</code>, <code>H</code>)</li>\n<li><code>Interval.OpenClosed[L, H]</code>: checks if a numeric value is in the interval (<code>L</code>, <code>H</code>]</li>\n<li><code>Interval.ClosedOpen[L, H]</code>: checks if a numeric value is in the interval [<code>L</code>, <code>H</code>)</li>\n<li><code>Interval.Closed[L, H]</code>: checks if a numeric value is in the interval [<code>L</code>, <code>H</code>]</li>\n<li><code>Modulo[N, O]</code>: checks if an integral value modulo <code>N</code> is <code>O</code></li>\n<li><code>Divisible[N]</code>: checks if an integral value is evenly divisible by <code>N</code></li>\n<li><code>NonDivisible[N]</code>: checks if an integral value is not evenly divisible by <code>N</code></li>\n<li><code>Even</code>: checks if an integral value is evenly divisible by 2</li>\n<li><code>Odd</code>: checks if an integral value is not evenly divisible by 2</li>\n<li><code>NonNaN</code>: checks if a floating-point number is not NaN</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/fthomas/refined/blob/master/modules/core/shared/src/main/scala-3.0+/eu/timepit/refined/string.scala\"><code>string</code></a></p>\n<ul dir=\"auto\">\n<li><code>EndsWith[S]</code>: checks if a <code>String</code> ends with the suffix <code>S</code></li>\n<li><code>IPv4</code>: checks if a <code>String</code> is a valid IPv4</li>\n<li><code>IPv6</code>: checks if a <code>String</code> is a valid IPv6</li>\n<li><code>MatchesRegex[S]</code>: checks if a <code>String</code> matches the regular expression <code>S</code></li>\n<li><code>Regex</code>: checks if a <code>String</code> is a valid regular expression</li>\n<li><code>StartsWith[S]</code>: checks if a <code>String</code> starts with the prefix <code>S</code></li>\n<li><code>Uri</code>: checks if a <code>String</code> is a valid URI</li>\n<li><code>Url</code>: checks if a <code>String</code> is a valid URL</li>\n<li><code>Uuid</code>: checks if a <code>String</code> is a valid UUID</li>\n<li><code>ValidByte</code>: checks if a <code>String</code> is a parsable <code>Byte</code></li>\n<li><code>ValidShort</code>: checks if a <code>String</code> is a parsable <code>Short</code></li>\n<li><code>ValidInt</code>: checks if a <code>String</code> is a parsable <code>Int</code></li>\n<li><code>ValidLong</code>: checks if a <code>String</code> is a parsable <code>Long</code></li>\n<li><code>ValidFloat</code>: checks if a <code>String</code> is a parsable <code>Float</code></li>\n<li><code>ValidDouble</code>: checks if a <code>String</code> is a parsable <code>Double</code></li>\n<li><code>ValidBigInt</code>: checks if a <code>String</code> is a parsable <code>BigInt</code></li>\n<li><code>ValidBigDecimal</code>: checks if a <code>String</code> is a parsable <code>BigDecimal</code></li>\n<li><code>Xml</code>: checks if a <code>String</code> is well-formed XML</li>\n<li><code>XPath</code>: checks if a <code>String</code> is a valid XPath expression</li>\n<li><code>Trimmed</code>: checks if a <code>String</code> has no leading or trailing whitespace</li>\n<li><code>HexStringSpec</code>: checks if a <code>String</code> represents a hexadecimal number</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-contributors-and-participation\" class=\"anchor\" aria-hidden=\"true\" href=\"#contributors-and-participation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contributors and participation</h2>\n<p dir=\"auto\">The following people have helped making <strong>refined</strong> great:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/jhnsmth\">Alex</a></li>\n<li><a href=\"https://github.com/alexarchambault\">Alexandre Archambault</a></li>\n<li><a href=\"https://github.com/bpholt\">Brian P. Holt</a></li>\n<li><a href=\"https://github.com/cb372\">Chris Birchall</a></li>\n<li><a href=\"https://github.com/clhodapp\">Chris Hodapp</a></li>\n<li><a href=\"https://github.com/ceedubs\">Cody Allen</a></li>\n<li><a href=\"https://github.com/dwijnand\">Dale Wijnand</a></li>\n<li><a href=\"https://github.com/densh\">Denys Shabalin</a></li>\n<li><a href=\"https://github.com/derekmorr\">Derek Morr</a></li>\n<li><a href=\"https://github.com/umbreak\">Didac</a></li>\n<li><a href=\"https://github.com/dcastro\">Diogo Castro</a></li>\n<li><a href=\"https://github.com/dm-tran\">dm-tran</a></li>\n<li><a href=\"https://github.com/endertunc\">Ender Tunç</a></li>\n<li><a href=\"https://github.com/fthomas\">Frank S. Thomas</a></li>\n<li><a href=\"https://github.com/froth\">Frederick Roth</a></li>\n<li><a href=\"https://github.com/howyp\">Howard Perrin</a></li>\n<li><a href=\"https://github.com/ysusuk\">Iurii Susuk</a></li>\n<li><a href=\"https://github.com/jedesah\">Jean-Rémi Desjardins</a></li>\n<li><a href=\"https://github.com/Hjdskes\">Jente Hidskes</a></li>\n<li><a href=\"https://github.com/ClydeMachine\">Joe Greene</a></li>\n<li><a href=\"https://github.com/JohnReedLOL\">John-Michael Reed</a></li>\n<li><a href=\"https://github.com/jbenoit2011\">Julien BENOIT</a></li>\n<li><a href=\"https://github.com/kalejami\">kalejami</a></li>\n<li><a href=\"https://github.com/xuwei-k\">kenji yoshida</a></li>\n<li><a href=\"https://github.com/kusamakura\">kusamakura</a></li>\n<li><a href=\"https://github.com/kyusu\">急須</a></li>\n<li><a href=\"https://github.com/leifwickland\">Leif Wickland</a></li>\n<li><a href=\"https://github.com/BalmungSan\">Luis Miguel Mejía Suárez</a></li>\n<li><a href=\"https://github.com/matwojcik\">Mateusz Wójcik</a></li>\n<li><a href=\"https://github.com/matthedude\">Matt Pickering</a></li>\n<li><a href=\"https://github.com/Michaelt293\">Michael Thomas</a></li>\n<li><a href=\"https://github.com/note\">Michal Sitko</a></li>\n<li><a href=\"https://github.com/aoiroaoino\">Naoki Aoyama</a></li>\n<li><a href=\"https://github.com/nrinaudo\">Nicolas Rinaudo</a></li>\n<li><a href=\"https://github.com/liff\">Olli Helenius</a></li>\n<li><a href=\"https://github.com/frgomes\">Richard Gomes</a></li>\n<li><a href=\"https://github.com/ronanM\">ronanM</a></li>\n<li><a href=\"https://github.com/guymers\">Sam Guymer</a></li>\n<li><a href=\"https://github.com/fommil\">Sam Halliday</a></li>\n<li><a href=\"https://github.com/BusyByte\">Shawn Garner</a></li>\n<li><a href=\"https://github.com/sh0hei\">Shohei Shimomura</a></li>\n<li><a href=\"https://github.com/zaneli\">Shunsuke Otani</a></li>\n<li><a href=\"https://github.com/NeQuissimus\">Tim Steinbach</a></li>\n<li><a href=\"https://github.com/tscholak\">Torsten Scholak</a></li>\n<li><a href=\"https://github.com/vlovgr\">Viktor Lövgren</a></li>\n<li><a href=\"https://github.com/koshelev\">Vladimir Koshelev</a></li>\n<li><a href=\"https://github.com/rider-yi\">Yuki Ishikawa</a></li>\n<li><a href=\"https://github.com/zainab-ali\">Zainab Ali</a></li>\n<li>Your name here :-)</li>\n</ul>\n<p dir=\"auto\"><strong>refined</strong> is a <a href=\"http://typelevel.org\" rel=\"nofollow\">Typelevel</a> project. This means we embrace pure,\ntypeful, functional programming, and provide a safe and friendly environment\nfor teaching, learning, and contributing as described in the\n<a href=\"http://scala-lang.org/conduct.html\" rel=\"nofollow\">Scala Code of Conduct</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-related-projects\" class=\"anchor\" aria-hidden=\"true\" href=\"#related-projects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Related projects</h2>\n<ul dir=\"auto\">\n<li><a href=\"http://lara.epfl.ch/~kuncak/papers/SchmidKuncak16CheckingPredicate.pdf\" rel=\"nofollow\">SMT-Based Checking of Predicate-Qualified Types for Scala</a></li>\n<li><a href=\"https://github.com/fwbrasil/bond\">bond</a>: Type-level validation for Scala</li>\n<li><a href=\"http://research.microsoft.com/en-us/projects/f7/\" rel=\"nofollow\">F7</a>: Refinement Types for F#</li>\n<li><a href=\"https://ucsd-progsys.github.io/liquidhaskell-blog/\" rel=\"nofollow\">LiquidHaskell</a>:\nRefinement Types via SMT and Predicate Abstraction</li>\n<li><a href=\"http://blog.racket-lang.org/2017/11/adding-refinement-types.html\" rel=\"nofollow\">Refinement Types in Typed Racket</a></li>\n<li><a href=\"http://nikita-volkov.github.io/refined\" rel=\"nofollow\">refined</a>: Refinement types with static and runtime checking for\nHaskell. <strong>refined</strong> was inspired by this library and even stole its name!</li>\n<li><a href=\"https://github.com/UCSD-PL/refscript\">refscript</a>: Refinement Types for TypeScript</li>\n<li><a href=\"https://design.perl6.org/S12.html#Types_and_Subtypes\" rel=\"nofollow\">Subtypes in Perl 6</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-license\" class=\"anchor\" aria-hidden=\"true\" href=\"#license\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>License</h2>\n<p dir=\"auto\"><strong>refined</strong> is licensed under the MIT license, available at <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">http://opensource.org/licenses/MIT</a>\nand also in the <a href=\"https://github.com/fthomas/refined/blob/master/LICENSE\">LICENSE</a> file.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "fthomas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/141252?v=4",
        "url" : "https://api.github.com/users/fthomas",
        "contributions" : 2102
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 305
      },
      {
        "login" : "mergify[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/10562?v=4",
        "url" : "https://api.github.com/users/mergify%5Bbot%5D",
        "contributions" : 154
      },
      {
        "login" : "howyp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4593903?v=4",
        "url" : "https://api.github.com/users/howyp",
        "contributions" : 45
      },
      {
        "login" : "sh0hei",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/884074?v=4",
        "url" : "https://api.github.com/users/sh0hei",
        "contributions" : 23
      },
      {
        "login" : "Michaelt293",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/14012083?v=4",
        "url" : "https://api.github.com/users/Michaelt293",
        "contributions" : 12
      },
      {
        "login" : "NeQuissimus",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/628342?v=4",
        "url" : "https://api.github.com/users/NeQuissimus",
        "contributions" : 11
      },
      {
        "login" : "kusamakura",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/882152?v=4",
        "url" : "https://api.github.com/users/kusamakura",
        "contributions" : 11
      },
      {
        "login" : "matwojcik",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5006875?v=4",
        "url" : "https://api.github.com/users/matwojcik",
        "contributions" : 10
      },
      {
        "login" : "liff",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/124475?v=4",
        "url" : "https://api.github.com/users/liff",
        "contributions" : 8
      },
      {
        "login" : "fommil",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1914041?v=4",
        "url" : "https://api.github.com/users/fommil",
        "contributions" : 6
      },
      {
        "login" : "Hjdskes",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1260727?v=4",
        "url" : "https://api.github.com/users/Hjdskes",
        "contributions" : 6
      },
      {
        "login" : "matthedude",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1004871?v=4",
        "url" : "https://api.github.com/users/matthedude",
        "contributions" : 4
      },
      {
        "login" : "JohnReedLOL",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5510392?v=4",
        "url" : "https://api.github.com/users/JohnReedLOL",
        "contributions" : 4
      },
      {
        "login" : "ceedubs",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/977929?v=4",
        "url" : "https://api.github.com/users/ceedubs",
        "contributions" : 3
      },
      {
        "login" : "dcastro",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/718166?v=4",
        "url" : "https://api.github.com/users/dcastro",
        "contributions" : 3
      },
      {
        "login" : "BalmungSan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11336950?v=4",
        "url" : "https://api.github.com/users/BalmungSan",
        "contributions" : 3
      },
      {
        "login" : "zainab-ali",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12057118?v=4",
        "url" : "https://api.github.com/users/zainab-ali",
        "contributions" : 3
      },
      {
        "login" : "zaneli",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/379820?v=4",
        "url" : "https://api.github.com/users/zaneli",
        "contributions" : 3
      },
      {
        "login" : "jhnsmth",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15067848?v=4",
        "url" : "https://api.github.com/users/jhnsmth",
        "contributions" : 2
      },
      {
        "login" : "andreamarcolin",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/17480403?v=4",
        "url" : "https://api.github.com/users/andreamarcolin",
        "contributions" : 2
      },
      {
        "login" : "dwijnand",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/344610?v=4",
        "url" : "https://api.github.com/users/dwijnand",
        "contributions" : 2
      },
      {
        "login" : "kubukoz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/894884?v=4",
        "url" : "https://api.github.com/users/kubukoz",
        "contributions" : 2
      },
      {
        "login" : "ClydeMachine",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/19356840?v=4",
        "url" : "https://api.github.com/users/ClydeMachine",
        "contributions" : 2
      },
      {
        "login" : "periklis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/152312?v=4",
        "url" : "https://api.github.com/users/periklis",
        "contributions" : 2
      },
      {
        "login" : "BusyByte",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3882422?v=4",
        "url" : "https://api.github.com/users/BusyByte",
        "contributions" : 2
      },
      {
        "login" : "dm-tran",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7153721?v=4",
        "url" : "https://api.github.com/users/dm-tran",
        "contributions" : 2
      },
      {
        "login" : "kalejami",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12525625?v=4",
        "url" : "https://api.github.com/users/kalejami",
        "contributions" : 2
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://api.github.com/users/xuwei-k",
        "contributions" : 2
      },
      {
        "login" : "derekmorr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6717579?v=4",
        "url" : "https://api.github.com/users/derekmorr",
        "contributions" : 2
      },
      {
        "login" : "umbreak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1430863?v=4",
        "url" : "https://api.github.com/users/umbreak",
        "contributions" : 2
      },
      {
        "login" : "asakaev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3930435?v=4",
        "url" : "https://api.github.com/users/asakaev",
        "contributions" : 1
      },
      {
        "login" : "alexarchambault",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7063723?v=4",
        "url" : "https://api.github.com/users/alexarchambault",
        "contributions" : 1
      },
      {
        "login" : "Bertrand31",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3448510?v=4",
        "url" : "https://api.github.com/users/Bertrand31",
        "contributions" : 1
      },
      {
        "login" : "bpholt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1455476?v=4",
        "url" : "https://api.github.com/users/bpholt",
        "contributions" : 1
      },
      {
        "login" : "cb372",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/106760?v=4",
        "url" : "https://api.github.com/users/cb372",
        "contributions" : 1
      },
      {
        "login" : "clhodapp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/108633?v=4",
        "url" : "https://api.github.com/users/clhodapp",
        "contributions" : 1
      },
      {
        "login" : "densh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/320966?v=4",
        "url" : "https://api.github.com/users/densh",
        "contributions" : 1
      },
      {
        "login" : "qwbarch",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/42880469?v=4",
        "url" : "https://api.github.com/users/qwbarch",
        "contributions" : 1
      },
      {
        "login" : "erikerlandson",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/259898?v=4",
        "url" : "https://api.github.com/users/erikerlandson",
        "contributions" : 1
      },
      {
        "login" : "froth",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2845252?v=4",
        "url" : "https://api.github.com/users/froth",
        "contributions" : 1
      },
      {
        "login" : "steinybot",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4659562?v=4",
        "url" : "https://api.github.com/users/steinybot",
        "contributions" : 1
      },
      {
        "login" : "jedesah",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1780116?v=4",
        "url" : "https://api.github.com/users/jedesah",
        "contributions" : 1
      },
      {
        "login" : "leifwickland",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/731622?v=4",
        "url" : "https://api.github.com/users/leifwickland",
        "contributions" : 1
      },
      {
        "login" : "martinlechner1",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6671209?v=4",
        "url" : "https://api.github.com/users/martinlechner1",
        "contributions" : 1
      },
      {
        "login" : "note",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/345056?v=4",
        "url" : "https://api.github.com/users/note",
        "contributions" : 1
      },
      {
        "login" : "psisoyev",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1637013?v=4",
        "url" : "https://api.github.com/users/psisoyev",
        "contributions" : 1
      },
      {
        "login" : "kwark",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/629786?v=4",
        "url" : "https://api.github.com/users/kwark",
        "contributions" : 1
      },
      {
        "login" : "frgomes",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1257822?v=4",
        "url" : "https://api.github.com/users/frgomes",
        "contributions" : 1
      },
      {
        "login" : "rtyley",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/52038?v=4",
        "url" : "https://api.github.com/users/rtyley",
        "contributions" : 1
      },
      {
        "login" : "guymers",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1100841?v=4",
        "url" : "https://api.github.com/users/guymers",
        "contributions" : 1
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://api.github.com/users/SethTisue",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://api.github.com/users/gitter-badger",
        "contributions" : 1
      },
      {
        "login" : "tscholak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1568873?v=4",
        "url" : "https://api.github.com/users/tscholak",
        "contributions" : 1
      },
      {
        "login" : "vlovgr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1163201?v=4",
        "url" : "https://api.github.com/users/vlovgr",
        "contributions" : 1
      },
      {
        "login" : "aoiroaoino",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2589034?v=4",
        "url" : "https://api.github.com/users/aoiroaoino",
        "contributions" : 1
      },
      {
        "login" : "endertunc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15850565?v=4",
        "url" : "https://api.github.com/users/endertunc",
        "contributions" : 1
      },
      {
        "login" : "ronanM",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/837382?v=4",
        "url" : "https://api.github.com/users/ronanM",
        "contributions" : 1
      },
      {
        "login" : "typeness",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/28794663?v=4",
        "url" : "https://api.github.com/users/typeness",
        "contributions" : 1
      }
    ],
    "commits" : 2768,
    "topics" : [
      "refinement-types",
      "scala",
      "typelevel"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : "https://gitter.im/fthomas/refined",
    "openIssues" : [
      {
        "number" : 1060,
        "title" : "Versioning scheme is not declared",
        "url" : "https://github.com/fthomas/refined/issues/1060"
      },
      {
        "number" : 1056,
        "title" : "Broken link in README",
        "url" : "https://github.com/fthomas/refined/issues/1056"
      },
      {
        "number" : 932,
        "title" : "Macros missing for Scala 3",
        "url" : "https://github.com/fthomas/refined/issues/932"
      },
      {
        "number" : 928,
        "title" : "Missing tests for Scala 3.0+",
        "url" : "https://github.com/fthomas/refined/issues/928"
      },
      {
        "number" : 883,
        "title" : "\"compile-time refinement only works with literals\" for NonNegBigDecimal when a Double literal is used",
        "url" : "https://github.com/fthomas/refined/issues/883"
      },
      {
        "number" : 763,
        "title" : "[discussion] remove shapeless.Nat support",
        "url" : "https://github.com/fthomas/refined/issues/763"
      },
      {
        "number" : 762,
        "title" : "[discussion] eliminating macro dependency for `refineMV`",
        "url" : "https://github.com/fthomas/refined/issues/762"
      },
      {
        "number" : 755,
        "title" : "RFE: A version of Inference[P, C] that fails for implicit chaining",
        "url" : "https://github.com/fthomas/refined/issues/755"
      },
      {
        "number" : 735,
        "title" : "use Equal[_] with case object",
        "url" : "https://github.com/fthomas/refined/issues/735"
      },
      {
        "number" : 702,
        "title" : "PrivateNetwork type does not match the expected IP addresses",
        "url" : "https://github.com/fthomas/refined/issues/702"
      },
      {
        "number" : 661,
        "title" : "AdjacentSpec BigDecimal test case failing on recent Scala 2.13 nightlies",
        "url" : "https://github.com/fthomas/refined/issues/661"
      },
      {
        "number" : 657,
        "title" : "[pureconfig] Refined cannot be read inside a Collection inside a Case Class inside a Collection ",
        "url" : "https://github.com/fthomas/refined/issues/657"
      },
      {
        "number" : 647,
        "title" : "Extract macros to a new refined-macros module",
        "url" : "https://github.com/fthomas/refined/issues/647"
      },
      {
        "number" : 630,
        "title" : "Sorted predicates",
        "url" : "https://github.com/fthomas/refined/issues/630"
      },
      {
        "number" : 622,
        "title" : "Use alexarchambault/sonatype-stats to collect download stats",
        "url" : "https://github.com/fthomas/refined/issues/622"
      },
      {
        "number" : 621,
        "title" : "Support for FiniteDuration",
        "url" : "https://github.com/fthomas/refined/issues/621"
      },
      {
        "number" : 620,
        "title" : "Interval refinement on doubles / floats allows NaNs.",
        "url" : "https://github.com/fthomas/refined/issues/620"
      },
      {
        "number" : 619,
        "title" : "Inference rules are not working for Interval types",
        "url" : "https://github.com/fthomas/refined/issues/619"
      },
      {
        "number" : 616,
        "title" : "Email refinement",
        "url" : "https://github.com/fthomas/refined/issues/616"
      },
      {
        "number" : 613,
        "title" : "Conversion for types with several predicates does not work",
        "url" : "https://github.com/fthomas/refined/issues/613"
      },
      {
        "number" : 580,
        "title" : "Prohibit invalid predicate compositions?",
        "url" : "https://github.com/fthomas/refined/issues/580"
      },
      {
        "number" : 575,
        "title" : "Compile-time refinement for cons",
        "url" : "https://github.com/fthomas/refined/issues/575"
      },
      {
        "number" : 558,
        "title" : "scala.js: applyDynamic does not support passing a vararg parameter",
        "url" : "https://github.com/fthomas/refined/issues/558"
      },
      {
        "number" : 508,
        "title" : "Move predicates into `predicates` package",
        "url" : "https://github.com/fthomas/refined/issues/508"
      },
      {
        "number" : 506,
        "title" : "Boolean refinements \"weak\"",
        "url" : "https://github.com/fthomas/refined/issues/506"
      },
      {
        "number" : 495,
        "title" : "`Refined AnyOf[T :: HNil]` is not compatible with `Refined T`",
        "url" : "https://github.com/fthomas/refined/issues/495"
      },
      {
        "number" : 494,
        "title" : "Unacceptable compilation time",
        "url" : "https://github.com/fthomas/refined/issues/494"
      },
      {
        "number" : 465,
        "title" : "Experiment with newtypes and scala-newtype",
        "url" : "https://github.com/fthomas/refined/issues/465"
      },
      {
        "number" : 460,
        "title" : "Add sbt projects that aggregate all JVM/JS/Native projects",
        "url" : "https://github.com/fthomas/refined/issues/460"
      },
      {
        "number" : 454,
        "title" : "Macro expansion error with generic Inference",
        "url" : "https://github.com/fthomas/refined/issues/454"
      },
      {
        "number" : 450,
        "title" : "NullPointerException raised when attempting conversion on null string",
        "url" : "https://github.com/fthomas/refined/issues/450"
      },
      {
        "number" : 448,
        "title" : "Creating new refinement type crashes with: exception during macro expansion",
        "url" : "https://github.com/fthomas/refined/issues/448"
      },
      {
        "number" : 445,
        "title" : "Compose refinements",
        "url" : "https://github.com/fthomas/refined/issues/445"
      },
      {
        "number" : 443,
        "title" : "[pureconfig] Refined keys for Map[String, T]",
        "url" : "https://github.com/fthomas/refined/issues/443"
      },
      {
        "number" : 418,
        "title" : "Do something about warning with -Xverify",
        "url" : "https://github.com/fthomas/refined/issues/418"
      },
      {
        "number" : 397,
        "title" : "Derive a custom Validate from an existing one",
        "url" : "https://github.com/fthomas/refined/issues/397"
      },
      {
        "number" : 386,
        "title" : "Reduce API surface",
        "url" : "https://github.com/fthomas/refined/issues/386"
      },
      {
        "number" : 381,
        "title" : "Logo for refined?",
        "url" : "https://github.com/fthomas/refined/issues/381"
      },
      {
        "number" : 354,
        "title" : "Document \"types\" module in README",
        "url" : "https://github.com/fthomas/refined/issues/354"
      },
      {
        "number" : 328,
        "title" : "Reduce compilation times",
        "url" : "https://github.com/fthomas/refined/issues/328"
      },
      {
        "number" : 260,
        "title" : "nondeterministic compiler crash ¯\\_(ツ)_/¯",
        "url" : "https://github.com/fthomas/refined/issues/260"
      },
      {
        "number" : 231,
        "title" : "Scalac crashes if a Validate.Plain requires an implicit TypeTag",
        "url" : "https://github.com/fthomas/refined/issues/231"
      },
      {
        "number" : 219,
        "title" : "Use value-level terminology on type-level",
        "url" : "https://github.com/fthomas/refined/issues/219"
      },
      {
        "number" : 217,
        "title" : "Add operations on refined typed",
        "url" : "https://github.com/fthomas/refined/issues/217"
      },
      {
        "number" : 188,
        "title" : "Feature request: Add runtime exception check instead of error \"compile-time refinement only works with literals\"",
        "url" : "https://github.com/fthomas/refined/issues/188"
      },
      {
        "number" : 186,
        "title" : "Scala Exercises for refined",
        "url" : "https://github.com/fthomas/refined/issues/186"
      },
      {
        "number" : 184,
        "title" : "Some form of über-import to access standard functions in single line",
        "url" : "https://github.com/fthomas/refined/issues/184"
      },
      {
        "number" : 166,
        "title" : "Refine to Either[T Refined Not[P], T Refined P]",
        "url" : "https://github.com/fthomas/refined/issues/166"
      },
      {
        "number" : 105,
        "title" : "Documentation about the differences between @@ and Refined",
        "url" : "https://github.com/fthomas/refined/issues/105"
      },
      {
        "number" : 104,
        "title" : "Better error message when a value doesn't satisfy the predicate",
        "url" : "https://github.com/fthomas/refined/issues/104"
      },
      {
        "number" : 101,
        "title" : "Add special exception for RefinePartiallyApplied.force",
        "url" : "https://github.com/fthomas/refined/issues/101"
      },
      {
        "number" : 49,
        "title" : "Show type class instance for Predicate",
        "url" : "https://github.com/fthomas/refined/issues/49"
      },
      {
        "number" : 14,
        "title" : "Represent validation errors as data",
        "url" : "https://github.com/fthomas/refined/issues/14"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "refined",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "logic-programming-and-type-constraints",
    "beginnerIssuesLabel" : null
  }
}