{
  "organization" : "softwaremill",
  "repository" : "macwire",
  "creationDate" : 1365060529000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1660801445327
    }
  },
  "githubInfo" : {
    "homepage" : "https://softwaremill.com/open-source/",
    "description" : "Lightweight and Nonintrusive Scala Dependency Injection Library",
    "logo" : "https://avatars.githubusercontent.com/u/322765?v=4",
    "stars" : 1176,
    "forks" : 64,
    "watchers" : 57,
    "issues" : 67,
    "creationDate" : 1363526404000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/softwaremill/macwire/raw/master/banner.png\"><img src=\"https://github.com/softwaremill/macwire/raw/master/banner.png\" alt=\"MacWire\" style=\"max-width: 100%;\"></a></p>\n<h1 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of Contents</h1>\n<ul dir=\"auto\">\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#macwire\">MacWire</a>\n<ul dir=\"auto\">\n<li><a href=\"#how-wiring-works\">How wiring works</a></li>\n<li><a href=\"#factories\">Factories</a></li>\n<li><a href=\"#factory-methods\">Factory methods</a></li>\n<li><a href=\"#lazy-val-vs-val\"><code>lazy val</code> vs. <code>val</code></a></li>\n<li><a href=\"#recursive-wiring\">Recursive wiring</a></li>\n<li><a href=\"#autowire\">Autowire</a></li>\n<li><a href=\"#composing-modules\">Composing modules</a></li>\n<li><a href=\"#scopes\">Scopes</a></li>\n<li><a href=\"#accessing-wired-instances-dynamically\">Accessing wired instances dynamically</a></li>\n<li><a href=\"#interceptors\">Interceptors</a></li>\n<li><a href=\"#qualifiers\">Qualifiers</a></li>\n<li><a href=\"#multi-wiring-wireset\">Multi Wiring (wireSet)</a></li>\n<li><a href=\"#limitations\">Limitations</a></li>\n<li><a href=\"#akka-integration\">Akka integration</a></li>\n<li><a href=\"#installation-using-with-sbt\">Installation, using with SBT</a></li>\n<li><a href=\"#debugging\">Debugging</a></li>\n<li><a href=\"#scalajs\">Scala.js</a></li>\n<li><a href=\"#future-development---vote\">Future development - vote!</a></li>\n<li><a href=\"#migrating-from-1x-a-id%22migrating%22a\">Migrating from 1.x </a><a id=\"user-content-migrating\"></a></li>\n<li><a href=\"#play-24x-a-id%22play24x%22a\">Play 2.4.x </a><a id=\"user-content-play24x\"></a></li>\n<li><a href=\"#play-25x-a-id%22play25x%22a\">Play 2.5.x </a><a id=\"user-content-play25x\"></a></li>\n<li><a href=\"#scala3-support\">Scala3 support</a></li>\n</ul>\n</li>\n</ul>\n<h1 dir=\"auto\"><a id=\"user-content-macwire\" class=\"anchor\" aria-hidden=\"true\" href=\"#macwire\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>MacWire</h1>\n<p dir=\"auto\"><a href=\"https://gitter.im/adamw/macwire?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/adamw/macwire\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/com.softwaremill.macwire/macros_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/620d1d587f40501a99d4c7a59930c1855ffb3f97d84b5d98e6306238143c304e/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f636f6d2e736f6674776172656d696c6c2e6d6163776972652f6d6163726f735f322e31332f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/com.softwaremill.macwire/macros_2.13/badge.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">MacWire generates <code>new</code> instance creation code of given classes, using values in the enclosing type for constructor\nparameters, with the help of Scala Macros.</p>\n<p dir=\"auto\">For a general introduction to DI in Scala, take a look at the <a href=\"http://di-in-scala.github.io/\" rel=\"nofollow\">Guide to DI in Scala</a>,\nwhich also features MacWire.</p>\n<p dir=\"auto\">MacWire helps to implement the Dependency Injection (DI) pattern, by removing the need to write the\nclass-wiring code by hand. Instead, it is enough to declare which classes should be wired, and how the instances\nshould be accessed (see Scopes).</p>\n<p dir=\"auto\">Classes to be wired should be organized in \"modules\", which can be Scala <code>trait</code>s, <code>class</code>es or <code>object</code>s.\nMultiple modules can be combined using inheritance or composition; values from the inherited/nested modules are also\nused for wiring.</p>\n<p dir=\"auto\">MacWire can be in many cases a replacement for DI containers, offering greater control on when and how classes are\ninstantiated, typesafety and using only language (Scala) mechanisms.</p>\n<p dir=\"auto\">Example usage:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class DatabaseAccess()\nclass SecurityFilter()\nclass UserFinder(databaseAccess: DatabaseAccess, securityFilter: SecurityFilter)\nclass UserStatusReader(userFinder: UserFinder)\n\ntrait UserModule {\n    import com.softwaremill.macwire._\n\n    lazy val theDatabaseAccess   = wire[DatabaseAccess]\n    lazy val theSecurityFilter   = wire[SecurityFilter]\n    lazy val theUserFinder       = wire[UserFinder]\n    lazy val theUserStatusReader = wire[UserStatusReader]\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccess</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SecurityFilter</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinder</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">SecurityFilter</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserStatusReader</span>(<span class=\"pl-v\">userFinder</span>: <span class=\"pl-en\">UserFinder</span>)\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">UserModule</span> {\n    <span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">_</span>\n\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span>   <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">DatabaseAccess</span>]\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theSecurityFilter</span>   <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">SecurityFilter</span>]\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserFinder</span>       <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">UserFinder</span>]\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserStatusReader</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">UserStatusReader</span>]\n}</pre></div>\n<p dir=\"auto\">will generate:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait UserModule {\n    lazy val theDatabaseAccess   = new DatabaseAccess()\n    lazy val theSecurityFilter   = new SecurityFilter()\n    lazy val theUserFinder       = new UserFinder(theDatabaseAccess, theSecurityFilter)\n    lazy val theUserStatusReader = new UserStatusReader(theUserFinder)\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">UserModule</span> {\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span>   <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DatabaseAccess</span>()\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theSecurityFilter</span>   <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SecurityFilter</span>()\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserFinder</span>       <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">UserFinder</span>(theDatabaseAccess, theSecurityFilter)\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserStatusReader</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">UserStatusReader</span>(theUserFinder)\n}</pre></div>\n<p dir=\"auto\">For testing, just extend the base module and override any dependencies with mocks/stubs etc, e.g.:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait UserModuleForTests extends UserModule {\n    override lazy val theDatabaseAccess = mockDatabaseAccess\n    override lazy val theSecurityFilter = mockSecurityFilter\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">UserModuleForTests</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">UserModule</span> {\n    <span class=\"pl-k\">override</span> <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span> <span class=\"pl-k\">=</span> mockDatabaseAccess\n    <span class=\"pl-k\">override</span> <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theSecurityFilter</span> <span class=\"pl-k\">=</span> mockSecurityFilter\n}</pre></div>\n<p dir=\"auto\">The core library has no dependencies.</p>\n<p dir=\"auto\">For more motivation behind the project see also these blogs:</p>\n<ul dir=\"auto\">\n<li><a href=\"http://www.warski.org/blog/2013/03/dependency-injection-with-scala-macros-auto-wiring/\" rel=\"nofollow\">Dependency injection with Scala macros: auto-wiring</a></li>\n<li><a href=\"http://www.warski.org/blog/2013/04/macwire-0-1-framework-less-dependency-injection-with-scala-macros/\" rel=\"nofollow\">MacWire 0.1: Framework-less Dependency Injection with Scala Macros</a></li>\n<li><a href=\"http://www.warski.org/blog/2013/04/macwire-0-2-scopes-are-simple/\" rel=\"nofollow\">MacWire 0.2: Scopes are simple!</a></li>\n<li><a href=\"http://www.warski.org/blog/2013/06/implementing-factories-in-scala-macwire-0-3/\" rel=\"nofollow\">Implementing factories in Scala &amp; MacWire 0.3</a></li>\n<li><a href=\"http://www.warski.org/blog/2013/08/dependency-injection-in-play-with-macwire/\" rel=\"nofollow\">Dependency Injection in Play! with MacWire</a></li>\n<li><a href=\"http://www.warski.org/blog/2013/10/macwire-0-5-interceptors/\" rel=\"nofollow\">MacWire 0.5: Interceptors</a></li>\n<li><a href=\"http://www.warski.org/blog/2014/02/using-scala-traits-as-modules-or-the-thin-cake-pattern/\" rel=\"nofollow\">Using Scala traits as modules, or the \"Thin Cake\" Pattern</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-how-wiring-works\" class=\"anchor\" aria-hidden=\"true\" href=\"#how-wiring-works\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>How wiring works</h2>\n<p dir=\"auto\">For each constructor parameter of the given class, MacWire tries to find a value <a href=\"http://www.scala-lang.org/files/archive/spec/2.11/03-types.html#conformance\" rel=\"nofollow\">conforming</a> to the parameter's\ntype in the enclosing method and trait/class/object:</p>\n<ul dir=\"auto\">\n<li>first it tries to find a unique value declared as a value in the current block, argument of enclosing methods\nand anonymous functions.</li>\n<li>then it tries to find a unique value declared or imported in the enclosing type</li>\n<li>then it tries to find a unique value in parent types (traits/classes)</li>\n<li>if the parameter is marked as implicit, it is ignored by MacWire and handled by the normal implicit resolution mechanism</li>\n</ul>\n<p dir=\"auto\">Here value means either a <code>val</code> or a no-parameter <code>def</code>, as long as the return type matches.</p>\n<p dir=\"auto\">A compile-time error occurs if:</p>\n<ul dir=\"auto\">\n<li>there are multiple values of a given type declared in the enclosing block/method/function's arguments list, enclosing type or its parents.</li>\n<li>parameter is marked as implicit and implicit lookup fails to find a value</li>\n<li>there is no value of a given type</li>\n</ul>\n<p dir=\"auto\">The generated code is then once again type-checked by the Scala compiler.</p>\n<h2 dir=\"auto\"><a id=\"user-content-factories\" class=\"anchor\" aria-hidden=\"true\" href=\"#factories\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Factories</h2>\n<p dir=\"auto\">A factory is simply a method. The constructor of the wired class can contain parameters both from\nthe factory (method) parameters, and from the enclosing/super type(s).</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class DatabaseAccess()\nclass TaxDeductionLibrary(databaseAccess: DatabaseAccess)\nclass TaxCalculator(taxBase: Double, taxDeductionLibrary: TaxDeductionLibrary)\n\ntrait TaxModule {\n    import com.softwaremill.macwire._\n\n    lazy val theDatabaseAccess      = wire[DatabaseAccess]\n    lazy val theTaxDeductionLibrary = wire[TaxDeductionLibrary]\n    def taxCalculator(taxBase: Double) = wire[TaxCalculator]\n    // or: lazy val taxCalculator = (taxBase: Double) =&gt; wire[TaxCalculator]\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccess</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">TaxDeductionLibrary</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">TaxCalculator</span>(<span class=\"pl-v\">taxBase</span>: <span class=\"pl-en\">Double</span>, <span class=\"pl-v\">taxDeductionLibrary</span>: <span class=\"pl-en\">TaxDeductionLibrary</span>)\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">TaxModule</span> {\n    <span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">_</span>\n\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span>      <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">DatabaseAccess</span>]\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theTaxDeductionLibrary</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">TaxDeductionLibrary</span>]\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">taxCalculator</span>(<span class=\"pl-v\">taxBase</span>: <span class=\"pl-en\">Double</span>) <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">TaxCalculator</span>]\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> or: lazy val taxCalculator = (taxBase: Double) =&gt; wire[TaxCalculator]</span>\n}</pre></div>\n<p dir=\"auto\">will generate:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait TaxModule {\n    lazy val theDatabaseAccess      = new DatabaseAccess()\n    lazy val theTaxDeductionLibrary = new TaxDeductionLibrary(theDatabaseAccess)\n    def taxCalculator(taxBase: Double) =\n       new TaxCalculator(taxBase, theTaxDeductionLibrary)\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">TaxModule</span> {\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span>      <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">DatabaseAccess</span>()\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theTaxDeductionLibrary</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">TaxDeductionLibrary</span>(theDatabaseAccess)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">taxCalculator</span>(<span class=\"pl-v\">taxBase</span>: <span class=\"pl-en\">Double</span>) <span class=\"pl-k\">=</span>\n       <span class=\"pl-k\">new</span> <span class=\"pl-en\">TaxCalculator</span>(taxBase, theTaxDeductionLibrary)\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-factory-methods\" class=\"anchor\" aria-hidden=\"true\" href=\"#factory-methods\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Factory methods</h2>\n<p dir=\"auto\">You can also wire an object using a factory method, instead of a constructor. For that, use <code>wireWith</code> instead of\n<code>wire</code>. For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class A()\n\nclass C(a: A, specialValue: Int)\nobject C {\n  def create(a: A) = new C(a, 42)\n}\n\ntrait MyModule {\n  lazy val a = wire[A]\n  lazy val c = wireWith(C.create _)\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">A</span>()\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">C</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">A</span>, <span class=\"pl-v\">specialValue</span>: <span class=\"pl-en\">Int</span>)\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">C</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">create</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">A</span>) <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">C</span>(a, <span class=\"pl-c1\">42</span>)\n}\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">MyModule</span> {\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">A</span>]\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">c</span> <span class=\"pl-k\">=</span> wireWith(<span class=\"pl-en\">C</span>.create _)\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-lazy-val-vs-val\" class=\"anchor\" aria-hidden=\"true\" href=\"#lazy-val-vs-val\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><code>lazy val</code> vs. <code>val</code></h2>\n<p dir=\"auto\">It is safer to use <code>lazy val</code>s, as when using <code>val</code>, if a value is forward-referenced, it's value during initialization\nwill be <code>null</code>. With <code>lazy val</code> the correct order of initialization is resolved by Scala.</p>\n<h2 dir=\"auto\"><a id=\"user-content-recursive-wiring\" class=\"anchor\" aria-hidden=\"true\" href=\"#recursive-wiring\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Recursive wiring</h2>\n<p dir=\"auto\">When using <code>wire</code> and a value for a parameter can't be found, an error is reported. <code>wireRec</code> takes a different\napproach - it tries to recursively create an instance, using normal wiring rules. This allows to explicitly wire\nonly those objects, which are referenced from the code, skipping helper or internal ones.</p>\n<p dir=\"auto\">The previous example becomes:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class DatabaseAccess()\nclass SecurityFilter()\nclass UserFinder(databaseAccess: DatabaseAccess, securityFilter: SecurityFilter)\nclass UserStatusReader(userFinder: UserFinder)\n\ntrait UserModule {\n    import com.softwaremill.macwire._\n\n    lazy val theUserStatusReader = wireRec[UserStatusReader]\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccess</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SecurityFilter</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinder</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">SecurityFilter</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserStatusReader</span>(<span class=\"pl-v\">userFinder</span>: <span class=\"pl-en\">UserFinder</span>)\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">UserModule</span> {\n    <span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">_</span>\n\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserStatusReader</span> <span class=\"pl-k\">=</span> wireRec[<span class=\"pl-en\">UserStatusReader</span>]\n}</pre></div>\n<p dir=\"auto\">and will generate:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait UserModule {\n    lazy val theUserStatusReader = new UserStatusReader(\n\t\tnew UserFinder(new DatabaseAccess(), new SecurityFilter()))\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">UserModule</span> {\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserStatusReader</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">UserStatusReader</span>(\n\t\t<span class=\"pl-k\">new</span> <span class=\"pl-en\">UserFinder</span>(<span class=\"pl-k\">new</span> <span class=\"pl-en\">DatabaseAccess</span>(), <span class=\"pl-k\">new</span> <span class=\"pl-en\">SecurityFilter</span>()))\n}</pre></div>\n<p dir=\"auto\">This feature is inspired by @yakivy's work on <a href=\"https://github.com/yakivy/jam\">jam</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-autowire\" class=\"anchor\" aria-hidden=\"true\" href=\"#autowire\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Autowire</h2>\n<p dir=\"auto\"><strong>Warning</strong>: <code>autowire</code> is an experimental feature, if you have any feedback regarding its usage, let us know! Future releases might break source/binary compatibility. It is available for Scala 2 only for now.</p>\n<p dir=\"auto\">Dependency: <code>\"com.softwaremill.macwire\" %% \"macrosautocats\" % \"2.5.7\"</code></p>\n<p dir=\"auto\">In case you need to build an instance from some particular instances and factory methods you can leverage <code>autowire</code>. This feature is intended to integrate with effect-management libraries (currently we support <a href=\"https://github.com/typelevel/cats-effect\">cats-effect</a>).</p>\n<p dir=\"auto\"><code>autowire</code> takes as an argument a list of arguments which may contain:</p>\n<ul dir=\"auto\">\n<li>values (e.g. <code>new A()</code>)</li>\n<li>factory methods (e.g. <code>C.create _</code>)</li>\n<li>factory methods that return <code>cats.effect.Resource</code> or <code>cats.effect.IO</code> (e.g. <code>C.createIO _</code>)</li>\n<li><code>cats.effect.Resource</code> (e.g. <code>cats.effect.Resource[IO].pure(new A())</code>)</li>\n<li><code>cats.effect.IO</code> (e.g. <code>cats.effect.IO.pure(new A())</code>)</li>\n</ul>\n<p dir=\"auto\">Using the dependencies from the given arguments it creates an instance of the given type. Any missing instances are created using their primary constructor, provided that the dependencies are met. If this is not possible, a compile-time error is reported. In other words, a <code>wireRec</code> is performed, bypassing the instances search phase.</p>\n<p dir=\"auto\">The result of the wiring is always wrapped in <code>cats.effect.Resource</code>. For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import cats.effect._\n\nclass DatabaseAccess()\n\nclass SecurityFilter private (databaseAccess: DatabaseAccess)\nobject SecurityFilter {\n  def apply(databaseAccess: DatabaseAccess): SecurityFilter = new SecurityFilter(databaseAccess)\n}\n\nclass UserFinder(databaseAccess: DatabaseAccess, securityFilter: SecurityFilter)\nclass UserStatusReader(databaseAccess: DatabaseAccess, userFinder: UserFinder)\n\nobject UserModule {\n  import com.softwaremill.macwire.autocats._\n\n  val theDatabaseAccess: Resource[IO, DatabaseAccess] = Resource.pure(new DatabaseAccess())\n\n  val theUserStatusReader: Resource[IO, UserStatusReader] = autowire[UserStatusReader](theDatabaseAccess)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">cats</span>.<span class=\"pl-en\">effect</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccess</span>()\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SecurityFilter</span> <span class=\"pl-k\">private</span> (<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>)\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">SecurityFilter</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">apply</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>)<span class=\"pl-k\">:</span> <span class=\"pl-en\">SecurityFilter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SecurityFilter</span>(databaseAccess)\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinder</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">SecurityFilter</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserStatusReader</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">userFinder</span>: <span class=\"pl-en\">UserFinder</span>)\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">UserModule</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">autocats</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Resource</span>[<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">DatabaseAccess</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Resource</span>.pure(<span class=\"pl-k\">new</span> <span class=\"pl-en\">DatabaseAccess</span>())\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserStatusReader</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Resource</span>[<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">UserStatusReader</span>] <span class=\"pl-k\">=</span> autowire[<span class=\"pl-en\">UserStatusReader</span>](theDatabaseAccess)\n}</pre></div>\n<p dir=\"auto\">will generate:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[...]\nobject UserModule {\n  import com.softwaremill.macwire.autocats._\n\n  val theDatabaseAccess: Resource[IO, DatabaseAccess] = Resource.pure(new DatabaseAccess())\n\n  val theUserStatusReader: Resource[IO, UserStatusReader] = UserModule.this.theDatabaseAccess.flatMap(\n    da =&gt; Resource.pure[IO, UserStatusReader](new UserStatusReader(da, new UserFinder(da, SecurityFilter.apply(da))))\n  )\n}\"><pre>[...]\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">UserModule</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">autocats</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Resource</span>[<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">DatabaseAccess</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">Resource</span>.pure(<span class=\"pl-k\">new</span> <span class=\"pl-en\">DatabaseAccess</span>())\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserStatusReader</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Resource</span>[<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">UserStatusReader</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">UserModule</span>.<span class=\"pl-c1\">this</span>.theDatabaseAccess.flatMap(\n    da <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Resource</span>.pure[<span class=\"pl-en\">IO</span>, <span class=\"pl-en\">UserStatusReader</span>](<span class=\"pl-k\">new</span> <span class=\"pl-en\">UserStatusReader</span>(da, <span class=\"pl-k\">new</span> <span class=\"pl-en\">UserFinder</span>(da, <span class=\"pl-en\">SecurityFilter</span>.apply(da))))\n  )\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-composing-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#composing-modules\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Composing modules</h2>\n<p dir=\"auto\">Modules (traits or classes containing parts of the object graph) can be combined using inheritance or composition.\nThe inheritance case is straightforward, as <code>wire</code> simply looks for values in parent traits/classes. With composition,\nyou need to tell MacWire that it should look inside the nested modules.</p>\n<p dir=\"auto\">To do that, you can use imports:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class FacebookAccess(userFind: UserFinder)\n\nclass UserModule {\n  lazy val userFinder = ... // as before\n}\n\nclass SocialModule(userModule: UserModule) {\n  import userModule._\n\n  lazy val facebookAccess = wire[FacebookAccess]\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">FacebookAccess</span>(<span class=\"pl-v\">userFind</span>: <span class=\"pl-en\">UserFinder</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserModule</span> {\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">userFinder</span> <span class=\"pl-k\">=</span> ... <span class=\"pl-c\"><span class=\"pl-c\">//</span> as before</span>\n}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SocialModule</span>(<span class=\"pl-v\">userModule</span>: <span class=\"pl-en\">UserModule</span>) {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">userModule</span>.<span class=\"pl-en\">_</span>\n\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">facebookAccess</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">FacebookAccess</span>]\n}</pre></div>\n<p dir=\"auto\">Or, if you are using that pattern a lot, you can annotate your modules using <code>@Module</code>, and they will be used when\nsearching for values automatically:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class FacebookAccess(userFind: UserFinder)\n\n@Module\nclass UserModule { ... } // as before\n\nclass SocialModule(userModule: UserModule) {\n  lazy val facebookAccess = wire[FacebookAccess]\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">FacebookAccess</span>(<span class=\"pl-v\">userFind</span>: <span class=\"pl-en\">UserFinder</span>)\n\n<span class=\"pl-k\">@</span><span class=\"pl-en\">Module</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserModule</span> { ... } <span class=\"pl-c\"><span class=\"pl-c\">//</span> as before</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SocialModule</span>(<span class=\"pl-v\">userModule</span>: <span class=\"pl-en\">UserModule</span>) {\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">facebookAccess</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">FacebookAccess</span>]\n}</pre></div>\n<p dir=\"auto\"><strong>Warning</strong>: the <code>@Module</code> annotation is an experimental feature, if you have any feedback regarding its usage, let\nus know!</p>\n<h2 dir=\"auto\"><a id=\"user-content-scopes\" class=\"anchor\" aria-hidden=\"true\" href=\"#scopes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scopes</h2>\n<p dir=\"auto\">There are two \"built-in\" scopes, depending on how the dependency is defined:</p>\n<ul dir=\"auto\">\n<li>singleton: <code>lazy val</code> / <code>val</code></li>\n<li>dependent - separate instance for each dependency usage: <code>def</code></li>\n</ul>\n<p dir=\"auto\">MacWire also supports user-defined scopes, which can be used to implement request or session scopes in web applications.\nThe <code>proxy</code> subproject defines a <code>Scope</code> trait, which has two methods:</p>\n<ul dir=\"auto\">\n<li><code>apply</code>, to create a scoped value</li>\n<li><code>get</code>, to get or create the current value from the scope</li>\n</ul>\n<p dir=\"auto\">To define a dependency as scoped, we need a scope instance, e.g.:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait WebModule {\n   lazy val loggedInUser = session(new LoggedInUser)\n\n   def session: Scope\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">WebModule</span> {\n   <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loggedInUser</span> <span class=\"pl-k\">=</span> session(<span class=\"pl-k\">new</span> <span class=\"pl-en\">LoggedInUser</span>)\n\n   <span class=\"pl-k\">def</span> <span class=\"pl-en\">session</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Scope</span>\n}</pre></div>\n<p dir=\"auto\">With abstract scopes as above, it is possible to use no-op scopes for testing (<code>NoOpScope</code>).</p>\n<p dir=\"auto\">There's an implementation of <code>Scope</code> targeted at classical synchronous frameworks, <code>ThreadLocalScope</code>. The apply method\nof this scope creates a proxy (using <a href=\"http://www.csg.is.titech.ac.jp/~chiba/javassist/\" rel=\"nofollow\">javassist</a>); the get method\nstores the value in a thread local. The proxy should be defined as a <code>val</code> or <code>lazy val</code>.</p>\n<p dir=\"auto\">In a web application, the scopes have to be associated and disassociated with storages.\nThis can be done for example in a servlet filter.\nTo implement a:</p>\n<ul dir=\"auto\">\n<li>request scope, we need a new empty storage for every request. The <code>associateWithEmptyStorage</code> is useful here</li>\n<li>session scope, the storage (a <code>Map</code>) should be stored in the <code>HttpSession</code>. The <code>associate(Map)</code> method is useful here</li>\n</ul>\n<p dir=\"auto\">For example usage see the\n<a href=\"https://github.com/adamw/macwire/tree/master/examples/scalatra/src/main/scala/com/softwaremill/macwire/examples/scalatra\">MacWire+Scalatra example</a>\nsources.</p>\n<p dir=\"auto\">You can run the example with <code>sbt examples-scalatra/run</code> and going to <a href=\"http://localhost:8080\" rel=\"nofollow\">http://localhost:8080</a>.</p>\n<p dir=\"auto\">Note that the <code>proxy</code> subproject does not depend on MacWire core, and can be used stand-alone with manual wiring or any other\nframeworks.</p>\n<h2 dir=\"auto\"><a id=\"user-content-accessing-wired-instances-dynamically\" class=\"anchor\" aria-hidden=\"true\" href=\"#accessing-wired-instances-dynamically\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Accessing wired instances dynamically</h2>\n<p dir=\"auto\">To integrate with some frameworks (e.g. <a href=\"http://www.playframework.com/\" rel=\"nofollow\">Play 2</a>) or to create instances of classes\nwhich names are only known at run-time (e.g. plugins) it is necessary to access the wired instances dynamically.\nMacWire contains a utility class in the <code>util</code> subproject, <code>Wired</code>, to support such functionality.</p>\n<p dir=\"auto\">An instance of <code>Wired</code> can be obtained using the <code>wiredInModule</code> macro, given an instance of a module containing the\nwired object graph. Any <code>vals</code>, <code>lazy val</code>s and parameter-less <code>def</code>s (factories) from the module which are references\nwill be available in the <code>Wired</code> instance.</p>\n<p dir=\"auto\">The object graph in the module can be hand-wired, wired using <code>wire</code>, or a result of any computation.</p>\n<p dir=\"auto\"><code>Wired</code> has two basic functionalities: looking up an instance by its class (or trait it implements), and instantiating\nnew objects using the available dependencies. You can also extend <code>Wired</code> with new instances/instance factories.</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// 1. Defining the object graph and the module\ntrait DatabaseConnector\nclass MysqlDatabaseConnector extends DatabaseConnector\n\nclass MyApp {\n    def securityFilter = new SecurityFilter()\n    val databaseConnector = new MysqlDatabaseConnector()\n}\n\n// 2. Creating a Wired instance\nimport com.softwaremill.macwire._\nval wired = wiredInModule(new MyApp)\n\n// 3. Dynamic lookup of instances\nwired.lookup(classOf[SecurityFilter])\n\n// Returns the mysql database connector, even though its type is MysqlDatabaseConnector, which is\n// assignable to DatabaseConnector.\nwired.lookup(classOf[DatabaseConnector])\n\n// 4. Instantiation using the available dependencies\n{\n    package com.softwaremill\n    class AuthenticationPlugin(databaseConnector: DatabaseConnector)\n}\n\n// Creates a new instance of the given class using the dependencies available in MyApp\nwired.wireClassInstanceByName(&quot;com.softwaremill.AuthenticationPlugin&quot;)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 1. Defining the object graph and the module</span>\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">DatabaseConnector</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MysqlDatabaseConnector</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">DatabaseConnector</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyApp</span> {\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">securityFilter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SecurityFilter</span>()\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">databaseConnector</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MysqlDatabaseConnector</span>()\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 2. Creating a Wired instance</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">wired</span> <span class=\"pl-k\">=</span> wiredInModule(<span class=\"pl-k\">new</span> <span class=\"pl-en\">MyApp</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 3. Dynamic lookup of instances</span>\nwired.lookup(<span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">SecurityFilter</span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Returns the mysql database connector, even though its type is MysqlDatabaseConnector, which is</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> assignable to DatabaseConnector.</span>\nwired.lookup(<span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">DatabaseConnector</span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 4. Instantiation using the available dependencies</span>\n{\n    <span class=\"pl-k\">package</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">AuthenticationPlugin</span>(<span class=\"pl-v\">databaseConnector</span>: <span class=\"pl-en\">DatabaseConnector</span>)\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Creates a new instance of the given class using the dependencies available in MyApp</span>\nwired.wireClassInstanceByName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.AuthenticationPlugin<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-interceptors\" class=\"anchor\" aria-hidden=\"true\" href=\"#interceptors\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Interceptors</h2>\n<p dir=\"auto\">MacWire contains an implementation of interceptors, which can be applied to class instances in the modules.\nSimilarly to scopes, the <code>proxy</code> subproject defines an <code>Interceptor</code> trait, which has only one method: <code>apply</code>.\nWhen applied to an instance, it should return an instance of the same class, but with the interceptor applied.</p>\n<p dir=\"auto\">There are two implementations of the <code>Interceptor</code> trait provided:</p>\n<ul dir=\"auto\">\n<li><code>NoOpInterceptor</code>: returns the given instance without changes</li>\n<li><code>ProxyingInterceptor</code>: proxies the instance, and returns the proxy. A provided function is called\nwith information on the invocation</li>\n</ul>\n<p dir=\"auto\">Interceptors can be abstract in modules. E.g.:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait BusinessLogicModule {\n   lazy val moneyTransferer = transactional(wire[MoneyTransferer])\n\n   def transactional: Interceptor\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">BusinessLogicModule</span> {\n   <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">moneyTransferer</span> <span class=\"pl-k\">=</span> transactional(wire[<span class=\"pl-en\">MoneyTransferer</span>])\n\n   <span class=\"pl-k\">def</span> <span class=\"pl-en\">transactional</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Interceptor</span>\n}</pre></div>\n<p dir=\"auto\">During tests, you can then use the <code>NoOpInterceptor</code>. In production code or integration tests, you can specify a real\ninterceptor, either by extending the <code>ProxyingInterceptor</code> trait, or by passing a function to the\n<code>ProxyingInterceptor</code> object:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"object MyApplication extends BusinessLogicModule {\n    lazy val tm = wire[TransactionManager]\n\n    lazy val transactional = ProxyingInterceptor { ctx =&gt;\n        try {\n            tm.begin()\n            val result = ctx.proceed()\n            tm.commit()\n\n            result\n        } catch {\n            case e: Exception =&gt; tm.rollback()\n        }\n    }\n}\"><pre><span class=\"pl-k\">object</span> <span class=\"pl-en\">MyApplication</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BusinessLogicModule</span> {\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">tm</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">TransactionManager</span>]\n\n    <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">transactional</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ProxyingInterceptor</span> { ctx <span class=\"pl-k\">=&gt;</span>\n        <span class=\"pl-k\">try</span> {\n            tm.begin()\n            <span class=\"pl-k\">val</span> <span class=\"pl-smi\">result</span> <span class=\"pl-k\">=</span> ctx.proceed()\n            tm.commit()\n\n            result\n        } <span class=\"pl-k\">catch</span> {\n            <span class=\"pl-k\">case</span> <span class=\"pl-v\">e</span>: <span class=\"pl-en\">Exception</span> <span class=\"pl-k\">=&gt;</span> tm.rollback()\n        }\n    }\n}</pre></div>\n<p dir=\"auto\">The <code>ctx</code> is an instance of an <code>InvocationContext</code>, and contains information on the parameters passed to the method,\nthe method itself, and the target object. It also allows to proceed with the invocation with the same or changed\nparameters.</p>\n<p dir=\"auto\">For more general AOP, e.g. if you want to apply an interceptor to all methods matching a given pointcut expression,\nyou should use <a href=\"http://eclipse.org/aspectj/\" rel=\"nofollow\">AspectJ</a> or an equivalent library. The interceptors that are implemented\nin MacWire correspond to annotation-based interceptors in Java.</p>\n<h2 dir=\"auto\"><a id=\"user-content-qualifiers\" class=\"anchor\" aria-hidden=\"true\" href=\"#qualifiers\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Qualifiers</h2>\n<p dir=\"auto\">Sometimes you have multiple objects of the same type that you want to use during wiring. Macwire needs to have some\nway of telling the instances apart. As with other things, the answer is: types! Even when not using <code>wire</code>, it may\nbe useful to give the instances distinct types, to get compile-time checking.</p>\n<p dir=\"auto\">For that purpose Macwire includes support for tagging via <a href=\"https://github.com/softwaremill/scala-common\">scala-common</a>,\nwhich lets you attach tags to instances to qualify them. This\nis a compile-time only operation, and doesn't affect the runtime. The tags are derived from\n<a href=\"https://gist.github.com/milessabin/89c9b47a91017973a35f\">Miles Sabin's gist</a>.</p>\n<p dir=\"auto\">To bring the tagging into scope, import <code>com.softwaremill.tagging._</code>.</p>\n<p dir=\"auto\">Using tagging has two sides. In the constructor, when declaring a dependency, you need to declare what tag it needs\nto have. You can do this with the <code>_ @@ _</code> type constructor, or if you prefer another syntax <code>Tagged[_, _]</code>. The first\ntype parameter is the type of the dependency, the second is a tag.</p>\n<p dir=\"auto\">The tag can be any type, but usually it is just an empty marker trait.</p>\n<p dir=\"auto\">When defining the available instances, you need to specify which instance has which tag. This can be done with the\n<code>taggedWith[_]</code> method, which returns a tagged instance (<code>A.taggedWith[T]: A @@ T</code>). Tagged instances can be used\nas regular ones, without any constraints.</p>\n<p dir=\"auto\">The <code>wire</code> macro does not contain any special support for tagging, everything is handled by subtyping. For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class Berry()\ntrait Black\ntrait Blue\n\ncase class Basket(blueberry: Berry @@ Blue, blackberry: Berry @@ Black)\n\nlazy val blueberry = wire[Berry].taggedWith[Blue]\nlazy val blackberry = wire[Berry].taggedWith[Black]\nlazy val basket = wire[Basket]\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Berry</span>()\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">Black</span>\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">Blue</span>\n\n<span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Basket</span>(<span class=\"pl-v\">blueberry</span>: <span class=\"pl-en\">Berry</span> <span class=\"pl-k\">@@</span> <span class=\"pl-en\">Blue</span>, <span class=\"pl-v\">blackberry</span>: <span class=\"pl-en\">Berry</span> <span class=\"pl-k\">@@</span> <span class=\"pl-en\">Black</span>)\n\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">blueberry</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Berry</span>].taggedWith[<span class=\"pl-en\">Blue</span>]\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">blackberry</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Berry</span>].taggedWith[<span class=\"pl-en\">Black</span>]\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">basket</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Basket</span>]</pre></div>\n<p dir=\"auto\">Multiple tags can be combined using the <code>andTaggedWith</code> method. E.g. if we had a berry that is both blue and black:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"lazy val blackblueberry = wire[Berry].taggedWith[Black].andTaggedWith[Blue]\"><pre><span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">blackblueberry</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Berry</span>].taggedWith[<span class=\"pl-en\">Black</span>].andTaggedWith[<span class=\"pl-en\">Blue</span>]</pre></div>\n<p dir=\"auto\">The resulting value has type <code>Berry @ (Black with Blue)</code> and can be used both as a blackberry and as a blueberry.</p>\n<h2 dir=\"auto\"><a id=\"user-content-multi-wiring-wireset\" class=\"anchor\" aria-hidden=\"true\" href=\"#multi-wiring-wireset\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Multi Wiring (wireSet)</h2>\n<p dir=\"auto\">Using <code>wireSet</code> you can obtain a set of multiple instances of the same type. This is done without constructing the set explicitly. All instances of the same type which are found by MacWire are used to construct the set.</p>\n<p dir=\"auto\">Consider the below example. Let's suppose that you want to create a <code>RockBand(musicians: Set[Musician])</code> object. It's easy to do so using the <code>wireSet</code> functionality:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"trait Musician\nclass RockBand(musicians: Set[Musician])\n\ntrait RockBandModule {\n  lazy val singer    = new Musician {}\n  lazy val guitarist = new Musician {}\n  lazy val drummer   = new Musician {}\n  lazy val bassist   = new Musician {}\n\n  lazy val musicians = wireSet[Musician] // all above musicians will be wired together\n                                         // musicians has type Set[Musician]\n\n  lazy val rockBand  = wire[RockBand]\n}\"><pre><span class=\"pl-k\">trait</span> <span class=\"pl-en\">Musician</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">RockBand</span>(<span class=\"pl-v\">musicians</span>: <span class=\"pl-en\">Set</span>[<span class=\"pl-en\">Musician</span>])\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">RockBandModule</span> {\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">singer</span>    <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Musician</span> {}\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">guitarist</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Musician</span> {}\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">drummer</span>   <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Musician</span> {}\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">bassist</span>   <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Musician</span> {}\n\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">musicians</span> <span class=\"pl-k\">=</span> wireSet[<span class=\"pl-en\">Musician</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span> all above musicians will be wired together</span>\n                                         <span class=\"pl-c\"><span class=\"pl-c\">//</span> musicians has type Set[Musician]</span>\n\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">rockBand</span>  <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">RockBand</span>]\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-limitations\" class=\"anchor\" aria-hidden=\"true\" href=\"#limitations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Limitations</h2>\n<p dir=\"auto\">When:</p>\n<ul dir=\"auto\">\n<li>referencing wired values within the trait/class/object</li>\n<li>using multiple modules in the same compilation unit</li>\n<li>using multiple modules with scopes</li>\n</ul>\n<p dir=\"auto\">due to limitations of the current macros implementation in Scala (for more details see\n<a href=\"https://groups.google.com/forum/?fromgroups=#!topic/scala-user/k_2KCvO5g04\" rel=\"nofollow\">this discussion</a>)\nto avoid compilation errors it is recommended to add type ascriptions to the dependencies. This is a way of helping\nthe type-checker that is invoked by the macro to figure out the types of the values which\ncan be wired.</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class A()\nclass B(a: A)\n\n// note the explicit type. Without it wiring would fail with recursive type compile errors\nlazy val theA: A = wire[A]\n// reference to theA; if for some reason we need explicitly write the constructor call\nlazy val theB = new B(theA)\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">A</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">B</span>(<span class=\"pl-v\">a</span>: <span class=\"pl-en\">A</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> note the explicit type. Without it wiring would fail with recursive type compile errors</span>\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theA</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">A</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">A</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> reference to theA; if for some reason we need explicitly write the constructor call</span>\n<span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theB</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">B</span>(theA)</pre></div>\n<p dir=\"auto\">This is an inconvenience, but hopefully will get resolved once post-typer macros are introduced to the language.</p>\n<p dir=\"auto\">Also, wiring will probably not work properly for traits and classes defined inside the containing trait/class, or in\nsuper traits/classes.</p>\n<p dir=\"auto\">Note that the type ascription may be a subtype of the wired type. This can be useful if you want to expose e.g. a trait\nthat the wired class extends, instead of the full implementation.</p>\n<h2 dir=\"auto\"><a id=\"user-content-akka-integration\" class=\"anchor\" aria-hidden=\"true\" href=\"#akka-integration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Akka integration</h2>\n<p dir=\"auto\">Macwire provides wiring suport for <a href=\"http://akka.io\" rel=\"nofollow\">akka</a> through the <code>macrosAkka</code> module.\n<a href=\"https://github.com/adamw/macwire/blob/master/macrosAkkaTests/src/test/scala/com/softwaremill/macwire/akkasupport/demo/Demo.scala\">Here</a>\nyou can find example code. The module adds three macros <code>wireAnonymousActor[A]</code>, <code>wireActor[A]</code> and <code>wireProps[A]</code>\nwhich help create instances of <code>akka.actor.ActorRef</code> and <code>akka.actor.Props</code>.</p>\n<p dir=\"auto\">These macros require an <code>ActoRefFactory</code> (<code>ActorSystem</code> or <code>Actor.context</code>) to be in scope as a dependency.\nIf actor's primary constructor has dependencies - they are required to be in scope as well.</p>\n<p dir=\"auto\">Example usage:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import akka.actor.{Actor, ActorRef, ActorSystem}\n\nclass DatabaseAccess()\nclass SecurityFilter()\nclass UserFinderActor(databaseAccess: DatabaseAccess, securityFilter: SecurityFilter) extends Actor {\n  override def receive: Receive = {\n    case m =&gt; // ...\n  }\n}\n\nimport com.softwaremill.macwire._\nimport com.softwaremill.macwire.akkasupport._\n\nval theDatabaseAccess = wire[DatabaseAccess] //1st dependency for UserFinderActor\n                                             //it compiles to: val theDatabaseAccess = new DatabaseAccess\n\nval theSecurityFilter = wire[SecurityFilter] //2nd dependency for UserFinderActor\n                                             //it compiles to: val theSecurityFilter = new SecurityFilter\n\nval system = ActorSystem(&quot;actor-system&quot;) //there must be instance of ActoRefFactory in scope\n\nval theUserFinder = wireActor[UserFinderActor](&quot;userFinder&quot;)\n//this compiles to:\n//lazy val theUserFinder = system.actorOf(Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter), &quot;userFinder&quot;)\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">akka</span>.<span class=\"pl-en\">actor</span>.{<span class=\"pl-en\">Actor</span>, <span class=\"pl-en\">ActorRef</span>, <span class=\"pl-en\">ActorSystem</span>}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccess</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SecurityFilter</span>()\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinderActor</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">SecurityFilter</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">receive</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Receive</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-k\">case</span> m <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> ...</span>\n  }\n}\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">akkasupport</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">theDatabaseAccess</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">DatabaseAccess</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span>1st dependency for UserFinderActor</span>\n                                             <span class=\"pl-c\"><span class=\"pl-c\">//</span>it compiles to: val theDatabaseAccess = new DatabaseAccess</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">theSecurityFilter</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">SecurityFilter</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span>2nd dependency for UserFinderActor</span>\n                                             <span class=\"pl-c\"><span class=\"pl-c\">//</span>it compiles to: val theSecurityFilter = new SecurityFilter</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">system</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">ActorSystem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>actor-system<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span>there must be instance of ActoRefFactory in scope</span>\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserFinder</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">UserFinderActor</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>userFinder<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>this compiles to:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>lazy val theUserFinder = system.actorOf(Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter), \"userFinder\")</span></pre></div>\n<p dir=\"auto\">In order to make it working all dependencies created <code>Actor</code>'s (<code>UserFinderActor</code>'s) primary constructor and\ninstance of the <code>akka.actor.ActorRefFactory</code> must be in scope. In above example this is all true. Dependencies\nof the <code>UserFinderActor</code> are <code>DatabaseAccess</code> and <code>SecurityFilter</code> and they are in scope.\nThe <code>ActorRefFactory</code> is in scope as well because <code>ActorSystem</code> which is subtype of it is there.</p>\n<p dir=\"auto\">Creating actor within another actor is even simpler than in first example because we don't need to have <code>ActorSystem</code> in scope.\nThe <code>ActorRefFactory</code> is here because <code>Actor.context</code> is subtype of it. Let's see this in action:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class UserStatusReaderActor(theDatabaseAccess: DatabaseAccess) extends Actor {\n  val theSecurityFilter = wire[SecurityFilter]\n\n  val userFinder = wireActor[UserFinderActor](&quot;userFinder&quot;)\n  //this compiles to:\n  //val userFinder = context.actorOf(Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter), &quot;userFinder&quot;)\n\n  override def receive = ...\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">UserStatusReaderActor</span>(<span class=\"pl-v\">theDatabaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> {\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">theSecurityFilter</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">SecurityFilter</span>]\n\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">userFinder</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">UserFinderActor</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>userFinder<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>this compiles to:</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>val userFinder = context.actorOf(Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter), \"userFinder\")</span>\n\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">receive</span> <span class=\"pl-k\">=</span> ...\n}</pre></div>\n<p dir=\"auto\">The difference is that previously macro expanded into <code>system.actorOf(...)</code>\nand when inside another actor it expanded into <code>context.actorOf(...)</code>.</p>\n<p dir=\"auto\">It's possible to create anonymous actors. <code>wireAnonymousActor</code> is for it:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val userFinder = wireAnonymousActor[UserFinderActor]\n//this compiles to:\n//val userFinder = context.actorOf(Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">userFinder</span> <span class=\"pl-k\">=</span> wireAnonymousActor[<span class=\"pl-en\">UserFinderActor</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>this compiles to:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>val userFinder = context.actorOf(Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter))</span></pre></div>\n<p dir=\"auto\">How about creating <code>akka.actor.Props</code>? It's there and can be achieved by calling <code>wireProps[A]</code>.\nWiring only <code>Props</code> can be handy when it's required to setup the <code>Props</code> before passing them to the <code>actorOf(...)</code> method.</p>\n<p dir=\"auto\">Let's say we want to create some actor with router. It can be done as below:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val userFinderProps = wireProps[UserFinderActor] //create Props\n  //This compiles to: Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter)\n  .withRouter(RoundRobinPool(4)) //change it according requirements\nval userFinderActor = system.actorOf(userFinderProps, &quot;userFinder&quot;)  //create the actor\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">userFinderProps</span> <span class=\"pl-k\">=</span> wireProps[<span class=\"pl-en\">UserFinderActor</span>] <span class=\"pl-c\"><span class=\"pl-c\">//</span>create Props</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>This compiles to: Props(classOf[UserFinderActor], theDatabaseAccess, theSecurityFilter)</span>\n  .withRouter(<span class=\"pl-en\">RoundRobinPool</span>(<span class=\"pl-c1\">4</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span>change it according requirements</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">userFinderActor</span> <span class=\"pl-k\">=</span> system.actorOf(userFinderProps, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>userFinder<span class=\"pl-pds\">\"</span></span>)  <span class=\"pl-c\"><span class=\"pl-c\">//</span>create the actor</span></pre></div>\n<p dir=\"auto\">How about creating actors which depends on <code>ActorRef</code>s? The simplest way is to\npass them as arguments to the constructor. But how to distinguish two <code>actorRef</code>s representing two different actors?\nThey have the same type though.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class DatabaseAccessActor extends Actor { ... }\nclass SecurityFilterActor extends Actor { ... }\nval db: ActorRef = wireActor[DatabaseAccessActor](&quot;db&quot;)\nval filter: ActorRef = wireActor[SecurityFilterActor](&quot;filter&quot;)\nclass UserFinderActor(databaseAccess: ActorRef, securityFilter: ActorRef) extends Actor {...}\n//val userFinder = wireActor[UserFinderActor] wont work here\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccessActor</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> { ... }\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SecurityFilterActor</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> { ... }\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">db</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ActorRef</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">DatabaseAccessActor</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>db<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">filter</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ActorRef</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">SecurityFilterActor</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filter<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinderActor</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">ActorRef</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">ActorRef</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> {...}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>val userFinder = wireActor[UserFinderActor] wont work here</span></pre></div>\n<p dir=\"auto\">We can't just call <code>wireActor[UserFinderActor]</code> because it's not obvious which instance of ActorRef\nis for <code>databaseAccess</code> and which are for <code>securityFilter</code>. They are both of the same type - <code>ActorRef</code>.</p>\n<p dir=\"auto\">The solution for it is to use earlier described <a href=\"#qualifiers\">qualifiers</a>.\nIn above example solution for wiring may look like this:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sealed trait DatabaseAccess //marker type\nclass DatabaseAccessActor extends Actor { ... }\nsealed trait SecurityFilter //marker type\nclass SecurityFilterActor extends Actor { ... }\n\nval db: ActorRef @@ DatabaseAccess = wireActor[DatabaseAccessActor](&quot;db&quot;).taggedWith[DatabaseAccess]\nval filter: ActorRef @@ SecurityFilter = wireActor[SecurityFilterActor](&quot;filter&quot;).taggedWith[SecurityFilter]\n\nclass UserFinderActor(databaseAccess: ActorRef @@ DatabaseAccess, securityFilter: ActorRef @@ SecurityFilter) extends Actor {...}\n\nval userFinder = wireActor[UserFinderActor]\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">DatabaseAccess</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span>marker type</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DatabaseAccessActor</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> { ... }\n<span class=\"pl-k\">sealed</span> <span class=\"pl-k\">trait</span> <span class=\"pl-en\">SecurityFilter</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span>marker type</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SecurityFilterActor</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> { ... }\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">db</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ActorRef</span> <span class=\"pl-k\">@@</span> <span class=\"pl-en\">DatabaseAccess</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">DatabaseAccessActor</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>db<span class=\"pl-pds\">\"</span></span>).taggedWith[<span class=\"pl-en\">DatabaseAccess</span>]\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">filter</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">ActorRef</span> <span class=\"pl-k\">@@</span> <span class=\"pl-en\">SecurityFilter</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">SecurityFilterActor</span>](<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filter<span class=\"pl-pds\">\"</span></span>).taggedWith[<span class=\"pl-en\">SecurityFilter</span>]\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinderActor</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">ActorRef</span> <span class=\"pl-k\">@@</span> <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">ActorRef</span> <span class=\"pl-k\">@@</span> <span class=\"pl-en\">SecurityFilter</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> {...}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">userFinder</span> <span class=\"pl-k\">=</span> wireActor[<span class=\"pl-en\">UserFinderActor</span>]</pre></div>\n<p dir=\"auto\">It is also possible to wire an actor using a factory function.\nFor that, the module provides three additional macros <code>wireAnonymousActorWith</code>, <code>wireActorWith</code> and <code>wirePropsWith</code>.\nTheir usage is similar to <code>wireWith</code> (see <a href=\"#factory-methods\">Factory methods</a>).\nFor example:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class UserFinderActor(databaseAccess: DatabaseAccess, securityFilter: SecurityFilter) extends Actor { ... }\n\nobject UserFinderActor {\n  def get(databaseAccess: DatabaseAccess) = new UserFinderActor(databaseAccess, new SimpleSecurityFilter())\n}\n\nval theUserFinder = wireActorWith(UserFinderActor.get _)(&quot;userFinder&quot;)\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">UserFinderActor</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>, <span class=\"pl-v\">securityFilter</span>: <span class=\"pl-en\">SecurityFilter</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Actor</span> { ... }\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">UserFinderActor</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">get</span>(<span class=\"pl-v\">databaseAccess</span>: <span class=\"pl-en\">DatabaseAccess</span>) <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">UserFinderActor</span>(databaseAccess, <span class=\"pl-k\">new</span> <span class=\"pl-en\">SimpleSecurityFilter</span>())\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">theUserFinder</span> <span class=\"pl-k\">=</span> wireActorWith(<span class=\"pl-en\">UserFinderActor</span>.get _)(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>userFinder<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-installation-using-with-sbt\" class=\"anchor\" aria-hidden=\"true\" href=\"#installation-using-with-sbt\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Installation, using with SBT</h2>\n<p dir=\"auto\">The jars are deployed to <a href=\"https://oss.sonatype.org/content/repositories/snapshots/com/softwaremill/macwire/\" rel=\"nofollow\">Sonatype's OSS repository</a>.\nTo use MacWire in your project, add a dependency:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.softwaremill.macwire&quot; %% &quot;macros&quot; % &quot;2.5.7&quot; % &quot;provided&quot;\n\nlibraryDependencies += &quot;com.softwaremill.macwire&quot; %% &quot;macrosakka&quot; % &quot;2.5.7&quot; % &quot;provided&quot;\n\nlibraryDependencies += &quot;com.softwaremill.macwire&quot; %% &quot;util&quot; % &quot;2.5.7&quot;\n\nlibraryDependencies += &quot;com.softwaremill.macwire&quot; %% &quot;proxy&quot; % &quot;2.5.7&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.macwire<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>macros<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.5.7<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>provided<span class=\"pl-pds\">\"</span></span>\n\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.macwire<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>macrosakka<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.5.7<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>provided<span class=\"pl-pds\">\"</span></span>\n\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.macwire<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>util<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.5.7<span class=\"pl-pds\">\"</span></span>\n\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.macwire<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>proxy<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.5.7<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">MacWire is available for Scala 2.12, 2.13, 3 on the JVM and JS.</p>\n<p dir=\"auto\">The <code>macros</code> subproject contains only code which is used at compile-time, hence the <code>provided</code> scope.</p>\n<p dir=\"auto\">The <code>util</code> subproject contains tagging, <code>Wired</code> and the <code>@Module</code> annotation; if you don't use these features, you don't\nneed to include this dependency.</p>\n<p dir=\"auto\">The <code>proxy</code> subproject contains interceptors and scopes, and has a dependency on <code>javassist</code>.</p>\n<p dir=\"auto\">Older 1.x release for Scala 2.10 and 2.11:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.softwaremill.macwire&quot; %% &quot;macros&quot; % &quot;1.0.7&quot;\n\nlibraryDependencies += &quot;com.softwaremill.macwire&quot; %% &quot;runtime&quot; % &quot;1.0.7&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.macwire<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>macros<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.7<span class=\"pl-pds\">\"</span></span>\n\nlibraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.softwaremill.macwire<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>runtime<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.7<span class=\"pl-pds\">\"</span></span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-debugging\" class=\"anchor\" aria-hidden=\"true\" href=\"#debugging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Debugging</h2>\n<p dir=\"auto\">To print debugging information on what MacWire does when looking for values, and what code is generated, set the\n<code>macwire.debug</code> system property. E.g. with SBT, just add a <code>System.setProperty(\"macwire.debug\", \"\")</code> line to your\nbuild file.</p>\n<h2 dir=\"auto\"><a id=\"user-content-scalajs\" class=\"anchor\" aria-hidden=\"true\" href=\"#scalajs\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala.js</h2>\n<p dir=\"auto\">Macwire also works with <a href=\"http://www.scala-js.org/\" rel=\"nofollow\">Scala.js</a>. For an example, see here:\n<a href=\"https://github.com/adamw/macwire/tree/master/examples/scalajs\">Macwire+Scala.js example</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-future-development---vote\" class=\"anchor\" aria-hidden=\"true\" href=\"#future-development---vote\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Future development - vote!</h2>\n<p dir=\"auto\">Take a look at the <a href=\"https://github.com/adamw/macwire/issues\">available issues</a>. If you'd like to see one developed\nplease vote on it. Or maybe you'll attempt to create a pull request?</p>\n<h2 dir=\"auto\"><a id=\"user-content-migrating-from-1x-\" class=\"anchor\" aria-hidden=\"true\" href=\"#migrating-from-1x-\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Migrating from 1.x <a id=\"user-content-migrating\"></a></h2>\n<ul dir=\"auto\">\n<li>changed how code is split across modules. You'll need to depend on <code>util</code> to get tagging &amp; <code>Wired</code>, and <code>proxy</code>\nto get interceptors and scopes</li>\n<li>tagging moved to a separate package. If you use tagging, you'll need to import <code>com.softwaremill.tagging._</code></li>\n<li>removed <code>wireImplicit</code></li>\n<li>implicit parameters aren't handled by <code>wire</code> at all (they used to be subject to the same lookup procedure as normal\nparameters + implicit lookup)</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-play-24x-\" class=\"anchor\" aria-hidden=\"true\" href=\"#play-24x-\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Play 2.4.x <a id=\"user-content-play24x\"></a></h2>\n<p dir=\"auto\">In Play 2.4.x, you can no longer use getControllerInstance in GlobalSettings for injection. Play has a new pattern for injecting controllers. You must extend ApplicationLoader, from there you can mix in your modules.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import controllers.{Application, Assets}\nimport play.api.ApplicationLoader.Context\nimport play.api._\nimport play.api.routing.Router\nimport router.Routes\nimport com.softwaremill.macwire._\n\nclass AppApplicationLoader extends ApplicationLoader {\n  def load(context: Context) = {\n\n    // make sure logging is configured\n    Logger.configure(context.environment)\n\n    (new BuiltInComponentsFromContext(context) with AppComponents).application\n  }\n}\n\ntrait AppComponents extends BuiltInComponents with AppModule {\n  lazy val assets: Assets = wire[Assets]\n  lazy val prefix: String = &quot;/&quot;\n  lazy val router: Router = wire[Routes]\n}\n\ntrait AppModule {\n  // Define your dependencies and controllers\n  lazy val applicationController = wire[Application]\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">controllers</span>.{<span class=\"pl-en\">Application</span>, <span class=\"pl-en\">Assets</span>}\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">play</span>.<span class=\"pl-en\">api</span>.<span class=\"pl-en\">ApplicationLoader</span>.<span class=\"pl-en\">Context</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">play</span>.<span class=\"pl-en\">api</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">play</span>.<span class=\"pl-en\">api</span>.<span class=\"pl-en\">routing</span>.<span class=\"pl-en\">Router</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">router</span>.<span class=\"pl-en\">Routes</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">softwaremill</span>.<span class=\"pl-en\">macwire</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">AppApplicationLoader</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">ApplicationLoader</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">load</span>(<span class=\"pl-v\">context</span>: <span class=\"pl-en\">Context</span>) <span class=\"pl-k\">=</span> {\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> make sure logging is configured</span>\n    <span class=\"pl-en\">Logger</span>.configure(context.environment)\n\n    (<span class=\"pl-k\">new</span> <span class=\"pl-en\">BuiltInComponentsFromContext</span>(context) <span class=\"pl-k\">with</span> <span class=\"pl-e\">AppComponents</span>).application\n  }\n}\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">AppComponents</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">BuiltInComponents</span> <span class=\"pl-k\">with</span> <span class=\"pl-e\">AppModule</span> {\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">assets</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Assets</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Assets</span>]\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">prefix</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">router</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Router</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Routes</span>]\n}\n\n<span class=\"pl-k\">trait</span> <span class=\"pl-en\">AppModule</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Define your dependencies and controllers</span>\n  <span class=\"pl-k\">lazy</span> <span class=\"pl-k\">val</span> <span class=\"pl-smi\">applicationController</span> <span class=\"pl-k\">=</span> wire[<span class=\"pl-en\">Application</span>]\n}</pre></div>\n<p dir=\"auto\">In application.conf, add the reference to the ApplicationLoader.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"play.application.loader = &quot;AppApplicationLoader&quot;\"><pre class=\"notranslate\"><code>play.application.loader = \"AppApplicationLoader\"\n</code></pre></div>\n<p dir=\"auto\">For more information and to see the sample project, go to <a href=\"https://github.com/adamw/macwire/tree/master/examples/play24\">examples/play24</a></p>\n<p dir=\"auto\">Reference Play docs for more information:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://www.playframework.com/documentation/2.4.x/ScalaCompileTimeDependencyInjection\" rel=\"nofollow\">ScalaCompileTimeDependencyInjection</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-play-25x-\" class=\"anchor\" aria-hidden=\"true\" href=\"#play-25x-\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Play 2.5.x <a id=\"user-content-play25x\"></a></h2>\n<p dir=\"auto\">For Play 2.5.x, you must do the same as for Play 2.4.x, except the <code>Logger</code> configuration.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import play.api.LoggerConfigurator\nclass AppApplicationLoader extends ApplicationLoader {\n  def load(context: Context) = {\n\n    LoggerConfigurator(context.environment.classLoader).foreach {\n      _.configure(context.environment)\n    }\n    // ... do the same as for Play 2.4.x\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">play</span>.<span class=\"pl-en\">api</span>.<span class=\"pl-en\">LoggerConfigurator</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">AppApplicationLoader</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">ApplicationLoader</span> {\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">load</span>(<span class=\"pl-v\">context</span>: <span class=\"pl-en\">Context</span>) <span class=\"pl-k\">=</span> {\n\n    <span class=\"pl-en\">LoggerConfigurator</span>(context.environment.classLoader).foreach {\n      _.configure(context.environment)\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> ... do the same as for Play 2.4.x</span>\n  }\n}</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-scala3-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala3-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala3 support</h2>\n<p dir=\"auto\">The Scala 3 version is written to be compatible with Scala 2 where possible. Currently there are a few missing features:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lampepfl/dotty/issues/13105\" data-hovercard-type=\"issue\" data-hovercard-url=\"/lampepfl/dotty/issues/13105/hovercard\">wire from parent scope</a></li>\n<li><a href=\"https://github.com/lampepfl/dotty/issues/12965\" data-hovercard-type=\"issue\" data-hovercard-url=\"/lampepfl/dotty/issues/12965/hovercard\">wire from imports</a></li>\n<li><a href=\"https://github.com/softwaremill/macwire/issues/170\" data-hovercard-type=\"issue\" data-hovercard-url=\"/softwaremill/macwire/issues/170/hovercard\">wire in pattern matching</a></li>\n<li><a href=\"https://github.com/softwaremill/macwire/issues/171\" data-hovercard-type=\"issue\" data-hovercard-url=\"/softwaremill/macwire/issues/171/hovercard\"><code>wiredInModule</code></a></li>\n<li><a href=\"https://github.com/softwaremill/macwire/issues/172\" data-hovercard-type=\"issue\" data-hovercard-url=\"/softwaremill/macwire/issues/172/hovercard\"><code>@Module</code></a></li>\n</ul>\n<p dir=\"auto\">For full list of incompatibilities take a look at <code>tests/src/test/resources/test-cases</code> and <code>util-tests/src/test/resources/test-cases</code> .</p>\n<h2 dir=\"auto\"><a id=\"user-content-commercial-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#commercial-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Commercial Support</h2>\n<p dir=\"auto\">We offer commercial support for MacWire and related technologies, as well as development services. <a href=\"https://softwaremill.com\" rel=\"nofollow\">Contact us</a> to learn more about our offer!</p>\n<h2 dir=\"auto\"><a id=\"user-content-copyright\" class=\"anchor\" aria-hidden=\"true\" href=\"#copyright\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Copyright</h2>\n<p dir=\"auto\">Copyright (C) 2013-2021 SoftwareMill <a href=\"https://softwaremill.com\" rel=\"nofollow\">https://softwaremill.com</a>.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "adamw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/60503?v=4",
        "url" : "https://github.com/adamw",
        "contributions" : 367
      },
      {
        "login" : "mbore",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/22884381?v=4",
        "url" : "https://github.com/mbore",
        "contributions" : 83
      },
      {
        "login" : "pawelpanasewicz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2970040?v=4",
        "url" : "https://github.com/pawelpanasewicz",
        "contributions" : 60
      },
      {
        "login" : "backuitist",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1017537?v=4",
        "url" : "https://github.com/backuitist",
        "contributions" : 46
      },
      {
        "login" : "mergify[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/10562?v=4",
        "url" : "https://github.com/apps/mergify",
        "contributions" : 17
      },
      {
        "login" : "mkrzemien",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6084062?v=4",
        "url" : "https://github.com/mkrzemien",
        "contributions" : 8
      },
      {
        "login" : "SethTisue",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/161079?v=4",
        "url" : "https://github.com/SethTisue",
        "contributions" : 6
      },
      {
        "login" : "mkubala",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/328844?v=4",
        "url" : "https://github.com/mkubala",
        "contributions" : 3
      },
      {
        "login" : "xevix",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/510743?v=4",
        "url" : "https://github.com/xevix",
        "contributions" : 2
      },
      {
        "login" : "aeons",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1432894?v=4",
        "url" : "https://github.com/aeons",
        "contributions" : 2
      },
      {
        "login" : "jimmydivvy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/27046?v=4",
        "url" : "https://github.com/jimmydivvy",
        "contributions" : 2
      },
      {
        "login" : "rcirka",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/836088?v=4",
        "url" : "https://github.com/rcirka",
        "contributions" : 2
      },
      {
        "login" : "szimano",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/289588?v=4",
        "url" : "https://github.com/szimano",
        "contributions" : 2
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://github.com/xuwei-k",
        "contributions" : 2
      },
      {
        "login" : "krivachy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5367669?v=4",
        "url" : "https://github.com/krivachy",
        "contributions" : 1
      },
      {
        "login" : "Zunder",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/42298618?v=4",
        "url" : "https://github.com/Zunder",
        "contributions" : 1
      },
      {
        "login" : "aaabramov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11317222?v=4",
        "url" : "https://github.com/aaabramov",
        "contributions" : 1
      },
      {
        "login" : "Taormina",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1090627?v=4",
        "url" : "https://github.com/Taormina",
        "contributions" : 1
      },
      {
        "login" : "bitdeli-chef",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3092978?v=4",
        "url" : "https://github.com/bitdeli-chef",
        "contributions" : 1
      },
      {
        "login" : "fredfp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3804696?v=4",
        "url" : "https://github.com/fredfp",
        "contributions" : 1
      },
      {
        "login" : "jotomo",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1732305?v=4",
        "url" : "https://github.com/jotomo",
        "contributions" : 1
      },
      {
        "login" : "kciesielski",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1413553?v=4",
        "url" : "https://github.com/kciesielski",
        "contributions" : 1
      },
      {
        "login" : "lolgab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5793054?v=4",
        "url" : "https://github.com/lolgab",
        "contributions" : 1
      },
      {
        "login" : "mkljakubowski-ltq",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/78868740?v=4",
        "url" : "https://github.com/mkljakubowski-ltq",
        "contributions" : 1
      },
      {
        "login" : "tkroman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1114784?v=4",
        "url" : "https://github.com/tkroman",
        "contributions" : 1
      },
      {
        "login" : "rcirka12",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1971705?v=4",
        "url" : "https://github.com/rcirka12",
        "contributions" : 1
      },
      {
        "login" : "chenrui333",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1580956?v=4",
        "url" : "https://github.com/chenrui333",
        "contributions" : 1
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://github.com/scala-steward",
        "contributions" : 1
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://github.com/gitter-badger",
        "contributions" : 1
      },
      {
        "login" : "To-om",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/23172576?v=4",
        "url" : "https://github.com/To-om",
        "contributions" : 1
      },
      {
        "login" : "TobBrandt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/702954?v=4",
        "url" : "https://github.com/TobBrandt",
        "contributions" : 1
      },
      {
        "login" : "lloydmeta",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/914805?v=4",
        "url" : "https://github.com/lloydmeta",
        "contributions" : 1
      },
      {
        "login" : "pawels84",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7072201?v=4",
        "url" : "https://github.com/pawels84",
        "contributions" : 1
      }
    ],
    "commits" : 621,
    "topics" : [
      "dependency-injection",
      "macwire",
      "scala"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 239,
        "title" : "Error downloading com.softwaremill.macwire:macrosakka_3:2.5.7",
        "url" : "https://github.com/softwaremill/macwire/issues/239"
      },
      {
        "number" : 236,
        "title" : "Feature request: support sum type in macwire.",
        "url" : "https://github.com/softwaremill/macwire/issues/236"
      },
      {
        "number" : 231,
        "title" : "refactor CI config",
        "url" : "https://github.com/softwaremill/macwire/issues/231"
      },
      {
        "number" : 215,
        "title" : "[macwire 2.5.7][scala 3.1.2][jdk 17.0.3.1+2-LTS-6 (Hotspot)]: Compiler error when generating/compiling `wire` macro.",
        "url" : "https://github.com/softwaremill/macwire/issues/215"
      },
      {
        "number" : 198,
        "title" : "Consider banning primitive types from wiring candidates",
        "url" : "https://github.com/softwaremill/macwire/issues/198"
      },
      {
        "number" : 197,
        "title" : "\"value x$2\" when wiring a parametrised type",
        "url" : "https://github.com/softwaremill/macwire/issues/197"
      },
      {
        "number" : 196,
        "title" : "Rename the macrosautocats module",
        "url" : "https://github.com/softwaremill/macwire/issues/196"
      },
      {
        "number" : 194,
        "title" : "Add support for tupled results in autowire",
        "url" : "https://github.com/softwaremill/macwire/issues/194"
      },
      {
        "number" : 191,
        "title" : "Imlement pure autowire",
        "url" : "https://github.com/softwaremill/macwire/issues/191"
      },
      {
        "number" : 190,
        "title" : "Implement autowire for ZIO",
        "url" : "https://github.com/softwaremill/macwire/issues/190"
      },
      {
        "number" : 189,
        "title" : "Extend cats-autowire to handle any effect type",
        "url" : "https://github.com/softwaremill/macwire/issues/189"
      },
      {
        "number" : 185,
        "title" : "Implement autowire for Scala3",
        "url" : "https://github.com/softwaremill/macwire/issues/185"
      },
      {
        "number" : 184,
        "title" : "Don't autowire no-arg constructors, or make this configurable?",
        "url" : "https://github.com/softwaremill/macwire/issues/184"
      },
      {
        "number" : 173,
        "title" : "Implement wireResource",
        "url" : "https://github.com/softwaremill/macwire/issues/173"
      },
      {
        "number" : 171,
        "title" : "Implement `wiredInModule` ",
        "url" : "https://github.com/softwaremill/macwire/issues/171"
      },
      {
        "number" : 170,
        "title" : "Wire in pattern matching",
        "url" : "https://github.com/softwaremill/macwire/issues/170"
      },
      {
        "number" : 169,
        "title" : "Wire from imports",
        "url" : "https://github.com/softwaremill/macwire/issues/169"
      },
      {
        "number" : 168,
        "title" : "Wire from parent scope",
        "url" : "https://github.com/softwaremill/macwire/issues/168"
      },
      {
        "number" : 163,
        "title" : "Test errors on java 17",
        "url" : "https://github.com/softwaremill/macwire/issues/163"
      },
      {
        "number" : 160,
        "title" : "How to wire application configuration and environment",
        "url" : "https://github.com/softwaremill/macwire/issues/160"
      },
      {
        "number" : 157,
        "title" : "`wire[ConcreteObjectExtendsTrait.ClassDefinedInTrait]` is being treated as `wire[Trait.ClassDefinedInTrait]`",
        "url" : "https://github.com/softwaremill/macwire/issues/157"
      },
      {
        "number" : 149,
        "title" : "AssertionError in compiler",
        "url" : "https://github.com/softwaremill/macwire/issues/149"
      },
      {
        "number" : 146,
        "title" : "Error:(14, 26) Cannot find a value of type: [com.softwaremill.tagging.@@[Berry,Blue]] val basket = wire[Basket]",
        "url" : "https://github.com/softwaremill/macwire/issues/146"
      },
      {
        "number" : 142,
        "title" : "Optional dependencies",
        "url" : "https://github.com/softwaremill/macwire/issues/142"
      },
      {
        "number" : 140,
        "title" : "wire all implementations of given base trait/class",
        "url" : "https://github.com/softwaremill/macwire/issues/140"
      },
      {
        "number" : 136,
        "title" : "Could performance of wiring be improved?",
        "url" : "https://github.com/softwaremill/macwire/issues/136"
      },
      {
        "number" : 135,
        "title" : "Documentation - factories - usage not shown",
        "url" : "https://github.com/softwaremill/macwire/issues/135"
      },
      {
        "number" : 133,
        "title" : "Feature request: wiring abstract classes and traits",
        "url" : "https://github.com/softwaremill/macwire/issues/133"
      },
      {
        "number" : 132,
        "title" : "Accessing wired instances within modules defined as classes",
        "url" : "https://github.com/softwaremill/macwire/issues/132"
      },
      {
        "number" : 128,
        "title" : "Feature Request: Factory Methods for Akka Actors",
        "url" : "https://github.com/softwaremill/macwire/issues/128"
      },
      {
        "number" : 123,
        "title" : "\"scala.reflect.macros.TypecheckException: not found\" when importing a member ",
        "url" : "https://github.com/softwaremill/macwire/issues/123"
      },
      {
        "number" : 122,
        "title" : "Transitive dependencies",
        "url" : "https://github.com/softwaremill/macwire/issues/122"
      },
      {
        "number" : 120,
        "title" : "Macwire does not consider outer trait members to be candidates for wiring",
        "url" : "https://github.com/softwaremill/macwire/issues/120"
      },
      {
        "number" : 119,
        "title" : "MacWire doesn't consider by-name params to be candidates for wiring",
        "url" : "https://github.com/softwaremill/macwire/issues/119"
      },
      {
        "number" : 118,
        "title" : "Support the wirering of closures instead classes?",
        "url" : "https://github.com/softwaremill/macwire/issues/118"
      },
      {
        "number" : 109,
        "title" : "wrong constructor is being picked up",
        "url" : "https://github.com/softwaremill/macwire/issues/109"
      },
      {
        "number" : 94,
        "title" : "Picking correct constructor",
        "url" : "https://github.com/softwaremill/macwire/issues/94"
      },
      {
        "number" : 93,
        "title" : "Incremental Build Fails - Cannot Find Implementation",
        "url" : "https://github.com/softwaremill/macwire/issues/93"
      },
      {
        "number" : 79,
        "title" : "Support reachable non-public members",
        "url" : "https://github.com/softwaremill/macwire/issues/79"
      },
      {
        "number" : 77,
        "title" : "Remove wiring from `def` or add `@NotForWiring`",
        "url" : "https://github.com/softwaremill/macwire/issues/77"
      },
      {
        "number" : 64,
        "title" : "Support companion object factory method",
        "url" : "https://github.com/softwaremill/macwire/issues/64"
      },
      {
        "number" : 63,
        "title" : "Documentation - lazy factory?",
        "url" : "https://github.com/softwaremill/macwire/issues/63"
      },
      {
        "number" : 61,
        "title" : "Documentation pattern - secondary constructors",
        "url" : "https://github.com/softwaremill/macwire/issues/61"
      },
      {
        "number" : 60,
        "title" : "Documentation cleanup",
        "url" : "https://github.com/softwaremill/macwire/issues/60"
      },
      {
        "number" : 50,
        "title" : "Support JSR-330",
        "url" : "https://github.com/softwaremill/macwire/issues/50"
      },
      {
        "number" : 43,
        "title" : "Support function defs as function values (for factory dependencies)",
        "url" : "https://github.com/softwaremill/macwire/issues/43"
      },
      {
        "number" : 21,
        "title" : "macwire fails to find lazy vals for injection if there is a block comment above them in the publish phase",
        "url" : "https://github.com/softwaremill/macwire/issues/21"
      },
      {
        "number" : 7,
        "title" : "Support parameters in wire[] to override dependencies",
        "url" : "https://github.com/softwaremill/macwire/issues/7"
      },
      {
        "number" : 6,
        "title" : "Unclear compilation error using valsByClass",
        "url" : "https://github.com/softwaremill/macwire/issues/6"
      }
    ],
    "scalaPercentage" : 98,
    "license" : "Apache-2.0",
    "commitActivity" : [
      {
        "total" : 2,
        "week" : 1629590400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          2,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1630195200000,
        "days" : [
          1,
          1,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1630800000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1631404800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1632009600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1632614400000,
        "days" : [
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1633219200000,
        "days" : [
          0,
          0,
          0,
          2,
          0,
          1,
          1
        ]
      },
      {
        "total" : 24,
        "week" : 1633824000000,
        "days" : [
          0,
          4,
          9,
          0,
          4,
          0,
          7
        ]
      },
      {
        "total" : 8,
        "week" : 1634428800000,
        "days" : [
          0,
          0,
          0,
          0,
          8,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635033600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1635638400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636243200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1636848000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1637452800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638057600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1638662400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1639267200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1639872000000,
        "days" : [
          0,
          0,
          0,
          0,
          4,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1640476800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1641081600000,
        "days" : [
          0,
          0,
          0,
          2,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1641686400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1642291200000,
        "days" : [
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1642896000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1643500800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1644105600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 4,
        "week" : 1644710400000,
        "days" : [
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645315200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1645920000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1646524800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647129600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1647734400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1648339200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1648944000000,
        "days" : [
          0,
          0,
          0,
          1,
          0,
          0,
          1
        ]
      },
      {
        "total" : 1,
        "week" : 1649548800000,
        "days" : [
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650153600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1650758400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1651363200000,
        "days" : [
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1651968000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1652572800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653177600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1653782400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654387200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1654992000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 14,
        "week" : 1655596800000,
        "days" : [
          0,
          11,
          1,
          2,
          0,
          0,
          0
        ]
      },
      {
        "total" : 2,
        "week" : 1656201600000,
        "days" : [
          1,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1656806400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 3,
        "week" : 1657411200000,
        "days" : [
          0,
          1,
          0,
          2,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658016000000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1658620800000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1659225600000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "total" : 1,
        "week" : 1659830400000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "total" : 0,
        "week" : 1660435200000,
        "days" : [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : "macros",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "dependency-injection",
    "beginnerIssuesLabel" : null
  }
}