{
  "organization" : "alexarchambault",
  "repository" : "plotly-scala",
  "creationDate" : 1609756437000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1643164351298
    }
  },
  "githubInfo" : {
    "homepage" : "http://plotly-scala.org",
    "description" : "Scala bindings for plotly.js",
    "logo" : "https://avatars.githubusercontent.com/u/7063723?v=4",
    "stars" : 192,
    "forks" : 43,
    "watchers" : 16,
    "issues" : 50,
    "creationDate" : 1472212547000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-plotly-scala\" class=\"anchor\" aria-hidden=\"true\" href=\"#plotly-scala\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>plotly-scala</h1>\n<p dir=\"auto\">Scala bindings for <a href=\"https://plot.ly/javascript/\" rel=\"nofollow\">plotly.js</a></p>\n<p dir=\"auto\"><a href=\"https://travis-ci.org/alexarchambault/plotly-scala\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/13cb900ed39eb2709ebc6a1258c5ac7c64c1d344d6c16f78a7628a3c00693d51/68747470733a2f2f7472617669732d63692e6f72672f616c657861726368616d6261756c742f706c6f746c792d7363616c612e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/alexarchambault/plotly-scala.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/alexarchambault/plotly-scala?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/alexarchambault/plotly-scala\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/org.plotly-scala/plotly-render_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1d75f8284d28b77c630dae4ea1dad10ad2694e7c303f0005c5ad9348029f79fa/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f6f72672e706c6f746c792d7363616c612f706c6f746c792d72656e6465725f322e31332e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/org.plotly-scala/plotly-render_2.13.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"http://javadoc-badge.appspot.com/org.plotly-scala/plotly-render_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/bca9a71cd5e5641631d1430496995a6ac46779de512b6071cb43fd611f607750/687474703a2f2f6a617661646f632d62616467652e61707073706f742e636f6d2f6f72672e706c6f746c792d7363616c612f706c6f746c792d72656e6465725f322e31332e7376673f6c6162656c3d7363616c61646f63\" alt=\"ScalaDoc\" data-canonical-src=\"http://javadoc-badge.appspot.com/org.plotly-scala/plotly-render_2.13.svg?label=scaladoc\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a href=\"https://alexarchambault.github.io/plotly-scala/\" rel=\"nofollow\">Demo</a></p>\n<p dir=\"auto\"><em>plotly-scala</em> is a Scala library able to output JSON that can be passed to <a href=\"https://plot.ly/javascript/\" rel=\"nofollow\">plotly.js</a>. Its classes closely follow the API of plotly.js, so that one can use plotly-scala by following the <a href=\"https://plot.ly/javascript/\" rel=\"nofollow\">documentation</a> of plotly.js. These classes can be converted to JSON, that can be fed directly to plotly.js.</p>\n<p dir=\"auto\">It can be used from <a href=\"https://github.com/jupyter-scala/jupyter-scala/tree/develop\">almond</a>, from scala-js, or from a Scala REPL like <a href=\"https://github.com/lihaoyi/Ammonite\">Ammonite</a>, to plot things straightaway in the browser.</p>\n<p dir=\"auto\">It runs demos of the plotly.js documentation during its tests, to ensure that it is fine with all their features. That allows it to reliably cover a wide range of the plotly.js features - namely, all the examples of the supported sections of the plotly.js documentation are guaranteed to be fine.</p>\n<p dir=\"auto\">It is published for both scala 2.12 and 2.13.</p>\n<h2 dir=\"auto\"><a id=\"user-content-table-of-content\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-content\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of content</h2>\n<ol dir=\"auto\">\n<li><a href=\"#quick-start\">Quick start</a></li>\n<li><a href=\"#rationale\">Rationale</a></li>\n<li><a href=\"#internals\">Internals</a></li>\n<li><a href=\"#supported-features\">Supported features</a></li>\n</ol>\n<h2 dir=\"auto\"><a id=\"user-content-quick-start\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-start\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick start</h2>\n<h3 dir=\"auto\"><a id=\"user-content-from-almond\" class=\"anchor\" aria-hidden=\"true\" href=\"#from-almond\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>From almond</h3>\n<p dir=\"auto\">Add the <code>org.plotly-scala::plotly-almond:0.8.1</code> dependency to the notebook. (Latest version: <a href=\"https://maven-badges.herokuapp.com/maven-central/org.plotly-scala/plotly-render_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1d75f8284d28b77c630dae4ea1dad10ad2694e7c303f0005c5ad9348029f79fa/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f6f72672e706c6f746c792d7363616c612f706c6f746c792d72656e6465725f322e31332e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/org.plotly-scala/plotly-render_2.13.svg\" style=\"max-width: 100%;\"></a>)\nThen initialize plotly-scala, and use it, like</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import $ivy.`org.plotly-scala::plotly-almond:0.8.1`\n\nimport plotly._\nimport plotly.element._\nimport plotly.layout._\nimport plotly.Almond._\n\nval (x, y) = Seq(\n  &quot;Banana&quot; -&gt; 10,\n  &quot;Apple&quot; -&gt; 8,\n  &quot;Grapefruit&quot; -&gt; 5\n).unzip\n\nBar(x, y).plot()\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">$ivy</span>.<span class=\"pl-en\">`org.plotly-scala::plotly-almond:0.8.1`</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">plotly</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">plotly</span>.<span class=\"pl-en\">element</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">plotly</span>.<span class=\"pl-en\">layout</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">plotly</span>.<span class=\"pl-en\">Almond</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">val</span> (x, y) <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Banana<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">10</span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Apple<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">8</span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Grapefruit<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">5</span>\n).unzip\n\n<span class=\"pl-en\">Bar</span>(x, y).plot()</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-jupyterlab\" class=\"anchor\" aria-hidden=\"true\" href=\"#jupyterlab\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>JupyterLab</h4>\n<p dir=\"auto\">If you're using <a href=\"https://jupyterlab.readthedocs.io/en/stable/\" rel=\"nofollow\">JupyterLab</a>, you have to install <a href=\"https://plotly.com/python/getting-started/#jupyterlab-support-python-35\" rel=\"nofollow\">jupyterlab-plotly</a> to enable support for rendering Plotly charts:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jupyter labextension install jupyterlab-plotly\"><pre>jupyter labextension install jupyterlab-plotly</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-from-scala-js\" class=\"anchor\" aria-hidden=\"true\" href=\"#from-scala-js\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>From scala-js</h3>\n<p dir=\"auto\">Add the corresponding dependency to your project, like</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.plotly-scala&quot; %%% &quot;plotly-render&quot; % &quot;0.8.1&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.plotly-scala<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>plotly-render<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.8.1<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">(Latest version: <a href=\"https://maven-badges.herokuapp.com/maven-central/org.plotly-scala/plotly-render_2.13\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1d75f8284d28b77c630dae4ea1dad10ad2694e7c303f0005c5ad9348029f79fa/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f6f72672e706c6f746c792d7363616c612f706c6f746c792d72656e6465725f322e31332e737667\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/org.plotly-scala/plotly-render_2.13.svg\" style=\"max-width: 100%;\"></a>)</p>\n<p dir=\"auto\">From your code, add some imports for plotly,</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import plotly._, element._, layout._, Plotly._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">plotly</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">element</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">layout</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">Plotly</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Then define plots like</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val x = (0 to 100).map(_ * 0.1)\nval y1 = x.map(d =&gt; 2.0 * d + util.Random.nextGaussian())\nval y2 = x.map(math.exp)\n\nval plot = Seq(\n  Scatter(x, y1).withName(&quot;Approx twice&quot;),\n  Scatter(x, y2).withName(&quot;Exp&quot;)\n)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">x</span> <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">0</span> to <span class=\"pl-c1\">100</span>).map(_ <span class=\"pl-k\">*</span> <span class=\"pl-c1\">0.1</span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">y1</span> <span class=\"pl-k\">=</span> x.map(d <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">2.0</span> <span class=\"pl-k\">*</span> d <span class=\"pl-k\">+</span> util.<span class=\"pl-en\">Random</span>.nextGaussian())\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">y2</span> <span class=\"pl-k\">=</span> x.map(math.exp)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">plot</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-en\">Scatter</span>(x, y1).withName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Approx twice<span class=\"pl-pds\">\"</span></span>),\n  <span class=\"pl-en\">Scatter</span>(x, y2).withName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exp<span class=\"pl-pds\">\"</span></span>)\n)</pre></div>\n<p dir=\"auto\">and plot them with</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val lay = Layout().withTitle(&quot;Curves&quot;)\nplot.plot(&quot;plot&quot;, lay)  // attaches to div element with id 'plot'\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">lay</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Layout</span>().withTitle(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Curves<span class=\"pl-pds\">\"</span></span>)\nplot.plot(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>plot<span class=\"pl-pds\">\"</span></span>, lay)  <span class=\"pl-c\"><span class=\"pl-c\">//</span> attaches to div element with id 'plot'</span></pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-from-ammonite\" class=\"anchor\" aria-hidden=\"true\" href=\"#from-ammonite\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>From Ammonite</h3>\n<p dir=\"auto\">Load the corresponding dependency, and some imports, like</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import $ivy.`org.plotly-scala::plotly-render:0.8.1`\nimport plotly._, element._, layout._, Plotly._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">$ivy</span>.<span class=\"pl-en\">`org.plotly-scala::plotly-render:0.8.1`</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">plotly</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">element</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">layout</span>.<span class=\"pl-en\">_</span>, <span class=\"pl-en\">Plotly</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">Then plot things like</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val labels = Seq(&quot;Banana&quot;, &quot;Banano&quot;, &quot;Grapefruit&quot;)\nval valuesA = labels.map(_ =&gt; util.Random.nextGaussian())\nval valuesB = labels.map(_ =&gt; 0.5 + util.Random.nextGaussian())\n\nSeq(\n  Bar(labels, valuesA, name = &quot;A&quot;),\n  Bar(labels, valuesB, name = &quot;B&quot;)\n).plot(\n  title = &quot;Level&quot;\n)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">labels</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Seq</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Banana<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Banano<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Grapefruit<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">valuesA</span> <span class=\"pl-k\">=</span> labels.map(_ <span class=\"pl-k\">=&gt;</span> util.<span class=\"pl-en\">Random</span>.nextGaussian())\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">valuesB</span> <span class=\"pl-k\">=</span> labels.map(_ <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">0.5</span> <span class=\"pl-k\">+</span> util.<span class=\"pl-en\">Random</span>.nextGaussian())\n\n<span class=\"pl-en\">Seq</span>(\n  <span class=\"pl-en\">Bar</span>(labels, valuesA, name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>A<span class=\"pl-pds\">\"</span></span>),\n  <span class=\"pl-en\">Bar</span>(labels, valuesB, name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>B<span class=\"pl-pds\">\"</span></span>)\n).plot(\n  title <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Level<span class=\"pl-pds\">\"</span></span>\n)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-rationale\" class=\"anchor\" aria-hidden=\"true\" href=\"#rationale\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Rationale</h2>\n<p dir=\"auto\">Most high-level Javascript libraries for plotting have well designed APIs, enforcing immutability and almost relying on typed objects, although not explicitly. Yet, the few existing Scala libraries for plotting still try to mimick <a href=\"http://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> or Matlab, and have APIs requiring users to mutate things, in order to do plots. They also tend to lack a lot of features, especially compared to the current high-end Javascript plotting libraries. <em>plotly-scala</em> aims at filling this gap, by providing a reliable bridge from Scala towards the renowned <a href=\"https://plot.ly/javascript/\" rel=\"nofollow\">plotly.js</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-internals\" class=\"anchor\" aria-hidden=\"true\" href=\"#internals\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Internals</h2>\n<p dir=\"auto\"><em>plotly-scala</em> consists in a bunch of definitions, mostly case classes and sealed class hierarchies, closely following the API of plotly.js. It also contains JSON codecs for those, allowing to convert them to JSON that can be passed straightaway to plotly.js.</p>\n<p dir=\"auto\">Having the ability to convert these classes to JSON, the codecs can also go the other way around: from plotly.js-compatible JSON to plotly-scala Scala classes. This way of going is used by the tests of plotly-scala, to ensure that the examples of the plotly.js documentation, illustrating a wide range of the features of plotly.js, can be represented via the classes of plotly-scala. Namely, the Javascript examples of the documentation of plotly.js are run inside a <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino\" rel=\"nofollow\">Rhino</a> VM, with mocks of the plotly API. These mocks allow to keep the Javascript objects passed to the plotly.js API, and convert them to JSON. These JSON objects are then validated against the codecs of plotly-scala, to ensure that all their fields can be decoded by them. If these are fine, this gives a proof that all the features of the examples have a counterpart in plotly-scala.</p>\n<p dir=\"auto\">Internally, plotly-scala uses <a href=\"https://github.com/travisbrown/circe\">circe</a> (along with custom codec derivation mechanisms) to convert things to JSON, then render them. The circe objects don't appear in the plotly-scala API - circe is only used internally. The plotly-scala API only returns JSON strings, that can be passed to plotly.js. In subsequent versions, plotly-scala will likely try to shade circe and its dependencies, or switch to a more lightweight JSON library.</p>\n<h2 dir=\"auto\"><a id=\"user-content-supported-features\" class=\"anchor\" aria-hidden=\"true\" href=\"#supported-features\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Supported features</h2>\n<p dir=\"auto\">plotly-scala supports the features illustrated in the following sections of the plotly.js documentation:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://plot.ly/javascript/line-and-scatter/\" rel=\"nofollow\">Scatter Plots</a>,</li>\n<li><a href=\"https://plot.ly/javascript/bubble-charts/\" rel=\"nofollow\">Bubble Charts</a>,</li>\n<li><a href=\"https://plot.ly/javascript/line-charts/\" rel=\"nofollow\">Line Charts</a>,</li>\n<li><a href=\"https://plot.ly/javascript/bar-charts/\" rel=\"nofollow\">Bar Charts</a>,</li>\n<li><a href=\"https://plot.ly/javascript/horizontal-bar-charts/\" rel=\"nofollow\">Horizontal Bar Charts</a>,</li>\n<li><a href=\"https://plot.ly/javascript/filled-area-plots/\" rel=\"nofollow\">Filled Area Plots</a>,</li>\n<li><a href=\"https://plot.ly/javascript/time-series/\" rel=\"nofollow\">Time Series</a>,</li>\n<li><a href=\"https://plot.ly/javascript/subplots/\" rel=\"nofollow\">Subplots</a>,</li>\n<li><a href=\"https://plot.ly/javascript/multiple-axes/\" rel=\"nofollow\">Multiple Axes</a>,</li>\n<li><a href=\"https://plot.ly/javascript/histograms/\" rel=\"nofollow\">Histograms</a>,</li>\n<li><a href=\"https://plot.ly/javascript/log-plot/\" rel=\"nofollow\">Log Plots</a>,</li>\n<li><a href=\"https://plotly.com/javascript/reference/image/\" rel=\"nofollow\">Image</a>.</li>\n</ul>\n<p dir=\"auto\">Some of these are illustrated in the <a href=\"https://alexarchambault.github.io/plotly-scala/\" rel=\"nofollow\">demo</a> page.</p>\n<h2 dir=\"auto\"><a id=\"user-content-adding-support-for-extra-plotlyjs-features\" class=\"anchor\" aria-hidden=\"true\" href=\"#adding-support-for-extra-plotlyjs-features\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Adding support for extra plotly.js features</h2>\n<p dir=\"auto\">The following workflow can be followed to add support for extra sections of the plotly.js documentation:</p>\n<ul dir=\"auto\">\n<li>find the corresponding directory in the <a href=\"https://github.com/alexarchambault/plotly-documentation/tree/eae136bb920c7542654a5e13cff04a0de175a08d/\">source</a> of the plotly.js documentation. These directories can also be found in the sources of plotly-scala, under <code>plotly-documentation/_posts/plotly_js</code>, if its repository has been cloned with the <code>--recursive</code> option,</li>\n<li>enabling testing of the corresponding documentation section examples in the <code>DocumentationTests</code> class, around <a href=\"https://github.com/alexarchambault/plotly-scala/blob/master/tests/src/test/scala/plotly/doc/DocumentationTests.scala#L224\">this line</a>,</li>\n<li>running the tests with <code>sbt ~test</code>,</li>\n<li>fixing the possible Javascript typos in the plotly-documentation submodule in the plotly-scala sources, so that the enabled JS snippets run fine with Rhino from the tests, then committing these fixes, either to <a href=\"%60alexarchambault/plotly-documentation%60\">https://github.com/alexarchambault/plotly-documentation</a> or <a href=\"%60plotly/documentation%60\">https://github.com/plotly/documentation</a>,</li>\n<li>add the required fields / class definitions, and possibly codecs, to have the added tests pass.</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-about\" class=\"anchor\" aria-hidden=\"true\" href=\"#about\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>About</h2>\n<p dir=\"auto\">Battlefield tested since early 2016 at <a href=\"http://teads.tv\" rel=\"nofollow\">Teads.tv</a></p>\n<p dir=\"auto\">Released under the LGPL v3 license, copyright 2016-2019 Alexandre Archambault and contributors.</p>\n<p dir=\"auto\">Parts based on the original plotly.js API, which is copyright 2016 Plotly, Inc.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "alexarchambault",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7063723?v=4",
        "url" : "https://api.github.com/users/alexarchambault",
        "contributions" : 147
      },
      {
        "login" : "scala-steward",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43047562?v=4",
        "url" : "https://api.github.com/users/scala-steward",
        "contributions" : 143
      },
      {
        "login" : "sbrunk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3939659?v=4",
        "url" : "https://api.github.com/users/sbrunk",
        "contributions" : 8
      },
      {
        "login" : "github-joseph-rocca",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/61156112?v=4",
        "url" : "https://api.github.com/users/github-joseph-rocca",
        "contributions" : 5
      },
      {
        "login" : "novakov-alexey",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11204284?v=4",
        "url" : "https://api.github.com/users/novakov-alexey",
        "contributions" : 4
      },
      {
        "login" : "tmccarthy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4033606?v=4",
        "url" : "https://api.github.com/users/tmccarthy",
        "contributions" : 3
      },
      {
        "login" : "eric-czech",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6130352?v=4",
        "url" : "https://api.github.com/users/eric-czech",
        "contributions" : 1
      },
      {
        "login" : "darkjh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/802343?v=4",
        "url" : "https://api.github.com/users/darkjh",
        "contributions" : 1
      },
      {
        "login" : "Sciss",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/131300?v=4",
        "url" : "https://api.github.com/users/Sciss",
        "contributions" : 1
      },
      {
        "login" : "jpallas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4623910?v=4",
        "url" : "https://api.github.com/users/jpallas",
        "contributions" : 1
      },
      {
        "login" : "yukoba",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/194666?v=4",
        "url" : "https://api.github.com/users/yukoba",
        "contributions" : 1
      },
      {
        "login" : "alexblickenstaff",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1816520?v=4",
        "url" : "https://api.github.com/users/alexblickenstaff",
        "contributions" : 1
      },
      {
        "login" : "evanthomas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2039278?v=4",
        "url" : "https://api.github.com/users/evanthomas",
        "contributions" : 1
      },
      {
        "login" : "igorfialko",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9213786?v=4",
        "url" : "https://api.github.com/users/igorfialko",
        "contributions" : 1
      },
      {
        "login" : "izhangzhihao",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12044174?v=4",
        "url" : "https://api.github.com/users/izhangzhihao",
        "contributions" : 1
      }
    ],
    "commits" : 319,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : "https://gitter.im/alexarchambault/plotly-scala",
    "openIssues" : [
      {
        "number" : 321,
        "title" : "how to plot real-time update charts? ",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/321"
      },
      {
        "number" : 319,
        "title" : "is there any example program to integrate with scalajs？",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/319"
      },
      {
        "number" : 301,
        "title" : "Make graphs updateable",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/301"
      },
      {
        "number" : 299,
        "title" : "support for multi subplots",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/299"
      },
      {
        "number" : 255,
        "title" : "Plotly.js 2.0 compatibility",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/255"
      },
      {
        "number" : 254,
        "title" : "Add support to chart not listed in documentation (sunburst, parallel categories)",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/254"
      },
      {
        "number" : 253,
        "title" : "Failed to open browser from WSL",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/253"
      },
      {
        "number" : 234,
        "title" : "Probably add an Element.fromDateTime",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/234"
      },
      {
        "number" : 207,
        "title" : "Add support for image generation via Kaleido",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/207"
      },
      {
        "number" : 194,
        "title" : "Render plots to png/jpeg",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/194"
      },
      {
        "number" : 175,
        "title" : "Example of subplots",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/175"
      },
      {
        "number" : 170,
        "title" : "Official Plotly Scala graphing library",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/170"
      },
      {
        "number" : 149,
        "title" : "Almond initialization bug",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/149"
      },
      {
        "number" : 131,
        "title" : "Feature roadmap",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/131"
      },
      {
        "number" : 77,
        "title" : "Support for colaboratory",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/77"
      },
      {
        "number" : 73,
        "title" : "Support for WebGL Scatter",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/73"
      },
      {
        "number" : 55,
        "title" : "AxisAnchor AxisReference",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/55"
      },
      {
        "number" : 45,
        "title" : "Code generation from plot-schema.json",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/45"
      },
      {
        "number" : 44,
        "title" : "Consider using contraband",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/44"
      },
      {
        "number" : 29,
        "title" : "Bug: on windows openInBrowser = true does not work",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/29"
      },
      {
        "number" : 28,
        "title" : "feature request: add option ``useLivejs``",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/28"
      },
      {
        "number" : 27,
        "title" : "feature request: support ``overwrite`` flag for generating html plots",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/27"
      },
      {
        "number" : 23,
        "title" : "plotlyMinJs method extend options",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/23"
      },
      {
        "number" : 21,
        "title" : "support for Plotly.extendTraces",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/21"
      },
      {
        "number" : 15,
        "title" : "juypter-scala not working with example",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/15"
      },
      {
        "number" : 14,
        "title" : "jupyter with toree kernel",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/14"
      },
      {
        "number" : 13,
        "title" : "Cannot convert undefined or null to object",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/13"
      },
      {
        "number" : 9,
        "title" : "Run demo",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/9"
      },
      {
        "number" : 1,
        "title" : "ASL 2.0 | MIT | BSD | Boost",
        "url" : "https://github.com/alexarchambault/plotly-scala/issues/1"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : "plotly-core",
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "data-vizualization",
    "beginnerIssuesLabel" : null
  }
}