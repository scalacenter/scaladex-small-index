{
  "organization" : "precog",
  "repository" : "matryoshka",
  "creationDate" : 1455950424276,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1730795295598
    }
  },
  "githubInfo" : {
    "homepage" : null,
    "description" : "Generalized recursion schemes and traversals for Scala.",
    "logo" : "https://avatars.githubusercontent.com/u/772478?v=4",
    "stars" : 811,
    "forks" : 87,
    "watchers" : 57,
    "issues" : 19,
    "creationDate" : 1453207927000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"resources/matryoshka.png\"><img align=\"right\" src=\"resources/matryoshka.png\" height=\"200px\" style=\"max-width: 100%;\"></a></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">Matryoshka</h1><a id=\"user-content-matryoshka\" class=\"anchor\" aria-label=\"Permalink: Matryoshka\" href=\"#matryoshka\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Generalized folds, unfolds, and traversals for fixed point data structures in Scala.</p>\n<p dir=\"auto\"><a href=\"https://travis-ci.org/slamdata/matryoshka\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/d84eb2d8258593873e284357f5d361689c4d2a45a526fd60aca42f498cc3282b/68747470733a2f2f7472617669732d63692e6f72672f736c616d646174612f6d617472796f73686b612e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/slamdata/matryoshka.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://codecov.io/github/slamdata/matryoshka?branch=master\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/ba0840e4c1ad0ae125186ddbb77d08a32fa0a9bc034eeaee612ae8e3d4d17279/68747470733a2f2f636f6465636f762e696f2f6769746875622f736c616d646174612f6d617472796f73686b612f636f7665726167652e7376673f6272616e63683d6d6173746572\" alt=\"codecov.io\" data-canonical-src=\"https://codecov.io/github/slamdata/matryoshka/coverage.svg?branch=master\" style=\"max-width: 100%;\"></a>\n<a href=\"https://gitter.im/slamdata/matryoshka?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/82bdbade826a417230c68533d3db25ac5e458697b656bea5775acd9db17b28b7/68747470733a2f2f6261646765732e6769747465722e696d2f736c616d646174612f6d617472796f73686b612e737667\" alt=\"Join the chat at https://gitter.im/slamdata/matryoshka\" data-canonical-src=\"https://badges.gitter.im/slamdata/matryoshka.svg\" style=\"max-width: 100%;\"></a>\n<a href=\"https://index.scala-lang.org/slamdata/matryoshka\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/29f6274081231b5a0723bf8af895d0e4b85af12611af0ade7b3cad13ccedbdee/68747470733a2f2f696e6465782e7363616c612d6c616e672e6f72672f736c616d646174612f6d617472796f73686b612f6d617472796f73686b612d636f72652f6c61746573742e7376673f636f6c6f723d6f72616e6765\" alt=\"Latest version\" data-canonical-src=\"https://index.scala-lang.org/slamdata/matryoshka/matryoshka-core/latest.svg?color=orange\" style=\"max-width: 100%;\"></a></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">External Resources</h2><a id=\"user-content-external-resources\" class=\"anchor\" aria-label=\"Permalink: External Resources\" href=\"#external-resources\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li><a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.125\" rel=\"nofollow\">Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire</a> – the iconic paper that collected a lot of this info for the first time</li>\n<li><a href=\"http://comonad.com/reader/2009/recursion-schemes/\" rel=\"nofollow\">Recursion Schemes: A Field Guide (Redux)</a> – Ed Kmett’s summary of various folds and unfolds, with links to Haskell code</li>\n<li><a href=\"http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/urs.pdf\" rel=\"nofollow\">Unifying Structured Recursion Schemes</a> – a newer paper on how to generalize recursion schemes</li>\n<li><a href=\"https://github.com/sellout/recursion-scheme-talk/blob/master/nanopass-compiler-talk.org\">Efficient Nanopass Compilers using Cats and Matryoshka</a> – Greg Pfeil’s talk on this library (and some other things)</li>\n<li><a href=\"https://github.com/sellout/recursion-scheme-talk/blob/master/recursion-scheme-talk.org\">Fix Haskell (by eliminating recursion)</a> – Greg Pfeil’s talk on recursion schemes in Haskell</li>\n<li>Recursion schemes by example - Tim Williams <a href=\"https://github.com/willtim/recursion-schemes/raw/master/slides-final.pdf\">slides</a> <a href=\"https://www.youtube.com/watch?v=Zw9KeP3OzpU\" rel=\"nofollow\">talk</a></li>\n<li><a href=\"https://jtobin.io/practical-recursion-schemes\" rel=\"nofollow\">Practical Recursion Schemes</a> - Jared Tobin</li>\n<li><a href=\"https://jtobin.io/promorphisms-pre-post\" rel=\"nofollow\">Promorphisms, Pre and Post</a> - Jared Tobin</li>\n<li><a href=\"https://jtobin.io/time-traveling-recursion\" rel=\"nofollow\">Time Traveling Recursion Schemes</a> - Jared Tobin</li>\n<li><a href=\"https://jtobin.io/ad-via-recursion-schemes\" rel=\"nofollow\">Automatic Differentiation via recursion schemes</a> - Jared Tobin</li>\n</ul>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Usage</h2><a id=\"user-content-usage\" class=\"anchor\" aria-label=\"Permalink: Usage\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ol dir=\"auto\">\n<li>Add a dependency</li>\n</ol>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;com.slamdata&quot; %% &quot;matryoshka-core&quot; % &quot;0.21.5&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.slamdata<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>matryoshka-core<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.21.5<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Optionally, you can also depend on <code>matryoshka-scalacheck</code> to get <code>Arbitrary</code>/<code>Cogen</code>/<code>Shrink</code> instances for a bunch of pattern functors and fixed points.</p>\n<ol start=\"2\" dir=\"auto\">\n<li>\n<p dir=\"auto\">Apply some fix for SI-2712. Prior to 2.12, use @milessabin’s <a href=\"https://github.com/milessabin/si2712fix-plugin\">compiler plugin</a>. As of 2.12, you can simply add <code>scalacOptions += \"-Ypartial-unification\"</code> to your build.sbt.</p>\n</li>\n<li>\n<p dir=\"auto\">Add imports as needed. Usually the following should suffice</p>\n</li>\n</ol>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import matryoshka._\nimport matryoshka.implicits._\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">matryoshka</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">matryoshka</span>.<span class=\"pl-en\">implicits</span>.<span class=\"pl-en\">_</span></pre></div>\n<p dir=\"auto\">but if you need some of our pattern functors, then <code>matryoshka.patterns._</code> should be added. Also, there will be cases where you need to specify explicit types (although we generally recommend abstracting over <code>{Bir|Cor|R}ecursive</code> type classes), so you may need <code>matryoshka.data._</code> (for <code>Fix</code>, <code>Mu</code>, and <code>Nu</code>) and/or <code>matryoshka.instances.fixedpoint._</code> for things like <code>Nat</code>, <code>List</code>, <code>Cofree</code>, etc. defined in terms of <code>Mu</code>/<code>Nu</code>.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Introduction</h2><a id=\"user-content-introduction\" class=\"anchor\" aria-label=\"Permalink: Introduction\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">This library is predicated on the idea of rewriting your recursive data structures, replacing the recursive type reference with a fresh type parameter.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"sealed abstract class Expr\nfinal case class Num(value: Long)      extends Expr\nfinal case class Mul(l: Expr, r: Expr) extends Expr\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Num</span>(<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Long</span>)      <span class=\"pl-k\">extends</span> <span class=\"pl-en\">Expr</span>\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Mul</span>(<span class=\"pl-v\">l</span>: <span class=\"pl-en\">Expr</span>, <span class=\"pl-v\">r</span>: <span class=\"pl-en\">Expr</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-en\">Expr</span></pre></div>\n<p dir=\"auto\">could be rewritten as</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"sealed abstract class Expr[A]\nfinal case class Num[A](value: Long) extends Expr[A]\nfinal case class Mul[A](l: A, r: A)  extends Expr[A]\"><pre><span class=\"pl-k\">sealed</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Expr</span>[<span class=\"pl-en\">A</span>]\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Num</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">value</span>: <span class=\"pl-en\">Long</span>) <span class=\"pl-k\">extends</span> <span class=\"pl-en\">Expr</span>[<span class=\"pl-en\">A</span>]\n<span class=\"pl-k\">final</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Mul</span>[<span class=\"pl-en\">A</span>](<span class=\"pl-v\">l</span>: <span class=\"pl-en\">A</span>, <span class=\"pl-v\">r</span>: <span class=\"pl-en\">A</span>)  <span class=\"pl-k\">extends</span> <span class=\"pl-en\">Expr</span>[<span class=\"pl-en\">A</span>]</pre></div>\n<p dir=\"auto\">This abstract class generally allows a <code>Traverse</code> instance (or at least a <code>Functor</code> instance). Then you use one of the fixed point type constructors below to regain your recursive type.</p>\n<p dir=\"auto\">You may also want instances for <code>Delay[Equal, ?]</code>, <code>Delay[Order, ?]</code>, and <code>Delay[Show, ?]</code> (which are very similar to their non-<code>Delay</code> equivalents) to get instances for fixed points of your functor.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Fixpoint Types</h3><a id=\"user-content-fixpoint-types\" class=\"anchor\" aria-label=\"Permalink: Fixpoint Types\" href=\"#fixpoint-types\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">These types take a one-arg type constructor and provide a recursive form of it.</p>\n<p dir=\"auto\">All of these types have instances for <code>Recursive</code>, <code>Corecursive</code>, <code>FunctorT</code>, <code>TraverseT</code>, <code>Equal</code>, <code>Show</code>, and <code>Arbitrary</code> type classes unless otherwise noted.</p>\n<ul dir=\"auto\">\n<li><code>Fix</code> – This is the simplest fixpoint type, implemented with general recursion.</li>\n<li><code>Mu</code> – This is for inductive (finite) recursive structures, models the concept of “data”, aka, the “least fixed point”.</li>\n<li><code>Nu</code> – This is for coinductive (potentially infinite) recursive structures, models the concept of “codata”, aka, the “greatest fixed point”.</li>\n<li><code>Cofree[?[_], A]</code> – Only has a <code>Corecursive</code> instance if there’s a <code>Monoid</code> for <code>A</code>. This represents a structure with some metadata attached to each node. In addition to the usual operations, it can also be folded using an Elgot algebra.</li>\n<li><code>Free[?[_], A]</code> – Does not have a <code>Recursive</code> instance. In addition to the usual operations, it can also be created by unfolding with an Elgot coalgebra.</li>\n</ul>\n<p dir=\"auto\">So a type like <code>Mu[Expr]</code> is now isomorphic to the original recursive type. However, the point is to avoid operating on recursive types directly …</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Algebras</h3><a id=\"user-content-algebras\" class=\"anchor\" aria-label=\"Permalink: Algebras\" href=\"#algebras\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">A structure like this makes it possible to separate recursion from your operations. You can now write transformations that operate on only a single node of your structure at a time.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"resources/algebras.png\"><img src=\"resources/algebras.png\" alt=\"algebras and coalgebras\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">This diagram covers the major classes of transformations. The most basic ones are in the center and the arrows show how they can be generalized in various ways.</p>\n<p dir=\"auto\">Here is a very simple example of an algebra (<code>eval</code>) and how to apply it to a recursive structure.</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// we will need a Functor[Expr] in order to call embed bellow\nimplicit val exprFunctor = new scalaz.Functor[Expr] {\n  override def map[A, B](fa: Expr[A])(f: (A) =&gt; B) = fa match{\n    case Num(value) =&gt; Num[B](value)\n    case Mul(l, r) =&gt; Mul(f(l), f(r))\n  }\n}\n\nval eval: Algebra[Expr, Long] = { // i.e. Expr[Long] =&gt; Long\n  case Num(x)    =&gt; x\n  case Mul(x, y) =&gt; x * y\n}\n \ndef someExpr[T](implicit T: Corecursive.Aux[T, Expr]): T =\n  Mul(Num[T](2).embed, Mul(Num[T](3).embed,\n      Num[T](4).embed).embed).embed\n\nimport matryoshka.data.Mu \n\nsomeExpr[Mu[Expr]].cata(eval) // ⇒ 24\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> we will need a Functor[Expr] in order to call embed bellow</span>\n<span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">exprFunctor</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> scalaz.<span class=\"pl-en\">Functor</span>[<span class=\"pl-en\">Expr</span>] {\n  <span class=\"pl-k\">override</span> <span class=\"pl-k\">def</span> <span class=\"pl-en\">map</span>[<span class=\"pl-en\">A</span>, <span class=\"pl-en\">B</span>](<span class=\"pl-v\">fa</span>: <span class=\"pl-en\">Expr</span>[<span class=\"pl-en\">A</span>])(<span class=\"pl-v\">f</span>: (<span class=\"pl-en\">A</span>) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">B</span>) <span class=\"pl-k\">=</span> fa <span class=\"pl-k\">match</span>{\n    <span class=\"pl-k\">case</span> <span class=\"pl-en\">Num</span>(value) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Num</span>[<span class=\"pl-en\">B</span>](value)\n    <span class=\"pl-k\">case</span> <span class=\"pl-en\">Mul</span>(l, r) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Mul</span>(f(l), f(r))\n  }\n}\n\n<span class=\"pl-k\">val</span> <span class=\"pl-v\">eval</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Algebra</span>[<span class=\"pl-en\">Expr</span>, <span class=\"pl-en\">Long</span>] <span class=\"pl-k\">=</span> { <span class=\"pl-c\"><span class=\"pl-c\">//</span> i.e. Expr[Long] =&gt; Long</span>\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">Num</span>(x)    <span class=\"pl-k\">=&gt;</span> x\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">Mul</span>(x, y) <span class=\"pl-k\">=&gt;</span> x <span class=\"pl-k\">*</span> y\n}\n \n<span class=\"pl-k\">def</span> <span class=\"pl-en\">someExpr</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-k\">implicit</span> <span class=\"pl-en\">T</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Corecursive</span>.<span class=\"pl-en\">Aux</span>[<span class=\"pl-en\">T</span>, <span class=\"pl-en\">Expr</span>])<span class=\"pl-k\">:</span> <span class=\"pl-en\">T</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-en\">Mul</span>(<span class=\"pl-en\">Num</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-c1\">2</span>).embed, <span class=\"pl-en\">Mul</span>(<span class=\"pl-en\">Num</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-c1\">3</span>).embed,\n      <span class=\"pl-en\">Num</span>[<span class=\"pl-en\">T</span>](<span class=\"pl-c1\">4</span>).embed).embed).embed\n\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">matryoshka</span>.<span class=\"pl-en\">data</span>.<span class=\"pl-en\">Mu</span> \n\nsomeExpr[<span class=\"pl-en\">Mu</span>[<span class=\"pl-en\">Expr</span>]].cata(eval) <span class=\"pl-c\"><span class=\"pl-c\">//</span> ⇒ 24</span></pre></div>\n<p dir=\"auto\">The <code>.embed</code> calls in <code>someExpr</code> wrap the nodes in the fixed point type. <code>embed</code> is generic, and we abstract <code>someExpr</code> over the fixed point type (only requiring that it has an instance of <code>Corecursive</code>), so we can postpone the choice of the fixed point as long as possible.</p>\n<p dir=\"auto\">The <a href=\"tests/shared/src/test/scala/matryoshka/example\">example directory</a> will show you how to use other algebras and recursion schemes.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Recursion Schemes</h3><a id=\"user-content-recursion-schemes\" class=\"anchor\" aria-label=\"Permalink: Recursion Schemes\" href=\"#recursion-schemes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Here is a cheat-sheet (also available <a href=\"resources/recursion-schemes.pdf\">in PDF</a>) for some of them.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"resources/recursion-schemes.png\"><img src=\"resources/recursion-schemes.png\" alt=\"folds and unfolds\" style=\"max-width: 100%;\"></a></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Folds</h4><a id=\"user-content-folds\" class=\"anchor\" aria-label=\"Permalink: Folds\" href=\"#folds\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Those algebras can be applied recursively to your structures using many different folds. <code>cata</code> in the example above is the simplest fold. It traverses the structure bottom-up, applying the algebra to each node. That is the general behavior of a fold, but more complex ones allow for various comonads and monads to affect the result.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Unfolds</h4><a id=\"user-content-unfolds\" class=\"anchor\" aria-label=\"Permalink: Unfolds\" href=\"#unfolds\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">These are the dual of folds – using coalgebras to deconstruct values into parts, top-down. They are defined in the <code>Corecursive</code> type class.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Refolds</h4><a id=\"user-content-refolds\" class=\"anchor\" aria-label=\"Permalink: Refolds\" href=\"#refolds\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Refolds compose an unfold with a fold, never actually constructing the intermediate fixed-point structure. Therefore, they are available on any value, and are not part of a type class.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Transformations</h4><a id=\"user-content-transformations\" class=\"anchor\" aria-label=\"Permalink: Transformations\" href=\"#transformations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">The structure of these type classes is similar to <code>Recursive</code> and <code>Corecursive</code>, but rather than separating them between bottom-up and top-down traversals, <code>FunctorT</code> has both bottom-up and top-down traversals (and refold), while <code>TraverseT</code> has all the Kleisli variants (paralleling how <code>Traverse</code> extends <code>Functor</code>). A fixed-point type that has both <code>Recursive</code> and <code>Corecursive</code> instances has an implied <code>TraverseT</code> instance.</p>\n<p dir=\"auto\">The benefits of these classes is that it is possible to define the required <code>map</code> and <code>traverse</code> operations on fixed-point types that lack either a <code>project</code> or an <code>embed</code> (e.g., <code>Cofree[?[_], A]</code> lacks <code>embed</code> unless <code>A</code> has a <code>Monoid</code> instance, but can easily be <code>map</code>ped over).</p>\n<p dir=\"auto\">The tradeoff is that these operations can only transform between one fixed-point functor and another (or, in some cases, need to maintain the same functor).</p>\n<p dir=\"auto\">The names of these operations are the same as those in <code>Recursive</code> and <code>Corecursive</code>, but prefixed with <code>trans</code>.</p>\n<p dir=\"auto\">There is an additional (restricted) set of operations that also have a <code>T</code> suffix (e.g., <code>transCataT</code>). These only generalize in “the Elgot position” and require you to maintain the same functor. However, it can be the most natural way to write certain transformations, like <code>matryoshka.algebras.substitute</code>.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Generalization</h3><a id=\"user-content-generalization\" class=\"anchor\" aria-label=\"Permalink: Generalization\" href=\"#generalization\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">There are generalized forms of most recursion schemes. From the basic <code>cata</code> (and its dual, <code>ana</code>), we can generalize in a few ways. We name them using either a prefix or suffix, depending on how they’re generalized.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">G…</h4><a id=\"user-content-g\" class=\"anchor\" aria-label=\"Permalink: G…\" href=\"#g\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Most well known (in fact, even referred to as “generalized recursion schemes”) is generalizing over a <code>Comonad</code> (or <code>Monad</code>), converting an algebra like <code>F[A] =&gt; A</code> to <code>F[W[A]] =&gt; A</code>. Many of the other named folds are instances of this –</p>\n<ul dir=\"auto\">\n<li>when <code>W[A] = (T[F], A)</code>, it’s <code>para</code>,</li>\n<li>when <code>W[A] = (B, A)</code>, it’s <code>zygo</code>, and</li>\n<li>when <code>W[A] = Cofree[F, A]</code>, it’s <code>histo</code>.</li>\n</ul>\n<p dir=\"auto\">These specializations can give rise to other generalizations. <code>zygoT</code> uses <code>EnvT[B, ?[_], A]</code> and <code>ghisto</code> uses <code>Cofree[?[_], A]</code>.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">…M</h4><a id=\"user-content-m\" class=\"anchor\" aria-label=\"Permalink: …M\" href=\"#m\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Less unique to recursion schemes, there are Kleisli variants that return the result in any monad.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Elgot…</h4><a id=\"user-content-elgot\" class=\"anchor\" aria-label=\"Permalink: Elgot…\" href=\"#elgot\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">This generalization, stolen from the “Elgot algebra”, is similar to standard generalization, except it uses <code>W[F[A]] =&gt; A</code> rather than <code>F[W[A]] =&gt; A</code>, with the <code>Comonad</code> outside the functor. Not all of the forms seem to be as useful as the <code>G</code> variants, but in some cases, like <code>elgotZygo</code>, it offers benefits of its own.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">GElgot…M</h4><a id=\"user-content-gelgotm\" class=\"anchor\" aria-label=\"Permalink: GElgot…M\" href=\"#gelgotm\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Any of these generalizations can be combined, so you can have an algebra that is generalized along two or three dimensions. A fold like <code>cofPara</code> takes an algebra that’s generalized like <code>zygo</code> (<code>(B, ?)</code>) in the “Elgot” dimension and like <code>para</code> (<code>(T[F], ?)</code>) in the “G” dimension, which looks like <code>(B, F[(T[F], A)]) =&gt; A</code>. It’s honestly useful. I swear.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Implementation</h3><a id=\"user-content-implementation\" class=\"anchor\" aria-label=\"Permalink: Implementation\" href=\"#implementation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Since we can actually derive almost everything from a fairly small number of operations, why don’t we? Well, there are a few reasons, enumerated here in descending order of how valid I think they are:</p>\n<ol dir=\"auto\">\n<li>Reducing constraints. In the case of <code>para</code>, using <code>gcata(distPara, …)</code> would introduce a <code>Corecursive</code> constraint, and all of the Kleisli variants require <code>Traverse</code> for the functor, not just <code>Functor</code>.</li>\n<li>Improving performance. <code>cata</code> implemented directly (presumably) performs better than <code>gcata[Id, …]</code>. We should have some benchmarks added eventually to actually determine when this is worth doing.</li>\n<li>Helping inference. While we are (planning to) use kinda-curried type parameters to help with this, it’s still the case that <code>gcata</code> generally requires all the type parameters to be specified, while, say, <code>zygo</code> doesn’t. You can notice these instances because their definition actually is just to call the generalized version, rather than being implemented directly.</li>\n</ol>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Contributing</h2><a id=\"user-content-contributing\" class=\"anchor\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Please note that this project is released with a <a href=\"CODE_OF_CONDUCT.md\">Contributor Code of Conduct</a>. By participating in this project you agree to abide by its terms.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Users</h2><a id=\"user-content-users\" class=\"anchor\" aria-label=\"Permalink: Users\" href=\"#users\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/quasar-analytics/quasar\">Quasar</a></li>\n</ul>\n</article></div>",
    "contributors" : [
      {
        "login" : "jdegoes",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/156745?v=4",
        "url" : "https://github.com/jdegoes",
        "contributions" : 1087
      },
      {
        "login" : "mossprescott",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6147371?v=4",
        "url" : "https://github.com/mossprescott",
        "contributions" : 1085
      },
      {
        "login" : "sellout",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/33031?v=4",
        "url" : "https://github.com/sellout",
        "contributions" : 941
      },
      {
        "login" : "wemrysi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/32185?v=4",
        "url" : "https://github.com/wemrysi",
        "contributions" : 140
      },
      {
        "login" : "jedesah",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1780116?v=4",
        "url" : "https://github.com/jedesah",
        "contributions" : 101
      },
      {
        "login" : "drostron",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/318090?v=4",
        "url" : "https://github.com/drostron",
        "contributions" : 59
      },
      {
        "login" : "paulp",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9135?v=4",
        "url" : "https://github.com/paulp",
        "contributions" : 13
      },
      {
        "login" : "davidhoyt",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/527993?v=4",
        "url" : "https://github.com/davidhoyt",
        "contributions" : 8
      },
      {
        "login" : "b-studios",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/408265?v=4",
        "url" : "https://github.com/b-studios",
        "contributions" : 8
      },
      {
        "login" : "tscholak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1568873?v=4",
        "url" : "https://github.com/tscholak",
        "contributions" : 6
      },
      {
        "login" : "alissapajer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1088100?v=4",
        "url" : "https://github.com/alissapajer",
        "contributions" : 5
      },
      {
        "login" : "vil1",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389356?v=4",
        "url" : "https://github.com/vil1",
        "contributions" : 5
      },
      {
        "login" : "zainab-ali",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12057118?v=4",
        "url" : "https://github.com/zainab-ali",
        "contributions" : 5
      },
      {
        "login" : "puffnfresh",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/37715?v=4",
        "url" : "https://github.com/puffnfresh",
        "contributions" : 4
      },
      {
        "login" : "djspiewak",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/752?v=4",
        "url" : "https://github.com/djspiewak",
        "contributions" : 4
      },
      {
        "login" : "edmundnoble",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1369693?v=4",
        "url" : "https://github.com/edmundnoble",
        "contributions" : 3
      },
      {
        "login" : "xuwei-k",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/389787?v=4",
        "url" : "https://github.com/xuwei-k",
        "contributions" : 3
      },
      {
        "login" : "rintcius",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/888781?v=4",
        "url" : "https://github.com/rintcius",
        "contributions" : 3
      },
      {
        "login" : "EncodePanda",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6287558?v=4",
        "url" : "https://github.com/EncodePanda",
        "contributions" : 3
      },
      {
        "login" : "MasseGuillaume",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/921490?v=4",
        "url" : "https://github.com/MasseGuillaume",
        "contributions" : 3
      },
      {
        "login" : "dealharris",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5240265?v=4",
        "url" : "https://github.com/dealharris",
        "contributions" : 3
      },
      {
        "login" : "kanterov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/467927?v=4",
        "url" : "https://github.com/kanterov",
        "contributions" : 2
      },
      {
        "login" : "tpolecat",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1200131?v=4",
        "url" : "https://github.com/tpolecat",
        "contributions" : 2
      },
      {
        "login" : "gitter-badger",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8518239?v=4",
        "url" : "https://github.com/gitter-badger",
        "contributions" : 2
      },
      {
        "login" : "n4to4",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/21071230?v=4",
        "url" : "https://github.com/n4to4",
        "contributions" : 2
      },
      {
        "login" : "orium",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4107683?v=4",
        "url" : "https://github.com/orium",
        "contributions" : 1
      },
      {
        "login" : "waffle-iron",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6912981?v=4",
        "url" : "https://github.com/waffle-iron",
        "contributions" : 1
      },
      {
        "login" : "Fristi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/141265?v=4",
        "url" : "https://github.com/Fristi",
        "contributions" : 1
      },
      {
        "login" : "JeffACarr",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5952116?v=4",
        "url" : "https://github.com/JeffACarr",
        "contributions" : 1
      },
      {
        "login" : "yilinwei",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8933128?v=4",
        "url" : "https://github.com/yilinwei",
        "contributions" : 1
      },
      {
        "login" : "syves",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4462468?v=4",
        "url" : "https://github.com/syves",
        "contributions" : 1
      }
    ],
    "commits" : 3503,
    "topics" : [
      "recursion-schemes",
      "traversal",
      "recursive-structures",
      "fold",
      "algebra"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "openIssues" : [
      {
        "number" : 103,
        "title" : "Scala 2.13 artifact?",
        "url" : "https://github.com/precog/matryoshka/issues/103"
      },
      {
        "number" : 98,
        "title" : "Shaky foundations for generalized recursion schemes",
        "url" : "https://github.com/precog/matryoshka/issues/98"
      },
      {
        "number" : 84,
        "title" : "Add laws.",
        "url" : "https://github.com/precog/matryoshka/issues/84"
      },
      {
        "number" : 83,
        "title" : "Support for mutual recursion? + motivating example",
        "url" : "https://github.com/precog/matryoshka/issues/83"
      },
      {
        "number" : 81,
        "title" : "Add matryoshka-refined project.",
        "url" : "https://github.com/precog/matryoshka/issues/81"
      },
      {
        "number" : 80,
        "title" : "Figure out how to create various instances on arbitrary fixed-point types.",
        "url" : "https://github.com/precog/matryoshka/issues/80"
      },
      {
        "number" : 58,
        "title" : "implicitly[Recursive[Fix[Option]]] ambiguity between recursiveTRecursive and birecursiveTBirecursive",
        "url" : "https://github.com/precog/matryoshka/issues/58"
      },
      {
        "number" : 54,
        "title" : "Add scala-clippy advice",
        "url" : "https://github.com/precog/matryoshka/issues/54"
      },
      {
        "number" : 50,
        "title" : "Add scala-exercises",
        "url" : "https://github.com/precog/matryoshka/issues/50"
      },
      {
        "number" : 48,
        "title" : "Add recursion-scheme-friendly ABTs",
        "url" : "https://github.com/precog/matryoshka/issues/48"
      },
      {
        "number" : 46,
        "title" : "Generalize folds from Comonads to Adjunctions.",
        "url" : "https://github.com/precog/matryoshka/issues/46"
      },
      {
        "number" : 45,
        "title" : "“Adjust” `FunctorT` for directly-recursive types.",
        "url" : "https://github.com/precog/matryoshka/issues/45"
      },
      {
        "number" : 42,
        "title" : "Cyclic data structures",
        "url" : "https://github.com/precog/matryoshka/issues/42"
      },
      {
        "number" : 5,
        "title" : "Organize for minimal imports.",
        "url" : "https://github.com/precog/matryoshka/issues/5"
      }
    ],
    "scalaPercentage" : 100,
    "license" : "Apache-2.0",
    "commitActivity" : [
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : "matryoshka-core",
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "functional-programming-and-category-theory",
    "chatroom" : null
  }
}