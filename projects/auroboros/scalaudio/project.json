{
  "organization" : "auroboros",
  "repository" : "scalaudio",
  "creationDate" : 1479078628000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1730772837358
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "Scala library for audio DSP :: io/ugens/filters/analysis :: real-time + offline",
    "logo" : "https://avatars.githubusercontent.com/u/16824124?v=4",
    "stars" : 14,
    "forks" : 2,
    "watchers" : 3,
    "issues" : 4,
    "creationDate" : 1460940236000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><div class=\"markdown-heading\" dir=\"auto\"><h1 class=\"heading-element\" dir=\"auto\">scalaudio</h1><a id=\"user-content-scalaudio\" class=\"anchor\" aria-label=\"Permalink: scalaudio\" href=\"#scalaudio\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">scalaudio is a library is to facilitate audio synthesis/analysis on the JVM by wrapping the Java Sound API in more productive syntax. Its goal is to provide extreme flexibility while reducing verbosity of audio processing code, with the added bonus of type-checking. It aims to be pretty modular (DI for config and output engines via implicits) yet use the same syntax for both real-time and offline processing. Efficiency is a secondary goal, though even in current form some mutable data structures are used to avoid performance snags of constant memory allocation.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Build info</h3><a id=\"user-content-build-info\" class=\"anchor\" aria-label=\"Permalink: Build info\" href=\"#build-info\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">This project is currently compiled with Scala 2.11 only (cross-compilation support coming soon).</p>\n<p dir=\"auto\">For use within an SBT project, add the following dependency in build.sbt (\"amp\" is currently the main library module):</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"libraryDependencies += &quot;org.auroboros&quot; %% &quot;scalaudio-amp&quot; % &quot;0.1.0-SNAPSHOT&quot;\"><pre>libraryDependencies <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.auroboros<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scalaudio-amp<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.1.0-SNAPSHOT<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">If referencing a snapshot version, the Sonatype snapshot repository must be added as well:</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"resolvers += &quot;Sonatype OSS Snapshots&quot; at &quot;https://oss.sonatype.org/content/repositories/snapshots&quot;\"><pre>resolvers <span class=\"pl-k\">+</span><span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sonatype OSS Snapshots<span class=\"pl-pds\">\"</span></span> at <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://oss.sonatype.org/content/repositories/snapshots<span class=\"pl-pds\">\"</span></span></pre></div>\n<p dir=\"auto\">Or for other build tools, see:</p>\n<p dir=\"auto\"><a href=\"https://mvnrepository.com/artifact/org.auroboros\" rel=\"nofollow\">https://mvnrepository.com/artifact/org.auroboros</a></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Quickstart</h3><a id=\"user-content-quickstart\" class=\"anchor\" aria-label=\"Permalink: Quickstart\" href=\"#quickstart\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Functions can be composed in any way the user chooses (perhaps using <em>.andThen</em>, for example). I prefer scalaz style (see <a href=\"https://github.com/scalaz/scalaz\">https://github.com/scalaz/scalaz</a> to add if desired, as it is not actually required by scalaudio).</p>\n<div class=\"highlight highlight-source-scala notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import scalaz._\nimport Scalaz._\n\nobject MyFirstSynthComposition extends App with AmpSyntax {\n\n    // Create audio context using all default settings except for specified single out channel\n    implicit val audioContext = AudioContext(ScalaudioConfig(nOutChannels = 1))\n\n    // Create a function that produces a &quot;frame&quot; (Array[Double] where array length is number of out channels)\n    val frameFunc = Sine.asFunction(OscState(0, 440.Hz, 0)) // .asFunction is a convenience method from signalz that accepts initial state &amp; produces a state-processing function\n      .map(oscState =&gt; Array(oscState.sample))\n\n    // a frameFunc or stream of frames can be played directly via implicit conversion to a &quot;signal processing graph&quot; type a la:\n    // frameFunc.play(5 seconds)\n    // but using the playback helper automatically appends speaker output to the function\n    playback(frameFunc, 5 seconds)\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">scalaz</span>.<span class=\"pl-en\">_</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">Scalaz</span>.<span class=\"pl-en\">_</span>\n\n<span class=\"pl-k\">object</span> <span class=\"pl-en\">MyFirstSynthComposition</span> <span class=\"pl-k\">extends</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">with</span> <span class=\"pl-en\">AmpSyntax</span> {\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Create audio context using all default settings except for specified single out channel</span>\n    <span class=\"pl-k\">implicit</span> <span class=\"pl-k\">val</span> <span class=\"pl-v\">audioContext</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">AudioContext</span>(<span class=\"pl-en\">ScalaudioConfig</span>(nOutChannels <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>))\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Create a function that produces a \"frame\" (Array[Double] where array length is number of out channels)</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-v\">frameFunc</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">Sine</span>.asFunction(<span class=\"pl-en\">OscState</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">440</span>.<span class=\"pl-en\">Hz</span>, <span class=\"pl-c1\">0</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> .asFunction is a convenience method from signalz that accepts initial state &amp; produces a state-processing function</span>\n      .map(oscState <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">Array</span>(oscState.sample))\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> a frameFunc or stream of frames can be played directly via implicit conversion to a \"signal processing graph\" type a la:</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> frameFunc.play(5 seconds)</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> but using the playback helper automatically appends speaker output to the function</span>\n    playback(frameFunc, <span class=\"pl-c1\">5</span> seconds)\n}</pre></div>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">why?</h3><a id=\"user-content-why\" class=\"anchor\" aria-label=\"Permalink: why?\" href=\"#why\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">This project was initially created to facilitate my own computer music composition &amp; audio machine learning projects but I decided to open source it since I only get to work on it in spurts (between my dayjob, other music composition, and toying around with audio in Clojure... some lib from that venture will probably be appearing here soon as well).</p>\n<p dir=\"auto\">It was loosely inspired by Phil Burk's excellent library JSyn (in fact, JSyn is still a dependency as scalaudio borrows some of its utils, though this dependency will likely be cut in a future release).</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">contribute!</h3><a id=\"user-content-contribute\" class=\"anchor\" aria-label=\"Permalink: contribute!\" href=\"#contribute\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\">Please feel free to contribute PRs, I will happily review &amp; pull as I am quite actively supporting this project.</p>\n</article></div>",
    "contributors" : [
      {
        "login" : "fat0wl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/228144?v=4",
        "url" : "https://github.com/fat0wl",
        "contributions" : 197
      }
    ],
    "commits" : 197,
    "topics" : [
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "openIssues" : [
      {
        "number" : 31,
        "title" : "Unified types (Pitch, AudioDuration) as polymorphic traits?",
        "url" : "https://github.com/auroboros/scalaudio/issues/31"
      },
      {
        "number" : 30,
        "title" : "Tuple return of state mutators",
        "url" : "https://github.com/auroboros/scalaudio/issues/30"
      },
      {
        "number" : 29,
        "title" : "Playback distortion at startup",
        "url" : "https://github.com/auroboros/scalaudio/issues/29"
      }
    ],
    "scalaPercentage" : 99,
    "license" : null,
    "commitActivity" : [
    ]
  },
  "settings" : {
    "preferStableVersion" : true,
    "defaultArtifact" : "scalaudio-amp",
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "contributorsWanted" : false,
    "deprecatedArtifacts" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "audio-and-music",
    "chatroom" : null
  }
}