{
  "organization" : "johnsnowlabs",
  "repository" : "spark-nlp",
  "creationDate" : 1608930318000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1643165492482
    }
  },
  "githubInfo" : {
    "homepage" : "https://nlp.johnsnowlabs.com",
    "description" : "State of the Art Natural Language Processing",
    "logo" : "https://avatars.githubusercontent.com/u/15903364?v=4",
    "stars" : 2589,
    "forks" : 529,
    "watchers" : 87,
    "issues" : 97,
    "creationDate" : 1506281804000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-spark-nlp-state-of-the-art-natural-language-processing\" class=\"anchor\" aria-hidden=\"true\" href=\"#spark-nlp-state-of-the-art-natural-language-processing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Spark NLP: State of the Art Natural Language Processing</h1>\n<p align=\"center\" dir=\"auto\">\n    <a href=\"https://github.com/JohnSnowLabs/spark-nlp/actions\" alt=\"build\">\n        <img src=\"https://github.com/JohnSnowLabs/spark-nlp/workflows/build/badge.svg\" style=\"max-width: 100%;\"></a>\n    <a href=\"https://github.com/JohnSnowLabs/spark-nlp/releases\" alt=\"Current Release Version\">\n        <img src=\"https://camo.githubusercontent.com/944d2c7d110ba37e5c9643a4738350b81537fe848303210f0daaaa612d83882e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4a6f686e536e6f774c6162732f737061726b2d6e6c702e7376673f7374796c653d666c61742d737175617265266c6f676f3d676974687562\" data-canonical-src=\"https://img.shields.io/github/v/release/JohnSnowLabs/spark-nlp.svg?style=flat-square&amp;logo=github\" style=\"max-width: 100%;\"></a>\n    <a href=\"https://search.maven.org/artifact/com.johnsnowlabs.nlp/spark-nlp_2.12\" alt=\"Maven Central\" rel=\"nofollow\">\n        <img src=\"https://camo.githubusercontent.com/f77793f9043b3c294ef9c2d06906fbc68e7c186ab720aa72bc4d0ffac2906f3b/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f636f6d2e6a6f686e736e6f776c6162732e6e6c702f737061726b2d6e6c705f322e31322f62616467652e737667\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/com.johnsnowlabs.nlp/spark-nlp_2.12/badge.svg\" style=\"max-width: 100%;\"></a>\n    <a href=\"https://badge.fury.io/py/spark-nlp\" alt=\"PyPI version\" rel=\"nofollow\">\n        <img src=\"https://camo.githubusercontent.com/042a5ebc3eb25b8bc07bb8765895e73e9d86c0db2ca8a5d21abf740514994ef0/68747470733a2f2f62616467652e667572792e696f2f70792f737061726b2d6e6c702e737667\" data-canonical-src=\"https://badge.fury.io/py/spark-nlp.svg\" style=\"max-width: 100%;\"></a>\n    <a href=\"https://anaconda.org/JohnSnowLabs/spark-nlp\" alt=\"Anaconda-Cloud\" rel=\"nofollow\">\n        <img src=\"https://camo.githubusercontent.com/3f5a6c4015387793474ac2bb05e0ce457ade4f13b101cca9cf7607f8a93a8d34/68747470733a2f2f616e61636f6e64612e6f72672f6a6f686e736e6f776c6162732f737061726b2d6e6c702f6261646765732f76657273696f6e2e737667\" data-canonical-src=\"https://anaconda.org/johnsnowlabs/spark-nlp/badges/version.svg\" style=\"max-width: 100%;\"></a>\n    <a href=\"https://github.com/JohnSnowLabs/spark-nlp/blob/master/LICENSE\" alt=\"License\">\n        <img src=\"https://camo.githubusercontent.com/2a2157c971b7ae1deb8eb095799440551c33dcf61ea3d965d86b496a5a65df55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\" data-canonical-src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\" style=\"max-width: 100%;\"></a>\n    <a href=\"https://pypi.org/project/spark-nlp/\" alt=\"PyPi downloads\" rel=\"nofollow\">\n        <img src=\"https://camo.githubusercontent.com/dcba0edd081b102f77cbb7223fdf22ac84d2c1b82c63e52c6fac963577fbe647/68747470733a2f2f7374617469632e706570792e746563682f706572736f6e616c697a65642d62616467652f737061726b2d6e6c703f706572696f643d746f74616c26756e6974733d696e7465726e6174696f6e616c5f73797374656d266c6566745f636f6c6f723d677265792672696768745f636f6c6f723d6f72616e6765266c6566745f746578743d706970253230646f776e6c6f616473\" data-canonical-src=\"https://static.pepy.tech/personalized-badge/spark-nlp?period=total&amp;units=international_system&amp;left_color=grey&amp;right_color=orange&amp;left_text=pip%20downloads\" style=\"max-width: 100%;\"></a>\n</p>\n<p dir=\"auto\">Spark NLP is a state-of-the-art Natural Language Processing library built on top of Apache Spark. It provides <strong>simple</strong>, <strong>performant</strong> &amp; <strong>accurate</strong> NLP annotations for machine learning pipelines that <strong>scale</strong> easily in a distributed environment. Spark NLP comes with <strong>4000+</strong> pretrained <strong>pipelines</strong> and <strong>models</strong> in more than <strong>200+</strong> languages.\nIt also offers tasks such as <strong>Tokenization</strong>, <strong>Word Segmentation</strong>, <strong>Part-of-Speech Tagging</strong>, Word and Sentence <strong>Embeddings</strong>, <strong>Named Entity Recognition</strong>, <strong>Dependency Parsing</strong>, <strong>Spell Checking</strong>, <strong>Text Classification</strong>, <strong>Sentiment Analysis</strong>, <strong>Token Classification</strong>, <strong>Machine Translation</strong> (+180 languages), <strong>Summarization</strong> &amp; <strong>Question Answering</strong>, <strong>Text Generation</strong>, and many more <a href=\"#features\">NLP tasks</a>.</p>\n<p dir=\"auto\"><strong>Spark NLP</strong> is the only open-source NLP library in <strong>production</strong> that offers state-of-the-art transformers such as <strong>BERT</strong>, <strong>ALBERT</strong>, <strong>ELECTRA</strong>, <strong>XLNet</strong>, <strong>DistilBERT</strong>, <strong>RoBERTa</strong>, <strong>XLM-RoBERTa</strong>, <strong>Longformer</strong>, <strong>ELMO</strong>, <strong>Universal Sentence Encoder</strong>, <strong>Google T5</strong>, <strong>MarianMT</strong>, and <strong>GPT2</strong> not only to <strong>Python</strong> and <strong>R</strong>, but also to <strong>JVM</strong> ecosystem (<strong>Java</strong>, <strong>Scala</strong>, and <strong>Kotlin</strong>) at <strong>scale</strong> by extending <strong>Apache Spark</strong> natively.</p>\n<h2 dir=\"auto\"><a id=\"user-content-projects-website\" class=\"anchor\" aria-hidden=\"true\" href=\"#projects-website\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Project's website</h2>\n<p dir=\"auto\">Take a look at our official Spark NLP page: <a href=\"http://nlp.johnsnowlabs.com/\" rel=\"nofollow\">http://nlp.johnsnowlabs.com/</a> for user documentation and examples</p>\n<h2 dir=\"auto\"><a id=\"user-content-community-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#community-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Community support</h2>\n<ul dir=\"auto\">\n<li><a href=\"https://www.johnsnowlabs.com/slack-redirect/\" rel=\"nofollow\">Slack</a> For live discussion with the Spark NLP community and the team</li>\n<li><a href=\"https://github.com/JohnSnowLabs/spark-nlp\">GitHub</a> Bug reports, feature requests, and contributions</li>\n<li><a href=\"https://github.com/JohnSnowLabs/spark-nlp/discussions\">Discussions</a> Engage with other community members, share ideas, and show off how you use Spark NLP!</li>\n<li><a href=\"https://medium.com/spark-nlp\" rel=\"nofollow\">Medium</a> Spark NLP articles</li>\n<li><a href=\"https://www.youtube.com/channel/UCmFOjlpYEhxf_wJUDuz6xxQ/videos\" rel=\"nofollow\">YouTube</a> Spark NLP video tutorials</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-table-of-contents\" class=\"anchor\" aria-hidden=\"true\" href=\"#table-of-contents\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Table of contents</h2>\n<ul dir=\"auto\">\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#requirements\">Requirements</a></li>\n<li><a href=\"#quick-start\">Quick Start</a></li>\n<li><a href=\"#apache-spark-support\">Apache Spark Support</a></li>\n<li><a href=\"#scala-and-python-support\">Scala &amp; Python Support</a></li>\n<li><a href=\"#databricks-support\">Databricks Support</a></li>\n<li><a href=\"#emr-support\">EMR Support</a></li>\n<li><a href=\"#usage\">Using Spark NLP</a>\n<ul dir=\"auto\">\n<li><a href=\"#packages-cheatsheet\">Pacakges Chetsheet</a></li>\n<li><a href=\"#spark-packages\">Spark Packages</a></li>\n<li><a href=\"#scala\">Scala</a>\n<ul dir=\"auto\">\n<li><a href=\"#maven\">Maven</a></li>\n<li><a href=\"#sbt\">SBT</a></li>\n</ul>\n</li>\n<li><a href=\"#python\">Python</a>\n<ul dir=\"auto\">\n<li><a href=\"#pipconda\">Pip/Conda</a></li>\n</ul>\n</li>\n<li><a href=\"#compiled-jars\">Compiled JARs</a></li>\n<li><a href=\"#apache-zeppelin\">Apache Zeppelin</a></li>\n<li><a href=\"#jupyter-notebook-python\">Jupyter Notebook</a></li>\n<li><a href=\"#google-colab-notebook\">Google Colab Notebook</a></li>\n<li><a href=\"#kaggle-kernel\">Kaggle Kernel</a></li>\n<li><a href=\"#databricks-cluster\">Databricks Cluser</a></li>\n<li><a href=\"#emr-cluster\">EMR Cluser</a></li>\n<li><a href=\"#gcp-dataproc\">GCP Dataproc</a></li>\n<li><a href=\"#spark-nlp-configuration\">Spark NLP Configuration</a></li>\n</ul>\n</li>\n<li><a href=\"#pipelines-and-models\">Pipelines &amp; Models</a>\n<ul dir=\"auto\">\n<li><a href=\"#pipelines\">Pipelines</a></li>\n<li><a href=\"#models\">Models</a></li>\n</ul>\n</li>\n<li><a href=\"#offline\">Offline</a></li>\n<li><a href=\"#examples\">Examples</a></li>\n<li><a href=\"#faq\">FAQ</a></li>\n<li><a href=\"#citation\">Citation</a></li>\n<li><a href=\"#contributing\">Contributing</a></li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-features\" class=\"anchor\" aria-hidden=\"true\" href=\"#features\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Features</h2>\n<ul dir=\"auto\">\n<li>Tokenization</li>\n<li>Trainable Word Segmentation</li>\n<li>Stop Words Removal</li>\n<li>Token Normalizer</li>\n<li>Document Normalizer</li>\n<li>Stemmer</li>\n<li>Lemmatizer</li>\n<li>NGrams</li>\n<li>Regex Matching</li>\n<li>Text Matching</li>\n<li>Chunking</li>\n<li>Date Matcher</li>\n<li>Sentence Detector</li>\n<li>Deep Sentence Detector (Deep learning)</li>\n<li>Dependency parsing (Labeled/unlabeled)</li>\n<li>Part-of-speech tagging</li>\n<li>Sentiment Detection (ML models)</li>\n<li>Spell Checker (ML and DL models)</li>\n<li>Word Embeddings (GloVe and Word2Vec)</li>\n<li>Doc2Vec (based on Word2Vec)</li>\n<li>BERT Embeddings (TF Hub &amp; HuggingFace models)</li>\n<li>DistilBERT Embeddings (HuggingFace models)</li>\n<li>RoBERTa Embeddings (HuggingFace models)</li>\n<li>XLM-RoBERTa Embeddings (HuggingFace models)</li>\n<li>Longformer Embeddings (HuggingFace models)</li>\n<li>ALBERT Embeddings (TF Hub &amp; HuggingFace models)</li>\n<li>XLNet Embeddings</li>\n<li>ELMO Embeddings (TF Hub models)</li>\n<li>Universal Sentence Encoder (TF Hub models)</li>\n<li>BERT Sentence Embeddings (TF Hub &amp; HuggingFace models)</li>\n<li>RoBerta Sentence Embeddings (HuggingFace models)</li>\n<li>XLM-RoBerta Sentence Embeddings (HuggingFace models)</li>\n<li>Sentence Embeddings</li>\n<li>Chunk Embeddings</li>\n<li>Unsupervised keywords extraction</li>\n<li>Language Detection &amp; Identification (up to 375 languages)</li>\n<li>Multi-class Sentiment analysis (Deep learning)</li>\n<li>Multi-label Sentiment analysis (Deep learning)</li>\n<li>Multi-class Text Classification (Deep learning)</li>\n<li>BERT for Token &amp; Sequence Classification</li>\n<li>DistilBERT for Token &amp; Sequence Classification</li>\n<li>ALBERT for Token &amp; Sequence Classification</li>\n<li>RoBERTa for Token &amp; Sequence Classification</li>\n<li>XLM-RoBERTa for Token &amp; Sequence Classification</li>\n<li>XLNet for Token &amp; Sequence Classification</li>\n<li>Longformer for Token &amp; Sequence Classification</li>\n<li>Neural Machine Translation (MarianMT)</li>\n<li>Text-To-Text Transfer Transformer (Google T5)</li>\n<li>Generative Pre-trained Transformer 2 (OpenAI GPT2)</li>\n<li>Named entity recognition (Deep learning)</li>\n<li>Easy TensorFlow integration</li>\n<li>GPU Support</li>\n<li>Full integration with Spark ML functions</li>\n<li>+2000 pre-trained models in +200 languages!</li>\n<li>+1700 pre-trained pipelines in +200 languages!</li>\n<li>Multi-lingual NER models: Arabic, Bengali, Chinese, Danish, Dutch, English, Finnish, French, German, Hebrew, Italian, Japanese, Korean, Norwegian, Persian, Polish, Portuguese, Russian, Spanish, Swedish, and Urdu.</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-requirements\" class=\"anchor\" aria-hidden=\"true\" href=\"#requirements\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Requirements</h2>\n<p dir=\"auto\">To use Spark NLP you need the following requirements:</p>\n<ul dir=\"auto\">\n<li>Java 8 and 11</li>\n<li>Apache Spark 3.2.x, 3.1.x, 3.0.x, 2.4.x, or 2.3.x</li>\n</ul>\n<p dir=\"auto\">NOTE: Java 11 is only supported if you are using Spark NLP with Spark/PySpark 3.x and above</p>\n<p dir=\"auto\"><strong>GPU (optional):</strong></p>\n<p dir=\"auto\">Spark NLP 3.4.0 is built with TensorFlow 2.4.1 and requires the followings if you need GPU support</p>\n<ul dir=\"auto\">\n<li>CUDA11 and cuDNN 8.0.2</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-quick-start\" class=\"anchor\" aria-hidden=\"true\" href=\"#quick-start\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Quick Start</h2>\n<p dir=\"auto\">This is a quick example of how to use Spark NLP pre-trained pipeline in Python and PySpark:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ java -version\n# should be Java 8 (Oracle or OpenJDK)\n$ conda create -n sparknlp python=3.7 -y\n$ conda activate sparknlp\n# spark-nlp by default is based on pyspark 3.x\n$ pip install spark-nlp==3.4.0 pyspark==3.1.2\"><pre>$ java -version\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> should be Java 8 (Oracle or OpenJDK)</span>\n$ conda create -n sparknlp python=3.7 -y\n$ conda activate sparknlp\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> spark-nlp by default is based on pyspark 3.x</span>\n$ pip install spark-nlp==3.4.0 pyspark==3.1.2</pre></div>\n<p dir=\"auto\">In Python console or Jupyter <code>Python3</code> kernel:</p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# Import Spark NLP\nfrom sparknlp.base import *\nfrom sparknlp.annotator import *\nfrom sparknlp.pretrained import PretrainedPipeline\nimport sparknlp\n\n# Start SparkSession with Spark NLP\n# start() functions has 5 parameters: gpu, spark23, spark24, spark32, and memory\n# sparknlp.start(gpu=True) will start the session with GPU support\n# sparknlp.start(spark23=True) is when you have Apache Spark 2.3.x installed\n# sparknlp.start(spark24=True) is when you have Apache Spark 2.4.x installed\n# sparknlp.start(spark32=True) is when you have Apache Spark 3.2.x installed\n# sparknlp.start(memory=&quot;16G&quot;) to change the default driver memory in SparkSession\nspark = sparknlp.start()\n\n# Download a pre-trained pipeline\npipeline = PretrainedPipeline('explain_document_dl', lang='en')\n\n# Your testing dataset\ntext = &quot;&quot;&quot;\nThe Mona Lisa is a 16th century oil painting created by Leonardo.\nIt's held at the Louvre in Paris.\n&quot;&quot;&quot;\n\n# Annotate your testing dataset\nresult = pipeline.annotate(text)\n\n# What's in the pipeline\nlist(result.keys())\nOutput: ['entities', 'stem', 'checked', 'lemma', 'document',\n'pos', 'token', 'ner', 'embeddings', 'sentence']\n\n# Check the results\nresult['entities']\nOutput: ['Mona Lisa', 'Leonardo', 'Louvre', 'Paris']\"><pre><span class=\"pl-c\"># Import Spark NLP</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-s1\">base</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-s1\">annotator</span> <span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-s1\">pretrained</span> <span class=\"pl-k\">import</span> <span class=\"pl-v\">PretrainedPipeline</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">sparknlp</span>\n\n<span class=\"pl-c\"># Start SparkSession with Spark NLP</span>\n<span class=\"pl-c\"># start() functions has 5 parameters: gpu, spark23, spark24, spark32, and memory</span>\n<span class=\"pl-c\"># sparknlp.start(gpu=True) will start the session with GPU support</span>\n<span class=\"pl-c\"># sparknlp.start(spark23=True) is when you have Apache Spark 2.3.x installed</span>\n<span class=\"pl-c\"># sparknlp.start(spark24=True) is when you have Apache Spark 2.4.x installed</span>\n<span class=\"pl-c\"># sparknlp.start(spark32=True) is when you have Apache Spark 3.2.x installed</span>\n<span class=\"pl-c\"># sparknlp.start(memory=\"16G\") to change the default driver memory in SparkSession</span>\n<span class=\"pl-s1\">spark</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-en\">start</span>()\n\n<span class=\"pl-c\"># Download a pre-trained pipeline</span>\n<span class=\"pl-s1\">pipeline</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">PretrainedPipeline</span>(<span class=\"pl-s\">'explain_document_dl'</span>, <span class=\"pl-s1\">lang</span><span class=\"pl-c1\">=</span><span class=\"pl-s\">'en'</span>)\n\n<span class=\"pl-c\"># Your testing dataset</span>\n<span class=\"pl-s1\">text</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"\"\"</span>\n<span class=\"pl-s\">The Mona Lisa is a 16th century oil painting created by Leonardo.</span>\n<span class=\"pl-s\">It's held at the Louvre in Paris.</span>\n<span class=\"pl-s\">\"\"\"</span>\n\n<span class=\"pl-c\"># Annotate your testing dataset</span>\n<span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">pipeline</span>.<span class=\"pl-en\">annotate</span>(<span class=\"pl-s1\">text</span>)\n\n<span class=\"pl-c\"># What's in the pipeline</span>\n<span class=\"pl-en\">list</span>(<span class=\"pl-s1\">result</span>.<span class=\"pl-en\">keys</span>())\n<span class=\"pl-v\">Output</span>: [<span class=\"pl-s\">'entities'</span>, <span class=\"pl-s\">'stem'</span>, <span class=\"pl-s\">'checked'</span>, <span class=\"pl-s\">'lemma'</span>, <span class=\"pl-s\">'document'</span>,\n<span class=\"pl-s\">'pos'</span>, <span class=\"pl-s\">'token'</span>, <span class=\"pl-s\">'ner'</span>, <span class=\"pl-s\">'embeddings'</span>, <span class=\"pl-s\">'sentence'</span>]\n\n<span class=\"pl-c\"># Check the results</span>\n<span class=\"pl-s1\">result</span>[<span class=\"pl-s\">'entities'</span>]\n<span class=\"pl-v\">Output</span>: [<span class=\"pl-s\">'Mona Lisa'</span>, <span class=\"pl-s\">'Leonardo'</span>, <span class=\"pl-s\">'Louvre'</span>, <span class=\"pl-s\">'Paris'</span>]</pre></div>\n<p dir=\"auto\">For more examples, you can visit our dedicated <a href=\"https://github.com/JohnSnowLabs/spark-nlp-workshop\">repository</a> to showcase all Spark NLP use cases!</p>\n<h2 dir=\"auto\"><a id=\"user-content-apache-spark-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#apache-spark-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Apache Spark Support</h2>\n<p dir=\"auto\">Spark NLP <em>3.4.0</em> has been built on top of Apache Spark 3.x while fully supports Apache Spark 2.3.x, 2.4.x, 3.0.x, 3.1.x, and 3.2.x:</p>\n<table>\n<thead>\n<tr>\n<th>Spark NLP</th>\n<th>Apache Spark 2.3.x</th>\n<th>Apache Spark 2.4.x</th>\n<th>Apache Spark 3.0.x</th>\n<th>Apache Spark 3.1.x</th>\n<th>Apache Spark 3.2.x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.4.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>3.3.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>3.2.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>3.1.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>3.0.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.7.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.6.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.5.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.4.x</td>\n<td>Partially</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.8.x</td>\n<td>Partially</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.7.x</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.6.x</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.5.x</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n</tbody>\n</table>\n<ul dir=\"auto\">\n<li>Starting 3.0.0 release, the default <code>spark-nlp</code> and <code>spark-nlp-gpu</code> pacakges are based on Scala 2.12 and Apache Spark 3.x by default.</li>\n</ul>\n<p dir=\"auto\">Find out more about <code>Spark NLP</code> versions from our <a href=\"https://github.com/JohnSnowLabs/spark-nlp/releases\">release notes</a>.</p>\n<h2 dir=\"auto\"><a id=\"user-content-scala-and-python-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala-and-python-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala and Python Support</h2>\n<table>\n<thead>\n<tr>\n<th>Spark NLP</th>\n<th>Python 3.6</th>\n<th>Python 3.7</th>\n<th>Python 3.8</th>\n<th>Python 3.9</th>\n<th>Scala 2.11</th>\n<th>Scala 2.12</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3.4.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>3.3.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>3.2.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>3.1.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>3.0.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>2.7.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.6.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.5.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>2.4.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.8.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.7.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.6.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>1.5.x</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n<td>NO</td>\n<td>YES</td>\n<td>NO</td>\n</tr>\n</tbody>\n</table>\n<h2 dir=\"auto\"><a id=\"user-content-databricks-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#databricks-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Databricks Support</h2>\n<p dir=\"auto\">Spark NLP 3.4.0 has been tested and is compatible with the following runtimes:</p>\n<p dir=\"auto\"><strong>CPU:</strong></p>\n<ul dir=\"auto\">\n<li>5.5 LTS</li>\n<li>5.5 LTS ML</li>\n<li>6.4</li>\n<li>6.4 ML</li>\n<li>7.3</li>\n<li>7.3 ML</li>\n<li>7.4</li>\n<li>7.4 ML</li>\n<li>7.5</li>\n<li>7.5 ML</li>\n<li>7.6</li>\n<li>7.6 ML</li>\n<li>8.0</li>\n<li>8.0 ML</li>\n<li>8.1</li>\n<li>8.1 ML</li>\n<li>8.2</li>\n<li>8.2 ML</li>\n<li>8.3</li>\n<li>8.3 ML</li>\n<li>8.4</li>\n<li>8.4 ML</li>\n<li>9.0</li>\n<li>9.0 ML</li>\n<li>9.1</li>\n<li>9.1 ML</li>\n<li>10.0</li>\n<li>10.0 ML</li>\n<li>10.1</li>\n<li>10.1 ML</li>\n<li>10.2</li>\n<li>10.2 ML</li>\n</ul>\n<p dir=\"auto\"><strong>GPU:</strong></p>\n<ul dir=\"auto\">\n<li>8.1 ML &amp; GPU</li>\n<li>8.2 ML &amp; GPU</li>\n<li>8.3 ML &amp; GPU</li>\n<li>8.4 ML &amp; GPU</li>\n<li>9.0 ML &amp; GPU</li>\n<li>9.1 ML &amp; GPU</li>\n<li>10.0 ML &amp; GPU</li>\n<li>10.1 ML &amp; GPU</li>\n<li>10.2 ML &amp; GPU</li>\n</ul>\n<p dir=\"auto\">NOTE: Spark NLP 3.4.0 is based on TensorFlow 2.4.x which is compatible with CUDA11 and cuDNN 8.0.2. The only Databricks runtimes supporting CUDA 11 are 8.x and above as listed under GPU.</p>\n<h2 dir=\"auto\"><a id=\"user-content-emr-support\" class=\"anchor\" aria-hidden=\"true\" href=\"#emr-support\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>EMR Support</h2>\n<p dir=\"auto\">Spark NLP 3.4.0 has been tested and is compatible with the following EMR releases:</p>\n<ul dir=\"auto\">\n<li>emr-5.20.0</li>\n<li>emr-5.21.0</li>\n<li>emr-5.21.1</li>\n<li>emr-5.22.0</li>\n<li>emr-5.23.0</li>\n<li>emr-5.24.0</li>\n<li>emr-5.24.1</li>\n<li>emr-5.25.0</li>\n<li>emr-5.26.0</li>\n<li>emr-5.27.0</li>\n<li>emr-5.28.0</li>\n<li>emr-5.29.0</li>\n<li>emr-5.30.0</li>\n<li>emr-5.30.1</li>\n<li>emr-5.31.0</li>\n<li>emr-5.32.0</li>\n<li>emr-5.33.0</li>\n<li>emr-5.33.1</li>\n<li>emr-6.1.0</li>\n<li>emr-6.2.0</li>\n<li>emr-6.3.0</li>\n<li>emr-6.3.1</li>\n<li>emr-6.4.0</li>\n</ul>\n<p dir=\"auto\">Full list of <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-5x.html\" rel=\"nofollow\">Amazon EMR 5.x releases</a>\nFull list of <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-6x.html\" rel=\"nofollow\">Amazon EMR 6.x releases</a></p>\n<p dir=\"auto\">NOTE: The EMR 6.0.0 is not supported by Spark NLP 3.4.0</p>\n<h2 dir=\"auto\"><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Usage</h2>\n<h2 dir=\"auto\"><a id=\"user-content-packages-cheatsheet\" class=\"anchor\" aria-hidden=\"true\" href=\"#packages-cheatsheet\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Packages Cheatsheet</h2>\n<p dir=\"auto\">This is a cheatsheet for corresponding Spark NLP Maven package to Apache Spark / PySpark major version:</p>\n<table>\n<thead>\n<tr>\n<th>ENV</th>\n<th>Spark/PySpark 3.0.x/3.1.x</th>\n<th>Spark/PySpark 3.2.x</th>\n<th>Spark/PySpark 2.4.x</th>\n<th>Spark/PySpark 2.3.x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td><code>spark-nlp</code></td>\n<td><code>spark-nlp-spark32</code></td>\n<td><code>spark-nlp-spark24</code></td>\n<td><code>spark-nlp-spark23</code></td>\n</tr>\n<tr>\n<td>GPU</td>\n<td><code>spark-nlp-gpu</code></td>\n<td><code>spark-nlp-gpu-spark32</code></td>\n<td><code>spark-nlp-gpu-spark24</code></td>\n<td><code>spark-nlp-gpu-spark23</code></td>\n</tr>\n<tr>\n<td>Start Function</td>\n<td><code>sparknlp.start()</code></td>\n<td><code>sparknlp.start(spark32=True)</code></td>\n<td><code>sparknlp.start(spark24=True)</code></td>\n<td><code>sparknlp.start(spark23=True)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 dir=\"auto\"><a id=\"user-content-spark-packages\" class=\"anchor\" aria-hidden=\"true\" href=\"#spark-packages\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Spark Packages</h2>\n<h3 dir=\"auto\"><a id=\"user-content-command-line-requires-internet-connection\" class=\"anchor\" aria-hidden=\"true\" href=\"#command-line-requires-internet-connection\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Command line (requires internet connection)</h3>\n<p dir=\"auto\">Spark NLP supports all major releases of Apache Spark 2.3.x, Apache Spark 2.4.x, Apache Spark 3.0.x, Apache Spark 3.1.x, and Apache Spark 3.2.x. That's being said, you need to choose the right package name for the right Apache Spark major release:</p>\n<h4 dir=\"auto\"><a id=\"user-content-apache-spark-3x-30x-and-31x---scala-212\" class=\"anchor\" aria-hidden=\"true\" href=\"#apache-spark-3x-30x-and-31x---scala-212\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Apache Spark 3.x (3.0.x and 3.1.x - Scala 2.12)</h4>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# CPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> CPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<p dir=\"auto\">The <code>spark-nlp</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp\" rel=\"nofollow\">Maven Repository</a>.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# GPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu_2.12:3.4.0\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> GPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu_2.12:3.4.0\n</pre></div>\n<p dir=\"auto\">The <code>spark-nlp-gpu</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu\" rel=\"nofollow\">Maven Repository</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-apache-spark-32x-scala-212\" class=\"anchor\" aria-hidden=\"true\" href=\"#apache-spark-32x-scala-212\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Apache Spark 3.2.x (Scala 2.12)</h4>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# CPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-spark32_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-spark32_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-spark32_2.12:3.4.0\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> CPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-spark32_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-spark32_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-spark32_2.12:3.4.0</pre></div>\n<p dir=\"auto\">The <code>spark-nlp</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark32\" rel=\"nofollow\">Maven Repository</a>.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# GPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark32_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark32_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark32_2.12:3.4.0\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> GPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark32_2.12:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark32_2.12:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark32_2.12:3.4.0\n</pre></div>\n<p dir=\"auto\">The <code>spark-nlp-gpu</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark32\" rel=\"nofollow\">Maven Repository</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-apache-spark-24x-scala-211\" class=\"anchor\" aria-hidden=\"true\" href=\"#apache-spark-24x-scala-211\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Apache Spark 2.4.x (Scala 2.11)</h4>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# CPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-spark24_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-spark24_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-spark24_2.11:3.4.0\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> CPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-spark24_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-spark24_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-spark24_2.11:3.4.0</pre></div>\n<p dir=\"auto\">The <code>spark-nlp-spark24</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark24\" rel=\"nofollow\">Maven Repository</a>.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# GPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark24_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark24_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark24_2.11:3.4.0\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> GPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark24_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark24_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark24_2.11:3.4.0\n</pre></div>\n<p dir=\"auto\">The <code>spark-nlp-gpu-spark24</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark24\" rel=\"nofollow\">Maven Repository</a>.</p>\n<h4 dir=\"auto\"><a id=\"user-content-apache-spark-23x-scala-211\" class=\"anchor\" aria-hidden=\"true\" href=\"#apache-spark-23x-scala-211\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Apache Spark 2.3.x (Scala 2.11)</h4>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# CPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-spark23_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-spark23_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-spark23_2.11:3.4.0\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> CPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-spark23_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-spark23_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-spark23_2.11:3.4.0</pre></div>\n<p dir=\"auto\">The <code>spark-nlp-spark23</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark23\" rel=\"nofollow\">Maven Repository</a>.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# GPU\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark23_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark23_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark23_2.11:3.4.0\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> GPU</span>\n\nspark-shell --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark23_2.11:3.4.0\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark23_2.11:3.4.0\n\nspark-submit --packages com.johnsnowlabs.nlp:spark-nlp-gpu-spark23_2.11:3.4.0\n</pre></div>\n<p dir=\"auto\">The <code>spark-nlp-gpu-spark23</code> has been published to the <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark23\" rel=\"nofollow\">Maven Repository</a>.</p>\n<p dir=\"auto\"><strong>NOTE</strong>: In case you are using large pretrained models like UniversalSentenceEncoder, you need to have the following set in your SparkSession:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark-shell \\\n  --driver-memory 16g \\\n  --conf spark.kryoserializer.buffer.max=2000M \\\n  --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre>spark-shell \\\n  --driver-memory 16g \\\n  --conf spark.kryoserializer.buffer.max=2000M \\\n  --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-scala\" class=\"anchor\" aria-hidden=\"true\" href=\"#scala\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Scala</h2>\n<p dir=\"auto\">Spark NLP supports Scala 2.11.x if you are using Apache Spark 2.3.x or 2.4.x and Scala 2.12.x if you are using Apache Spark 3.0.x, 3.1.x, and 3.2.x versions. Our packages are deployed to Maven central. To add any of our packages as a dependency in your application you can follow these coordinates:</p>\n<h3 dir=\"auto\"><a id=\"user-content-maven\" class=\"anchor\" aria-hidden=\"true\" href=\"#maven\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Maven</h3>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 3.0.x and 3.1.x:</p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp_2.12&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp_2.12&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-gpu_2.12&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-gpu_2.12&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 3.2.x:</p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark32 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-spark32_2.12&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark32 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-spark32_2.12&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark32 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-gpu-spark32_2.12&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark32 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-gpu-spark32_2.12&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 2.4.x:</p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark24 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-spark24_2.11&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark24 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-spark24_2.11&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark24 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-gpu_2.11&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark24 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-gpu_2.11&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 2.3.x:</p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark23 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-spark23_2.11&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark23 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-spark23_2.11&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"highlight highlight-text-xml position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;!-- https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark23 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.johnsnowlabs.nlp&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-nlp-gpu-spark23_2.11&lt;/artifactId&gt;\n    &lt;version&gt;3.4.0&lt;/version&gt;\n&lt;/dependency&gt;\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark23 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">dependency</span>&gt;\n    &lt;<span class=\"pl-ent\">groupId</span>&gt;com.johnsnowlabs.nlp&lt;/<span class=\"pl-ent\">groupId</span>&gt;\n    &lt;<span class=\"pl-ent\">artifactId</span>&gt;spark-nlp-gpu-spark23_2.11&lt;/<span class=\"pl-ent\">artifactId</span>&gt;\n    &lt;<span class=\"pl-ent\">version</span>&gt;3.4.0&lt;/<span class=\"pl-ent\">version</span>&gt;\n&lt;/<span class=\"pl-ent\">dependency</span>&gt;</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-sbt\" class=\"anchor\" aria-hidden=\"true\" href=\"#sbt\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>SBT</h3>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 3.0.x and 3.1.x:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-gpu&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-gpu\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 3.2.x:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark32\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-spark32&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark32\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-spark32\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark32\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-gpu-spark32&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark32\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-gpu-spark32\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 2.4.x:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-spark24&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-spark24\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-gpu-spark24&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-gpu-spark24\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp</strong> on Apache Spark 2.3.x:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark23\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-spark23&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-spark23\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-spark23\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\"><strong>spark-nlp-gpu:</strong></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark23\nlibraryDependencies += &quot;com.johnsnowlabs.nlp&quot; %% &quot;spark-nlp-gpu-spark23&quot; % &quot;3.4.0&quot;\"><pre lang=\"sbtshell\"><code>// https://mvnrepository.com/artifact/com.johnsnowlabs.nlp/spark-nlp-gpu-spark23\nlibraryDependencies += \"com.johnsnowlabs.nlp\" %% \"spark-nlp-gpu-spark23\" % \"3.4.0\"\n</code></pre></div>\n<p dir=\"auto\">Maven Central: <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp\" rel=\"nofollow\">https://mvnrepository.com/artifact/com.johnsnowlabs.nlp</a></p>\n<p dir=\"auto\">If you are interested, there is a simple SBT project for Spark NLP to guide you on how to use it in your projects <a href=\"https://github.com/maziyarpanahi/spark-nlp-starter\">Spark NLP SBT Starter</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-python\" class=\"anchor\" aria-hidden=\"true\" href=\"#python\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Python</h2>\n<p dir=\"auto\">Spark NLP supports Python 3.6.x and above depending on your major PySpark version.</p>\n<h3 dir=\"auto\"><a id=\"user-content-python-without-explicit-pyspark-installation\" class=\"anchor\" aria-hidden=\"true\" href=\"#python-without-explicit-pyspark-installation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Python without explicit Pyspark installation</h3>\n<h3 dir=\"auto\"><a id=\"user-content-pipconda\" class=\"anchor\" aria-hidden=\"true\" href=\"#pipconda\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Pip/Conda</h3>\n<p dir=\"auto\">If you installed pyspark through pip/conda, you can install <code>spark-nlp</code> through the same channel.</p>\n<p dir=\"auto\">Pip:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"pip install spark-nlp==3.4.0\"><pre>pip install spark-nlp==3.4.0</pre></div>\n<p dir=\"auto\">Conda:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"conda install -c johnsnowlabs spark-nlp\"><pre>conda install -c johnsnowlabs spark-nlp</pre></div>\n<p dir=\"auto\">PyPI <a href=\"https://pypi.org/project/spark-nlp/\" rel=\"nofollow\">spark-nlp package</a> / Anaconda <a href=\"https://anaconda.org/JohnSnowLabs/spark-nlp\" rel=\"nofollow\">spark-nlp package</a></p>\n<p dir=\"auto\">Then you'll have to create a SparkSession either from Spark NLP:</p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import sparknlp\n\nspark = sparknlp.start()\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">sparknlp</span>\n\n<span class=\"pl-s1\">spark</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-en\">start</span>()</pre></div>\n<p dir=\"auto\">or manually:</p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark = SparkSession.builder \\\n    .appName(&quot;Spark NLP&quot;)\\\n    .master(&quot;local[4]&quot;)\\\n    .config(&quot;spark.driver.memory&quot;,&quot;16G&quot;)\\\n    .config(&quot;spark.driver.maxResultSize&quot;, &quot;0&quot;) \\\n    .config(&quot;spark.kryoserializer.buffer.max&quot;, &quot;2000M&quot;)\\\n    .config(&quot;spark.jars.packages&quot;, &quot;com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0&quot;)\\\n    .getOrCreate()\"><pre><span class=\"pl-s1\">spark</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">SparkSession</span>.<span class=\"pl-s1\">builder</span> \\\n    .<span class=\"pl-en\">appName</span>(<span class=\"pl-s\">\"Spark NLP\"</span>)\\\n    .<span class=\"pl-en\">master</span>(<span class=\"pl-s\">\"local[4]\"</span>)\\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.driver.memory\"</span>,<span class=\"pl-s\">\"16G\"</span>)\\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.driver.maxResultSize\"</span>, <span class=\"pl-s\">\"0\"</span>) \\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.kryoserializer.buffer.max\"</span>, <span class=\"pl-s\">\"2000M\"</span>)\\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.jars.packages\"</span>, <span class=\"pl-s\">\"com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"</span>)\\\n    .<span class=\"pl-en\">getOrCreate</span>()</pre></div>\n<p dir=\"auto\">If using local jars, you can use <code>spark.jars</code> instead for comma-delimited jar files. For cluster setups, of course, you'll have to put the jars in a reachable location for all driver and executor nodes.</p>\n<p dir=\"auto\"><strong>Quick example:</strong></p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import sparknlp\nfrom sparknlp.pretrained import PretrainedPipeline\n\n#create or get Spark Session\n\nspark = sparknlp.start()\n\nsparknlp.version()\nspark.version\n\n#download, load and annotate a text by pre-trained pipeline\n\npipeline = PretrainedPipeline('recognize_entities_dl', 'en')\nresult = pipeline.annotate('The Mona Lisa is a 16th century oil painting created by Leonardo')\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">sparknlp</span>\n<span class=\"pl-k\">from</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-s1\">pretrained</span> <span class=\"pl-k\">import</span> <span class=\"pl-v\">PretrainedPipeline</span>\n\n<span class=\"pl-c\">#create or get Spark Session</span>\n\n<span class=\"pl-s1\">spark</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-en\">start</span>()\n\n<span class=\"pl-s1\">sparknlp</span>.<span class=\"pl-en\">version</span>()\n<span class=\"pl-s1\">spark</span>.<span class=\"pl-s1\">version</span>\n\n<span class=\"pl-c\">#download, load and annotate a text by pre-trained pipeline</span>\n\n<span class=\"pl-s1\">pipeline</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">PretrainedPipeline</span>(<span class=\"pl-s\">'recognize_entities_dl'</span>, <span class=\"pl-s\">'en'</span>)\n<span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">pipeline</span>.<span class=\"pl-en\">annotate</span>(<span class=\"pl-s\">'The Mona Lisa is a 16th century oil painting created by Leonardo'</span>)</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-compiled-jars\" class=\"anchor\" aria-hidden=\"true\" href=\"#compiled-jars\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Compiled JARs</h2>\n<h3 dir=\"auto\"><a id=\"user-content-build-from-source\" class=\"anchor\" aria-hidden=\"true\" href=\"#build-from-source\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Build from source</h3>\n<h4 dir=\"auto\"><a id=\"user-content-spark-nlp\" class=\"anchor\" aria-hidden=\"true\" href=\"#spark-nlp\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>spark-nlp</h4>\n<ul dir=\"auto\">\n<li>FAT-JAR for CPU on Apache Spark 3.0.x and 3.1.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt assembly\"><pre>sbt assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for GPU on Apache Spark 3.0.x and 3.1.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_gpu=true assembly\"><pre>sbt -Dis_gpu=true assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for CPU on Apache Spark 3.2.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_spark32=true assembly\"><pre>sbt -Dis_spark32=true assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for GPU on Apache Spark 3.2.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_spark32=true -Dis_gpu=true assembly\"><pre>sbt -Dis_spark32=true -Dis_gpu=true assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for CPU on Apache Spark 2.4.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_spark24=true assembly\"><pre>sbt -Dis_spark24=true assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for GPU on Apache Spark 2.4.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_gpu=true -Dis_spark24=true assembly\"><pre>sbt -Dis_gpu=true -Dis_spark24=true assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for CPU on Apache Spark 2.3.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_spark23=true assembly\"><pre>sbt -Dis_spark23=true assembly</pre></div>\n<ul dir=\"auto\">\n<li>FAT-JAR for GPU on Apache Spark 2.3.x</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"sbt -Dis_gpu=true -Dis_spark23=true assembly\"><pre>sbt -Dis_gpu=true -Dis_spark23=true assembly</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-using-the-jar-manually\" class=\"anchor\" aria-hidden=\"true\" href=\"#using-the-jar-manually\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Using the jar manually</h3>\n<p dir=\"auto\">If for some reason you need to use the JAR, you can either download the Fat JARs provided here or download it from <a href=\"https://mvnrepository.com/artifact/com.johnsnowlabs.nlp\" rel=\"nofollow\">Maven Central</a>.</p>\n<p dir=\"auto\">To add JARs to spark programs use the <code>--jars</code> option:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark-shell --jars spark-nlp.jar\"><pre>spark-shell --jars spark-nlp.jar</pre></div>\n<p dir=\"auto\">The preferred way to use the library when running spark programs is using the <code>--packages</code> option as specified in the <code>spark-packages</code> section.</p>\n<h2 dir=\"auto\"><a id=\"user-content-apache-zeppelin\" class=\"anchor\" aria-hidden=\"true\" href=\"#apache-zeppelin\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Apache Zeppelin</h2>\n<p dir=\"auto\">Use either one of the following options</p>\n<ul dir=\"auto\">\n<li>Add the following Maven Coordinates to the interpreter's library list</li>\n</ul>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre>com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<ul dir=\"auto\">\n<li>Add a path to pre-built jar from <a href=\"#compiled-jars\">here</a> in the interpreter's library list making sure the jar is available to driver path</li>\n</ul>\n<h3 dir=\"auto\"><a id=\"user-content-python-in-zeppelin\" class=\"anchor\" aria-hidden=\"true\" href=\"#python-in-zeppelin\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Python in Zeppelin</h3>\n<p dir=\"auto\">Apart from the previous step, install the python module through pip</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"pip install spark-nlp==3.4.0\"><pre>pip install spark-nlp==3.4.0</pre></div>\n<p dir=\"auto\">Or you can install <code>spark-nlp</code> from inside Zeppelin by using Conda:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"python.conda install -c johnsnowlabs spark-nlp\"><pre>python.conda install -c johnsnowlabs spark-nlp</pre></div>\n<p dir=\"auto\">Configure Zeppelin properly, use cells with %spark.pyspark or any interpreter name you chose.</p>\n<p dir=\"auto\">Finally, in Zeppelin interpreter settings, make sure you set properly zeppelin.python to the python you want to use and install the pip library with (e.g. <code>python3</code>).</p>\n<p dir=\"auto\">An alternative option would be to set <code>SPARK_SUBMIT_OPTIONS</code> (zeppelin-env.sh) and make sure <code>--packages</code> is there as shown earlier since it includes both scala and python side installation.</p>\n<h2 dir=\"auto\"><a id=\"user-content-jupyter-notebook-python\" class=\"anchor\" aria-hidden=\"true\" href=\"#jupyter-notebook-python\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Jupyter Notebook (Python)</h2>\n<p dir=\"auto\"><strong>Recomended:</strong></p>\n<p dir=\"auto\">The easiest way to get this done on Linux and macOS is to simply install <code>spark-nlp</code> and <code>pyspark</code> PyPI packages and launch the Jupyter from the same Python environment:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ conda create -n sparknlp python=3.8 -y\n$ conda activate sparknlp\n# spark-nlp by default is based on pyspark 3.x\n$ pip install spark-nlp==3.4.0 pyspark==3.1.2 jupyter\n$ jupyter notebook\"><pre>$ conda create -n sparknlp python=3.8 -y\n$ conda activate sparknlp\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> spark-nlp by default is based on pyspark 3.x</span>\n$ pip install spark-nlp==3.4.0 pyspark==3.1.2 jupyter\n$ jupyter notebook</pre></div>\n<p dir=\"auto\">The you can use <code>python3</code> kernel to run your code with creating SparkSession via <code>spark = sparknlp.start()</code>.</p>\n<p dir=\"auto\"><strong>Optional:</strong></p>\n<p dir=\"auto\">If you are in different operating systems and require to make Jupyter Notebook run by using pyspark, you can follow these steps:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"export SPARK_HOME=/path/to/your/spark/folder\nexport PYSPARK_PYTHON=python3\nexport PYSPARK_DRIVER_PYTHON=jupyter\nexport PYSPARK_DRIVER_PYTHON_OPTS=notebook\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre><span class=\"pl-k\">export</span> SPARK_HOME=/path/to/your/spark/folder\n<span class=\"pl-k\">export</span> PYSPARK_PYTHON=python3\n<span class=\"pl-k\">export</span> PYSPARK_DRIVER_PYTHON=jupyter\n<span class=\"pl-k\">export</span> PYSPARK_DRIVER_PYTHON_OPTS=notebook\n\npyspark --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<p dir=\"auto\">Alternatively, you can mix in using <code>--jars</code> option for pyspark + <code>pip install spark-nlp</code></p>\n<p dir=\"auto\">If not using pyspark at all, you'll have to run the instructions pointed <a href=\"#python-without-explicit-Pyspark-installation\">here</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-google-colab-notebook\" class=\"anchor\" aria-hidden=\"true\" href=\"#google-colab-notebook\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Google Colab Notebook</h2>\n<p dir=\"auto\">Google Colab is perhaps the easiest way to get started with spark-nlp. It requires no installation or setup other than having a Google account.</p>\n<p dir=\"auto\">Run the following code in Google Colab notebook and start using spark-nlp right away.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# This is only to setup PySpark and Spark NLP on Colab\n!wget http://setup.johnsnowlabs.com/colab.sh -O - | bash\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> This is only to setup PySpark and Spark NLP on Colab</span>\n<span class=\"pl-k\">!</span>wget http://setup.johnsnowlabs.com/colab.sh -O - <span class=\"pl-k\">|</span> bash</pre></div>\n<p dir=\"auto\">This script comes with the two options to define <code>pyspark</code> and <code>spark-nlp</code> versions via options:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# -p is for pyspark\n# -s is for spark-nlp\n# by default they are set to the latest\n!wget http://setup.johnsnowlabs.com/colab.sh -O - | bash /dev/stdin -p 3.1.2 -s 3.4.0\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> -p is for pyspark</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> -s is for spark-nlp</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> by default they are set to the latest</span>\n<span class=\"pl-k\">!</span>wget http://setup.johnsnowlabs.com/colab.sh -O - <span class=\"pl-k\">|</span> bash /dev/stdin -p 3.1.2 -s 3.4.0</pre></div>\n<p dir=\"auto\"><a href=\"https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/jupyter/quick_start_google_colab.ipynb\" rel=\"nofollow\">Spark NLP quick start on Google Colab</a> is a live demo on Google Colab that performs named entity recognitions and sentiment analysis by using Spark NLP pretrained pipelines.</p>\n<h2 dir=\"auto\"><a id=\"user-content-kaggle-kernel\" class=\"anchor\" aria-hidden=\"true\" href=\"#kaggle-kernel\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Kaggle Kernel</h2>\n<p dir=\"auto\">Run the following code in Kaggle Kernel and start using spark-nlp right away.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# Let's setup Kaggle for Spark NLP and PySpark\n!wget http://setup.johnsnowlabs.com/kaggle.sh -O - | bash\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Let's setup Kaggle for Spark NLP and PySpark</span>\n<span class=\"pl-k\">!</span>wget http://setup.johnsnowlabs.com/kaggle.sh -O - <span class=\"pl-k\">|</span> bash</pre></div>\n<p dir=\"auto\"><a href=\"https://www.kaggle.com/mozzie/spark-nlp-named-entity-recognition\" rel=\"nofollow\">Spark NLP quick start on Kaggle Kernel</a> is a live demo on Kaggle Kernel that performs named entity recognitions by using Spark NLP pretrained pipeline.</p>\n<h2 dir=\"auto\"><a id=\"user-content-databricks-cluster\" class=\"anchor\" aria-hidden=\"true\" href=\"#databricks-cluster\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Databricks Cluster</h2>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Create a cluster if you don't have one already</p>\n</li>\n<li>\n<p dir=\"auto\">On a new cluster or existing one you need to add the following to the <code>Advanced Options -&gt; Spark</code> tab:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark.kryoserializer.buffer.max 2000M\nspark.serializer org.apache.spark.serializer.KryoSerializer\"><pre>spark.kryoserializer.buffer.max 2000M\nspark.serializer org.apache.spark.serializer.KryoSerializer</pre></div>\n</li>\n<li>\n<p dir=\"auto\">In <code>Libraries</code> tab inside your cluster you need to follow these steps:</p>\n<p dir=\"auto\">3.1. Install New -&gt; PyPI -&gt; <code>spark-nlp==3.4.0</code> -&gt; Install</p>\n<p dir=\"auto\">3.2. Install New -&gt; Maven -&gt; Coordinates -&gt; <code>com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</code> -&gt; Install</p>\n</li>\n<li>\n<p dir=\"auto\">Now you can attach your notebook to the cluster and use Spark NLP!</p>\n</li>\n</ol>\n<p dir=\"auto\">NOTE: Databrick's runtimes support different Apache Spark major releases. Please make sure you choose the correct Spark NLP Maven pacakge name for your runtime from our <a href=\"https://github.com/JohnSnowLabs/spark-nlp#packages-cheatsheet\">Pacakges Chetsheet</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-emr-cluster\" class=\"anchor\" aria-hidden=\"true\" href=\"#emr-cluster\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>EMR Cluster</h2>\n<p dir=\"auto\">To launch EMR cluster with Apache Spark/PySpark and Spark NLP correctly you need to have bootstrap and software configuration.</p>\n<p dir=\"auto\">A sample of your bootstrap script</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"#!/bin/bash\nset -x -e\n\necho -e 'export PYSPARK_PYTHON=/usr/bin/python3\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport SPARK_JARS_DIR=/usr/lib/spark/jars\nexport SPARK_HOME=/usr/lib/spark' &gt;&gt; $HOME/.bashrc &amp;&amp; source $HOME/.bashrc\n\nsudo python3 -m pip install awscli boto spark-nlp\n\nset +x\nexit 0\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#!</span>/bin/bash</span>\n<span class=\"pl-c1\">set</span> -x -e\n\n<span class=\"pl-c1\">echo</span> -e <span class=\"pl-s\"><span class=\"pl-pds\">'</span>export PYSPARK_PYTHON=/usr/bin/python3</span>\n<span class=\"pl-s\">export HADOOP_CONF_DIR=/etc/hadoop/conf</span>\n<span class=\"pl-s\">export SPARK_JARS_DIR=/usr/lib/spark/jars</span>\n<span class=\"pl-s\">export SPARK_HOME=/usr/lib/spark<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-smi\">$HOME</span>/.bashrc <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">source</span> <span class=\"pl-smi\">$HOME</span>/.bashrc\n\nsudo python3 -m pip install awscli boto spark-nlp\n\n<span class=\"pl-c1\">set</span> +x\n<span class=\"pl-c1\">exit</span> 0\n</pre></div>\n<p dir=\"auto\">A sample of your software configuration in JSON on S3 (must be public access):</p>\n<div class=\"highlight highlight-source-json position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[{\n  &quot;Classification&quot;: &quot;spark-env&quot;,\n  &quot;Configurations&quot;: [{\n    &quot;Classification&quot;: &quot;export&quot;,\n    &quot;Properties&quot;: {\n      &quot;PYSPARK_PYTHON&quot;: &quot;/usr/bin/python3&quot;\n    }\n  }]\n},\n{\n  &quot;Classification&quot;: &quot;spark-defaults&quot;,\n    &quot;Properties&quot;: {\n      &quot;spark.yarn.stagingDir&quot;: &quot;hdfs:///tmp&quot;,\n      &quot;spark.yarn.preserve.staging.files&quot;: &quot;true&quot;,\n      &quot;spark.kryoserializer.buffer.max&quot;: &quot;2000M&quot;,\n      &quot;spark.serializer&quot;: &quot;org.apache.spark.serializer.KryoSerializer&quot;,\n      &quot;spark.driver.maxResultSize&quot;: &quot;0&quot;,\n      &quot;spark.jars.packages&quot;: &quot;com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0&quot;\n    }\n}\n]\"><pre>[{\n  <span class=\"pl-ent\">\"Classification\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark-env<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"Configurations\"</span>: [{\n    <span class=\"pl-ent\">\"Classification\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>export<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"Properties\"</span>: {\n      <span class=\"pl-ent\">\"PYSPARK_PYTHON\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/bin/python3<span class=\"pl-pds\">\"</span></span>\n    }\n  }]\n},\n{\n  <span class=\"pl-ent\">\"Classification\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark-defaults<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"Properties\"</span>: {\n      <span class=\"pl-ent\">\"spark.yarn.stagingDir\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hdfs:///tmp<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"spark.yarn.preserve.staging.files\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"spark.kryoserializer.buffer.max\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2000M<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"spark.serializer\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.apache.spark.serializer.KryoSerializer<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"spark.driver.maxResultSize\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"spark.jars.packages\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0<span class=\"pl-pds\">\"</span></span>\n    }\n}\n]</pre></div>\n<p dir=\"auto\">A sample of AWS CLI to launch EMR cluster:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"aws emr create-cluster \\\n--name &quot;Spark NLP 3.4.0&quot; \\\n--release-label emr-6.2.0 \\\n--applications Name=Hadoop Name=Spark Name=Hive \\\n--instance-type m4.4xlarge \\\n--instance-count 3 \\\n--use-default-roles \\\n--log-uri &quot;s3://&lt;S3_BUCKET&gt;/&quot; \\\n--bootstrap-actions Path=s3://&lt;S3_BUCKET&gt;/emr-bootstrap.sh,Name=custome \\\n--configurations &quot;https://&lt;public_access&gt;/sparknlp-config.json&quot; \\\n--ec2-attributes KeyName=&lt;your_ssh_key&gt;,EmrManagedMasterSecurityGroup=&lt;security_group_with_ssh&gt;,EmrManagedSlaveSecurityGroup=&lt;security_group_with_ssh&gt; \\\n--profile &lt;aws_profile_credentials&gt;\"><pre>aws emr create-cluster \\\n--name <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Spark NLP 3.4.0<span class=\"pl-pds\">\"</span></span> \\\n--release-label emr-6.2.0 \\\n--applications Name=Hadoop Name=Spark Name=Hive \\\n--instance-type m4.4xlarge \\\n--instance-count 3 \\\n--use-default-roles \\\n--log-uri <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>s3://&lt;S3_BUCKET&gt;/<span class=\"pl-pds\">\"</span></span> \\\n--bootstrap-actions Path=s3://<span class=\"pl-k\">&lt;</span>S3_BUCKET<span class=\"pl-k\">&gt;</span>/emr-bootstrap.sh,Name=custome \\\n--configurations <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://&lt;public_access&gt;/sparknlp-config.json<span class=\"pl-pds\">\"</span></span> \\\n--ec2-attributes KeyName=<span class=\"pl-k\">&lt;</span>your_ssh_key<span class=\"pl-k\">&gt;</span>,EmrManagedMasterSecurityGroup=<span class=\"pl-k\">&lt;</span>security_group_with_ssh<span class=\"pl-k\">&gt;</span>,EmrManagedSlaveSecurityGroup=<span class=\"pl-k\">&lt;</span>security_group_with_ssh<span class=\"pl-k\">&gt;</span> \\\n--profile <span class=\"pl-k\">&lt;</span>aws_profile_credentials<span class=\"pl-k\">&gt;</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-gcp-dataproc\" class=\"anchor\" aria-hidden=\"true\" href=\"#gcp-dataproc\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>GCP Dataproc</h2>\n<ol dir=\"auto\">\n<li>Create a cluster if you don't have one already as follows.</li>\n</ol>\n<p dir=\"auto\">At gcloud shell:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"gcloud services enable dataproc.googleapis.com \\\n  compute.googleapis.com \\\n  storage-component.googleapis.com \\\n  bigquery.googleapis.com \\\n  bigquerystorage.googleapis.com\"><pre>gcloud services <span class=\"pl-c1\">enable</span> dataproc.googleapis.com \\\n  compute.googleapis.com \\\n  storage-component.googleapis.com \\\n  bigquery.googleapis.com \\\n  bigquerystorage.googleapis.com</pre></div>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"REGION=&lt;region&gt;\"><pre>REGION=<span class=\"pl-k\">&lt;</span>region<span class=\"pl-k\">&gt;</span></pre></div>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"BUCKET_NAME=&lt;bucket_name&gt;\ngsutil mb -c standard -l ${REGION} gs://${BUCKET_NAME}\"><pre>BUCKET_NAME=<span class=\"pl-k\">&lt;</span>bucket_name<span class=\"pl-k\">&gt;</span>\ngsutil mb -c standard -l <span class=\"pl-smi\">${REGION}</span> gs://<span class=\"pl-smi\">${BUCKET_NAME}</span></pre></div>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"REGION=&lt;region&gt;\nZONE=&lt;zone&gt;\nCLUSTER_NAME=&lt;cluster_name&gt;\nBUCKET_NAME=&lt;bucket_name&gt;\"><pre>REGION=<span class=\"pl-k\">&lt;</span>region<span class=\"pl-k\">&gt;</span>\nZONE=<span class=\"pl-k\">&lt;</span>zone<span class=\"pl-k\">&gt;</span>\nCLUSTER_NAME=<span class=\"pl-k\">&lt;</span>cluster_name<span class=\"pl-k\">&gt;</span>\nBUCKET_NAME=<span class=\"pl-k\">&lt;</span>bucket_name<span class=\"pl-k\">&gt;</span></pre></div>\n<p dir=\"auto\">You can set image-version, master-machine-type, worker-machine-type,\nmaster-boot-disk-size, worker-boot-disk-size, num-workers as your needs.\nIf you use the previous image-version from 2.0, you should also add ANACONDA to optional-components.\nAnd, you should enable gateway.\nDon't forget to set the maven coordinates for the jar in properties.</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"gcloud dataproc clusters create ${CLUSTER_NAME} \\\n  --region=${REGION} \\\n  --zone=${ZONE} \\\n  --image-version=2.0 \\\n  --master-machine-type=n1-standard-4 \\\n  --worker-machine-type=n1-standard-2 \\\n  --master-boot-disk-size=128GB \\\n  --worker-boot-disk-size=128GB \\\n  --num-workers=2 \\\n  --bucket=${BUCKET_NAME} \\\n  --optional-components=JUPYTER \\\n  --enable-component-gateway \\\n  --metadata 'PIP_PACKAGES=spark-nlp spark-nlp-display google-cloud-bigquery google-cloud-storage' \\\n  --initialization-actions gs://goog-dataproc-initialization-actions-${REGION}/python/pip-install.sh \\\n  --properties spark:spark.serializer=org.apache.spark.serializer.KryoSerializer,spark:spark.driver.maxResultSize=0,spark:spark.kryoserializer.buffer.max=2000M,spark:spark.jars.packages=com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre>gcloud dataproc clusters create <span class=\"pl-smi\">${CLUSTER_NAME}</span> \\\n  --region=<span class=\"pl-smi\">${REGION}</span> \\\n  --zone=<span class=\"pl-smi\">${ZONE}</span> \\\n  --image-version=2.0 \\\n  --master-machine-type=n1-standard-4 \\\n  --worker-machine-type=n1-standard-2 \\\n  --master-boot-disk-size=128GB \\\n  --worker-boot-disk-size=128GB \\\n  --num-workers=2 \\\n  --bucket=<span class=\"pl-smi\">${BUCKET_NAME}</span> \\\n  --optional-components=JUPYTER \\\n  --enable-component-gateway \\\n  --metadata <span class=\"pl-s\"><span class=\"pl-pds\">'</span>PIP_PACKAGES=spark-nlp spark-nlp-display google-cloud-bigquery google-cloud-storage<span class=\"pl-pds\">'</span></span> \\\n  --initialization-actions gs://goog-dataproc-initialization-actions-<span class=\"pl-smi\">${REGION}</span>/python/pip-install.sh \\\n  --properties spark:spark.serializer=org.apache.spark.serializer.KryoSerializer,spark:spark.driver.maxResultSize=0,spark:spark.kryoserializer.buffer.max=2000M,spark:spark.jars.packages=com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>\n<p dir=\"auto\">On an existing one, you need to install spark-nlp and spark-nlp-display packages from PyPI.</p>\n</li>\n<li>\n<p dir=\"auto\">Now, you can attach your notebook to the cluster and use the Spark NLP!</p>\n</li>\n</ol>\n<h2 dir=\"auto\"><a id=\"user-content-spark-nlp-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#spark-nlp-configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Spark NLP Configuration</h2>\n<p dir=\"auto\">You can change the following Spark NLP configurations via Spark Configuration:</p>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Default</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>spark.jsl.settings.pretrained.cache_folder</code></td>\n<td><code>~/cache_pretrained</code></td>\n<td>The location to download and exctract pretrained <code>Models</code> and <code>Pipelines</code>. By default, it will be in User's Home directory under <code>cache_pretrained</code> directory</td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.storage.cluster_tmp_dir</code></td>\n<td><code>hadoop.tmp.dir</code></td>\n<td>The location to use on a cluster for temporarily files such as unpacking indexes for WordEmbeddings. By default, this locations is the location of <code>hadoop.tmp.dir</code> set via Hadoop configuration for Apache Spark. NOTE: <code>S3</code> is not supported and it must be local, HDFS, or DBFS</td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.annotator.log_folder</code></td>\n<td><code>~/annotator_logs</code></td>\n<td>The location to save logs from annotators during training such as <code>NerDLApproach</code>, <code>ClassifierDLApproach</code>, <code>SentimentDLApproach</code>, <code>MultiClassifierDLApproach</code>, etc. By default, it will be in User's Home directory under <code>annotator_logs</code> directory</td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.aws.credentials.access_key_id</code></td>\n<td><code>None</code></td>\n<td>Your AWS access key to use your S3 bucket to store log files of training models or access tensorflow graphs used in <code>NerDLApproach</code></td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.aws.credentials.secret_access_key</code></td>\n<td><code>None</code></td>\n<td>Your AWS secret access key to use your S3 bucket to store log files of training models or access tensorflow graphs used in <code>NerDLApproach</code></td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.aws.credentials.session_token</code></td>\n<td><code>None</code></td>\n<td>Your AWS MFA session token to use your S3 bucket to store log files of training models or access tensorflow graphs used in <code>NerDLApproach</code></td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.aws.s3_bucket</code></td>\n<td><code>None</code></td>\n<td>Your AWS S3 bucket to store log files of training models or access tensorflow graphs used in <code>NerDLApproach</code></td>\n</tr>\n<tr>\n<td><code>spark.jsl.settings.aws.region</code></td>\n<td><code>None</code></td>\n<td>Your AWS region to use your S3 bucket to store log files of training models or access tensorflow graphs used in <code>NerDLApproach</code></td>\n</tr>\n</tbody>\n</table>\n<h3 dir=\"auto\"><a id=\"user-content-how-to-set-spark-nlp-configuration\" class=\"anchor\" aria-hidden=\"true\" href=\"#how-to-set-spark-nlp-configuration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>How to set Spark NLP Configuration</h3>\n<p dir=\"auto\"><strong>SparkSession:</strong></p>\n<p dir=\"auto\">You can use <code>.config()</code> during SparkSession creation to set Spark NLP configurations.</p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"from pyspark.sql import SparkSession\n\nspark = SparkSession.builder \\\n        .master(&quot;local[*]&quot;) \\\n        .config(&quot;spark.driver.memory&quot;, &quot;16G&quot;) \\\n        .config(&quot;spark.driver.maxResultSize&quot;, &quot;0&quot;) \\\n        .config(&quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.KryoSerializer&quot;) \\\n        .config(&quot;spark.kryoserializer.buffer.max&quot;, &quot;2000m&quot;) \\\n        .config(&quot;spark.jsl.settings.pretrained.cache_folder&quot;, &quot;sample_data/pretrained&quot;) \\\n        .config(&quot;spark.jsl.settings.storage.cluster_tmp_dir&quot;, &quot;sample_data/storage&quot;) \\\n        .config(&quot;spark.jars.packages&quot;, &quot;com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0&quot;) \\\n        .getOrCreate()\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-s1\">pyspark</span>.<span class=\"pl-s1\">sql</span> <span class=\"pl-k\">import</span> <span class=\"pl-v\">SparkSession</span>\n\n<span class=\"pl-s1\">spark</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">SparkSession</span>.<span class=\"pl-s1\">builder</span> \\\n        .<span class=\"pl-en\">master</span>(<span class=\"pl-s\">\"local[*]\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.driver.memory\"</span>, <span class=\"pl-s\">\"16G\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.driver.maxResultSize\"</span>, <span class=\"pl-s\">\"0\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.serializer\"</span>, <span class=\"pl-s\">\"org.apache.spark.serializer.KryoSerializer\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.kryoserializer.buffer.max\"</span>, <span class=\"pl-s\">\"2000m\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.jsl.settings.pretrained.cache_folder\"</span>, <span class=\"pl-s\">\"sample_data/pretrained\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.jsl.settings.storage.cluster_tmp_dir\"</span>, <span class=\"pl-s\">\"sample_data/storage\"</span>) \\\n        .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.jars.packages\"</span>, <span class=\"pl-s\">\"com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"</span>) \\\n        .<span class=\"pl-en\">getOrCreate</span>()</pre></div>\n<p dir=\"auto\"><strong>spark-shell:</strong></p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark-shell \\\n  --driver-memory 16g \\\n  --conf spark.driver.maxResultSize=0 \\\n  --conf spark.serializer=org.apache.spark.serializer.KryoSerializer\n  --conf spark.kryoserializer.buffer.max=2000M \\\n  --conf spark.jsl.settings.pretrained.cache_folder=&quot;sample_data/pretrained&quot; \\\n  --conf spark.jsl.settings.storage.cluster_tmp_dir=&quot;sample_data/storage&quot; \\\n  --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre>spark-shell \\\n  --driver-memory 16g \\\n  --conf spark.driver.maxResultSize=0 \\\n  --conf spark.serializer=org.apache.spark.serializer.KryoSerializer\n  --conf spark.kryoserializer.buffer.max=2000M \\\n  --conf spark.jsl.settings.pretrained.cache_folder=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sample_data/pretrained<span class=\"pl-pds\">\"</span></span> \\\n  --conf spark.jsl.settings.storage.cluster_tmp_dir=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sample_data/storage<span class=\"pl-pds\">\"</span></span> \\\n  --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<p dir=\"auto\"><strong>pyspark:</strong></p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"pyspark \\\n  --driver-memory 16g \\\n  --conf spark.driver.maxResultSize=0 \\\n  --conf spark.serializer=org.apache.spark.serializer.KryoSerializer\n  --conf spark.kryoserializer.buffer.max=2000M \\\n  --conf spark.jsl.settings.pretrained.cache_folder=&quot;sample_data/pretrained&quot; \\\n  --conf spark.jsl.settings.storage.cluster_tmp_dir=&quot;sample_data/storage&quot; \\\n  --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0\"><pre>pyspark \\\n  --driver-memory 16g \\\n  --conf spark.driver.maxResultSize=0 \\\n  --conf spark.serializer=org.apache.spark.serializer.KryoSerializer\n  --conf spark.kryoserializer.buffer.max=2000M \\\n  --conf spark.jsl.settings.pretrained.cache_folder=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sample_data/pretrained<span class=\"pl-pds\">\"</span></span> \\\n  --conf spark.jsl.settings.storage.cluster_tmp_dir=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sample_data/storage<span class=\"pl-pds\">\"</span></span> \\\n  --packages com.johnsnowlabs.nlp:spark-nlp_2.12:3.4.0</pre></div>\n<p dir=\"auto\"><strong>Databricks:</strong></p>\n<p dir=\"auto\">On a new cluster or existing one you need to add the following to the <code>Advanced Options -&gt; Spark</code> tab:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark.kryoserializer.buffer.max 2000M\nspark.serializer org.apache.spark.serializer.KryoSerializer\nspark.jsl.settings.pretrained.cache_folder dbfs:/PATH_TO_CACHE\nspark.jsl.settings.storage.cluster_tmp_dir dbfs:/PATH_TO_STORAGE\nspark.jsl.settings.annotator.log_folder dbfs:/PATH_TO_LOGS\"><pre>spark.kryoserializer.buffer.max 2000M\nspark.serializer org.apache.spark.serializer.KryoSerializer\nspark.jsl.settings.pretrained.cache_folder dbfs:/PATH_TO_CACHE\nspark.jsl.settings.storage.cluster_tmp_dir dbfs:/PATH_TO_STORAGE\nspark.jsl.settings.annotator.log_folder dbfs:/PATH_TO_LOGS</pre></div>\n<p dir=\"auto\">NOTE: If this is an existing cluster, after adding new configs or changing existing properties you need to restart it.</p>\n<h3 dir=\"auto\"><a id=\"user-content-s3-integration\" class=\"anchor\" aria-hidden=\"true\" href=\"#s3-integration\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>S3 Integration</h3>\n<p dir=\"auto\">In Spark NLP we can define S3 locations to:</p>\n<ul dir=\"auto\">\n<li>Export log files of training models</li>\n<li>Store tensorflow graphs used in <code>NerDLApproach</code></li>\n</ul>\n<p dir=\"auto\"><strong>Logging:</strong></p>\n<p dir=\"auto\">To configure S3 path for logging while training models. We need to set up AWS credentials as well as an S3 path</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark.conf.set(&quot;spark.jsl.settings.annotator.log_folder&quot;, &quot;s3://my/s3/path/logs&quot;)\nspark.conf.set(&quot;spark.jsl.settings.aws.credentials.access_key_id&quot;, &quot;MY_KEY_ID&quot;)\nspark.conf.set(&quot;spark.jsl.settings.aws.credentials.secret_access_key&quot;, &quot;MY_SECRET_ACCESS_KEY&quot;)\nspark.conf.set(&quot;spark.jsl.settings.aws.s3_bucket&quot;, &quot;my.bucket&quot;)\nspark.conf.set(&quot;spark.jsl.settings.aws.region&quot;, &quot;my-region&quot;)\"><pre>spark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.annotator.log_folder<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>s3://my/s3/path/logs<span class=\"pl-pds\">\"</span></span>)\nspark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.credentials.access_key_id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MY_KEY_ID<span class=\"pl-pds\">\"</span></span>)\nspark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.credentials.secret_access_key<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MY_SECRET_ACCESS_KEY<span class=\"pl-pds\">\"</span></span>)\nspark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.s3_bucket<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my.bucket<span class=\"pl-pds\">\"</span></span>)\nspark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.region<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my-region<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">Now you can check the log on your S3 path defined in <em>spark.jsl.settings.annotator.log_folder</em> property.\nMake sure to use the prefix <em>s3://</em>, otherwise it will use the default configuration.</p>\n<p dir=\"auto\"><strong>Tensorflow Graphs:</strong></p>\n<p dir=\"auto\">To reference S3 location for downloading graphs. We need to set up AWS credentials</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark.conf.set(&quot;spark.jsl.settings.aws.credentials.access_key_id&quot;, &quot;MY_KEY_ID&quot;)\nspark.conf.set(&quot;spark.jsl.settings.aws.credentials.secret_access_key&quot;, &quot;MY_SECRET_ACCESS_KEY&quot;)\nspark.conf.set(&quot;spark.jsl.settings.aws.region&quot;, &quot;my-region&quot;)\"><pre>spark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.credentials.access_key_id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MY_KEY_ID<span class=\"pl-pds\">\"</span></span>)\nspark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.credentials.secret_access_key<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MY_SECRET_ACCESS_KEY<span class=\"pl-pds\">\"</span></span>)\nspark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.region<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my-region<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\"><strong>MFA Configuration:</strong></p>\n<p dir=\"auto\">In case your AWS account is configured with MFA. You will need first to get temporal credentials and add session token to the configuration as shown in the examples below\nFor logging:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark.conf.set(&quot;spark.jsl.settings.aws.credentials.session_token&quot;, &quot;MY_TOKEN&quot;)\"><pre>spark.conf.set(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>spark.jsl.settings.aws.credentials.session_token<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MY_TOKEN<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">An example of a bash script that gets temporal AWS credentials can be found <a href=\"https://github.com/JohnSnowLabs/spark-nlp/blob/master/scripts/aws_tmp_credentials.sh\">here</a>\nThis script requires three arguments:</p>\n<div class=\"highlight highlight-source-shell position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"./aws_tmp_credentials.sh iam_user duration serial_number\"><pre>./aws_tmp_credentials.sh iam_user duration serial_number</pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-pipelines-and-models\" class=\"anchor\" aria-hidden=\"true\" href=\"#pipelines-and-models\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Pipelines and Models</h2>\n<h3 dir=\"auto\"><a id=\"user-content-pipelines\" class=\"anchor\" aria-hidden=\"true\" href=\"#pipelines\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Pipelines</h3>\n<p dir=\"auto\"><strong>Quick example:</strong></p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline\nimport com.johnsnowlabs.nlp.SparkNLP\n\nSparkNLP.version()\n\nval testData = spark.createDataFrame(Seq(\n(1, &quot;Google has announced the release of a beta version of the popular TensorFlow machine learning library&quot;),\n(2, &quot;Donald John Trump (born June 14, 1946) is the 45th and current president of the United States&quot;)\n)).toDF(&quot;id&quot;, &quot;text&quot;)\n\nval pipeline = PretrainedPipeline(&quot;explain_document_dl&quot;, lang=&quot;en&quot;)\n\nval annotation = pipeline.transform(testData)\n\nannotation.show()\n/*\nimport com.johnsnowlabs.nlp.pretrained.PretrainedPipeline\nimport com.johnsnowlabs.nlp.SparkNLP\n2.5.0\ntestData: org.apache.spark.sql.DataFrame = [id: int, text: string]\npipeline: com.johnsnowlabs.nlp.pretrained.PretrainedPipeline = PretrainedPipeline(explain_document_dl,en,public/models)\nannotation: org.apache.spark.sql.DataFrame = [id: int, text: string ... 10 more fields]\n+---+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n| id|                text|            document|               token|            sentence|             checked|               lemma|                stem|                 pos|          embeddings|                 ner|            entities|\n+---+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n|  1|Google has announ...|[[document, 0, 10...|[[token, 0, 5, Go...|[[document, 0, 10...|[[token, 0, 5, Go...|[[token, 0, 5, Go...|[[token, 0, 5, go...|[[pos, 0, 5, NNP,...|[[word_embeddings...|[[named_entity, 0...|[[chunk, 0, 5, Go...|\n|  2|The Paris metro w...|[[document, 0, 11...|[[token, 0, 2, Th...|[[document, 0, 11...|[[token, 0, 2, Th...|[[token, 0, 2, Th...|[[token, 0, 2, th...|[[pos, 0, 2, DT, ...|[[word_embeddings...|[[named_entity, 0...|[[chunk, 4, 8, Pa...|\n+---+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n*/\n\nannotation.select(&quot;entities.result&quot;).show(false)\n\n/*\n+----------------------------------+\n|result                            |\n+----------------------------------+\n|[Google, TensorFlow]              |\n|[Donald John Trump, United States]|\n+----------------------------------+\n*/\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">pretrained</span>.<span class=\"pl-en\">PretrainedPipeline</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">SparkNLP</span>\n\n<span class=\"pl-en\">SparkNLP</span>.version()\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">testData</span> <span class=\"pl-k\">=</span> spark.createDataFrame(<span class=\"pl-en\">Seq</span>(\n(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Google has announced the release of a beta version of the popular TensorFlow machine learning library<span class=\"pl-pds\">\"</span></span>),\n(<span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Donald John Trump (born June 14, 1946) is the 45th and current president of the United States<span class=\"pl-pds\">\"</span></span>)\n)).toDF(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">pipeline</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PretrainedPipeline</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>explain_document_dl<span class=\"pl-pds\">\"</span></span>, lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">annotation</span> <span class=\"pl-k\">=</span> pipeline.transform(testData)\n\nannotation.show()\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline</span>\n<span class=\"pl-c\">import com.johnsnowlabs.nlp.SparkNLP</span>\n<span class=\"pl-c\">2.5.0</span>\n<span class=\"pl-c\">testData: org.apache.spark.sql.DataFrame = [id: int, text: string]</span>\n<span class=\"pl-c\">pipeline: com.johnsnowlabs.nlp.pretrained.PretrainedPipeline = PretrainedPipeline(explain_document_dl,en,public/models)</span>\n<span class=\"pl-c\">annotation: org.apache.spark.sql.DataFrame = [id: int, text: string ... 10 more fields]</span>\n<span class=\"pl-c\">+---+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+</span>\n<span class=\"pl-c\">| id|                text|            document|               token|            sentence|             checked|               lemma|                stem|                 pos|          embeddings|                 ner|            entities|</span>\n<span class=\"pl-c\">+---+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+</span>\n<span class=\"pl-c\">|  1|Google has announ...|[[document, 0, 10...|[[token, 0, 5, Go...|[[document, 0, 10...|[[token, 0, 5, Go...|[[token, 0, 5, Go...|[[token, 0, 5, go...|[[pos, 0, 5, NNP,...|[[word_embeddings...|[[named_entity, 0...|[[chunk, 0, 5, Go...|</span>\n<span class=\"pl-c\">|  2|The Paris metro w...|[[document, 0, 11...|[[token, 0, 2, Th...|[[document, 0, 11...|[[token, 0, 2, Th...|[[token, 0, 2, Th...|[[token, 0, 2, th...|[[pos, 0, 2, DT, ...|[[word_embeddings...|[[named_entity, 0...|[[chunk, 4, 8, Pa...|</span>\n<span class=\"pl-c\">+---+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span>\n\nannotation.select(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>entities.result<span class=\"pl-pds\">\"</span></span>).show(<span class=\"pl-c1\">false</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">+----------------------------------+</span>\n<span class=\"pl-c\">|result                            |</span>\n<span class=\"pl-c\">+----------------------------------+</span>\n<span class=\"pl-c\">|[Google, TensorFlow]              |</span>\n<span class=\"pl-c\">|[Donald John Trump, United States]|</span>\n<span class=\"pl-c\">+----------------------------------+</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-showing-available-pipelines\" class=\"anchor\" aria-hidden=\"true\" href=\"#showing-available-pipelines\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Showing Available Pipelines</h4>\n<p dir=\"auto\">There are functions in Spark NLP that will list all of the available Pipelines\nof a particular language for you:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.johnsnowlabs.nlp.pretrained.ResourceDownloader\n\nResourceDownloader.showPublicPipelines(lang=&quot;en&quot;)\n/*\n+--------------------------------------------+------+---------+\n| Pipeline                                   | lang | version |\n+--------------------------------------------+------+---------+\n| dependency_parse                           |  en  | 2.0.2   |\n| analyze_sentiment_ml                       |  en  | 2.0.2   |\n| check_spelling                             |  en  | 2.1.0   |\n| match_datetime                             |  en  | 2.1.0   |\n                               ...\n| explain_document_ml                        |  en  | 3.1.3   |\n+--------------------------------------------+------+---------+\n*/\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">pretrained</span>.<span class=\"pl-en\">ResourceDownloader</span>\n\n<span class=\"pl-en\">ResourceDownloader</span>.showPublicPipelines(lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">+--------------------------------------------+------+---------+</span>\n<span class=\"pl-c\">| Pipeline                                   | lang | version |</span>\n<span class=\"pl-c\">+--------------------------------------------+------+---------+</span>\n<span class=\"pl-c\">| dependency_parse                           |  en  | 2.0.2   |</span>\n<span class=\"pl-c\">| analyze_sentiment_ml                       |  en  | 2.0.2   |</span>\n<span class=\"pl-c\">| check_spelling                             |  en  | 2.1.0   |</span>\n<span class=\"pl-c\">| match_datetime                             |  en  | 2.1.0   |</span>\n<span class=\"pl-c\">                               ...</span>\n<span class=\"pl-c\">| explain_document_ml                        |  en  | 3.1.3   |</span>\n<span class=\"pl-c\">+--------------------------------------------+------+---------+</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span></pre></div>\n<p dir=\"auto\">Or if we want to check for a particular version:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.johnsnowlabs.nlp.pretrained.ResourceDownloader\n\nResourceDownloader.showPublicPipelines(lang=&quot;en&quot;, version=&quot;3.1.0&quot;)\n/*\n+---------------------------------------+------+---------+\n| Pipeline                              | lang | version |\n+---------------------------------------+------+---------+\n| dependency_parse                      |  en  | 2.0.2   |\n                               ...\n| clean_slang                           |  en  | 3.0.0   |\n| clean_pattern                         |  en  | 3.0.0   |\n| check_spelling                        |  en  | 3.0.0   |\n| dependency_parse                      |  en  | 3.0.0   |\n+---------------------------------------+------+---------+\n*/\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">pretrained</span>.<span class=\"pl-en\">ResourceDownloader</span>\n\n<span class=\"pl-en\">ResourceDownloader</span>.showPublicPipelines(lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>, version<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3.1.0<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">+---------------------------------------+------+---------+</span>\n<span class=\"pl-c\">| Pipeline                              | lang | version |</span>\n<span class=\"pl-c\">+---------------------------------------+------+---------+</span>\n<span class=\"pl-c\">| dependency_parse                      |  en  | 2.0.2   |</span>\n<span class=\"pl-c\">                               ...</span>\n<span class=\"pl-c\">| clean_slang                           |  en  | 3.0.0   |</span>\n<span class=\"pl-c\">| clean_pattern                         |  en  | 3.0.0   |</span>\n<span class=\"pl-c\">| check_spelling                        |  en  | 3.0.0   |</span>\n<span class=\"pl-c\">| dependency_parse                      |  en  | 3.0.0   |</span>\n<span class=\"pl-c\">+---------------------------------------+------+---------+</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-please-check-out-our-models-hub-for-the-full-list-of-pre-trained-pipelines-with-examples-demos-benchmarks-and-more\" class=\"anchor\" aria-hidden=\"true\" href=\"#please-check-out-our-models-hub-for-the-full-list-of-pre-trained-pipelines-with-examples-demos-benchmarks-and-more\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Please check out our Models Hub for the full list of <a href=\"https://nlp.johnsnowlabs.com/models\" rel=\"nofollow\">pre-trained pipelines</a> with examples, demos, benchmarks, and more</h4>\n<h3 dir=\"auto\"><a id=\"user-content-models\" class=\"anchor\" aria-hidden=\"true\" href=\"#models\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Models</h3>\n<p dir=\"auto\"><strong>Some selected languages:</strong> <code>Afrikaans, Arabic, Armenian, Basque, Bengali, Breton, Bulgarian, Catalan, Czech, Dutch, English, Esperanto, Finnish, French, Galician, German, Greek, Hausa, Hebrew, Hindi, Hungarian, Indonesian, Irish, Italian, Japanese, Latin, Latvian, Marathi, Norwegian, Persian, Polish, Portuguese, Romanian, Russian, Slovak, Slovenian, Somali, Southern Sotho, Spanish, Swahili, Swedish, Tswana, Turkish, Ukrainian, Zulu</code></p>\n<p dir=\"auto\"><strong>Quick online example:</strong></p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# load NER model trained by deep learning approach and GloVe word embeddings\nner_dl = NerDLModel.pretrained('ner_dl')\n# load NER model trained by deep learning approach and BERT word embeddings\nner_bert = NerDLModel.pretrained('ner_dl_bert')\"><pre><span class=\"pl-c\"># load NER model trained by deep learning approach and GloVe word embeddings</span>\n<span class=\"pl-s1\">ner_dl</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">NerDLModel</span>.<span class=\"pl-en\">pretrained</span>(<span class=\"pl-s\">'ner_dl'</span>)\n<span class=\"pl-c\"># load NER model trained by deep learning approach and BERT word embeddings</span>\n<span class=\"pl-s1\">ner_bert</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">NerDLModel</span>.<span class=\"pl-en\">pretrained</span>(<span class=\"pl-s\">'ner_dl_bert'</span>)</pre></div>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// load French POS tagger model trained by Universal Dependencies\nval french_pos = PerceptronModel.pretrained(&quot;pos_ud_gsd&quot;, lang=&quot;fr&quot;)\n// load Italain LemmatizerModel\nval italian_lemma = LemmatizerModel.pretrained(&quot;lemma_dxc&quot;, lang=&quot;it&quot;)\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> load French POS tagger model trained by Universal Dependencies</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">french_pos</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PerceptronModel</span>.pretrained(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pos_ud_gsd<span class=\"pl-pds\">\"</span></span>, lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fr<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> load Italain LemmatizerModel</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">italian_lemma</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">LemmatizerModel</span>.pretrained(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lemma_dxc<span class=\"pl-pds\">\"</span></span>, lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>it<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\"><strong>Quick offline example:</strong></p>\n<ul dir=\"auto\">\n<li>Loading <code>PerceptronModel</code> annotator model inside Spark NLP Pipeline</li>\n</ul>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val french_pos = PerceptronModel.load(&quot;/tmp/pos_ud_gsd_fr_2.0.2_2.4_1556531457346/&quot;)\n      .setInputCols(&quot;document&quot;, &quot;token&quot;)\n      .setOutputCol(&quot;pos&quot;)\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">french_pos</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">PerceptronModel</span>.load(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/pos_ud_gsd_fr_2.0.2_2.4_1556531457346/<span class=\"pl-pds\">\"</span></span>)\n      .setInputCols(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>document<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>token<span class=\"pl-pds\">\"</span></span>)\n      .setOutputCol(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pos<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-showing-available-models\" class=\"anchor\" aria-hidden=\"true\" href=\"#showing-available-models\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Showing Available Models</h4>\n<p dir=\"auto\">There are functions in Spark NLP that will list all the available Models\nof a particular Annotator and language for you:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.johnsnowlabs.nlp.pretrained.ResourceDownloader\n\nResourceDownloader.showPublicModels(annotator=&quot;NerDLModel&quot;, lang=&quot;en&quot;)\n/*\n+---------------------------------------------+------+---------+\n| Model                                       | lang | version |\n+---------------------------------------------+------+---------+\n| onto_100                                    |  en  | 2.1.0   |\n| onto_300                                    |  en  | 2.1.0   |\n| ner_dl_bert                                 |  en  | 2.2.0   |\n| onto_100                                    |  en  | 2.4.0   |\n| ner_conll_elmo                              |  en  | 3.2.2   |\n+---------------------------------------------+------+---------+\n*/\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">pretrained</span>.<span class=\"pl-en\">ResourceDownloader</span>\n\n<span class=\"pl-en\">ResourceDownloader</span>.showPublicModels(annotator<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NerDLModel<span class=\"pl-pds\">\"</span></span>, lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">+---------------------------------------------+------+---------+</span>\n<span class=\"pl-c\">| Model                                       | lang | version |</span>\n<span class=\"pl-c\">+---------------------------------------------+------+---------+</span>\n<span class=\"pl-c\">| onto_100                                    |  en  | 2.1.0   |</span>\n<span class=\"pl-c\">| onto_300                                    |  en  | 2.1.0   |</span>\n<span class=\"pl-c\">| ner_dl_bert                                 |  en  | 2.2.0   |</span>\n<span class=\"pl-c\">| onto_100                                    |  en  | 2.4.0   |</span>\n<span class=\"pl-c\">| ner_conll_elmo                              |  en  | 3.2.2   |</span>\n<span class=\"pl-c\">+---------------------------------------------+------+---------+</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span></pre></div>\n<p dir=\"auto\">Or if we want to check for a particular version:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.johnsnowlabs.nlp.pretrained.ResourceDownloader\n\nResourceDownloader.showPublicModels(annotator=&quot;NerDLModel&quot;, lang=&quot;en&quot;, version=&quot;3.1.0&quot;)\n/*\n+----------------------------+------+---------+\n| Model                      | lang | version |\n+----------------------------+------+---------+\n| onto_100                   |  en  | 2.1.0   |\n| ner_aspect_based_sentiment |  en  | 2.6.2   |\n| ner_weibo_glove_840B_300d  |  en  | 2.6.2   |\n| nerdl_atis_840b_300d       |  en  | 2.7.1   |\n| nerdl_snips_100d           |  en  | 2.7.3   |\n+----------------------------+------+---------+\n*/\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">pretrained</span>.<span class=\"pl-en\">ResourceDownloader</span>\n\n<span class=\"pl-en\">ResourceDownloader</span>.showPublicModels(annotator<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NerDLModel<span class=\"pl-pds\">\"</span></span>, lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>, version<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3.1.0<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">+----------------------------+------+---------+</span>\n<span class=\"pl-c\">| Model                      | lang | version |</span>\n<span class=\"pl-c\">+----------------------------+------+---------+</span>\n<span class=\"pl-c\">| onto_100                   |  en  | 2.1.0   |</span>\n<span class=\"pl-c\">| ner_aspect_based_sentiment |  en  | 2.6.2   |</span>\n<span class=\"pl-c\">| ner_weibo_glove_840B_300d  |  en  | 2.6.2   |</span>\n<span class=\"pl-c\">| nerdl_atis_840b_300d       |  en  | 2.7.1   |</span>\n<span class=\"pl-c\">| nerdl_snips_100d           |  en  | 2.7.3   |</span>\n<span class=\"pl-c\">+----------------------------+------+---------+</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span></pre></div>\n<p dir=\"auto\">And to see a list of available annotators, you can use:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.johnsnowlabs.nlp.pretrained.ResourceDownloader\n\nResourceDownloader.showAvailableAnnotators()\n/*\nAlbertEmbeddings\nAlbertForTokenClassification\nAssertionDLModel\n...\nXlmRoBertaSentenceEmbeddings\nXlnetEmbeddings\n*/\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-en\">com</span>.<span class=\"pl-en\">johnsnowlabs</span>.<span class=\"pl-en\">nlp</span>.<span class=\"pl-en\">pretrained</span>.<span class=\"pl-en\">ResourceDownloader</span>\n\n<span class=\"pl-en\">ResourceDownloader</span>.showAvailableAnnotators()\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span>\n<span class=\"pl-c\">AlbertEmbeddings</span>\n<span class=\"pl-c\">AlbertForTokenClassification</span>\n<span class=\"pl-c\">AssertionDLModel</span>\n<span class=\"pl-c\">...</span>\n<span class=\"pl-c\">XlmRoBertaSentenceEmbeddings</span>\n<span class=\"pl-c\">XlnetEmbeddings</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span></pre></div>\n<h4 dir=\"auto\"><a id=\"user-content-please-check-out-our-models-hub-for-the-full-list-of-pre-trained-models-with-examples-demo-benchmark-and-more\" class=\"anchor\" aria-hidden=\"true\" href=\"#please-check-out-our-models-hub-for-the-full-list-of-pre-trained-models-with-examples-demo-benchmark-and-more\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Please check out our Models Hub for the full list of <a href=\"https://nlp.johnsnowlabs.com/models\" rel=\"nofollow\">pre-trained models</a> with examples, demo, benchmark, and more</h4>\n<h2 dir=\"auto\"><a id=\"user-content-offline\" class=\"anchor\" aria-hidden=\"true\" href=\"#offline\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Offline</h2>\n<p dir=\"auto\">Spark NLP library and all the pre-trained models/pipelines can be used entirely offline with no access to the Internet. If you are behind a proxy or a firewall with no access to the Maven repository (to download packages) or/and no access to S3 (to automatically download models and pipelines), you can simply follow the instructions to have Spark NLP without any limitations offline:</p>\n<ul dir=\"auto\">\n<li>Instead of using the Maven package, you need to load our Fat JAR</li>\n<li>Instead of using PretrainedPipeline for pretrained pipelines or the <code>.pretrained()</code> function to download pretrained models, you will need to manually download your pipeline/model from <a href=\"https://nlp.johnsnowlabs.com/models\" rel=\"nofollow\">Models Hub</a>, extract it, and load it.</li>\n</ul>\n<p dir=\"auto\">Example of <code>SparkSession</code> with Fat JAR to have Spark NLP offline:</p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"spark = SparkSession.builder \\\n    .appName(&quot;Spark NLP&quot;)\\\n    .master(&quot;local[*]&quot;)\\\n    .config(&quot;spark.driver.memory&quot;,&quot;16G&quot;)\\\n    .config(&quot;spark.driver.maxResultSize&quot;, &quot;0&quot;) \\\n    .config(&quot;spark.kryoserializer.buffer.max&quot;, &quot;2000M&quot;)\\\n    .config(&quot;spark.jars&quot;, &quot;/tmp/spark-nlp-assembly-3.4.0.jar&quot;)\\\n    .getOrCreate()\"><pre><span class=\"pl-s1\">spark</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">SparkSession</span>.<span class=\"pl-s1\">builder</span> \\\n    .<span class=\"pl-en\">appName</span>(<span class=\"pl-s\">\"Spark NLP\"</span>)\\\n    .<span class=\"pl-en\">master</span>(<span class=\"pl-s\">\"local[*]\"</span>)\\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.driver.memory\"</span>,<span class=\"pl-s\">\"16G\"</span>)\\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.driver.maxResultSize\"</span>, <span class=\"pl-s\">\"0\"</span>) \\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.kryoserializer.buffer.max\"</span>, <span class=\"pl-s\">\"2000M\"</span>)\\\n    .<span class=\"pl-en\">config</span>(<span class=\"pl-s\">\"spark.jars\"</span>, <span class=\"pl-s\">\"/tmp/spark-nlp-assembly-3.4.0.jar\"</span>)\\\n    .<span class=\"pl-en\">getOrCreate</span>()</pre></div>\n<ul dir=\"auto\">\n<li>You can download provided Fat JARs from each <a href=\"https://github.com/JohnSnowLabs/spark-nlp/releases\">release notes</a>, please pay attention to pick the one that suits your environment depending on the device (CPU/GPU) and Apache Spark version (2.3.x, 2.4.x, and 3.x)</li>\n<li>If you are local, you can load the Fat JAR from your local FileSystem, however, if you are in a cluster setup you need to put the Fat JAR on a distributed FileSystem such as HDFS, DBFS, S3, etc. (i.e., <code>hdfs:///tmp/spark-nlp-assembly-3.4.0.jar</code>)</li>\n</ul>\n<p dir=\"auto\">Example of using pretrained Models and Pipelines in offline:</p>\n<div class=\"highlight highlight-source-python position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# instead of using pretrained() for online:\n# french_pos = PerceptronModel.pretrained(&quot;pos_ud_gsd&quot;, lang=&quot;fr&quot;)\n# you download this model, extract it, and use .load\nfrench_pos = PerceptronModel.load(&quot;/tmp/pos_ud_gsd_fr_2.0.2_2.4_1556531457346/&quot;)\\\n      .setInputCols(&quot;document&quot;, &quot;token&quot;)\\\n      .setOutputCol(&quot;pos&quot;)\n\n# example for pipelines\n# instead of using PretrainedPipeline\n# pipeline = PretrainedPipeline('explain_document_dl', lang='en')\n# you download this pipeline, extract it, and use PipelineModel\nPipelineModel.load(&quot;/tmp/explain_document_dl_en_2.0.2_2.4_1556530585689/&quot;)\"><pre><span class=\"pl-c\"># instead of using pretrained() for online:</span>\n<span class=\"pl-c\"># french_pos = PerceptronModel.pretrained(\"pos_ud_gsd\", lang=\"fr\")</span>\n<span class=\"pl-c\"># you download this model, extract it, and use .load</span>\n<span class=\"pl-s1\">french_pos</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">PerceptronModel</span>.<span class=\"pl-en\">load</span>(<span class=\"pl-s\">\"/tmp/pos_ud_gsd_fr_2.0.2_2.4_1556531457346/\"</span>)\\\n      .<span class=\"pl-en\">setInputCols</span>(<span class=\"pl-s\">\"document\"</span>, <span class=\"pl-s\">\"token\"</span>)\\\n      .<span class=\"pl-en\">setOutputCol</span>(<span class=\"pl-s\">\"pos\"</span>)\n\n<span class=\"pl-c\"># example for pipelines</span>\n<span class=\"pl-c\"># instead of using PretrainedPipeline</span>\n<span class=\"pl-c\"># pipeline = PretrainedPipeline('explain_document_dl', lang='en')</span>\n<span class=\"pl-c\"># you download this pipeline, extract it, and use PipelineModel</span>\n<span class=\"pl-v\">PipelineModel</span>.<span class=\"pl-en\">load</span>(<span class=\"pl-s\">\"/tmp/explain_document_dl_en_2.0.2_2.4_1556530585689/\"</span>)</pre></div>\n<ul dir=\"auto\">\n<li>Since you are downloading and loading models/pipelines manually, this means Spark NLP is not downloading the most recent and compatible models/pipelines for you. Choosing the right model/pipeline is on you</li>\n<li>If you are local, you can load the model/pipeline from your local FileSystem, however, if you are in a cluster setup you need to put the model/pipeline on a distributed FileSystem such as HDFS, DBFS, S3, etc. (i.e., <code>hdfs:///tmp/explain_document_dl_en_2.0.2_2.4_1556530585689/</code>)</li>\n</ul>\n<h2 dir=\"auto\"><a id=\"user-content-examples\" class=\"anchor\" aria-hidden=\"true\" href=\"#examples\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Examples</h2>\n<p dir=\"auto\">Need more <strong>examples</strong>? Check out our dedicated <a href=\"https://github.com/JohnSnowLabs/spark-nlp-workshop\">Spark NLP Showcase</a> repository to showcase all Spark NLP use cases!</p>\n<p dir=\"auto\">Also, don't forget to check <a href=\"https://nlp.johnsnowlabs.com/demo\" rel=\"nofollow\">Spark NLP in Action</a> built by Streamlit.</p>\n<h3 dir=\"auto\"><a id=\"user-content-all-examples-spark-nlp-workshop\" class=\"anchor\" aria-hidden=\"true\" href=\"#all-examples-spark-nlp-workshop\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>All examples: <a href=\"https://github.com/JohnSnowLabs/spark-nlp-workshop\">spark-nlp-workshop</a></h3>\n<h2 dir=\"auto\"><a id=\"user-content-faq\" class=\"anchor\" aria-hidden=\"true\" href=\"#faq\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>FAQ</h2>\n<p dir=\"auto\"><a href=\"https://nlp.johnsnowlabs.com/learn\" rel=\"nofollow\">Check our Articles and Videos page here</a></p>\n<h2 dir=\"auto\"><a id=\"user-content-citation\" class=\"anchor\" aria-hidden=\"true\" href=\"#citation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Citation</h2>\n<p dir=\"auto\">We have published a <a href=\"https://www.sciencedirect.com/science/article/pii/S2665963821000063\" rel=\"nofollow\">paper</a> that you can cite for the Spark NLP library:</p>\n<div class=\"highlight highlight-text-bibtex position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@article{KOCAMAN2021100058,\n    title = {Spark NLP: Natural language understanding at scale},\n    journal = {Software Impacts},\n    pages = {100058},\n    year = {2021},\n    issn = {2665-9638},\n    doi = {https://doi.org/10.1016/j.simpa.2021.100058},\n    url = {https://www.sciencedirect.com/science/article/pii/S2665963.2.100063},\n    author = {Veysel Kocaman and David Talby},\n    keywords = {Spark, Natural language processing, Deep learning, Tensorflow, Cluster},\n    abstract = {Spark NLP is a Natural Language Processing (NLP) library built on top of Apache Spark ML. It provides simple, performant &amp; accurate NLP annotations for machine learning pipelines that can scale easily in a distributed environment. Spark NLP comes with 1100+ pretrained pipelines and models in more than 192+ languages. It supports nearly all the NLP tasks and modules that can be used seamlessly in a cluster. Downloaded more than 2.7 million times and experiencing 9x growth since January 2020, Spark NLP is used by 54% of healthcare organizations as the world’s most widely used NLP library in the enterprise.}\n    }\n}\"><pre><span class=\"pl-k\">@article</span>{<span class=\"pl-en\">KOCAMAN2021100058</span>,\n    <span class=\"pl-s\">title</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>Spark NLP: Natural language understanding at scale<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">journal</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>Software Impacts<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">pages</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>100058<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">year</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>2021<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">issn</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>2665-9638<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">doi</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>https://doi.org/10.1016/j.simpa.2021.100058<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">url</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>https://www.sciencedirect.com/science/article/pii/S2665963.2.100063<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">author</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>Veysel Kocaman and David Talby<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">keywords</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>Spark, Natural language processing, Deep learning, Tensorflow, Cluster<span class=\"pl-pds\">}</span></span>,\n    <span class=\"pl-s\">abstract</span> = <span class=\"pl-s\"><span class=\"pl-pds\">{</span>Spark NLP is a Natural Language Processing (NLP) library built on top of Apache Spark ML. It provides simple, performant &amp; accurate NLP annotations for machine learning pipelines that can scale easily in a distributed environment. Spark NLP comes with 1100+ pretrained pipelines and models in more than 192+ languages. It supports nearly all the NLP tasks and modules that can be used seamlessly in a cluster. Downloaded more than 2.7 million times and experiencing 9x growth since January 2020, Spark NLP is used by 54% of healthcare organizations as the world’s most widely used NLP library in the enterprise.<span class=\"pl-pds\">}</span></span>\n    }\n<span class=\"pl-c\">}</span></pre></div>\n<h2 dir=\"auto\"><a id=\"user-content-contributing\" class=\"anchor\" aria-hidden=\"true\" href=\"#contributing\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Contributing</h2>\n<p dir=\"auto\">We appreciate any sort of contributions:</p>\n<ul dir=\"auto\">\n<li>ideas</li>\n<li>feedback</li>\n<li>documentation</li>\n<li>bug reports</li>\n<li>NLP training and testing corpora</li>\n<li>Development and testing</li>\n</ul>\n<p dir=\"auto\">Clone the repo and submit your pull-requests! Or directly create issues in this repo.</p>\n<h2 dir=\"auto\"><a id=\"user-content-john-snow-labs\" class=\"anchor\" aria-hidden=\"true\" href=\"#john-snow-labs\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>John Snow Labs</h2>\n<p dir=\"auto\"><a href=\"http://johnsnowlabs.com\" rel=\"nofollow\">http://johnsnowlabs.com</a></p>\n</article></div>",
    "contributors" : [
      {
        "login" : "maziyarpanahi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5762953?v=4",
        "url" : "https://api.github.com/users/maziyarpanahi",
        "contributions" : 7180
      },
      {
        "login" : "saif-ellafi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/27952699?v=4",
        "url" : "https://api.github.com/users/saif-ellafi",
        "contributions" : 1470
      },
      {
        "login" : "murat-gunay",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/69839085?v=4",
        "url" : "https://api.github.com/users/murat-gunay",
        "contributions" : 1050
      },
      {
        "login" : "albertoandreottiATgmail",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4570303?v=4",
        "url" : "https://api.github.com/users/albertoandreottiATgmail",
        "contributions" : 476
      },
      {
        "login" : "danilojsl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/37355249?v=4",
        "url" : "https://api.github.com/users/danilojsl",
        "contributions" : 449
      },
      {
        "login" : "HashamUlHaq",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/20089167?v=4",
        "url" : "https://api.github.com/users/HashamUlHaq",
        "contributions" : 297
      },
      {
        "login" : "wolliq",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/9249231?v=4",
        "url" : "https://api.github.com/users/wolliq",
        "contributions" : 231
      },
      {
        "login" : "diatrambitas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/28726658?v=4",
        "url" : "https://api.github.com/users/diatrambitas",
        "contributions" : 222
      },
      {
        "login" : "C-K-Loan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/18140070?v=4",
        "url" : "https://api.github.com/users/C-K-Loan",
        "contributions" : 187
      },
      {
        "login" : "DevinTDHa",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/33089471?v=4",
        "url" : "https://api.github.com/users/DevinTDHa",
        "contributions" : 185
      },
      {
        "login" : "agsfer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5466973?v=4",
        "url" : "https://api.github.com/users/agsfer",
        "contributions" : 164
      },
      {
        "login" : "vkocaman",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/25637056?v=4",
        "url" : "https://api.github.com/users/vkocaman",
        "contributions" : 160
      },
      {
        "login" : "muhammetsnts",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/76607915?v=4",
        "url" : "https://api.github.com/users/muhammetsnts",
        "contributions" : 140
      },
      {
        "login" : "josejuanmartinez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/36634572?v=4",
        "url" : "https://api.github.com/users/josejuanmartinez",
        "contributions" : 112
      },
      {
        "login" : "gadde5300",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/69344247?v=4",
        "url" : "https://api.github.com/users/gadde5300",
        "contributions" : 103
      },
      {
        "login" : "dcecchini",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11304253?v=4",
        "url" : "https://api.github.com/users/dcecchini",
        "contributions" : 103
      },
      {
        "login" : "aleksei-ai",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/31881382?v=4",
        "url" : "https://api.github.com/users/aleksei-ai",
        "contributions" : 70
      },
      {
        "login" : "Digaari",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/33162540?v=4",
        "url" : "https://api.github.com/users/Digaari",
        "contributions" : 69
      },
      {
        "login" : "pabla",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1594817?v=4",
        "url" : "https://api.github.com/users/pabla",
        "contributions" : 63
      },
      {
        "login" : "vankov",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6031570?v=4",
        "url" : "https://api.github.com/users/vankov",
        "contributions" : 61
      },
      {
        "login" : "kolia1985",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/35202?v=4",
        "url" : "https://api.github.com/users/kolia1985",
        "contributions" : 52
      },
      {
        "login" : "egenc",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/25952802?v=4",
        "url" : "https://api.github.com/users/egenc",
        "contributions" : 41
      },
      {
        "login" : "showy",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2026148?v=4",
        "url" : "https://api.github.com/users/showy",
        "contributions" : 41
      },
      {
        "login" : "ImPr0grammer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4463485?v=4",
        "url" : "https://api.github.com/users/ImPr0grammer",
        "contributions" : 33
      },
      {
        "login" : "alinapetukhova",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/14196910?v=4",
        "url" : "https://api.github.com/users/alinapetukhova",
        "contributions" : 29
      },
      {
        "login" : "galiph",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/43220467?v=4",
        "url" : "https://api.github.com/users/galiph",
        "contributions" : 27
      },
      {
        "login" : "anju-jsl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16589746?v=4",
        "url" : "https://api.github.com/users/anju-jsl",
        "contributions" : 23
      },
      {
        "login" : "drbonis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/1630811?v=4",
        "url" : "https://api.github.com/users/drbonis",
        "contributions" : 22
      },
      {
        "login" : "Ahmetemintek",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/41872695?v=4",
        "url" : "https://api.github.com/users/Ahmetemintek",
        "contributions" : 20
      },
      {
        "login" : "aydinmyilmaz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/29075537?v=4",
        "url" : "https://api.github.com/users/aydinmyilmaz",
        "contributions" : 19
      },
      {
        "login" : "riyajohnsnow",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/26301362?v=4",
        "url" : "https://api.github.com/users/riyajohnsnow",
        "contributions" : 17
      },
      {
        "login" : "fernandrez",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2273908?v=4",
        "url" : "https://api.github.com/users/fernandrez",
        "contributions" : 16
      },
      {
        "login" : "Tshimanga",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/16946069?v=4",
        "url" : "https://api.github.com/users/Tshimanga",
        "contributions" : 15
      },
      {
        "login" : "actions-user",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/65916846?v=4",
        "url" : "https://api.github.com/users/actions-user",
        "contributions" : 15
      },
      {
        "login" : "xusliebana",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3695012?v=4",
        "url" : "https://api.github.com/users/xusliebana",
        "contributions" : 15
      },
      {
        "login" : "bvannah",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/40500886?v=4",
        "url" : "https://api.github.com/users/bvannah",
        "contributions" : 14
      },
      {
        "login" : "jfernandrezj",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/51669244?v=4",
        "url" : "https://api.github.com/users/jfernandrezj",
        "contributions" : 11
      },
      {
        "login" : "luca-martial",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/48870843?v=4",
        "url" : "https://api.github.com/users/luca-martial",
        "contributions" : 10
      },
      {
        "login" : "xegulon",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/74178038?v=4",
        "url" : "https://api.github.com/users/xegulon",
        "contributions" : 7
      },
      {
        "login" : "xyutech",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/210953?v=4",
        "url" : "https://api.github.com/users/xyutech",
        "contributions" : 6
      },
      {
        "login" : "iamvarol",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/55491416?v=4",
        "url" : "https://api.github.com/users/iamvarol",
        "contributions" : 6
      },
      {
        "login" : "KshitizGIT",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8330582?v=4",
        "url" : "https://api.github.com/users/KshitizGIT",
        "contributions" : 5
      },
      {
        "login" : "manangandhi7",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11315357?v=4",
        "url" : "https://api.github.com/users/manangandhi7",
        "contributions" : 4
      },
      {
        "login" : "Cabir40",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/64752006?v=4",
        "url" : "https://api.github.com/users/Cabir40",
        "contributions" : 4
      },
      {
        "login" : "sllynn",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/50170698?v=4",
        "url" : "https://api.github.com/users/sllynn",
        "contributions" : 4
      },
      {
        "login" : "apiltamang",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/6851604?v=4",
        "url" : "https://api.github.com/users/apiltamang",
        "contributions" : 3
      },
      {
        "login" : "kgeis",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2237299?v=4",
        "url" : "https://api.github.com/users/kgeis",
        "contributions" : 3
      },
      {
        "login" : "easimadi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/13008169?v=4",
        "url" : "https://api.github.com/users/easimadi",
        "contributions" : 3
      },
      {
        "login" : "exadatum-sandeep",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12441175?v=4",
        "url" : "https://api.github.com/users/exadatum-sandeep",
        "contributions" : 3
      },
      {
        "login" : "lambdaofgod",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/3647577?v=4",
        "url" : "https://api.github.com/users/lambdaofgod",
        "contributions" : 3
      },
      {
        "login" : "brollb",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/4982789?v=4",
        "url" : "https://api.github.com/users/brollb",
        "contributions" : 2
      },
      {
        "login" : "jdobes-cz",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/44785730?v=4",
        "url" : "https://api.github.com/users/jdobes-cz",
        "contributions" : 2
      },
      {
        "login" : "sunbuhui",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/33833308?v=4",
        "url" : "https://api.github.com/users/sunbuhui",
        "contributions" : 2
      },
      {
        "login" : "atomobianco",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7416867?v=4",
        "url" : "https://api.github.com/users/atomobianco",
        "contributions" : 2
      },
      {
        "login" : "jsl-models",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/74001263?v=4",
        "url" : "https://api.github.com/users/jsl-models",
        "contributions" : 2
      },
      {
        "login" : "AndrewMbugua",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/51198360?v=4",
        "url" : "https://api.github.com/users/AndrewMbugua",
        "contributions" : 1
      },
      {
        "login" : "masguit42",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11005780?v=4",
        "url" : "https://api.github.com/users/masguit42",
        "contributions" : 1
      },
      {
        "login" : "arowshan",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10606412?v=4",
        "url" : "https://api.github.com/users/arowshan",
        "contributions" : 1
      },
      {
        "login" : "ChicoQ",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5386768?v=4",
        "url" : "https://api.github.com/users/ChicoQ",
        "contributions" : 1
      },
      {
        "login" : "csnardi",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5530739?v=4",
        "url" : "https://api.github.com/users/csnardi",
        "contributions" : 1
      },
      {
        "login" : "shaddoxac",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/8976443?v=4",
        "url" : "https://api.github.com/users/shaddoxac",
        "contributions" : 1
      },
      {
        "login" : "howmuchcomputer",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/5105094?v=4",
        "url" : "https://api.github.com/users/howmuchcomputer",
        "contributions" : 1
      },
      {
        "login" : "devendraap",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/17588085?v=4",
        "url" : "https://api.github.com/users/devendraap",
        "contributions" : 1
      },
      {
        "login" : "harrisonjansma",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/36687008?v=4",
        "url" : "https://api.github.com/users/harrisonjansma",
        "contributions" : 1
      },
      {
        "login" : "JohnSnowLab",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/15903360?v=4",
        "url" : "https://api.github.com/users/JohnSnowLab",
        "contributions" : 1
      },
      {
        "login" : "lgaud",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12129629?v=4",
        "url" : "https://api.github.com/users/lgaud",
        "contributions" : 1
      },
      {
        "login" : "maxifom",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/20924207?v=4",
        "url" : "https://api.github.com/users/maxifom",
        "contributions" : 1
      },
      {
        "login" : "mptrepanier",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/11826734?v=4",
        "url" : "https://api.github.com/users/mptrepanier",
        "contributions" : 1
      },
      {
        "login" : "nhan-jsl",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/25475205?v=4",
        "url" : "https://api.github.com/users/nhan-jsl",
        "contributions" : 1
      },
      {
        "login" : "PaddyK92",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/44399437?v=4",
        "url" : "https://api.github.com/users/PaddyK92",
        "contributions" : 1
      },
      {
        "login" : "RobertSassen",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/10051731?v=4",
        "url" : "https://api.github.com/users/RobertSassen",
        "contributions" : 1
      },
      {
        "login" : "roger-yu-ds",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7835508?v=4",
        "url" : "https://api.github.com/users/roger-yu-ds",
        "contributions" : 1
      },
      {
        "login" : "tommaso-predictice",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/97539281?v=4",
        "url" : "https://api.github.com/users/tommaso-predictice",
        "contributions" : 1
      },
      {
        "login" : "alexander-n-thomas",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7217534?v=4",
        "url" : "https://api.github.com/users/alexander-n-thomas",
        "contributions" : 1
      },
      {
        "login" : "cuteishani",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/58289856?v=4",
        "url" : "https://api.github.com/users/cuteishani",
        "contributions" : 1
      },
      {
        "login" : "dburbanotw",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/39101559?v=4",
        "url" : "https://api.github.com/users/dburbanotw",
        "contributions" : 1
      },
      {
        "login" : "dependabot[bot]",
        "avatarUrl" : "https://avatars.githubusercontent.com/in/29110?v=4",
        "url" : "https://api.github.com/users/dependabot%5Bbot%5D",
        "contributions" : 1
      },
      {
        "login" : "evgeniwk",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/18010703?v=4",
        "url" : "https://api.github.com/users/evgeniwk",
        "contributions" : 1
      },
      {
        "login" : "idalucente",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/31654745?v=4",
        "url" : "https://api.github.com/users/idalucente",
        "contributions" : 1
      },
      {
        "login" : "ireneisdoomed",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/45119610?v=4",
        "url" : "https://api.github.com/users/ireneisdoomed",
        "contributions" : 1
      },
      {
        "login" : "pradeepgowda21",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/59077976?v=4",
        "url" : "https://api.github.com/users/pradeepgowda21",
        "contributions" : 1
      },
      {
        "login" : "rohannng",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/2540353?v=4",
        "url" : "https://api.github.com/users/rohannng",
        "contributions" : 1
      },
      {
        "login" : "sethah",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/7275795?v=4",
        "url" : "https://api.github.com/users/sethah",
        "contributions" : 1
      }
    ],
    "commits" : 13301,
    "topics" : [
      "nlp",
      "text-classification",
      "xlnet",
      "sentiment-analysis",
      "spell-checker",
      "part-of-speech-tagger",
      "transformers",
      "entity-extraction",
      "lemmatizer",
      "seq2seq",
      "language-detection",
      "named-entity-recognition",
      "machine-translation",
      "tensorflow",
      "spark-ml",
      "pyspark",
      "spark",
      "albert",
      "bert",
      "natural-language-processing"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 6821,
        "title" : "Getting an error when using Spark NLP with GPU support in CoLab",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6821"
      },
      {
        "number" : 6813,
        "title" : "Python Custom Annotator support for Lightpipelines",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6813"
      },
      {
        "number" : 6679,
        "title" : "Making RecursiveTokenizerModel ParamsAndFeaturesReadable",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6679"
      },
      {
        "number" : 6524,
        "title" : "Import error in 3.3.4 (Python 3.9): ModuleNotFoundError: No module named 'com.johnsnowlabs'",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6524"
      },
      {
        "number" : 6466,
        "title" : "MultiClassifierModel to return predicted labels ordered by highest to lowest probabilities",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6466"
      },
      {
        "number" : 6331,
        "title" : "Improve CoNLL reader to read large datasets",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6331"
      },
      {
        "number" : 6303,
        "title" : "TensorflowWrapper.scala fails to load ClassifierDLApproach",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6303"
      },
      {
        "number" : 6205,
        "title" : "Models from NerDLModel.pretrained() sharing the same input column references",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/6205"
      },
      {
        "number" : 5984,
        "title" : "Cannot Load Pretrained Pipeline | java.io.InvalidClassException: com.johnsnowlabs.nlp.util.regex.RuleFactory; local class incompatible",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5984"
      },
      {
        "number" : 5970,
        "title" : "Hugging Face Models",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5970"
      },
      {
        "number" : 5937,
        "title" : "Problem with Spark NLP, This error occurs while loading a pretrained model",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5937"
      },
      {
        "number" : 5900,
        "title" : "Problem while saving model to s3 directory",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5900"
      },
      {
        "number" : 5896,
        "title" : "Not all models can be downloaded for usage in airtight environment",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5896"
      },
      {
        "number" : 5850,
        "title" : "py4j.security.Py4JSecurityException: Constructor public com.johnsnowlabs.nlp.DocumentAssembler(java.lang.String) is not whitelisted.",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5850"
      },
      {
        "number" : 5837,
        "title" : "Unable to use Pretrained Pipelines in AWS EMR and GLUE",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5837"
      },
      {
        "number" : 5817,
        "title" : "Could not initialize class com.johnsnowlabs.util.ConfigHelper$",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5817"
      },
      {
        "number" : 5795,
        "title" : "Investigate aws-java-sdk-s3 as a replacement for aws-bundle",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5795"
      },
      {
        "number" : 5777,
        "title" : "How to navigate Models Hub to list all the available models for a specific annotator",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5777"
      },
      {
        "number" : 5707,
        "title" : "Implement the ConfigLoader.setConfigPath method in Python",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/5707"
      },
      {
        "number" : 4322,
        "title" : "Error occurs when using TrainValidationSplit() on a Spark ML pipeline that includes Spark NLP annotators. ",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/4322"
      },
      {
        "number" : 2846,
        "title" : "LaBSE Sentence Embeddings model output vectors are not equal to original",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2846"
      },
      {
        "number" : 2839,
        "title" : "Example for apply multiple pipelines or models in parallel?",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2839"
      },
      {
        "number" : 2793,
        "title" : "ContextSpellCheckerModel:  ClassNotFoundException: it.unimi.dsi.fastutil.chars.Char2ObjectSortedMap",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2793"
      },
      {
        "number" : 2775,
        "title" : "TypedDependencyParser returning <no-type> as dep type",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2775"
      },
      {
        "number" : 2739,
        "title" : "Spark NLP pipeline runs much faster on PySpark 3.0.x compare to PySpark 3.1.x",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2739"
      },
      {
        "number" : 2738,
        "title" : "Error using some pretrained pipelines in Spark/PySpark 3.x",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2738"
      },
      {
        "number" : 2355,
        "title" : "Applying Tokenizer to TextMatcher",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2355"
      },
      {
        "number" : 2254,
        "title" : "Loading Check_spelling_dl Pretrained Pipeline crashes in Spark NLP 2.7.2 + ",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2254"
      },
      {
        "number" : 2221,
        "title" : "End to end SBT project in Scala",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2221"
      },
      {
        "number" : 2184,
        "title" : "Enhancement of Aspect based analysis",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2184"
      },
      {
        "number" : 2099,
        "title" : "Improve pre-processing for multi-sentence input tasks for T5",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/2099"
      },
      {
        "number" : 1227,
        "title" : "Incompatible Jackson version: 2.10.0",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1227"
      },
      {
        "number" : 1165,
        "title" : "Finisher does not accept token if data frame comes from disk - not memeory",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1165"
      },
      {
        "number" : 1158,
        "title" : "Crossvalidation for Normalizer and other Spark-NLP-Pipeline fails (e.g. \"feature slangDict is not set\" )",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1158"
      },
      {
        "number" : 1132,
        "title" : "ELMo Embeddings -> Document Feature Vector",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1132"
      },
      {
        "number" : 1123,
        "title" : "Encountered unregistered class ID: 13994",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1123"
      },
      {
        "number" : 1121,
        "title" : "Symmetric SpellChecker:Missing default values",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1121"
      },
      {
        "number" : 1096,
        "title" : "Missing explanation for fullAnnotate",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1096"
      },
      {
        "number" : 1095,
        "title" : "Unable to save ner_dl model to s3",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1095"
      },
      {
        "number" : 1068,
        "title" : "BERT fine tuning in spark NLP",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1068"
      },
      {
        "number" : 1044,
        "title" : "py4j.protocol.Py4JNetworkError: Error while receiving",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1044"
      },
      {
        "number" : 1043,
        "title" : "ClassifierDLModel fails to load the pre-trained model file tfhub_use_en_2.4.0_2.4",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1043"
      },
      {
        "number" : 1023,
        "title" : "Requesting a feature to find the similarity between text columns",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1023"
      },
      {
        "number" : 1018,
        "title" : "Serialization bug in ContextSpellChecker when training in cluster mode",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/1018"
      },
      {
        "number" : 995,
        "title" : "Problem with spark-nlp",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/995"
      },
      {
        "number" : 970,
        "title" : "Unable to load pretrained resources",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/970"
      },
      {
        "number" : 952,
        "title" : "Problems with various getters and setters in the Python Spark NLP API",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/952"
      },
      {
        "number" : 896,
        "title" : "last stage of pipeline taking too long",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/896"
      },
      {
        "number" : 873,
        "title" : "LightPipeline with metadata",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/873"
      },
      {
        "number" : 853,
        "title" : "the java.lang.OutOfMemoryError: Java heap space",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/853"
      },
      {
        "number" : 831,
        "title" : "Support BIOES tagging style in addition to IOB/IOB2",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/831"
      },
      {
        "number" : 813,
        "title" : "Spark-NLP fails to load TF related models/pipelines with newer stdlib",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/813"
      },
      {
        "number" : 792,
        "title" : "Fuzzy TextMatcher",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/792"
      },
      {
        "number" : 739,
        "title" : "NerDLApproach does not accept HDFS path for graph folder",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/739"
      },
      {
        "number" : 728,
        "title" : "CoNLL produce bad sentences annotations",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/728"
      },
      {
        "number" : 715,
        "title" : "Failed to Run Example Code behind an Enterprise Proxy",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/715"
      },
      {
        "number" : 703,
        "title" : "from sparknlp.annotation import Annotation",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/703"
      },
      {
        "number" : 695,
        "title" : "py4j error",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/695"
      },
      {
        "number" : 654,
        "title" : "Java IO exception while saving a pipeline to S3 location",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/654"
      },
      {
        "number" : 632,
        "title" : "Negative begin index as a result of sentence detector",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/632"
      },
      {
        "number" : 568,
        "title" : "S3 model PythonResourceDownloader:  not able to find Java class definition for s3 models",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/568"
      },
      {
        "number" : 567,
        "title" : "How to derive an Annotator with automatically overwriting it's Model",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/567"
      },
      {
        "number" : 523,
        "title" : "[Feature Request]: Dynamically creating tensorflow graphs for custom number of tags ntags for NerDLApproach",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/523"
      },
      {
        "number" : 424,
        "title" : "DeepSentenceDetector can output empty Annotations",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/424"
      },
      {
        "number" : 408,
        "title" : "Research a MOCKing library for making easier unit testing annotations",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/408"
      },
      {
        "number" : 407,
        "title" : "Fix DeepSentenceDetector not handling multiple DOCUMENT input types",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/407"
      },
      {
        "number" : 310,
        "title" : "SPARK_HOME Issue + DeIdentification Fix + Normalizer Improvement",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/310"
      },
      {
        "number" : 292,
        "title" : "ConfigException$Parse with --properties-file flag",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/292"
      },
      {
        "number" : 275,
        "title" : "ExternalResource Special Character Support",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/275"
      },
      {
        "number" : 273,
        "title" : "Beginning and end marker for JavaAnnotation are not correctly aligned with string for \\n and double white-spaces",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/273"
      },
      {
        "number" : 267,
        "title" : "Feature request: Annotation-flattening transformer",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/267"
      },
      {
        "number" : 166,
        "title" : "Does spark nlp work with Apache ignite?",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/166"
      },
      {
        "number" : 52,
        "title" : "Lemmatizer should use POS and token to generate Lemma, have a default dictionary, and allow addition + overriding",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/52"
      },
      {
        "number" : 40,
        "title" : "MLeap integration with spark-nlp",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/40"
      },
      {
        "number" : 36,
        "title" : "Implement Coreference Resolution",
        "url" : "https://github.com/JohnSnowLabs/spark-nlp/issues/36"
      }
    ]
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : null,
    "beginnerIssuesLabel" : null
  }
}