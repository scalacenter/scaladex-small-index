{
  "organization" : "sake92",
  "repository" : "stone",
  "creationDate" : 1577743024000,
  "githubStatus" : {
    "Ok" : {
      "updateDate" : 1644307481734
    }
  },
  "githubInfo" : {
    "homepage" : "",
    "description" : "URL (de)construct. Withers.",
    "logo" : "https://avatars.githubusercontent.com/u/12010694?v=4",
    "stars" : 3,
    "forks" : 3,
    "watchers" : 2,
    "issues" : 2,
    "creationDate" : 1565808375000,
    "readme" : "<div id=\"readme\" class=\"md\" data-path=\"README.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 dir=\"auto\"><a id=\"user-content-stone--\" class=\"anchor\" aria-hidden=\"true\" href=\"#stone--\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Stone <a href=\"https://mvnrepository.com/artifact/ba.sake/stone-macros\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/b79e71585328787fb6e214a13b2e3e67e4d512b809943d00618b82bc0af4fbc0/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f62612e73616b652f73746f6e652d6d6163726f735f322e31332e7376673f7374796c653d666c61742d737175617265266c6162656c3d5363616c612b322e3133\" alt=\"Maven Central\" data-canonical-src=\"https://img.shields.io/maven-central/v/ba.sake/stone-macros_2.13.svg?style=flat-square&amp;label=Scala+2.13\" style=\"max-width: 100%;\"></a> <a href=\"https://travis-ci.com/sake92/stone\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7415a417ccced49455df3f81706ce2d30222db561046feb12fa4acecc375bfa5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f73616b6539322f73746f6e652f6d61737465722e7376673f6c6f676f3d747261766973267374796c653d666c61742d737175617265\" alt=\"Build Status\" data-canonical-src=\"https://img.shields.io/travis/sake92/stone/master.svg?logo=travis&amp;style=flat-square\" style=\"max-width: 100%;\"></a></h1>\n<p dir=\"auto\">Handy Scala macros for everyday use: <a href=\"#route\">Route</a>, <a href=\"#wither\">Wither</a>.</p>\n<p dir=\"auto\">Scala <strong>2.13 only</strong>!<br>\nScalaJS 1 is supported.</p>\n<h2 dir=\"auto\"><a id=\"user-content-route\" class=\"anchor\" aria-hidden=\"true\" href=\"#route\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>@Route</h2>\n<p dir=\"auto\">Generates apply/unapply methods for extracting/constructing URLs. Here's why:</p>\n<ul dir=\"auto\">\n<li>type safe URLs/routes</li>\n<li>unlike <a href=\"https://www.playframework.com/documentation/2.8.x/ScalaSirdRouter\" rel=\"nofollow\">Play SIRD</a> and others, it can also <strong>construct a URL</strong></li>\n</ul>\n<p dir=\"auto\">In Play, Angular and other frameworks you'd write something like this:<br>\n<code>/users/:id/:name ? minAge=:minAge &amp; qs=:qs...</code></p>\n<p dir=\"auto\">With <code>@Route</code> macro you write this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Route\nclass UsersRoute( /* first list contains path params */\n    p1: &quot;users&quot;,      // fixed\n    val id: Long,     // variable\n    val name: String\n)(                /* second list contains query params (those after ?) */\n    val minAge: Int,      // mandatory\n    val opt: Option[Int], // optional\n    val qs: Set[String]   // multi-valued\n)\n\n// construct a URL, type-safely\nval route = UsersRoute(1, &quot;Sake&quot;)(123, Some(456), Set(&quot;q1&quot;))\nval redirectUrl = route.urlData.url // /users/1/Sake?minAge=18&amp;opt=456&amp;qs=q1\n\n// deconstruct a string URL to type-safe data\n&quot;users/1/Sake?minAge=123&amp;qs=q1&amp;qs=q2&amp;opt=456&quot; match {\n  case UsersRoute(id, name, minAge, opt, qs) =&gt;\n    println(s&quot;$id, $name, $minAge, $opt, $qs&quot;) // 1, Sake, 123, Some(456), Set(q1, q2)\n  case _ =&gt; println(&quot;404 Not Found&quot;)\n}\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">Route</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">UsersRoute</span>( <span class=\"pl-c\"><span class=\"pl-c\">/*</span> first list contains path params <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-v\">p1</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users<span class=\"pl-pds\">\"</span></span>,      <span class=\"pl-c\"><span class=\"pl-c\">//</span> fixed</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">id</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Long</span>,     <span class=\"pl-c\"><span class=\"pl-c\">//</span> variable</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">name</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">String</span>\n)(                <span class=\"pl-c\"><span class=\"pl-c\">/*</span> second list contains query params (those after ?) <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">minAge</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Int</span>,      <span class=\"pl-c\"><span class=\"pl-c\">//</span> mandatory</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">opt</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>], <span class=\"pl-c\"><span class=\"pl-c\">//</span> optional</span>\n    <span class=\"pl-k\">val</span> <span class=\"pl-smi\">qs</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">Set</span>[<span class=\"pl-en\">String</span>]   <span class=\"pl-c\"><span class=\"pl-c\">//</span> multi-valued</span>\n)\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> construct a URL, type-safely</span>\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">route</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">UsersRoute</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sake<span class=\"pl-pds\">\"</span></span>)(<span class=\"pl-c1\">123</span>, <span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">456</span>), <span class=\"pl-en\">Set</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>q1<span class=\"pl-pds\">\"</span></span>))\n<span class=\"pl-k\">val</span> <span class=\"pl-smi\">redirectUrl</span> <span class=\"pl-k\">=</span> route.urlData.url <span class=\"pl-c\"><span class=\"pl-c\">//</span> /users/1/Sake?minAge=18&amp;opt=456&amp;qs=q1</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> deconstruct a string URL to type-safe data</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users/1/Sake?minAge=123&amp;qs=q1&amp;qs=q2&amp;opt=456<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">match</span> {\n  <span class=\"pl-k\">case</span> <span class=\"pl-en\">UsersRoute</span>(id, name, minAge, opt, qs) <span class=\"pl-k\">=&gt;</span>\n    println(<span class=\"pl-k\">s</span><span class=\"pl-s\">\"</span>$id<span class=\"pl-s\">, </span>$name<span class=\"pl-s\">, </span>$minAge<span class=\"pl-s\">, </span>$opt<span class=\"pl-s\">, </span>$qs<span class=\"pl-s\">\"</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1, Sake, 123, Some(456), Set(q1, q2)</span>\n  <span class=\"pl-k\">case</span> _ <span class=\"pl-k\">=&gt;</span> println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>404 Not Found<span class=\"pl-pds\">\"</span></span>)\n}</pre></div>\n<h3 dir=\"auto\"><a id=\"user-content-match-path-segment-regex\" class=\"anchor\" aria-hidden=\"true\" href=\"#match-path-segment-regex\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Match path segment regex</h3>\n<p dir=\"auto\">Regex is supported, just put it inside angle brackets:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Route class RegexRoute(p1: &quot;users&quot;, val name: &quot;&lt;[a-z]+&gt;&quot;)\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">Route</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">RegexRoute</span>(<span class=\"pl-v\">p1</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">val</span> <span class=\"pl-smi\">name</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;[a-z]+&gt;<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">This would match a string <code>/users/tom</code>, but not <code>/users/Tom</code>.</p>\n<h3 dir=\"auto\"><a id=\"user-content-match-multiple-path-segments\" class=\"anchor\" aria-hidden=\"true\" href=\"#match-multiple-path-segments\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Match multiple path segments</h3>\n<p dir=\"auto\">You can match on multi-segment path with a <code>*</code>:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Route class StarRoute(p1: &quot;files&quot;, val path: &quot;*&quot;)\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">Route</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">StarRoute</span>(<span class=\"pl-v\">p1</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>files<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">val</span> <span class=\"pl-smi\">path</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>*<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p dir=\"auto\">This would match a string <code>/files/images/abc.jpg</code> etc.<br>\nBasically, anything starting with <code>/files</code>...</p>\n<hr>\n<h2 dir=\"auto\"><a id=\"user-content-wither\" class=\"anchor\" aria-hidden=\"true\" href=\"#wither\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>@Wither</h2>\n<p dir=\"auto\">Generates <code>with*</code> methods. Here's why:</p>\n<ul dir=\"auto\">\n<li>more readable than named args</li>\n<li>autocomplete is nicer</li>\n<li>additional <code>with</code>ers for <code>Option</code>, <code>List</code> etc</li>\n</ul>\n<p dir=\"auto\">If you have this:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Wither\nclass MyClass(\n  simple: Int,\n  opt: Option[Int],\n  list: List[Int]\n)\"><pre><span class=\"pl-k\">@</span><span class=\"pl-en\">Wither</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyClass</span>(\n  <span class=\"pl-v\">simple</span>: <span class=\"pl-en\">Int</span>,\n  <span class=\"pl-v\">opt</span>: <span class=\"pl-en\">Option</span>[<span class=\"pl-en\">Int</span>],\n  <span class=\"pl-v\">list</span>: <span class=\"pl-en\">List</span>[<span class=\"pl-en\">Int</span>]\n)</pre></div>\n<p dir=\"auto\">you get to write:</p>\n<div class=\"highlight highlight-source-scala position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"val data = new ExampleData(1, Some(10), List(100))\n\ndata.withSimple(2)            // MyClass(2, Some(10), List(100))\n\ndata.withOpt(Some(11))        // MyClass(2, Some(11), List(100))\ndata.withOpt(12)              // MyClass(2, Some(12), List(100))\n\ndata.withList(List(101, 102)) // MyClass(7, None, List(101,102))\ndata.withList(103, 104)       // MyClass(7, None, List(103,104))\n\ndata.withSimple(2).withOpt(12).withList(103, 104) // MyClass(2, Some(12), List(103,104))\"><pre><span class=\"pl-k\">val</span> <span class=\"pl-smi\">data</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">ExampleData</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">10</span>), <span class=\"pl-en\">List</span>(<span class=\"pl-c1\">100</span>))\n\ndata.withSimple(<span class=\"pl-c1\">2</span>)            <span class=\"pl-c\"><span class=\"pl-c\">//</span> MyClass(2, Some(10), List(100))</span>\n\ndata.withOpt(<span class=\"pl-en\">Some</span>(<span class=\"pl-c1\">11</span>))        <span class=\"pl-c\"><span class=\"pl-c\">//</span> MyClass(2, Some(11), List(100))</span>\ndata.withOpt(<span class=\"pl-c1\">12</span>)              <span class=\"pl-c\"><span class=\"pl-c\">//</span> MyClass(2, Some(12), List(100))</span>\n\ndata.withList(<span class=\"pl-en\">List</span>(<span class=\"pl-c1\">101</span>, <span class=\"pl-c1\">102</span>)) <span class=\"pl-c\"><span class=\"pl-c\">//</span> MyClass(7, None, List(101,102))</span>\ndata.withList(<span class=\"pl-c1\">103</span>, <span class=\"pl-c1\">104</span>)       <span class=\"pl-c\"><span class=\"pl-c\">//</span> MyClass(7, None, List(103,104))</span>\n\ndata.withSimple(<span class=\"pl-c1\">2</span>).withOpt(<span class=\"pl-c1\">12</span>).withList(<span class=\"pl-c1\">103</span>, <span class=\"pl-c1\">104</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> MyClass(2, Some(12), List(103,104))</span></pre></div>\n</article></div>",
    "contributors" : [
      {
        "login" : "sake92",
        "avatarUrl" : "https://avatars.githubusercontent.com/u/12010694?v=4",
        "url" : "https://api.github.com/users/sake92",
        "contributions" : 31
      }
    ],
    "commits" : 31,
    "topics" : [
      "macros",
      "scala",
      "scalajs"
    ],
    "contributingGuide" : null,
    "codeOfConduct" : null,
    "chatroom" : null,
    "openIssues" : [
      {
        "number" : 8,
        "title" : "Support Map in query params",
        "url" : "https://github.com/sake92/stone/issues/8"
      },
      {
        "number" : 7,
        "title" : "Parse hash params",
        "url" : "https://github.com/sake92/stone/issues/7"
      }
    ],
    "scalaPercentage" : null
  },
  "settings" : {
    "defaultStableVersion" : true,
    "defaultArtifact" : null,
    "strictVersions" : false,
    "customScalaDoc" : null,
    "documentationLinks" : [
    ],
    "deprecated" : false,
    "contributorsWanted" : false,
    "artifactDeprecations" : [
    ],
    "cliArtifacts" : [
    ],
    "category" : "urls-and-routing",
    "beginnerIssuesLabel" : null
  }
}