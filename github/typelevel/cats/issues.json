{
  "data":{
    "repository":{
      "issues":{
        "nodes":[
          {
            "number":387,
            "title":"Add StateT and trampolining to State documentation",
            "bodyText":"Documentation for State was added in #384. However, it still has a TODO at the end for documenting how StateT relates to State and how/why trampolining is used for State. This TODO should be replaced with documentation.",
            "url":"https://github.com/typelevel/cats/issues/387"
          },
          {
            "number":403,
            "title":"Curate order of type class list in docs",
            "bodyText":"http://non.github.io/cats//typeclasses.html has a list of type classes present in Cats. Currently it is dynamically generated in alphabetical order. The fact that it's dynamic and therefore we don't need to remember to update it is great. However, it would probably be nice to introduce the simplest type classes first and progress to the more complicated ones.\nFor example it almost certainly makes sense to learn Functor before Applicative, but currently Applicative is first in the list.\nSee this gitter conversation for motivation.",
            "url":"https://github.com/typelevel/cats/issues/403"
          },
          {
            "number":1534,
            "title":"FreeT.inject helper function",
            "bodyText":"For a project I am using FreeT with multiple algebras, I noticed that there is no helper functions to inject an algebra into a coproduct of algebras for free transformers, so I wrote one similar to the Free.inject like this:\n  /**\n    * This method is used to defer the application of an Inject[F, G]\n    * instance. The actual work happens in\n    * `FreeTInjectPartiallyApplied#apply`.\n    *\n    * This method exists to allow the `F`, `M` and `G` parameters to be\n    * bound independently of the `A` parameter below.\n    */\n  def inject[F[_], M[_], G[_]]: FreeTInjectPartiallyApplied[F, M, G] =\n    new FreeTInjectPartiallyApplied\n\n  /**\n    * Pre-application of an injection to a `F[A]` value for a FreeT\n    * with applicative `M[_]`.\n    */\n  final class FreeTInjectPartiallyApplied[F[_], M[_], G[_]] {\n    def apply[A](fa: F[A])(implicit I: Inject[F, G], m: Applicative[M]): FreeT[G, M, A] =\n      FreeT.liftF[G, M, A](I.inj(fa))\n  }\nIt is working and I was wondering if this is a good contribution to the library.\nCheers! :)",
            "url":"https://github.com/typelevel/cats/issues/1534"
          },
          {
            "number":1587,
            "title":"Transitions in docs",
            "bodyText":"I was just looking at http://typelevel.org/cats/typeclasses/applicativetraverse.html (which is really neat!), and it wasn't obvious to me that the series continues with Functor, Applicative, Traverse when I got to the end of the first page. I thought that it was just a work in progress. For these \"series\"-type docs, it may be good to have a link at the bottom of each page to the next item in the series.\nI think it's a bit more obvious for the other sections, but the Applicative and Traversable Functors title is long enough that the text gets wrapped on the table of contents on the left side and threw me off a bit.",
            "url":"https://github.com/typelevel/cats/issues/1587"
          },
          {
            "number":1668,
            "title":"Piecemeal import guide",
            "bodyText":"Currently the imports guide only really describes the \"uber\" import (cats.implicits._). It may be handy to have a detailed guide of piecemeal imports, such as cats.instances.string._ and cats.syntax.functor._ as an additional section for people who prefer this approach.",
            "url":"https://github.com/typelevel/cats/issues/1668"
          },
          {
            "number":1678,
            "title":"Beginner-friendliness of Validated doc",
            "bodyText":"There has been some feedback on Gitter that the Validated doc isn't as beginner-friendly as it could be. Pretty early in the doc it delves into writing a parallelValidate method, discussing Apply, etc. This offers some nice insight into deriving Validated methods, but it's not necessarily obvious that a user doesn't need to write these things in their code. It would likely be better for users if the docs first showed simple examples of using Validated to accumulate errors and then in an advanced section at the end covered more advanced concepts and derivation.",
            "url":"https://github.com/typelevel/cats/issues/1678"
          }
        ]
      }
    }
  }
}