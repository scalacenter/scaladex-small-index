{
  "data":{
    "repository":{
      "issues":{
        "nodes":[
          {
            "number":387,
            "title":"Add StateT and trampolining to State documentation",
            "bodyText":"Documentation for State was added in #384. However, it still has a TODO at the end for documenting how StateT relates to State and how/why trampolining is used for State. This TODO should be replaced with documentation.",
            "url":"https://github.com/typelevel/cats/issues/387"
          },
          {
            "number":403,
            "title":"Curate order of type class list in docs",
            "bodyText":"http://non.github.io/cats//typeclasses.html has a list of type classes present in Cats. Currently it is dynamically generated in alphabetical order. The fact that it's dynamic and therefore we don't need to remember to update it is great. However, it would probably be nice to introduce the simplest type classes first and progress to the more complicated ones.\nFor example it almost certainly makes sense to learn Functor before Applicative, but currently Applicative is first in the list.\nSee this gitter conversation for motivation.",
            "url":"https://github.com/typelevel/cats/issues/403"
          },
          {
            "number":1587,
            "title":"Transitions in docs",
            "bodyText":"I was just looking at http://typelevel.org/cats/typeclasses/applicativetraverse.html (which is really neat!), and it wasn't obvious to me that the series continues with Functor, Applicative, Traverse when I got to the end of the first page. I thought that it was just a work in progress. For these \"series\"-type docs, it may be good to have a link at the bottom of each page to the next item in the series.\nI think it's a bit more obvious for the other sections, but the Applicative and Traversable Functors title is long enough that the text gets wrapped on the table of contents on the left side and threw me off a bit.",
            "url":"https://github.com/typelevel/cats/issues/1587"
          },
          {
            "number":1801,
            "title":"Documentation megathread",
            "bodyText":"I'm trying to compile a thorough collection of everything currently documented and everything we still want to document. I'd also like to talk about a few other things other people brought up. This is sort of meant as a follow up to #1443. Another question that arrises, is if we really need documentation for every single one of these, or if some don't really make sense to have their own page. It might make sense to combine some of these as well (e.g. NonEmpty{List, Vector}).\nType classes:\n\n\nKernel\n\n Eq #1788\n PartialOrder\n Order\n Semigroup\n Monoid\n Group\n CommutativeSemigroup\n Band\n CommutativeMonoid\n Semilattice\n CommutativeGroup\n BoundedSemilattice\n\n\n\nFunctor\n\n Invariant\n Contravariant\n BiFunctor\n ProFunctor\n Strong\n\n\n\nCore\n\n Functor\n Apply\n Applicative\n FlatMap\n Monad\n Foldable\n Traverse\n Reducible #1777\n NonEmptyTraverse #1787\n CoFlatMap\n CoMonad\n BiMonad\n BiFoldable\n BiTraverse\n ApplicativeError\n MonadError\n CommutativeFlatMap\n CommutativeMonad\n InvariantMonoidal\n SemigroupK\n MonoidK\n Alternative\n Show #1789\n Inject\n InjectK\n NotNull\n Parallel\n\n\n\nArrow\n\n Arrow #1924\n Category\n Choice\n CommutativeArrow\n Compose\n\n\n\nData types\n\n Const\n Kleisli\n Cokleisli\n Id\n Eval #1816\n EitherK\n Tuple2K\n EitherT #1854\n OptionT\n State\n StateT\n OneAnd\n NonEmptyList #1971\n NonEmptyVector\n Validated\n FunctionK\n Either\n Ior #1822\n WriterT\n ReaderWriterStateT\n Nested\n\nOther:\n\nLaws. Briefly touched on in #510, currently there's no really good place to look for the laws of any given typeclass, I think we should definitely document and emphasize the laws on all the type classes.\nType class instances. Suggested in #1287, it would be really nice if we had some way to see all the defined instances for every type class we include in cats.\n\n\nIf I missed anything just tell me and I'll try to edit :)",
            "url":"https://github.com/typelevel/cats/issues/1801"
          },
          {
            "number":2650,
            "title":"Improve doc for Func",
            "bodyText":"Nobody knows what the hell Func does ... linking to a 25-page Haskell paper (even a good one) isn't ideal. Can we improve the doc, at least to the point of explaining why we need both Func and Kleisli and how you might use it?\nThere is some discussion here.",
            "url":"https://github.com/typelevel/cats/issues/2650"
          },
          {
            "number":2936,
            "title":"Add `attemptOption` to Alternative",
            "bodyText":"def attemptOption[A](fa: F[A]): F[Option[A]] =\n  fa.map(_.some) <+> Option.empty[A].pure[F]",
            "url":"https://github.com/typelevel/cats/issues/2936"
          }
        ]
      }
    }
  }
}